<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>yakagika - Posts tagged lecture</title>
        <link></link>
        <description><![CDATA[Personal blog of yakagika]]></description>
        <atom:link href="/tags/lecture.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Fri, 18 Oct 2024 00:00:00 UT</lastBuildDate>
        <item>
    <title>代数プログラミング入門 Ch5 代数的データ型</title>
    <link>/lectures/iap5.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#代数的データ型" id="toc-代数的データ型"><span class="toc-section-number">1</span> 代数的データ型</a>
<ul>
<li><a href="#命題と条件式" id="toc-命題と条件式"><span class="toc-section-number">1.1</span> 命題と条件式</a></li>
<li><a href="#集合" id="toc-集合"><span class="toc-section-number">1.2</span> 集合</a></li>
<li><a href="#型注釈と関数" id="toc-型注釈と関数"><span class="toc-section-number">1.3</span> 型注釈と関数</a>
<ul>
<li><a href="#内包表記" id="toc-内包表記"><span class="toc-section-number">1.3.1</span> 内包表記</a></li>
</ul></li>
<li><a href="#包含" id="toc-包含"><span class="toc-section-number">1.4</span> 包含</a></li>
<li><a href="#積と和" id="toc-積と和"><span class="toc-section-number">1.5</span> 積と和</a></li>
</ul></li>
<li><a href="#代数とクラス" id="toc-代数とクラス"><span class="toc-section-number">2</span> 代数とクラス</a>
<ul>
<li><a href="#マグマ" id="toc-マグマ"><span class="toc-section-number">2.1</span> マグマ</a></li>
<li><a href="#半群" id="toc-半群"><span class="toc-section-number">2.2</span> 半群</a></li>
<li><a href="#モノイド" id="toc-モノイド"><span class="toc-section-number">2.3</span> モノイド</a></li>
<li><a href="#群" id="toc-群"><span class="toc-section-number">2.4</span> 群</a></li>
<li><a href="#リスト" id="toc-リスト"><span class="toc-section-number">2.5</span> リスト</a></li>
<li><a href="#ツリー" id="toc-ツリー"><span class="toc-section-number">2.6</span> ツリー</a></li>
<li><a href="#ネットワーク" id="toc-ネットワーク"><span class="toc-section-number">2.7</span> ネットワーク</a></li>
</ul></li>
<li><a href="#手続き型haskell" id="toc-手続き型haskell"><span class="toc-section-number">3</span> 手続き型Haskell</a></li>
<li><a href="#圏論とhaskell" id="toc-圏論とhaskell"><span class="toc-section-number">4</span> 圏論とHaskell</a></li>
<li><a href="#発展会計プログラム" id="toc-発展会計プログラム"><span class="toc-section-number">5</span> 発展:会計プログラム</a></li>
</ul>
</div>
<h1 data-number="1" id="代数的データ型"><span class="header-section-number">1</span> 代数的データ型</h1>
<p>Haskellのデータ型はすべて代数的データ型です. 代数的データ型には, <strong>列挙型</strong>,<strong>直積型</strong>,<strong>直和型</strong>があり,構文として<strong>レコード構文</strong>などが存在します.</p>
<p>集合論の説明と対応したコードの書き方.
(圏論で書けというのはそのうちやりたい.)</p>
<h2 data-number="1.1" id="命題と条件式"><span class="header-section-number">1.1</span> 命題と条件式</h2>
<p>集合を定義するにあたって,数理的な定義の記法に用いる演算子を導入する. 数理的な定義の内,そこで述べられた言説が,「真か偽のいずれかに分類可能とされるもの」を命題といい,条件が与えられた命題を条件式という.</p>
<p><code>x</code>に関する条件式を
<span class="math inline">\(P(x)≔***\)</span> や <span class="math inline">\(Q(x)\)</span>
と書き，<code>***</code>の部分に,命題が記述される．</p>
<p>命題の記述には以下の論理演算子が用いられる．</p>
<ul>
<li><p><span class="math inline">\(P(x) \lor Q(x)\)</span>： <span class="math inline">\(P(x)\)</span>または<span class="math inline">\(Q(x)\)</span></p></li>
<li><p><span class="math inline">\(P(x) \land Q(x)\)</span>：P(x)かつQ(x)</p></li>
<li><p><span class="math inline">\(p(x) \Rightarrow q(x)\)</span>：<span class="math inline">\(p(x)\)</span>ならば<span class="math inline">\(q(x)\)</span></p></li>
<li><p><span class="math inline">\(p(x) \Leftrightarrow q(x) ∶\)</span> <span class="math inline">\(p(x)\)</span>ならば <span class="math inline">\(q(x)\)</span> かつ <span class="math inline">\(q(x)\)</span> ならば <span class="math inline">\(p(x)\)</span></p></li>
<li><p>$ p(x):p(x)$ の否定</p></li>
</ul>
<p>なお, <span class="math inline">\(p(x) \Rightarrow q(x) \Leftrightarrow \neg p(x) \lor q(x)\)</span></p>
<h2 data-number="1.2" id="集合"><span class="header-section-number">1.2</span> 集合</h2>
<p>Haskellではデータ型を集合と<strong>みなすこと</strong>ができます(むしろ良く議論されるのは集合の圏 <strong><span class="math inline">\(\mathbb{Set}\)</span></strong>
ですが,集合論の範囲でしばらく話しを進めます). Haskellの型はあくまで型であり,厳密には集合ではありません. また,このあと出てくるリストを使った<code>内包表記</code>などの<strong>集合論的な書き方</strong>も数学における集合ではありません.
あくまで類似したものです.</p>
<p>しかし,Haskellを集合とみなすことで,関数型プログラミングや,代数的データ型の意味がより直感的に理解できるようになります. しばらく,集合論とHaskellの対応について考えてみましょう.</p>
<div class="note">
<p>特定のモノがそこに｢属するか判定可能なモノの集まり｣を｢集合｣という．</p>
</div>
<p>集合の細かな定義は置いておいて,この講義では取り敢えずこのくらいの認識で問題ありません. しかし,ただのモノの集まりではなく,特定のモノがそこに属するかどうかを判定できる必要があるので注意が必要です.</p>
<p>例えば, ｢頭の良い人の集合｣のようなものは,｢頭が良い基準｣が人によって異なるので,集合とはみなせません.</p>
<p>ノーベル賞受賞者の集合,フィールズ賞受賞者の集合,メンサ会員の集合,XX模試の偏差値が70以上の人の集合,特定の科目で85点以上取った人の集合,など,誰でも判別可能な定義が必要です.</p>
<p>私が過去に飼ったことのある犬の種類の集合を<code>MyDogs</code>という名前で呼ぶと,<code>MyDogs</code>に属するモノたちを<code>{ }</code>を使って以下のように書くことができます.</p>
<p><span class="math display">\[\begin{align*}
MyDogs = &amp; \{ GoldenRetriever \\
         &amp;, BlackRetriever    \\
         &amp;, ShetlandSheepdog \\
         &amp;, StandardPoodle \\
         &amp;, StandardPoodle \}
\end{align*}\]</span></p>
<p>このとき,<code>GoldenRetriever</code>や,<code>ShetlandSheepdog</code>は<code>MyDogs</code>の<code>要素</code>であるといい,要素が特定の集合に属するとき,</p>
<p><span class="math display">\[ GoldenRetriever \in MyPets \]</span> の様に書きます. 要素に属さないことは <span class="math inline">\(Chihuahua \notin MyPet\)</span>と書きます.</p>
<p>Haskellにおいて,このようなデータ型を以下の様に定義することが可能です.
データ型の宣言は, <code>data</code>のあとに続いて,<code>データ型の名前(型構築子)</code>を書き,<code>=</code>の後ろにその<code>中身(コンストラクタ/データ構築子)</code>を書きます.
型構築子やデータ構築子は,大文字の英字で始めるのが規則です.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">MyDogs</span> <span class="ot">=</span> <span class="dt">GoldenRetriever</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">BlackRetriever</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">ShetlandSheepdog</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">StandardPoodle</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">StandardPoodle</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>            <span class="kw">deriving</span> <span class="dt">Show</span></span></code></pre></div>
<p>この様にそこに属する要素をすべて書き出す(列挙する)データ型を<code>列挙型</code>といいます.</p>
<div class="warn">
<p>ちなみに,大文字の英字で始まってさえいればUTF-8の文字や絵文字,記号は使用できるので,以下のような記述も可能ですが,あまりおすすめしません.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">My</span>🐶   <span class="ot">=</span> <span class="dt">P</span>ゴールデンレトリーバー</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">P</span>ブラックレトリーバー</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">P</span>シェットランドシープドッグ</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">P</span>スタンダードプードル</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">P</span>ビーグル</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>            <span class="kw">deriving</span> <span class="dt">Show</span></span></code></pre></div>
</div>
<p><code>deriving Show</code>はコンストラクタを文字列に変換する関する<code>show</code>を自動で導入するための記法です. 自分で定義することも可能ですが,詳細に関しては後ほど扱います.</p>
<p><code>deriving Show</code>を入れていない状態で</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="fu">print</span> <span class="dt">GoldenRetriever</span></span></code></pre></div>
<p>などを実行すると,以下のエラーがでますが,<code>deriving Show</code>を追加することで,表示することが可能となります.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>{</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> <span class="kw">data</span> <span class="dt">MyDogs</span> <span class="ot">=</span> <span class="dt">GoldenRetriever</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span>             <span class="op">|</span> <span class="dt">BlackRetriever</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> <span class="op">:</span>}</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="fu">print</span> <span class="dt">GoldenRetriever</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">17</span><span class="op">:</span><span class="dv">1</span><span class="op">:</span> <span class="fu">error</span><span class="op">:</span> [<span class="dt">GHC</span><span class="op">-</span><span class="dv">39999</span>]</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    • <span class="dt">No</span> <span class="kw">instance</span> for ‘<span class="dt">Show</span> <span class="dt">MyDogs</span>’ arising from a use <span class="kw">of</span> ‘print’</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    • <span class="dt">In</span> the expression<span class="op">:</span> <span class="fu">print</span> <span class="dt">GoldenRetriever</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>      <span class="dt">In</span> an equation for ‘it’<span class="op">:</span> it <span class="ot">=</span> <span class="fu">print</span> <span class="dt">GoldenRetriever</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>{</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> <span class="kw">data</span> <span class="dt">MyDogs</span> <span class="ot">=</span> <span class="dt">GoldenRetriever</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span>             <span class="op">|</span> <span class="dt">BlackRetriever</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span>             <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> <span class="op">:</span>}</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="fu">print</span> <span class="dt">GoldenRetriever</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a><span class="dt">GoldenRetriever</span></span></code></pre></div>
<p>なお, <code>print</code>の<a href="https://hackage.haskell.org/package/base-4.19.1.0/docs/src/System.IO.html#print">実装</a>は</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="fu">print</span><span class="ot"> ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="fu">print</span> x <span class="ot">=</span> <span class="fu">putStrLn</span> (<span class="fu">show</span> x)</span></code></pre></div>
<p>となっています.</p>
<p>要素が一つも属さない集合を<code>空集合</code>といい,記号<span class="math inline">\(\phi\)</span> または<span class="math inline">\(｛｝\)</span>によって表されます．
Haskellでは空集合を表すデータ型として<code>Data.Void</code>に定義された<code>Void</code>が存在します. データ型として<code>ボトム型</code>,記号では<code>⊥</code>で表される場合もあります.</p>
<p><code>Void</code>と同じ値を持たないデータ型は,コンストラクタを記述しないことで自分で実装することもできます. 例えば私が犬を今までに一匹もかったことがなければ, <span class="math display">\[ MyPet = \phi \]</span> となり,データ型としては以下のように定義されます. 値が存在しない空集合と対応していることが分かります.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Mypet</span></span></code></pre></div>
<p><code>Void</code>型は値が存在しないため実行することはできませんが,コンパイルを通すことはできます. ただし,あまり実用する機会はないので,以下の部分は興味がある人だけ開いて読んでください.</p>
<div class="note">
<ul>
<li>Voidの利用例 開く/閉じる</li>
</ul>
<p><code>Void</code>型を利用したコードを記述する方法はいくつかありますが, <code>undefined</code>した実装などが良く用いられます.
<code>undefined</code>は遅延評価を利用した値で,具体的な値や式の記述を省略することができます.
未実装の部分を含めたコードを取り敢えず部分的にコンパイルしてみたい場合や, エラー処理などで利用されます.</p>
<p>以下のコードはコンパイルは通りますが,実行時には<code>undefined, called</code>エラーが発生します.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="ot">somFunc ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>someFunc <span class="ot">=</span> <span class="fu">undefined</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> <span class="op">$</span> someFunc <span class="dv">1</span></span></code></pre></div>
<p><code>Void</code>型を利用するケースは非常に限定的ですが,値が無いことを明示的に示したい場合などに利用されます.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE EmptyCase #-}</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE EmptyDataDeriving #-}</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Empty</span> <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="ot">head&#39; ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> <span class="dt">Empty</span> <span class="ot">-&gt;</span>  a</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>head&#39; []     e <span class="ot">=</span> <span class="kw">case</span> e <span class="kw">of</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>head&#39; (x<span class="op">:</span>[]) _ <span class="ot">=</span> x</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>head&#39; (x<span class="op">:</span>xs) _ <span class="ot">=</span> x</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> <span class="op">$</span> head&#39; ([]<span class="ot">::</span>[<span class="dt">Int</span>]) <span class="fu">undefined</span> <span class="co">-- &gt;&gt;&gt; undefined, called at</span></span></code></pre></div>
<p>このコードでは, 明示的に<code>先頭の値</code>が存在しないことを<code>Empty</code>で表し,<code>EmptyDataDeriving</code>拡張で<code>undefined</code>を評価することでエラーを発生させています.</p>
<p>しかし,こういったパターンでは,以下の<code>error</code>による実装や,後に説明する<code>Maybe型</code>を利用するほうが一般的です.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">head&#39;&#39; ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span>  a</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>head&#39;&#39; []     <span class="ot">=</span> <span class="fu">error</span> <span class="st">&quot;Empty List&quot;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>head&#39;&#39; (x<span class="op">:</span>[]) <span class="ot">=</span> x</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>head&#39;&#39; (x<span class="op">:</span>xs) <span class="ot">=</span> x</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> <span class="op">$</span> head&#39;&#39; ([]<span class="ot">::</span>[<span class="dt">Int</span>]) <span class="co">-- practice: Empty List error, called at</span></span></code></pre></div>
</div>
<p>単一の要素だけが存在するデータ型として<code>Unit</code>型も準備されており,<code>()</code>のような空のタプルとして表されます.</p>
<p>集合の表記法には，外延的表記及び内包的表記という2通りが存在する．外延的表記とは，集合Sに含まれる要素を全て記述する方法で，x,yを要素とする集合を，
S={x,y}
と書く．集合には順番は関係ないため，{x,y}={y,z}である．また，一つの集合に同じ要素は2つ以上属することができず，{x,x}のような集合は定義できない．</p>
<p>内包的表記とは，その集合に何が属するのかを定義する方法で集合Sに属する要素の集合をｘとすると，ｘがどの集合の要素であるか，どのような条件を持つかなどによって表記する．xの属する集合をX，条件式p(x)とすると，内包的表記では
S={x│x∈ X,p(x)}
と書かれる．また，内包表記において，関数や定数を定義することも許されており，
関数をf[x]で表すと，
S={f(x)|x∈X,f(x)=x+1}
のように表記される．
条件の例として，R<sup>+を非負の実数としたとき，R</sup>+５以下の非負の実数を，以下のように書く．
{x|x∈R^+,x≤5}
集合には，集合が属することも可能で，集合SがTに属するときS∈ Tが成り立つ．
また，集合Sの要素を幾つか取り出した集合TをSの部分集合といい，
T⊂S
と表記される．
S={x,y,z}のとき，Sの部分集合は
{x},{x,y},{x,z},{z,y},{x,y,z},ϕ
となる．任意の集合Sに対して
ϕ⊂S
は成り立つ．
また，集合Sの部分集合全体の集合を冪集合といい，pow[S]または2^S と書く．
pow[{x,y,z}]={{x},{x,y},{x,z},{z,y},{x,y,z},ϕ}</p>
<h2 data-number="1.3" id="型注釈と関数"><span class="header-section-number">1.3</span> 型注釈と関数</h2>
<h3 data-number="1.3.1" id="内包表記"><span class="header-section-number">1.3.1</span> 内包表記</h3>
<h2 data-number="1.4" id="包含"><span class="header-section-number">1.4</span> 包含</h2>
<h2 data-number="1.5" id="積と和"><span class="header-section-number">1.5</span> 積と和</h2>
<h1 data-number="2" id="代数とクラス"><span class="header-section-number">2</span> 代数とクラス</h1>
<h2 data-number="2.1" id="マグマ"><span class="header-section-number">2.1</span> マグマ</h2>
<h2 data-number="2.2" id="半群"><span class="header-section-number">2.2</span> 半群</h2>
<h2 data-number="2.3" id="モノイド"><span class="header-section-number">2.3</span> モノイド</h2>
<h2 data-number="2.4" id="群"><span class="header-section-number">2.4</span> 群</h2>
<h2 data-number="2.5" id="リスト"><span class="header-section-number">2.5</span> リスト</h2>
<h2 data-number="2.6" id="ツリー"><span class="header-section-number">2.6</span> ツリー</h2>
<h2 data-number="2.7" id="ネットワーク"><span class="header-section-number">2.7</span> ネットワーク</h2>
<h1 data-number="3" id="手続き型haskell"><span class="header-section-number">3</span> 手続き型Haskell</h1>
<h1 data-number="4" id="圏論とhaskell"><span class="header-section-number">4</span> 圏論とHaskell</h1>
<h1 data-number="5" id="発展会計プログラム"><span class="header-section-number">5</span> 発展:会計プログラム</h1>
<p>yakagika</p>
]]></description>
    <pubDate>Fri, 18 Oct 2024 00:00:00 UT</pubDate>
    <guid>/lectures/iap5.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>代数プログラミング入門 Ch4 関数</title>
    <link>/lectures/iap4.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#関数" id="toc-関数"><span class="toc-section-number">1</span> 関数</a>
<ul>
<li><a href="#スクリプトファイルの実行" id="toc-スクリプトファイルの実行"><span class="toc-section-number">1.1</span> スクリプトファイルの実行</a></li>
<li><a href="#関数と演算子" id="toc-関数と演算子"><span class="toc-section-number">1.2</span> 関数と演算子</a>
<ul>
<li><a href="#結合性" id="toc-結合性"><span class="toc-section-number">1.2.1</span> 結合性</a></li>
</ul></li>
<li><a href="#分岐" id="toc-分岐"><span class="toc-section-number">1.3</span> 分岐</a>
<ul>
<li><a href="#パターンマッチ" id="toc-パターンマッチ"><span class="toc-section-number">1.3.1</span> パターンマッチ</a></li>
<li><a href="#ガード" id="toc-ガード"><span class="toc-section-number">1.3.2</span> ガード</a></li>
<li><a href="#case式" id="toc-case式"><span class="toc-section-number">1.3.3</span> case式</a></li>
<li><a href="#if式" id="toc-if式"><span class="toc-section-number">1.3.4</span> if式</a></li>
</ul></li>
<li><a href="#再帰" id="toc-再帰"><span class="toc-section-number">1.4</span> 再帰</a></li>
<li><a href="#ラムダ式" id="toc-ラムダ式"><span class="toc-section-number">1.5</span> ラムダ式</a></li>
<li><a href="#高階関数" id="toc-高階関数"><span class="toc-section-number">1.6</span> 高階関数</a></li>
<li><a href="#合成" id="toc-合成"><span class="toc-section-number">1.7</span> 合成</a></li>
</ul></li>
<li><a href="#変数値の束縛" id="toc-変数値の束縛"><span class="toc-section-number">2</span> 変数(値の束縛)</a></li>
</ul>
</div>
<h1 data-number="1" id="関数"><span class="header-section-number">1</span> 関数</h1>
<p>Haskellは関数型言語なので,関数の記述がプログラミングにおける花形です. この章ではHaskellの関数に関する記法を学びましょう.</p>
<h2 data-number="1.1" id="スクリプトファイルの実行"><span class="header-section-number">1.1</span> スクリプトファイルの実行</h2>
<div class="warn">
<p>ここから先は,コードが複数行に渡ることが多くなるので,ghciの利用をやめてスクリプトを書きます.</p>
<p><code>app</code> フォルダ内に <code>practice.hs</code>を作成しそこで事例の勉強をしましょう.</p>
</div>
<p><code>practice.hs</code> ファイルを作成したら,ファイルを以下のように記述しましょう.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Text</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;practice&quot;</span></span></code></pre></div>
<div class="warn">
<p><code>module XXX () where</code></p>
<p>という記述は,他のファイルからインポート可能なmodule化を行うための宣言です.
また,Stackでは,<strong>大文字で始まる<code>*.hs</code>ファイルは,moduleとして認識されます.</strong></p>
<p>したがって,一つのプロジェクトに複数の実行可能ファイルを生成する場合には,</p>
<p><code>module XXX () where</code></p>
<p>の記述をなくし, ファイル名を小文字ではじめる必要があります.</p>
<p>これは,<code>Hello World</code>のために編集した<code>Main.hs</code>も同様であるため,<code>Main.hs</code>を<code>hello.hs</code>に名前を変更し,ファイル内の <code>module Main (main) where</code>の記述も削除し,以下のように変更しましょう.</p>
<p>cf. <a href="https://www.reddit.com/r/haskell/comments/capuz7/multiple_executable_in_project/">他にもいくつかの方法があるようです</a></p>
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Lib</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> helloWorld</span></code></pre></div>
<p><code>package.yaml</code>の<code>executables:</code>を以下のように編集して<code>hello.hs</code>と<code>practice.hs</code>を実行可能ファイルとして登録します. <code>Data.Text</code>を利用するために,<code>dependencies:</code>以下に<code>- text</code>を追加しておきましょう.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="fu">dependencies</span><span class="kw">:</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> base &gt;= 4.7 &amp;&amp; &lt; 5</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> text</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="co">#ghc-options:</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="fu">library</span><span class="kw">:</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">source-dirs</span><span class="kw">:</span><span class="at"> src</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="fu">executables</span><span class="kw">:</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">hello</span><span class="kw">:</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">main</span><span class="kw">:</span><span class="at">                main.hs</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">source-dirs</span><span class="kw">:</span><span class="at">         app</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">ghc-options</span><span class="kw">:</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -threaded</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -rtsopts</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -with-rtsopts=-N</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">dependencies</span><span class="kw">:</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> hello-world</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">practice</span><span class="kw">:</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">main</span><span class="kw">:</span><span class="at">                practice.hs</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">source-dirs</span><span class="kw">:</span><span class="at">         app</span></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">ghc-options</span><span class="kw">:</span></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -threaded</span></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -rtsopts</span></span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -with-rtsopts=-N</span></span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">dependencies</span><span class="kw">:</span></span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> hello-world</span></span></code></pre></div>
<p><code>stack run practice</code> で<code>practice!</code>と表示されれば成功です.</p>
<p>これからスクリプトで実行していくにあたって,<code>practice.hs</code>の中身をもう少し詳しく見てみましょう.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Lib</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;practice!!&quot;</span></span></code></pre></div>
<p>haskellのプログラムを実行すると, <code>main関数</code>のみが実行されます.</p>
<p>Haskellは関数型言語なので,これから<code>import Lib</code>と<code>main</code>の間に関数を定義していき,<code>main</code>の中で実行していくことになります.</p>
<p>main 関数で行うことは関数として実行することになりますが,これから学習する通常の関数の定義で記述するのは今は難しいので,<code>do</code>記法を紹介します. main 関数の=以下に<code>do</code>と書くことで,do以下のインデントブロックに記述された内容が手続き型的に1行ずつ実行されます.</p>
<p>以下のプログラムでは, <code>"practice1"</code>,<code>"practice2"</code>,<code>"practice3"</code>の順に標準出力されます.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Lib</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">putStrLn</span> <span class="st">&quot;practice1&quot;</span> <span class="co">-- &gt;&gt;&gt; &quot;practice1&quot;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="fu">putStrLn</span> <span class="st">&quot;practice2&quot;</span> <span class="co">-- &gt;&gt;&gt; &quot;practice2&quot;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">putStrLn</span> <span class="st">&quot;practice3&quot;</span> <span class="co">-- &gt;&gt;&gt; &quot;practice3&quot;</span></span></code></pre></div>
<p><code>stack run practice</code>の結果を確認すると以下のようになります.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> stack <span class="ex">run</span> practice</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;practice1&quot;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;practice2&quot;</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;practice3&quot;</span></span></code></pre></div>
<p>また,ghciと異なって,出力結果が同じ画面に現れないので,
以降のコード例では, その行の結果をコメント内で<code>&gt;&gt;&gt;</code>に続けて書くこととします. コメント部分は,記述しなくても結果は変わらないので,省略しても構いません.</p>
<h2 data-number="1.2" id="関数と演算子"><span class="header-section-number">1.2</span> 関数と演算子</h2>
<p>関数型言語では関数を組み合わせてプログラムを書きます. 関数の正確な定義は後に譲るとして,ここでは取り敢えず｢特定のデータ型の値を受け取って,特定のデータ型の値を返すもの｣という定義にしましょう.このとき受け取る値を<strong>引数</strong>,返す値を<strong>返り値</strong>といいます.</p>
<p>Haskellでは,数学の記法と非常に近い方法で関数を定義します.
例えば,</p>
<p><span class="math display">\[
f : \mathbb{Z} \rightarrow \mathbb{Z} \\
f(x) = x + 1
\]</span></p>
<p>という,整数<code>x</code>を受け取って整数<code>x + 1</code>を返すだけの関数について考えましょう.</p>
<p>Haskellでは上の関数は以下のように定義されます.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">f ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>f x <span class="ot">=</span> x <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> f <span class="dv">4</span> <span class="co">-- &gt;&gt;&gt; 5</span></span></code></pre></div>
<p><code>()</code>の代わりにスペースを使う点以外は全く同じ書き方で, <code>=</code>の左側に関数名と引数,右側に返り値を書きます.
関数名は小文字の英字で始めれるというルールがあります.</p>
<p><code>f :: Int -&gt; Int</code>は型注釈であり,この<code>f</code>という関数が,引数に<code>Int</code>を取り,返り値として<code>Int</code>を返すということを指定しています.</p>
<p><code>do</code>以下の記述で, <code>f 4</code>の結果を確認しています. <code>print</code>は,文字列に変換可能な値を受取,標準出力する関数です. また <code>(f 4)</code>を省略して<code>$ f 4</code> としています.</p>
<p>引数は何個でも利用できます. 例えば2引数関数</p>
<p><span class="math display">\[ multiple(x,y) = x * y \]</span></p>
<p>は以下のように定義できます.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">multiple ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>multiple x y <span class="ot">=</span> x <span class="op">*</span> y</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>multiple <span class="dv">3</span> <span class="dv">4</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> multiple <span class="dv">3</span> <span class="dv">4</span> <span class="co">-- &gt;&gt;&gt; 12.0</span></span></code></pre></div>
<p>また,以下の記号を組み合わせて中置演算子名として利用することも可能です.</p>
<div class="note">
<p>~ ! # $ % &amp; * + = . / &lt; &gt; ? @   ^ | -</p>
</div>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">(.*) ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>x <span class="op">.*</span> y <span class="ot">=</span> x <span class="op">*</span> y</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="dv">3</span> <span class="op">.*</span> <span class="dv">4</span> <span class="co">-- &gt;&gt;&gt; 12.0</span></span></code></pre></div>
<p>絵文字などのUnicode記号も利用することができます.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>(✖)<span class="ot"> ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>x ✖ y <span class="ot">=</span> x <span class="op">*</span> y</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="dv">3</span> ✖ <span class="dv">4</span> <span class="co">-- &gt;&gt;&gt; 12.0</span></span></code></pre></div>
<p>記号を利用して関数を定義する場合には,定義時に<code>()</code> で囲うことで一般の関数のように定義することができます.
例えば, 乗算を新たに定義するとして,以下のように書くことができます.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ot">(.*) ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>(<span class="op">.*</span>) x y <span class="ot">=</span> x <span class="op">*</span> y</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="dv">3</span> <span class="op">.*</span> <span class="dv">4</span> <span class="co">-- &gt;&gt;&gt; 12</span></span></code></pre></div>
<p>前置の2引数関数も<code>``</code> (バッククオート)で囲むことで中置演算子として定義することができます.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>x <span class="ot">`multiple`</span> y <span class="ot">=</span> x <span class="op">*</span> y</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="dv">3</span> <span class="ot">`multiple `</span> <span class="dv">4</span> <span class="co">-- &gt;&gt;&gt; 12</span></span></code></pre></div>
<h3 data-number="1.2.1" id="結合性"><span class="header-section-number">1.2.1</span> 結合性</h3>
<p>先に述べたように異なる複数の演算子が連なっている式は, 演算子の優先順位に従って計算される順位が変わります.</p>
<p>例えば,<code>*</code> の優先順位は7で, <code>+</code> の優先順位は6なので,<code>2 * 3 + 3</code> という式は,</p>
<pre><code>   2 * 3  + 3
= (2 * 3) + 3
= 6 + 3
= 9</code></pre>
<p>と言う風に<code>*</code>が優先して計算されます.</p>
<p>では,同じ演算子が複数回連なっている場合にはどのような順序で計算されるのでしょうか? このルールを決めるのが <strong>結合性(Associativity)</strong> です.</p>
<div class="note">
<p>結合性には, <strong>左結合(Left-associative)</strong>, <strong>右結合(Right-associative)</strong>, <strong>非結合(Non-associative)</strong> の3種類があり,ユーザーが定義することができます.</p>
<ul>
<li><strong>左結合(Left-associative)</strong></li>
</ul>
<p>左結合の場合, 演算子は左から右へと評価されます. 例えば, <code>+</code> は左結合であり,式 <code>a + b + c</code> は <code>(a + b) + c</code> として評価されます</p>
<ul>
<li><strong>右結合(Right-associative)</strong></li>
</ul>
<p>右結合演算子の場合,演算子は右から左へと評価されます.例えば、<code>^</code>は右結合です。式 <code>a ^ b ^ c</code> は <code>a ^ (b ^ c)</code> として評価されます</p>
<ul>
<li><strong>非結合(Non-associative)</strong></li>
</ul>
<p>非結合演算子は,同じ式内で連続して使用することは許されていません. 非結合演算子の例としては,比較演算子（<code>&lt;</code>,<code>&gt;</code> など）があります.</p>
<p>式 <code>a &lt; b &lt; c</code> は Haskell では文法的に不正です. 比較を連鎖させる場合は,<code>a &lt; b &amp;&amp; b &lt; c</code>のように明確に分けて記述する必要があります.</p>
</div>
<p>ユーザーが作成した演算子の結合性を指定するには,右,左,非の順に<code>infixr</code>,<code>infixl</code>,<code>infix</code>宣言を利用します. いずれも, <code>infix(r/l/なし) 優先順位 記号</code> の順に書きます.</p>
<p>例えば先程作成した,<code>.*</code> を右結合の優先順位7で指定するには,以下のように書きます.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>x <span class="op">.*</span> y <span class="ot">=</span> x <span class="op">*</span> y</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">7</span> <span class="op">.*</span></span></code></pre></div>
<h2 data-number="1.3" id="分岐"><span class="header-section-number">1.3</span> 分岐</h2>
<p>関数型言語において,手続き型言語におけるIF文に相当するのが<strong>パターンマッチ</strong>と<strong>指示関数(特性関数)</strong>です.</p>
<h3 data-number="1.3.1" id="パターンマッチ"><span class="header-section-number">1.3.1</span> パターンマッチ</h3>
<p>パターンマッチに近い概念は既にフィボナッチ数の漸化式として出てきています.フィボナッチ数の漸化式は,以下のように表されます.</p>
<div class="note">
<p><span class="math display">\[ F_0 = 1 \]</span>
<span class="math display">\[ F_1 = 1 \]</span>
<span class="math display">\[ F_n = F_{n-1} + F_{n-2} (n &gt;= 2)  \]</span></p>
</div>
<p>この関数はPythonでは,以下のようにif文による分岐で記述されるのが一般的です.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> fib(x):</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> x <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">1</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> x <span class="op">==</span> <span class="dv">1</span>:</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">1</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> fib(x<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span> f(x<span class="op">-</span><span class="dv">2</span>)</span></code></pre></div>
<p>これをHaskellでパターンマッチを利用して以下のように定義することができます.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="ot">fib ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>fib <span class="dv">0</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>fib <span class="dv">1</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>fib n <span class="ot">=</span> fib (n <span class="op">-</span> <span class="dv">1</span>) <span class="op">+</span> fib (n <span class="op">-</span> <span class="dv">2</span>)</span></code></pre></div>
<p>このHaskellのコードは,</p>
<ul>
<li><p>関数<code>fib</code>の引数が<code>0</code>のときには返り値として<code>1</code>を返し,</p></li>
<li><p>関数<code>fib</code>の引数が<code>1</code>のときには返り値として<code>1</code>を返し,</p></li>
<li><p>関数<code>fib</code>の引数が<code>それ以外</code>のときには返り値として<code>fib (n - 1) + fib (n - 2)</code>を返します.</p></li>
</ul>
<p>この最後の<code>fib n = fib (n - 1) + fib (n - 2)</code>は再帰関数といって後ほど扱いますが,取り敢えず,特定の引数に対して特定の返り値を指定するこのような関数の記述方法を<strong>パターンマッチ</strong>といいます.</p>
<p>パターンマッチは,数値以外の引数に関しても適用可能であり,リストではリストの要素数に応じて使い分けることが多いです.</p>
<p>以下の,<code>strHead</code>関数は,リストの先頭の要素を文字列として表示する関数です.リストが空のときには<code>"Empty"</code>,要素が一つのときにはその要素,それ以外のときには先頭の要素を文字列にして返します.</p>
<p><code>show</code>の詳細は後ほど扱いますが,どの様に標準出力に表示するかを定めてあるデータ型を文字列に変換する関数です.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="ot">strHead ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>strHead []     <span class="ot">=</span> <span class="st">&quot;Empty&quot;</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>strHead [x]    <span class="ot">=</span> <span class="fu">show</span> x</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>strHead (x<span class="op">:</span>xs) <span class="ot">=</span> <span class="fu">show</span> x</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> strHead [] <span class="co">-- &gt;&gt;&gt; &quot;Empty&quot;</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> strHead [<span class="dv">3</span>,<span class="dv">4</span>] <span class="co">-- &gt;&gt;&gt; &quot;3&quot;</span></span></code></pre></div>
<p>パターンマッチはこのようにリスト<code>x:xs</code>の先頭部分<code>x</code>を指定するなどの利用法が可能です. 値の特定の部分を取得する用法として頻出なのがタプルを引数に取るパターンマッチです.</p>
<p>以下のコードは,3つ組のタプル<code>(x,y,z)</code>から指定した位置の値を取り出す関数<code>getFromTuple</code>です.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a>getFromTuple (x,y,z) <span class="dv">0</span> <span class="ot">=</span> x</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>getFromTuple (x,y,z) <span class="dv">1</span> <span class="ot">=</span> y</span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>getFromTuple (x,y,z) <span class="dv">2</span> <span class="ot">=</span> z</span></code></pre></div>
<p>このような用法は後に紹介する代数的データ型を扱う際にも頻出します.</p>
<h3 data-number="1.3.2" id="ガード"><span class="header-section-number">1.3.2</span> ガード</h3>
<p>数式における分岐は,指示関数を用いて行うこともできます.</p>
<div class="note">
<p><span class="math display">\[
fib(n) =
\begin{cases}
1, ~if~n = 0 \\
1, ~if~n = 1 \\
fib(n-1) + fib(n-2),~if~n &gt;=2
\end{cases}
\]</span></p>
</div>
<p>Haskellにおいて指示関数の記法に相当するのが<strong>ガード</strong>です.</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="ot">fib ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>fib n <span class="op">|</span> n <span class="op">==</span> <span class="dv">0</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>      <span class="op">|</span> n <span class="op">==</span> <span class="dv">1</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a>      <span class="op">|</span> n <span class="op">&gt;=</span> <span class="dv">2</span> <span class="ot">=</span> fib (n<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span> fib (n<span class="op">-</span><span class="dv">2</span>)</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> fib <span class="dv">5</span> <span class="co">-- &gt;&gt;&gt; 8</span></span></code></pre></div>
<p>特徴関数におけるifの位置が先に来ている以外は,基本的に対応関係にあるのがわかるかと思います.</p>
<h3 data-number="1.3.3" id="case式"><span class="header-section-number">1.3.3</span> case式</h3>
<p>パターンマッチをインデントブロックで実現する手法として<strong>case式</strong>があります. パターンマッチで判定する変数を<code>case 変数 of</code> のあとに指定して, それぞれのパターンとその結果を<code>-&gt;</code>でつなげる記法です. 指定のパターンに当てはまらないものすべて(これを<strong>ワイルドカード</strong>といいます)を指定するために<code>_</code>を利用します.</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="ot">fib ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>fib n <span class="ot">=</span> <span class="kw">case</span> n <span class="kw">of</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>        <span class="dv">0</span> <span class="ot">-&gt;</span> <span class="dv">1</span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a>        <span class="dv">1</span> <span class="ot">-&gt;</span> <span class="dv">1</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a>        _ <span class="ot">-&gt;</span> fib (n<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span> fib (n<span class="op">-</span><span class="dv">2</span>)</span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> fib <span class="dv">5</span> <span class="co">-- &gt;&gt;&gt; 8</span></span></code></pre></div>
<p>ワイルドカードはどのような値に対しても同じ値を返す関数を実装する場合などにも利用されます.</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a><span class="ot">return10 ::</span> a <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>return10 _ <span class="ot">=</span> <span class="dv">10</span></span></code></pre></div>
<h3 data-number="1.3.4" id="if式"><span class="header-section-number">1.3.4</span> if式</h3>
<p>Haskellにはifも存在します. <code>if 条件</code>に当てはまる場合の返り値を<code>then</code>で指定します. <code>else if</code> で条件を追加し, <code>else</code>でそれ以外のパターンを指定します. Pythonなどのif文と異なり,式なので<code>else</code>の場合の返り値も必ず指定する必要があります.</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="ot">fib ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a>fib n <span class="ot">=</span> <span class="kw">if</span> n <span class="op">==</span> <span class="dv">0</span> <span class="kw">then</span> <span class="dv">1</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a>        <span class="kw">else</span> <span class="kw">if</span> n <span class="op">==</span> <span class="dv">1</span> <span class="kw">then</span> <span class="dv">1</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a>        <span class="kw">else</span> fib (n<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span> fib (n<span class="op">-</span><span class="dv">2</span>)</span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> fib <span class="dv">5</span> <span class="co">-- &gt;&gt;&gt; 8</span></span></code></pre></div>
<p>Haskellではあまりif式は利用されませんが,
1行で書けるため,式の中で部分的に利用する場合に便利です.</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="ot">fib ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>fib n <span class="ot">=</span> <span class="kw">if</span> n <span class="op">==</span> <span class="dv">0</span> <span class="kw">then</span> <span class="dv">1</span> <span class="kw">else</span> <span class="kw">if</span> n <span class="op">==</span> <span class="dv">1</span> <span class="kw">then</span> <span class="dv">1</span> <span class="kw">else</span> fib (n<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span> fib (n<span class="op">-</span><span class="dv">2</span>)</span></code></pre></div>
<h2 data-number="1.4" id="再帰"><span class="header-section-number">1.4</span> 再帰</h2>
<p>Haskellにおいてもfor文に相当する記法は存在しますが,基本的にループは<strong>再帰</strong>によって実装されます.
再帰とは関数内で自分自身を呼び出すことです. これまで何度も登場していた<code>fib</code>も再帰を利用していましたが,
もう少し細かく見てみましょう.</p>
<p>以下のPythonにおけるfor文を事例に考えてみましょう.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> total(xs):</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a>    result <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> x <span class="kw">in</span> xs:</span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a>        result <span class="op">+=</span> x</span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> result</span></code></pre></div>
<p>これと同値なプログラムをHaskellで記述すると以下のようになります.</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="ot">total ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>total []  <span class="ot">=</span> <span class="dv">0</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>total [x] <span class="ot">=</span> x</span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a>total (x<span class="op">:</span>xs) <span class="ot">=</span> x <span class="op">+</span> (total xs)</span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> <span class="op">$</span> tatal [<span class="dv">1</span><span class="op">..</span><span class="dv">10</span>] <span class="co">-- &gt;&gt;&gt; 55</span></span></code></pre></div>
<p>このtotal関数は,与えられたリストが空の場合0を返し,要素が一つの場合その要素を返します.
要素が複数あるリストの場合には,先頭の要素<code>x</code>をそれ以降の要素<code>xs</code>の合計に足すという処理を行います.</p>
<p><code>total [1,2,3]</code>における処理の流れを追っていくと以下のようになります.</p>
<pre><code>total [1,2,3]
= 1 + (total [2,3])
= 1 + (2 + (total [3]))
= 1 + 2 + 3 + (total [])
= 1 + 2 + 3 + 0
= 6</code></pre>
<p>再帰の基本は,<strong>ループの終了状態</strong>をパターンマッチなどで指定して,そこに至るまでの状態の変化を再帰で記述することです.
処理がどのような状態になったら終わるのかを意識して記述しないと永遠に終了しないプログラムになるので注意しましょう.</p>
<div class="note">
<p>練習問題</p>
<ol type="1">
<li><p>リストの長さを返す<code>length2 :: [a] -&gt; Int</code> 関数を新しく実装してください.</p></li>
<li><p>与えられた整数のリストを引数にとり,要素毎にFizzBuzzを実行した結果を文字列のリストで返す関数
<code>fizzBuzz :: [Int] -&gt; [String]</code>実装してください.</p></li>
</ol>
</div>
<h2 data-number="1.5" id="ラムダ式"><span class="header-section-number">1.5</span> ラムダ式</h2>
<h2 data-number="1.6" id="高階関数"><span class="header-section-number">1.6</span> 高階関数</h2>
<p>map, fold, zip</p>
<h2 data-number="1.7" id="合成"><span class="header-section-number">1.7</span> 合成</h2>
<h1 data-number="2" id="変数値の束縛"><span class="header-section-number">2</span> 変数(値の束縛)</h1>
<p>Pythonなどの言語では,特定の変数に値を代入することができます.例えば,以下の最大値を求めるプログラムでは,変数<code>m</code>に最初の中身はリストの最初の要素が代入された後,次々とより大きな変数が代入されていきます. <code>変数</code>は名前の通り,次々とその値を変更していきます.</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a>xs <span class="op">=</span> [<span class="dv">3</span>,<span class="dv">5</span>,<span class="dv">2</span>,<span class="dv">4</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">1</span>]</span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a>m  <span class="op">=</span> xs[<span class="dv">0</span>]</span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> x <span class="kw">in</span> xs[<span class="dv">1</span>:]:</span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> x <span class="op">&gt;</span> m:</span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true" tabindex="-1"></a>        m <span class="op">=</span> x</span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;max value:&#39;</span>,m)</span></code></pre></div>
<p>一方でHaskellでは,変数に一度値を割り当てると,その変数の値を後から変更することができません. 変数に値を再代入するという操作が許されていないのです. この性質を<code>普遍性</code> （immutability）といいます. したがって,Haskellでは代入という言葉を使わず<code>束縛</code>といいます.
これは,通常の手続き型言語との大きな違いになります.</p>
<div class="warn">
<p>※1 値を変えられないなら｢変数じゃない｣じゃないという意見もありますが,数学において変数と呼ばれているものに近い概念だと考えましょう.</p>
<p>※2 実は後にでてくる<code>State</code>や<code>ST</code>などHaskellでも<code>再代入(破壊的代入)</code>を扱うことはできますが,特定の仕組みによって以下の純粋関数型言語の特徴を保っています.</p>
</div>
<p>例えば,以下のように一度値を束縛した変数に新しく変数を代入しようとすると<code>xという変数に複数の宣言をしている</code>というエラーが出ます(ghciでやる場合には,<code>:{ :}</code>を入れる必要があり余計にややこしいですね.すみません).</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>{</span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> x <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> x <span class="ot">=</span> <span class="dv">2</span></span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> <span class="op">:</span>}</span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">5</span><span class="op">:</span><span class="dv">1</span><span class="op">:</span> <span class="fu">error</span><span class="op">:</span></span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Multiple</span> declarations <span class="kw">of</span> ‘x’</span>
<span id="cb28-8"><a href="#cb28-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Declared</span> at<span class="op">:</span> <span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">4</span><span class="op">:</span><span class="dv">1</span></span>
<span id="cb28-9"><a href="#cb28-9" aria-hidden="true" tabindex="-1"></a>                 <span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">5</span><span class="op">:</span><span class="dv">1</span></span></code></pre></div>
<p>これは一見非常に不便なように感じられますが,これによって関数型プログラムでは,プログラムの安全性を高めています.</p>
<p>例えばPythonにおける以下のプログラムについて考えてみましょう.</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a>counter <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> count_plus(x):</span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">global</span> counter</span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true" tabindex="-1"></a>    counter <span class="op">+=</span> x</span>
<span id="cb29-6"><a href="#cb29-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> counter</span>
<span id="cb29-7"><a href="#cb29-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-8"><a href="#cb29-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(count(<span class="dv">1</span>))  <span class="co"># 出力: 1</span></span>
<span id="cb29-9"><a href="#cb29-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(count(<span class="dv">1</span>))  <span class="co"># 出力: 2</span></span></code></pre></div>
<p>このプログラムでは,<code>count()</code>関数に対して同じ引数1を与えているにもかかわらず,関数を呼び出すたびに,グローバル変数<code>counter</code>が変更されて,結果が変わります. 同じ関数を呼び出しても,結果が変わるために関数のみから,関数の挙動を把握することができません.</p>
<p>一方でHaskellでは,常に同じ関数は,同じ入力に対して,同じ返り値を返します. このような特性を<strong>参照透過性(Referential Transparency)</strong>と呼び,これによってプログラムの挙動を把握しやすくしています.</p>
<p>また,上記のPythonのプログラムは,関数を実行するたびに,関数の外にある,<code>counter</code>という変数の状態が変化しています. このような,関数が実行されることで単に値を返す以外に何らかの｢外部の状態を変化させる｣ことを関数の<strong>副作用(Side Effect)</strong>といいます. これは言い換えれば,関数の実行によるプログラム全体への影響が,関数以外の外部の状態に依存していることを意味しており,プログラムの挙動を予測することを難しくします.</p>
<p>参照透過性と副作用は相互に結びついた概念ですが,Haskellでは参照透過性を保ち,副作用を排除するようにプログラムが設計されています.
このように, <strong>｢参照透過性｣</strong> と <strong>｢副作用の排除｣</strong> の両方を持った関数型言語を <strong>純粋関数型言語</strong> と呼びHaskellの大きな特徴の一つです.</p>
<p>Haskellにおいて,変数への再代入が禁止されていることのメリットは理解していただけたかと思いますが,Haskellにも変数自体はあります.</p>
<p>トップレベル変数</p>
<p>ローカル変数
where
let</p>
]]></description>
    <pubDate>Fri, 18 Oct 2024 00:00:00 UT</pubDate>
    <guid>/lectures/iap4.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>代数プログラミング入門 Ch3 Haskellを使ってみよう</title>
    <link>/lectures/iap3.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#haskellを使ってみよう" id="toc-haskellを使ってみよう"><span class="toc-section-number">1</span> Haskellを使ってみよう</a>
<ul>
<li><a href="#ghci" id="toc-ghci"><span class="toc-section-number">1.1</span> ghci</a></li>
<li><a href="#終了" id="toc-終了"><span class="toc-section-number">1.2</span> 終了</a></li>
<li><a href="#コメントアウト" id="toc-コメントアウト"><span class="toc-section-number">1.3</span> コメントアウト</a></li>
<li><a href="#複数行モード" id="toc-複数行モード"><span class="toc-section-number">1.4</span> 複数行モード</a></li>
<li><a href="#データ型" id="toc-データ型"><span class="toc-section-number">1.5</span> データ型</a>
<ul>
<li><a href="#数値型" id="toc-数値型"><span class="toc-section-number">1.5.1</span> 数値型</a></li>
<li><a href="#リスト" id="toc-リスト"><span class="toc-section-number">1.5.2</span> リスト</a></li>
<li><a href="#タプル" id="toc-タプル"><span class="toc-section-number">1.5.3</span> タプル</a></li>
<li><a href="#文字列型" id="toc-文字列型"><span class="toc-section-number">1.5.4</span> 文字列型</a></li>
</ul></li>
<li><a href="#論理型bool" id="toc-論理型bool"><span class="toc-section-number">1.6</span> 論理型(Bool)</a></li>
</ul></li>
</ul>
</div>
<h1 data-number="1" id="haskellを使ってみよう"><span class="header-section-number">1</span> Haskellを使ってみよう</h1>
<h2 data-number="1.1" id="ghci"><span class="header-section-number">1.1</span> ghci</h2>
<p>前節では, Stackを利用した,プロジェクトの作成と実行に関して扱いましたが, Haskellにも対話環境が存在します.
<code>stack ghci</code>コマンドを打つことで, Haskellの対話環境(<code>REPL</code>)が立ち上がります.</p>
<p>この節では,Haskellの基礎について学びますが,ghciの紹介も併せて,いくつかの基礎的な仕様については,ghci上で確認してみましょう.</p>
<h2 data-number="1.2" id="終了"><span class="header-section-number">1.2</span> 終了</h2>
<p>ghciではコマンドを<code>:</code>の後に入力します. ghciの終了コマンドは<code>:q</code>です.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> stack ghci</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span>:q</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Leaving</span> GHCi.</span></code></pre></div>
<h2 data-number="1.3" id="コメントアウト"><span class="header-section-number">1.3</span> コメントアウト</h2>
<p>Haslellではコメントアウトは <code>--</code> です. 複数行に渡る場合は <code>{- -}</code> で囲みます.</p>
<div class="warn">
<p>Haskellのプログラムを読んでいると <code>--|</code> や <code>--^</code> というタイプのコメントを良く見ますが, こちらはHaskellのドキュメント生成ライブラリにおいて, ドキュメント中に説明として記述するための記号です.
またコメント中に <code>&gt;&gt;&gt;</code> と記述することでテストが実装できるなどいろいろなものがありますが,本資料では扱いません.</p>
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="co">-- コメント</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="co">{- コメント-}</span></span></code></pre></div>
<h2 data-number="1.4" id="複数行モード"><span class="header-section-number">1.4</span> 複数行モード</h2>
<p>ghci上で複数行のプログラムを書く場合には <code>:{ :}</code> でプログラムを囲います. 例えば,先程のフィボナッチ数のプログラムをghci上で実行する場合,位置行ずつ定義すると,定義が更新されてき最後の <code>f n = f (n-1) + f (n-2)</code>のみが記憶されます. この場合,<code>n</code>は無限にマイナスに続いていくため,<code>Stack Overflow</code>エラーが表示されます.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> fib <span class="dv">0</span> <span class="ot">=</span> <span class="dv">1</span> <span class="co">-- fの定義が上書きされる</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> fib <span class="dv">1</span> <span class="ot">=</span> <span class="dv">1</span> <span class="co">-- fの定義が上書きされる</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> f n <span class="ot">=</span> f (n<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span> f (n<span class="op">-</span><span class="dv">2</span>)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> f <span class="dv">12</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="op">***</span> <span class="dt">Exception</span><span class="op">:</span> stack overflow</span></code></pre></div>
<p><code>:{ :}</code>で囲むことでひとまとまりの定義として認識されます.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>{</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span><span class="ot"> fib ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> fib <span class="dv">0</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> fib <span class="dv">1</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> fib n <span class="ot">=</span> fib (n<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span> fib (n<span class="op">-</span><span class="dv">2</span>)</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> <span class="op">:</span>}</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> fib <span class="dv">12</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="dv">233</span></span></code></pre></div>
<p>なお,スクリプトの場合は,<code>:{ :}</code>なしでそのまま改行すれば問題ありません.</p>
<h2 data-number="1.5" id="データ型"><span class="header-section-number">1.5</span> データ型</h2>
<p>型に関しては,かなり奥が深い,というよりHaskellの面白さは自分で型を作っていくことにあります. ただ,いきなりそれをすると,わけがわからなくなるのでまずは代数的データ型などには触れず以下の基礎的な型に関して説明します.</p>
<div class="note">
<ul>
<li>数値型
<ul>
<li>整数 (Int, Integer)</li>
<li>実数 (Float,Double)</li>
</ul></li>
<li>タプル</li>
<li>リスト (List)</li>
<li>文字,文字列 (Char,String,Text)</li>
<li>論理型(Bool)</li>
</ul>
</div>
<p>Haskellにおいて,値のデータ型はある程度自動推論されますが,特定のデータ型を明示したい場合には,値の後ろに<code>:: データ型</code>をつけます.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span><span class="ot"> ::</span> <span class="dt">Int</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span><span class="ot"> ::</span> <span class="dt">Double</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="fl">1.0</span></span></code></pre></div>
<p><code>ghci</code>において形の確認は<code>:t</code>あるいは<code>:type</code>コマンドの後ろに確認したいデータを入力することで行えます.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>t <span class="ch">&#39;c&#39;</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="ch">&#39;c&#39;</span><span class="ot"> ::</span> <span class="dt">Char</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> (<span class="dv">1</span><span class="ot"> ::</span> <span class="dt">Int</span>)</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>(<span class="dv">1</span><span class="ot"> ::</span> <span class="dt">Int</span>)<span class="ot"> ::</span> <span class="dt">Int</span></span></code></pre></div>
<h3 data-number="1.5.1" id="数値型"><span class="header-section-number">1.5.1</span> 数値型</h3>
<p>Haskellの基本的な数値型には以下の4つがあります.</p>
<table>
<thead>
<tr class="header">
<th>型</th>
<th>意味</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>Int</code></td>
<td>固定長整数型</td>
</tr>
<tr class="even">
<td><code>Integer</code></td>
<td>多倍長整数型</td>
</tr>
<tr class="odd">
<td><code>Float</code></td>
<td>単精度浮動小数型</td>
</tr>
<tr class="even">
<td><code>Double</code></td>
<td>倍精度浮動小数型</td>
</tr>
</tbody>
</table>
<p><code>Int</code>と<code>Integer</code>は<code>整数</code>, <code>Float</code>と<code>Double</code>は<code>実数</code>を表しています.</p>
<p><code>固定長/多倍長</code>, <code>単精度/倍精度</code> というのはどういう意味でしょうか?</p>
<p>コンピューターでは,データはすべて<code>0</code>と<code>1</code>のいずれかを表す<code>bit</code>の集まりによって表現されます. ちなみに<code>8bit</code>で<code>1byte</code>, <code>1024byte</code>で<code>1Kbyte</code>です.したがって,プログラミングで扱うデータに使用できるデータ量には制限があり,無限の長さの整数や少数を利用することはできません.</p>
<p>コンピューターの計算は主に中央演算処理装置(CPU)で行われますが,その計算過程でデータを一時的に記録するCPU内部の装置のことを汎用レジスタといい,現在では<code>64bit</code>以下の汎用レジスタを持った<code>64bit CPU</code>が良く利用されています.</p>
<p>現在一般的な<code>64bit CPU</code>においてHaskellは整数と小数を表すのに一般的に最大<code>64bit</code>の領域を確保します. したがって,整数では64bitで表せるデータ量(<code>-9223372036854775808 ~ 9223372036854775807</code>)を超えた整数を扱うことはできません.</p>
<p>ちなみにIntの最大値,最小値はghciで以下のように確認できます(
使用しているコンピューターによっては結果が変わる可能性があります).</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span><span class="ot"> minBound ::</span> <span class="dt">Int</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="op">-</span><span class="dv">9223372036854775808</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span><span class="ot"> maxBound ::</span> <span class="dt">Int</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="dv">9223372036854775807</span></span></code></pre></div>
<p>最大(小)値を超えるとオーバーフローします.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">9223372036854775807</span><span class="ot"> ::</span> <span class="dt">Int</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="dv">9223372036854775807</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> (<span class="dv">9223372036854775807</span> <span class="op">+</span> <span class="dv">1</span>)<span class="ot"> ::</span> <span class="dt">Int</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="op">-</span><span class="dv">9223372036854775808</span></span></code></pre></div>
<p>Haskellにおける数値型の基本的な演算子は以下のように定義されています. 実数と整数で挙動が異なるものがあるので注意が必要です.</p>
<p>演算子には優先順位が設定されており,数字が大きいものから順に適用されます(最小0,最大9).
また,式を<code>()</code>で囲むことで,その内部が優先的に計算されます.</p>
<p><strong>また,<code>()</code>が式の最後に来る場合には<code>$</code>記号以下が<code>()</code>に囲まれているとみなすことができます.</strong></p>
<table>
<thead>
<tr class="header">
<th>計算</th>
<th>記号</th>
<th>優先順</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>足し算</td>
<td><code>+</code></td>
<td>6</td>
</tr>
<tr class="even">
<td>引き算</td>
<td><code>-</code></td>
<td>6</td>
</tr>
<tr class="odd">
<td>掛け算</td>
<td><code>*</code></td>
<td>7</td>
</tr>
<tr class="even">
<td>割り算</td>
<td><code>/</code></td>
<td>7</td>
</tr>
<tr class="odd">
<td>冪乗(整数)</td>
<td><code>^</code></td>
<td>8</td>
</tr>
<tr class="even">
<td>冪乗(実数)</td>
<td><code>**</code></td>
<td>8</td>
</tr>
</tbody>
</table>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="dv">2</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">2</span> <span class="op">-</span> <span class="dv">1</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">3</span> <span class="op">*</span> <span class="dv">3</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="dv">9</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">9</span> <span class="op">/</span> <span class="dv">3</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="fl">3.0</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">3</span> <span class="op">^</span> <span class="dv">3</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="dv">27</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">3</span> <span class="op">**</span> <span class="dv">3</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a><span class="fl">27.0</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">3</span> <span class="op">^</span> (<span class="dv">1</span><span class="op">/</span><span class="dv">2</span>) <span class="co">-- エラー</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">7</span><span class="op">:</span><span class="dv">3</span><span class="op">:</span> <span class="fu">error</span><span class="op">:</span> [<span class="dt">GHC</span><span class="op">-</span><span class="dv">39999</span>]</span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">3</span> <span class="op">**</span> (<span class="dv">1</span><span class="op">/</span><span class="dv">2</span>)</span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a><span class="fl">1.7320508075688772</span></span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">2</span> <span class="op">*</span> <span class="dv">3</span> <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a><span class="dv">7</span></span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">2</span> <span class="op">*</span> (<span class="dv">3</span> <span class="op">+</span> <span class="dv">1</span>)</span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a><span class="dv">8</span></span>
<span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">2</span> <span class="op">*</span> <span class="op">$</span> <span class="dv">3</span> <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a><span class="dv">8</span></span></code></pre></div>
<p>これらは中置演算子として定義されていますが演算子を<code>()</code>で囲むことによって前置(逆ポーランド記法)で利用することができます.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> (<span class="op">+</span>) <span class="dv">3</span> <span class="dv">4</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="dv">7</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> (<span class="op">*</span>) ((<span class="op">+</span>) <span class="dv">3</span> <span class="dv">4</span>) <span class="dv">2</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="dv">14</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> (<span class="op">*</span>) <span class="dv">2</span> <span class="op">$</span> (<span class="op">+</span>) <span class="dv">3</span> <span class="dv">4</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="dv">14</span></span></code></pre></div>
<p>また, 2引数関数として定義された前置の演算子は <code>``</code> (バッククオート)で囲むことで, 中置演算子として利用できます.</p>
<table>
<thead>
<tr class="header">
<th>計算</th>
<th>記号</th>
<th>優先順</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>整数除算</td>
<td><code>div</code></td>
<td>7</td>
</tr>
<tr class="even">
<td>剰余</td>
<td><code>mod</code></td>
<td>6</td>
</tr>
</tbody>
</table>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">5</span> <span class="op">/</span><span class="dv">2</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="fl">2.5</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="fu">div</span> <span class="dv">5</span> <span class="dv">2</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="dv">2</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">5</span> <span class="ot">`div`</span> <span class="dv">2</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="dv">2</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">5</span> <span class="ot">`mod`</span> <span class="dv">2</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span></span></code></pre></div>
<div class="note">
<p>練習問題</p>
<p>以下の問題をREPLを使って自分で解いてみましょう.
問題自体は小学生でも解けますが,重要なのはHaskellの挙動を確認することです.
どのように計算したかを併せて説明してください.</p>
<ul>
<li><p>飴が40個あります.7人で同じ数ずつ分けると1人分は何個で何個あまりますか?</p></li>
<li><p>底辺5cm,高さ4cmの三角形の面積はいくつですか?</p></li>
<li><p>2の8乗はいくつですか?</p></li>
<li><p>累乗と掛け算の計算順序を丸括弧を使った計算で確かめてください.</p></li>
</ul>
</div>
<h3 data-number="1.5.2" id="リスト"><span class="header-section-number">1.5.2</span> リスト</h3>
<p>複数のデータをまとめる方法はいくつかありますが,データを1列に並べた<code>List</code>型は代表的なデータ型です. Haskellには配列(<code>Array</code>や<code>Vector</code>)もありますが,まずは<code>List</code>について学習しましょう.
リストの操作にはここで扱う以外にも<code>リスト内包表記</code>や<code>高階関数</code>など様々なものがありますが,ここでは最も基本的ないくつかの機能のみに絞って,後ほど詳細を扱います.</p>
<p>Listは<strong>リストリテラル</strong><code>[]</code>の中に要素を記入して,<code>,</code>(コンマ)で区切ることで宣言できます.</p>
<div class="warn">
<p>Haskellにおいて,リテラルとは,<strong>特定のデータ型の値を直接記述する構文</strong>のことを指します.</p>
<ul>
<li><p>リストリテラル<code>[]</code>は,<code>[]</code>内の記述をリスト型として扱うリテラル</p></li>
<li><p>数値を記入するとそれは数値型として扱われる数値リテラル</p></li>
<li><p><code>""</code>で囲まれた記述は文字列型として扱われる文字列リテラル</p></li>
</ul>
<p>などがあります.</p>
<p>Haskellでは,自作したデータ型にリテラルを定めるなど様々な用法がありますが,ここでは扱いません.</p>
</div>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span></code></pre></div>
<p><code>[]</code>のみで空のリストが生成されます.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> []</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>[]</span></code></pre></div>
<p>注意点として,HaskellはPythonなどの言語のように<code>ダックタイピング</code>が許されていないため異なるデータを単一のリストの要素に含めることはできません.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="fl">2.0</span>,<span class="dv">3</span>]</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>[<span class="fl">1.0</span>,<span class="fl">2.0</span>,<span class="fl">3.0</span>]</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span><span class="ot">::</span><span class="dt">Int</span>,<span class="dv">2</span><span class="ot">::</span><span class="dt">Double</span>,<span class="dv">3</span><span class="ot">::</span><span class="dt">Int</span>]</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">22</span><span class="op">:</span><span class="dv">9</span><span class="op">:</span> <span class="fu">error</span><span class="op">:</span> [<span class="dt">GHC</span><span class="op">-</span><span class="dv">83865</span>]</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>    • <span class="dt">Couldn&#39;t</span> match expected <span class="kw">type</span> ‘<span class="dt">Int</span>’ with actual <span class="kw">type</span> ‘<span class="dt">Double</span>’</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>    • <span class="dt">In</span> the expression<span class="op">:</span> <span class="dv">2</span><span class="ot"> ::</span> <span class="dt">Double</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>      <span class="dt">In</span> the expression<span class="op">:</span> [<span class="dv">1</span><span class="ot"> ::</span> <span class="dt">Int</span>, <span class="dv">2</span><span class="ot"> ::</span> <span class="dt">Double</span>, <span class="dv">3</span><span class="ot"> ::</span> <span class="dt">Int</span>]</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>      <span class="dt">In</span> an equation for ‘it’<span class="op">:</span> it <span class="ot">=</span> [<span class="dv">1</span><span class="ot"> ::</span> <span class="dt">Int</span>, <span class="dv">2</span><span class="ot"> ::</span> <span class="dt">Double</span>, <span class="dv">3</span><span class="ot"> ::</span> <span class="dt">Int</span>]</span></code></pre></div>
<p>リストのデータ型は,要素のデータ型をリストリテラル<code>[]</code>で囲んだ形で表されます.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> ([<span class="dv">1</span><span class="ot">::</span><span class="dt">Int</span>,<span class="dv">2</span><span class="ot">::</span><span class="dt">Int</span>])</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>([<span class="dv">1</span><span class="ot">::</span><span class="dt">Int</span>,<span class="dv">2</span><span class="ot">::</span><span class="dt">Int</span>])<span class="ot"> ::</span> [<span class="dt">Int</span>]</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> [<span class="ch">&#39;a&#39;</span>,<span class="ch">&#39;b&#39;</span>,<span class="ch">&#39;c&#39;</span>]</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>[<span class="ch">&#39;a&#39;</span>,<span class="ch">&#39;b&#39;</span>,<span class="ch">&#39;c&#39;</span>]<span class="ot"> ::</span> [<span class="dt">Char</span>]</span></code></pre></div>
<p>また,リストは<code>先頭要素 : リスト</code> によって宣言することも可能です. <code>:</code>を<code>cons 構築子</code>といいます. 構築子の意味については後ほど<code>代数的データ型</code>の説明とともに扱います.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">:</span> []</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>]</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">:</span> [<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">:</span> <span class="dv">2</span> <span class="op">:</span> [<span class="dv">3</span>]</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span></code></pre></div>
<p>リストの要素のインデックスによる取得は <code>!!</code>演算子を用いて<code>xs !! インデックス</code>の形で行います. インデックスは0から始まります. インデックスが超過した場合はエラーとなります.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>] <span class="op">!!</span> <span class="dv">0</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>] <span class="op">!!</span> <span class="dv">1</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a><span class="dv">2</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>] <span class="op">!!</span> <span class="dv">2</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a><span class="dv">3</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>] <span class="op">!!</span> <span class="dv">3</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a><span class="op">***</span> <span class="dt">Exception</span><span class="op">:</span> <span class="op">Prelude.!!:</span> <span class="fu">index</span> too large</span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a><span class="dt">CallStack</span> (from <span class="dt">HasCallStack</span>)<span class="op">:</span></span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a>  <span class="fu">error</span>, called at libraries<span class="op">/</span>base<span class="op">/</span><span class="dt">GHC</span><span class="op">/</span>List.hs<span class="op">:</span><span class="dv">1366</span><span class="op">:</span><span class="dv">14</span> <span class="kw">in</span> base<span class="op">:</span><span class="dt">GHC.List</span></span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a>  tooLarge, called at libraries<span class="op">/</span>base<span class="op">/</span><span class="dt">GHC</span><span class="op">/</span>List.hs<span class="op">:</span><span class="dv">1376</span><span class="op">:</span><span class="dv">50</span> <span class="kw">in</span> base<span class="op">:</span><span class="dt">GHC.List</span></span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true" tabindex="-1"></a>  <span class="op">!!</span>, called at <span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">37</span><span class="op">:</span><span class="dv">9</span> <span class="kw">in</span> interactive<span class="op">:</span><span class="dt">Ghci15</span></span></code></pre></div>
<p><code>m~n</code>までの連続したリストを生成する場合には,<code>[m..n]</code>と記述します.これを<code>数列表記</code>といいます.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span> <span class="op">..</span> <span class="dv">10</span>]</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>,<span class="dv">10</span>]</span></code></pre></div>
<p>コンマと併用することで階差数列などを表現することも可能です.</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="dv">3</span><span class="op">..</span><span class="dv">10</span>]</span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>,<span class="dv">3</span>,<span class="dv">5</span>,<span class="dv">7</span>,<span class="dv">9</span>]</span></code></pre></div>
<p><code>[x..]</code>と終わりを指定しないことで,無限数列も作成できます. ghciでそのまま実行すると永遠に表示が止まりません(<code>ctrl+C</code>で止まります). ここでは,<code>[1,3,5,...]</code>の10番目と100番目の値を取り出してみます.</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="dv">3</span><span class="op">..</span>] <span class="op">!!</span> <span class="dv">10</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a><span class="dv">21</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="dv">3</span><span class="op">..</span>] <span class="op">!!</span> <span class="dv">100</span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a><span class="dv">201</span></span></code></pre></div>
<div class="warn">
<p>Pythonなど言語では,値が宣言/生成されたタイミングでコンピュータがその値を評価する<code>正格(strict)評価</code>が一般的です. 一方HaskellはDefaultでは,実際にその値が呼び出された際に評価される<code>遅延(lazy)評価</code>を採用しており,それによりこのような無限の値を実現することができます.
正格評価で無限に値が続くリストを生成した場合, 生成した時点で永遠に計算が終わりませんが,遅延評価では無限のリストの中の具体的な値を利用するさいにその値が利用されます.</p>
<p>この機能はHaskellの大きな特徴の一つですが,一方でメモリリークや,速度の低下の原因になることがあります. したがって,ある程度大きなプログラムを書く場合には,正格評価と,遅延評価を明示的に切り替えることが推奨されています.</p>
<p>最初は気にする必要はありませんが,パッケージなどの提供するHaskellのデータ型には,strictなものとlazyなものの両方が用意されていることが多いので,違いを覚えておくと後々役に立ちます.</p>
</div>
<p>Haskellでリストを扱う際には,暗黙に<code>x</code>などの単一のアルファベットが要素,<code>xs</code>などの複数形がリストを表している場合が多く<code>x:xs</code>などと記述してリストの最初の要素と残りのリストを表します.</p>
<p>詳細は後ほど扱いますが,<code>束縛</code>されたリストから<code>パターンマッチ</code>によって値を取り出す場合によく利用されます.</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> x<span class="op">:</span>xs <span class="ot">=</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> x</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> xs</span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a>[<span class="dv">2</span>,<span class="dv">3</span>]</span></code></pre></div>
<p>リスト同士の結合は<code>++</code>演算子によって行います.</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>] <span class="op">++</span> [<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span></code></pre></div>
<p>リストの長さは<code>length</code> 関数で取得できます.</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="fu">length</span> []</span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a><span class="dv">0</span></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="fu">length</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a><span class="dv">3</span></span></code></pre></div>
<h3 data-number="1.5.3" id="タプル"><span class="header-section-number">1.5.3</span> タプル</h3>
<p>Haskellではデータの組み合わせを表す方法として,後述の<code>直積型</code>がありますが,タプルも良く利用されます.タプルを利用するには要素を<code>()</code>(丸括弧)で囲い,<code>,</code>(コンマ)で区切ります. 要素数に制限はありません.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> (<span class="dv">1</span>,<span class="dv">2</span>)</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a>(<span class="dv">1</span>,<span class="dv">2</span>)</span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> (<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>)</span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a>(<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>)</span></code></pre></div>
<p>リストと同様に要素数の異なるタプルや,要素のデータ型の異なるタプルは別のデータ型として区別され,同一のリストなどに入れることはできません.</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [(<span class="dv">1</span>,<span class="dv">2</span>),(<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>)]</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">60</span><span class="op">:</span><span class="dv">8</span><span class="op">:</span> <span class="fu">error</span><span class="op">:</span> [<span class="dt">GHC</span><span class="op">-</span><span class="dv">83865</span>]</span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a>    • <span class="dt">Couldn&#39;t</span> match expected <span class="kw">type</span><span class="op">:</span> (a, b)</span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a>                  with actual <span class="kw">type</span><span class="op">:</span> (a0, b0, c0)</span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a>    • <span class="dt">In</span> the expression<span class="op">:</span> (<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>)</span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true" tabindex="-1"></a>      <span class="dt">In</span> the expression<span class="op">:</span> [(<span class="dv">1</span>, <span class="dv">2</span>), (<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>)]</span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true" tabindex="-1"></a>      <span class="dt">In</span> an equation for ‘it’<span class="op">:</span> it <span class="ot">=</span> [(<span class="dv">1</span>, <span class="dv">2</span>), (<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>)]</span>
<span id="cb25-9"><a href="#cb25-9" aria-hidden="true" tabindex="-1"></a>    • <span class="dt">Relevant</span> bindings include</span>
<span id="cb25-10"><a href="#cb25-10" aria-hidden="true" tabindex="-1"></a><span class="ot">        it ::</span> [(a, b)] (bound at <span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">60</span><span class="op">:</span><span class="dv">1</span>)</span></code></pre></div>
<p>要素数が2つのリストに限定して,要素を取り出す関数 <code>fst</code>,<code>snd</code>が用意されていますが,値の取り出しはパターンマッチがよく利用されます.</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="fu">fst</span> (<span class="dv">1</span>,<span class="dv">2</span>)</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="fu">snd</span> (<span class="dv">1</span>,<span class="dv">2</span>)</span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a><span class="dv">2</span></span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> (x,y) <span class="ot">=</span> (<span class="dv">1</span>,<span class="dv">2</span>)</span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> x</span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span></span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> y</span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true" tabindex="-1"></a><span class="dv">2</span></span></code></pre></div>
<h3 data-number="1.5.4" id="文字列型"><span class="header-section-number">1.5.4</span> 文字列型</h3>
<p>Haskellの文字列型は歴史的に少し複雑な状況になっており,Preludeにおける<code>String</code>型の使い勝手があまり良くありません. なので, <code>text</code>パッケージの提供する<code>Text</code>型を利用するのが一般的です. なので,後ほどTextを導入しますが,一旦String型に関して見てみましょう.</p>
<p>Haskellでは1文字を表す <code>Char</code>型と文字列を表す<code>String</code>型を区別し,<code>Char</code>は<code>''</code>(シングルクォーテーション),<code>String</code>は<code>""</code>(ダブルクオーテーション)で囲みます.</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="ch">&#39;c&#39;</span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a><span class="ch">&#39;c&#39;</span></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>t <span class="ch">&#39;c&#39;</span></span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a><span class="ch">&#39;c&#39;</span><span class="ot"> ::</span> <span class="dt">Char</span></span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="st">&quot;String&quot;</span></span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>t <span class="st">&quot;String&quot;</span></span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;String&quot;</span><span class="ot"> ::</span> <span class="dt">String</span></span></code></pre></div>
<p>Haskellにおける文字型<code>Char</code>のリスト<code>[Char]</code>の別名(<code>型シノニム</code>)です. <code>型シノニム</code>は型に別の名前をつけることで,形の用途などを区別する機能です.
型シノニムは,以下のように, <code>type 型シノニム = 元のデータ型</code>という形で定義します.</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">String</span> <span class="ot">=</span> [<span class="dt">Char</span>]</span></code></pre></div>
<p>したがって,String型にはListの演算が適用できます.</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="st">&quot;String&quot;</span> <span class="op">!!</span> <span class="dv">1</span></span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a><span class="ch">&#39;t&#39;</span></span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="ch">&#39;!&#39;</span> <span class="op">:</span> <span class="st">&quot;String&quot;</span></span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;!String&quot;</span></span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="st">&quot;!!&quot;</span> <span class="op">++</span>  <span class="st">&quot;String&quot;</span></span>
<span id="cb29-6"><a href="#cb29-6" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;!!String&quot;</span></span>
<span id="cb29-7"><a href="#cb29-7" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="fu">length</span> <span class="st">&quot;String&quot;</span></span>
<span id="cb29-8"><a href="#cb29-8" aria-hidden="true" tabindex="-1"></a><span class="dv">6</span></span></code></pre></div>
<p>ただし,<code>String</code>型は非効率なため,現在ではあまり使われておらず,基本的に<code>text</code>パッケージの提供する <code>Data.Text</code>を利用することが推奨されています.</p>
<p><code>package.yaml</code>の<code>dependencies</code>に以下のように<code>text</code>を追加します.</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="fu">dependencies</span><span class="kw">:</span></span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> base &gt;= 4.7 &amp;&amp; &lt; 5</span></span>
<span id="cb30-3"><a href="#cb30-3" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> text</span></span></code></pre></div>
<p>スクリプトの最初に以下のように,記述することで文字列リテラル<code>""</code>が<code>Text</code>型に利用できるようになります.</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Text</span></span></code></pre></div>
<p><code>{-# LANGUAGE OverloadedStrings #-}</code>は言語拡張を表しており,Haskellの処理系に機能を追加する宣言です. <code>OverloadedString</code>は文字列リテラルをTextなどの他の文字列を表すデータ型に適用できるようにする拡張です.</p>
<p><code>ghci</code>で言語拡張を導入するには,<code>:set</code>に続けて <code>-X言語拡張名</code>を記述します.</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> <span class="st">&quot;Text&quot;</span></span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;Text&quot;</span><span class="ot"> ::</span> <span class="dt">String</span></span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XOverloadedStrings</span></span>
<span id="cb32-4"><a href="#cb32-4" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="kw">import</span> <span class="dt">Data.Text</span></span>
<span id="cb32-5"><a href="#cb32-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> <span class="st">&quot;Text&quot;</span></span>
<span id="cb32-6"><a href="#cb32-6" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;Text&quot;</span><span class="ot"> ::</span> <span class="dt">Data.String.IsString</span> a <span class="ot">=&gt;</span> a</span></code></pre></div>
<h2 data-number="1.6" id="論理型bool"><span class="header-section-number">1.6</span> 論理型(Bool)</h2>
<p>それが正しいか間違っているか判別できる文を<strong>命題</strong>といいます. 命題の結果を表すものとして真(正しい),偽(間違っている)という値を用います. 真と偽を併せて<strong>真偽値</strong>といいます.</p>
<p>例えば,<code>1は2より大きい</code>という命題は,間違っているので<strong>偽</strong>となります. <code>人間は必ず死ぬ</code>という命題は,今のところ不老不死の人間がいないので<strong>真</strong>です.</p>
<p>真偽値を表すデータ型として<code>Bool</code>があります. <code>Bool</code>は<code>True</code>(真),<code>False</code>(偽)のいずれかです.</p>
<p>Haskellには命題の判定を行う<code>関係演算子</code>として,以下のようなものが準備されています.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">記号</th>
<th style="text-align: center;">意味</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>&gt;</code></td>
<td style="text-align: center;">より大きい</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&gt;=</code></td>
<td style="text-align: center;">以上</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>&lt;</code></td>
<td style="text-align: center;">より小さい</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&lt;=</code></td>
<td style="text-align: center;">以下</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>==</code></td>
<td style="text-align: center;">等しい</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>/=</code></td>
<td style="text-align: center;">等しくない</td>
</tr>
</tbody>
</table>
<p>数値などの大小関係を調べるときには,比較演算子 <code>&gt;</code>,<code>&gt;=</code>.<code>&lt;</code>,<code>&lt;=</code>を利用します. 演算子の左右に数値を書くと,結果に応じて真偽値が帰ってきます.</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">&gt;</span> <span class="dv">2</span></span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a><span class="dt">False</span></span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">&lt;</span> <span class="fl">1.5</span></span>
<span id="cb33-4"><a href="#cb33-4" aria-hidden="true" tabindex="-1"></a><span class="dt">True</span></span></code></pre></div>
<p>値が等しいか/等しくないかを判定するには,<code>==</code>と<code>!=</code>を利用します.</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">4</span> <span class="op">==</span> <span class="dv">4</span></span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true" tabindex="-1"></a><span class="dt">True</span></span>
<span id="cb34-3"><a href="#cb34-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="st">&quot;cat&quot;</span> <span class="op">/=</span> <span class="st">&quot;cat&quot;</span></span>
<span id="cb34-4"><a href="#cb34-4" aria-hidden="true" tabindex="-1"></a><span class="dt">False</span></span></code></pre></div>
<p><code>True</code> や <code>False</code>などの<code>Bool</code>値は, <code>AND</code>(かつ),<code>OR</code>(または),<code>NOT</code>という演算で計算することができます(<code>XOR</code>というのもあるが省略).
HaskellではAND は <code>&amp;&amp;</code>, OR は <code>||</code>, NOT は <code>not</code> という演算子が提供されています.</p>
<p>A,Bが命題だとして,<code>A &amp;&amp; B</code>は両方<code>True</code>のときに,<code>True</code>となります. <code>A || B</code>は片方どちらかが<code>True</code>のときに<code>True</code>となります.</p>
<p>例えば,</p>
<ul>
<li><p><code>1は2より大きい かつ 2は0より大きい</code> という命題は,<code>2は0より大きい</code>は正しいですが,<code>1は2より大きい</code>が間違っているので全体として,<code>False</code>です.</p></li>
<li><p><code>ネコは哺乳類である または ネコは鳥類である</code>という命題は <code>ネコは鳥類である</code>が間違っていますが全体としては<code>True</code>です.</p></li>
</ul>
<p>演算の結果は,それぞれ以下のようになります. これを真偽値表といいます. ここでは,最低限の例だけを紹介しますが,より深く理解したい人は論理学などの講義を受講しましょう.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">命題Aの値</th>
<th style="text-align: center;">Bの値</th>
<th style="text-align: center;"><code>A &amp;&amp; B</code></th>
<th style="text-align: center;"><code>A || B</code></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">True</td>
<td style="text-align: center;">False</td>
<td style="text-align: center;">True</td>
<td style="text-align: center;">True</td>
</tr>
<tr class="even">
<td style="text-align: center;">False</td>
<td style="text-align: center;">True</td>
<td style="text-align: center;">False</td>
<td style="text-align: center;">True</td>
</tr>
<tr class="odd">
<td style="text-align: center;">True</td>
<td style="text-align: center;">False</td>
<td style="text-align: center;">False</td>
<td style="text-align: center;">True</td>
</tr>
<tr class="even">
<td style="text-align: center;">False</td>
<td style="text-align: center;">False</td>
<td style="text-align: center;">False</td>
<td style="text-align: center;">True</td>
</tr>
</tbody>
</table>
<div class="sourceCode" id="cb35"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">&gt;</span> <span class="dv">2</span></span>
<span id="cb35-2"><a href="#cb35-2" aria-hidden="true" tabindex="-1"></a><span class="dt">False</span></span>
<span id="cb35-3"><a href="#cb35-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">2</span> <span class="op">&gt;</span> <span class="dv">0</span></span>
<span id="cb35-4"><a href="#cb35-4" aria-hidden="true" tabindex="-1"></a><span class="dt">True</span></span>
<span id="cb35-5"><a href="#cb35-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">&gt;</span> <span class="dv">2</span> <span class="op">&amp;&amp;</span> <span class="dv">2</span> <span class="op">&gt;</span> <span class="dv">0</span></span>
<span id="cb35-6"><a href="#cb35-6" aria-hidden="true" tabindex="-1"></a><span class="dt">False</span></span>
<span id="cb35-7"><a href="#cb35-7" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">&gt;</span> <span class="dv">2</span> <span class="op">||</span> <span class="dv">2</span> <span class="op">&gt;</span> <span class="dv">0</span></span>
<span id="cb35-8"><a href="#cb35-8" aria-hidden="true" tabindex="-1"></a><span class="dt">True</span></span></code></pre></div>
<p><code>not</code> は命題の否定を表しており <code>True</code>が<code>False</code>,<code>False</code>が<code>True</code>になります.<code>not</code>は命題の前に書きます.</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span> 1 <span class="op">&gt;</span> 2</span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true" tabindex="-1"></a><span class="ex">False</span></span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span> not <span class="er">(</span><span class="ex">1</span> <span class="op">&gt;</span> 2<span class="kw">)</span></span>
<span id="cb36-4"><a href="#cb36-4" aria-hidden="true" tabindex="-1"></a><span class="ex">True</span></span></code></pre></div>
<div class="note">
<p><strong>演習</strong></p>
<p>ある値が偶数かどうかは,2で割った余りが0かどうかを判定することで判定できます.
<code>x=101</code>,<code>y=202</code>として, 以下の命題の真偽をPythonで計算してください.</p>
<ul>
<li>xが偶数</li>
<li>yが偶数</li>
<li>xが偶数かつyが偶数</li>
<li>xが偶数またはyが偶数</li>
<li>x + y が奇数</li>
</ul>
</div>
]]></description>
    <pubDate>Fri, 18 Oct 2024 00:00:00 UT</pubDate>
    <guid>/lectures/iap3.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>代数プログラミング入門 Ch2 環境構築</title>
    <link>/lectures/iap2.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#haskellセットアップ" id="toc-haskellセットアップ"><span class="toc-section-number">1</span> Haskellセットアップ</a>
<ul>
<li><a href="#環境構築" id="toc-環境構築"><span class="toc-section-number">1.1</span> 環境構築</a></li>
</ul></li>
</ul>
</div>
<h1 data-number="1" id="haskellセットアップ"><span class="header-section-number">1</span> Haskellセットアップ</h1>
<p>言語の特徴や意味を色々と説明してきましたが,習うより慣れろということで,そろそろHaskellを利用してみましょう.Haskellの開発環境には様々なものがありますが,現在良く使われているものとして<a href="https://www.haskell.org/cabal/"><code>Cabal</code></a> + <a href="https://www.haskell.org/ghcup/"><code>GHCup</code></a>あるいは<a href="https://docs.haskellstack.org/en/stable/"><code>Stack</code></a>の2つがあります. CabalとStackはプロジェクトのビルドを行うためのアーキテクチャであり,GHCupは周辺環境のインストーラーです. どちらで開発を行ってもいいのですが,本稿では<code>Stack</code>を用います.</p>
<p>Stackは現在のHaskellの標準的なコンパイラである,<code>Glasgow Haskell Compiler（GHC）</code>に基づいたビルド環境です(cabalもGHCですが). 他の言語と同様にHaskellでも様々なpackage(ライブラリ)を利用するのですが,package毎に他のpackageや,GHC(Haskellのコンパイラ)との依存関係があります.それらを使用するpackage事に調整することが人間には至難の業であり, 特定のpackageの依存関係を満たせば他のpackageの依存関係が満たされなくなるという試行錯誤を永遠と繰り返すことを<code>cabal hell</code>などと呼びます.</p>
<p>Stackにはそのようなpackage間の依存関係を満たすバージョンの組み合わせ(<code>resolver</code>)を利用して,自動で解決してくれる機能があり,Haskellでのブロジェクトの開発を容易にしてくれます. resolverの集まりを<a href="https://www.stackage.org"><code>Stackage</code></a>といい, resolverで扱われるpackageをまとめて管理するレポジトリのことを<a href="https://hackage.haskell.org"><code>Hackage</code></a>といいます.</p>
<h2 data-number="1.1" id="環境構築"><span class="header-section-number">1.1</span> 環境構築</h2>
<p>Stackの環境構築の方法は基本的には,<a href="https://docs.haskellstack.org/en/stable/">公式サイト</a>に従ってください. 使用しているOS毎にインストール方法が異なるので注意しましょう特にMacユーザーはIntel Mac と Apple silliconでインストール方法が異なるので正しい方を選択するようにしてください.</p>
<p>インストールが終わったら,以下のコマンドでstackを最新版にupgradeします.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">stack</span> upgrade</span></code></pre></div>
<p>次に,開発用のディレクトリに移動して,開発用のプロジェクトを作成していきます. Stackでは,新しいプロジェクトの作成は<code>stack new [project-name]</code> コマンドで行われます. <code>stack new [project-name]</code>コマンドで新しいプロジェクトを作成すると,必要なファイルが含まれた<code>[project-name]</code>という名前のディレクトリが作成されます. 作成されたディレクトリに移動しましょう.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> ls</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> stack <span class="ex">new</span> hello-world</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> ls</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ex">hello-world</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> cd <span class="ex">hello-world</span></span></code></pre></div>
<p>作成されたディレクトリの構成は以下のようになっています.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> tree</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="bu">.</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="ex">├──</span> CHANGELOG.md</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="ex">├──</span> LICENSE</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="ex">├──</span> README.md</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="ex">├──</span> Setup.hs</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="ex">├──</span> app</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> ├── hello.hs</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="ex">├──</span> hello-world.cabal</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="ex">├──</span> package.yaml</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="ex">├──</span> src</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> └── Lib.hs</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="ex">├──</span> stack.yaml</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="ex">└──</span> test</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>    <span class="ex">└──</span> Spec.hs</span></code></pre></div>
<p>それぞれの用途と意味は以下のとおりです.</p>
<div class="note">
<ul>
<li><p><code>app</code>フォルダの中には,実行可能ファイル用のプログラム</p>
<ul>
<li><p>プロジェクトをbuildすると,<code>Main.hs</code>から実行可能ファイル(executable)が生成されます</p></li>
<li><p>この後,<code>Main.hs</code>の中身を編集して<code>Hello World</code>用のプログラムを作成します.</p></li>
</ul></li>
</ul>
<hr />
<ul>
<li><p><code>src</code>フォルダ内には,実行可能ファイルで利用するライブラリが格納されます.</p>
<ul>
<li>ここに自分で開発したライブラリを含めることも可能です.</li>
</ul></li>
</ul>
<hr />
<ul>
<li><p><code>package.yaml</code>ファイルはプロジェクトの設定を記入するファイルです.</p>
<ul>
<li><p>Hackageなどの外部のライブラリを利用する場合には,<code>package.yaml</code>内の<code>dependencies:</code>部分に,使用したいライブラリを記述します.</p></li>
<li><p>Stackは<code>stack setup</code>コマンドによって,package.yaml内に記述されたライブラリの依存関係を解決するresolverを自動で選択しますが,
自分で使いたいresolverを<code>package.yaml</code>内の<code>resolver:</code>に続けて書くことで,指定することも可能です.</p></li>
<li><p>その他実行可能ファイルの設定や,コンパイルオプションなどを指定することができます.</p></li>
<li><p><code>package.yaml</code> の設定に従って,プロジェクトの設定ファイル <code>test.cabal</code>が自動で作成されます.
基本的にstackを使っている範囲では<code>.cabal</code>ファイルを自分で編集することはありません.</p></li>
</ul></li>
</ul>
<hr />
<ul>
<li><p><code>stack.yaml</code>ファイルは,stackの設定を記入します</p>
<ul>
<li>resolverに含まれないライブラリ(自分のGitHub上にあるライブラリなど)を指定する,あるいはあえてresolverとは異なるバージョンを利用するときなどには
<code>extra-deps:</code>に続けて,使用したいライブラリのレポジトリやバージョンを明示します.</li>
</ul></li>
</ul>
</div>
<p>これらの利用法は,今後ライブラリを使用し始めたときに改めて学習すれば大丈夫なので,取り敢えずプログラムを作成してきましょう.</p>
<p><code>app/Main.hs</code>をテキストエディタで開いて編集していきましょう.</p>
<p><code>app/Main.hs</code>を開くと,以下のようなファイルになっているかと思います. Haskellのプログラムをコンパイルした実行可能ファイルでは,<code>main =</code> 内の記述が実行されます.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Main</span> (main) <span class="kw">where</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Lib</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> someFunc</span></code></pre></div>
<p>現在は<code>sumFunc</code>という関数が実行されます. <code>sumFunc</code>は <code>import Lib</code> の記述によって, <code>src/Lib.hs</code>からimportされています. <code>src/Lib.hs</code>を開くと,</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Lib</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    ( someFunc</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    ) <span class="kw">where</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="ot">someFunc ::</span> <span class="dt">IO</span> ()</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>someFunc <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;someFunc&quot;</span></span></code></pre></div>
<p>という風に<code>someFunc</code>が定義されています. プログラム内の <code>someFunc :: IO ()</code> は<code>someFunc</code>の型注釈です. <code>IO ()</code> というのは,標準入出力 <code>IO</code> において, アクション <code>()</code> を実行するという意味ですが,ここではそれぞれの詳細は省きます. <code>putStrLn</code> は文字列を引数にとり,標準入出力<code>IO</code>に受け取った文字列を出力するというアクション<code>()</code>を返す関数であり,ここでは,<code>"someFunc"</code>という文字列が出力されます. この<code>"someFunc"</code> 部分を <code>"Hello World"</code>に書き換えれば,Hello Worldは実行できます.関数の定義はこのあと徐々に扱いますが, someFuncは,引数を取らないので関数というよりは実際には値です.</p>
<p><code>Lib.hs</code> に<code>helloWorld</code>と出力する値<code>helloWorld</code>を追加し,全体を以下のように書き換えましょう.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Lib</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    ( someFunc</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    , helloWorld</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    ) <span class="kw">where</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="ot">someFunc ::</span> <span class="dt">IO</span> ()</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>someFunc <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;someFunc&quot;</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="ot">helloWorld ::</span> <span class="dt">IO</span> ()</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>helloWorld <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;Hello World&quot;</span></span></code></pre></div>
<p><code>module Lib () where</code> はモジュール宣言で,他のプログラムから<code>import Lib</code>で,<code>src/Lib.hs</code>内に定義された関数や値などの内 <code>()</code>内に記述されたものを読み込むことができるようにします.
作成した値<code>helloWorld</code>を<code>()</code>内に<code>helloWorld</code>を追加することを忘れないようにしましょう.</p>
<p>併せて <code>app/Main.hs</code> を書き換えて,作成した<code>helloWorld</code>を実行しましょう.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Main</span> (main) <span class="kw">where</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Lib</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> helloWorld</span></code></pre></div>
<p>このプログラムをコンパイルして得られる実行可能ファイルの名前などは,<code>package.yaml</code>内で定義されています.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="fu">ghc-options</span><span class="kw">:</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Wall</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Wcompat</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Widentities</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Wincomplete-record-updates</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Wincomplete-uni-patterns</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Wmissing-export-lists</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Wmissing-home-modules</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Wpartial-fields</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Wredundant-constraints</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="fu">library</span><span class="kw">:</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">source-dirs</span><span class="kw">:</span><span class="at"> src</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a><span class="fu">executables</span><span class="kw">:</span></span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">hello-world-exe</span><span class="kw">:</span></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">main</span><span class="kw">:</span><span class="at">                Main.hs</span></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">source-dirs</span><span class="kw">:</span><span class="at">         app</span></span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">ghc-options</span><span class="kw">:</span></span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -threaded</span></span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -rtsopts</span></span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -with-rtsopts=-N</span></span>
<span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">dependencies</span><span class="kw">:</span></span>
<span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> hello-world</span></span></code></pre></div>
<p><code>ghc-options:</code> 以下の項目はghcのコンパイルオプションであり,<code>W</code>で始まるいずれのオプションもコンパイル時の<code>Warning</code>を追加するものです. これらのコンパイルオプションがあると,プログラムの品質を高めることができますが, 利用していてWarningが邪魔に感じた場合は,すべて削除しても問題ありません(
その場合は以下のように,<code>ghc-options:</code>部分を<code>#</code>でコメントアウトしてください.)</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co">#ghc-options:</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="fu">library</span><span class="kw">:</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">source-dirs</span><span class="kw">:</span><span class="at"> src</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="fu">executables</span><span class="kw">:</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">hello-world-exe</span><span class="kw">:</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">main</span><span class="kw">:</span><span class="at">                Main.hs</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">source-dirs</span><span class="kw">:</span><span class="at">         app</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">ghc-options</span><span class="kw">:</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -threaded</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -rtsopts</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -with-rtsopts=-N</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">dependencies</span><span class="kw">:</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> hello-world</span></span></code></pre></div>
<p>特に,本講義資料では,品質よりも分かりやすさを優先してできるだけシンプルな実装を紹介する他,事例としてあえて間違ったコードを入力する場面も存在します. そのままサンプルを入力すると多数のWarningが表示されることになるので,以下の説明中で登場する出力結果ではこれらのオプションはすべて切った状態のものとなっている点に留意してください.</p>
<p><code>library:</code>以下の記述で,利用するライブラリのPATH,<code>executables:</code>以下の記述で実行可能ファイルについて記述されています. ここでは, executableとして’app’フォルダ内にある’Main.hs’が’hello-world-exe’という名称でコンパイルされることが書かれています.<code>ghc-options:</code>以下は,コンパイル時のオプションを設定していますが,ここでは詳細は省略します.</p>
<p><code>Main.hs</code>以外のファイルをここに追加すれば,いくらでも実行可能ファイルは増やすことができます.</p>
<p><code>hello-world-exe</code>部分をもっと短い名前に変更することも可能です.なお生成される実行可能ファイルはMacでは<code>hello-world-exe</code>,Windowsでは<code>hello-world-exe.exe</code>になるので注意してください.</p>
<p>それでは,以下のコマンドでこのプロジェクトをbuildして,実行してみましょう.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ex">stack</span> build</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="ex">stack</span> exec hello-world-exe</span></code></pre></div>
<p><code>stack build</code>のあと,プログラムにミスがなければ以下のように出力されるはずです(一部省略しています).</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> stack build</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="ex">hello-world</span><span class="op">&gt;</span> build <span class="er">(</span><span class="ex">lib</span> + exe<span class="kw">)</span> <span class="ex">with</span> ghc-9.6.4</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Preprocessing</span> library for hello-world-0.1.0.0..</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="ex">Building</span> library for hello-world-0.1.0.0..</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="ex">[1</span> of 2] Compiling Lib [Source file changed]</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="ex">Preprocessing</span> executable <span class="st">&#39;hello-world-exe&#39;</span> for hello-world-0.1.0.0..</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="ex">Building</span> executable <span class="st">&#39;hello-world-exe&#39;</span> for hello-world-0.1.0.0..</span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="ex">[1</span> of 2] Compiling Main [Source file changed]</span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a><span class="ex">[3</span> of 3] Linking .stack-work/dist/x86_64-osx/ghc-9.6.4/build/hello-world-exe/hello-world-exe [Objects changed]</span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a><span class="ex">hello-world</span><span class="op">&gt;</span> copy/register</span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="ex">Registering</span> library for hello-world-0.1.0.0..</span></code></pre></div>
<p>どこかで,タイプミスなどがあると例えば以下のようなエラーが表示される可能性もあります(一部省略しています).</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ex">hello-world</span><span class="op">&gt;</span> build <span class="er">(</span><span class="ex">lib</span> + exe<span class="kw">)</span> <span class="ex">with</span> ghc-9.6.4</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="ex">Preprocessing</span> library for hello-world-0.1.0.0..</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Building</span> library for hello-world-0.1.0.0..</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="ex">Preprocessing</span> executable <span class="st">&#39;hello-world-exe&#39;</span> for hello-world-0.1.0.0..</span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="ex">Building</span> executable <span class="st">&#39;hello-world-exe&#39;</span> for hello-world-0.1.0.0..</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="ex">[1</span> of 2] Compiling Main [Source file changed]</span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a><span class="ex">/Users/akagi/Documents/Programs/Haskell/blog/hello-world/app/Main.hs:6:8:</span> error: <span class="pp">[</span><span class="ss">GHC</span><span class="pp">-</span><span class="ss">88464</span><span class="pp">]</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>    <span class="ex">Variable</span> not in scope: hellWorld :: IO <span class="er">(</span><span class="kw">)</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>    <span class="ex">Suggested</span> fix: Perhaps use ‘helloWorld’ <span class="er">(</span><span class="ex">imported</span> from Lib<span class="kw">)</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a>  <span class="kw">|</span></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span> <span class="kw">|</span> <span class="ex">main</span> = hellWorld</span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>  <span class="kw">|</span>        <span class="ex">^^^^^^^^^</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a><span class="ex">Error:</span> <span class="pp">[</span><span class="ss">S</span><span class="pp">-</span><span class="ss">7282</span><span class="pp">]</span></span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a>       <span class="ex">Stack</span> failed to execute the build plan.</span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a>       <span class="ex">While</span> executing the build plan, Stack encountered the error:</span>
<span id="cb12-19"><a href="#cb12-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-20"><a href="#cb12-20" aria-hidden="true" tabindex="-1"></a>       <span class="ex">[S-7011]</span></span>
<span id="cb12-21"><a href="#cb12-21" aria-hidden="true" tabindex="-1"></a>       <span class="ex">While</span> building package hello-world-0.1.0.0</span>
<span id="cb12-22"><a href="#cb12-22" aria-hidden="true" tabindex="-1"></a>       <span class="ex">Process</span> exited with code: ExitFailure 1</span></code></pre></div>
<p>上のエラーでは, <code>Main.hs</code>の6行目で使用されている,<code>hellWorld</code>が定義されていないという意味になります.
<code>helloWorld</code>と<code>o</code>を追加して正しい名称にしたあともう一度 <code>stack build</code>をしてみましょう.</p>
<p><code>stack exec hello-world-exe</code>の後,<code>Hello World</code>と出力されていれば成功です.</p>
<p>なお,build と exec を併せて一つのコマンド<code>stack run</code> で代替することも可能です.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> stack run hello-world-exe</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="ex">hello-world</span><span class="op">&gt;</span> build <span class="er">(</span><span class="ex">lib</span> + exe<span class="kw">)</span> <span class="ex">with</span> ghc-9.6.4</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Preprocessing</span> library for hello-world-0.1.0.0..</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="ex">Building</span> library for hello-world-0.1.0.0..</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="ex">Preprocessing</span> executable <span class="st">&#39;hello-world-exe&#39;</span> for hello-world-0.1.0.0..</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="ex">Building</span> executable <span class="st">&#39;hello-world-exe&#39;</span> for hello-world-0.1.0.0..</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="ex">hello-world</span><span class="op">&gt;</span> copy/register</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="ex">Registering</span> library for hello-world-0.1.0.0..</span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World</span></code></pre></div>
]]></description>
    <pubDate>Fri, 18 Oct 2024 00:00:00 UT</pubDate>
    <guid>/lectures/iap2.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>代数プログラミング入門 Ch1 イントロダクション</title>
    <link>/lectures/iap1.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#はじめに" id="toc-はじめに"><span class="toc-section-number">1</span> はじめに</a>
<ul>
<li><a href="#本資料の読み方" id="toc-本資料の読み方"><span class="toc-section-number">1.1</span> 本資料の読み方</a></li>
<li><a href="#haskellとは" id="toc-haskellとは"><span class="toc-section-number">1.2</span> Haskellとは</a></li>
<li><a href="#関数型言語の雰囲気" id="toc-関数型言語の雰囲気"><span class="toc-section-number">1.3</span> 関数型言語の雰囲気</a></li>
<li><a href="#関数型だと何が嬉しいのか" id="toc-関数型だと何が嬉しいのか"><span class="toc-section-number">1.4</span> 関数型だと何が嬉しいのか</a></li>
<li><a href="#設計も関数型で" id="toc-設計も関数型で"><span class="toc-section-number">1.5</span> 設計も関数型で</a>
<ul>
<li><a href="#雑談なんでhaskell" id="toc-雑談なんでhaskell"><span class="toc-section-number">1.5.1</span> 雑談:なんでHaskell?</a></li>
</ul></li>
</ul></li>
</ul>
</div>
<p>(執筆準備中)</p>
<p>代数の基礎と,代数による仕様記述,Haskellの基礎に関して書いていく予定です.
現在執筆中のため, 構成及び内容が今後変わります.</p>
<h1 data-number="1" id="はじめに"><span class="header-section-number">1</span> はじめに</h1>
<p>本資料は,正規の大学の科目ではなく, 学内での学生,教員の勉強会において使用する予定のものとなります. したがって,講義形式で作成しますが,通常の講義よりはかなり緩めの記述,内容が含まれます.</p>
<p>本講義では,関数型プログラミング言語Haskellの基礎,使用法,及び設計に関して扱います.
想定する履修者はPythonやJavaScriptなどの手続き型言語の使用経験はあるが,関数型言語を利用したことがない大学学部生です. 関数型言語の特徴を説明する際に手続き型言語の例としてPythonでの記述が出てきますが,Pythonの文法等に関しては既知のものとして扱います.(こちらはもとも官庁用の報告書として執筆したものを(大幅に)改変したものですので,もともとの資料ではVBAやJavaを事例として用いていました.)</p>
<p>また,本講義では代数学を利用したプログラミングの設計に関する方法論も扱います.集合論や代数学に関する知識は前提とせず,初歩から扱いますので,数学に関する前提知識は特に必要ありません. なお,本講義は集合論や代数学の習得を目的としているわけではないので,これらに関してはかなり簡略化した説明になります.専門的に数学を学びたい方向けの講義ではないことを理解したうえで受講してください.</p>
<p>一方で,CLIの操作やディレクトリの概念,ソフトウェアのインストール,テキストエディタの設定などの基本的なPC操作に関しては,扱いません. それらが分からない方は,それらを自分で学習するか,それらを扱っている講義を履修してから受講することをおすすめします.</p>
<h2 data-number="1.1" id="本資料の読み方"><span class="header-section-number">1.1</span> 本資料の読み方</h2>
<p>(執筆中)</p>
<h2 data-number="1.2" id="haskellとは"><span class="header-section-number">1.2</span> Haskellとは</h2>
<p><a href="https://www.haskell.org"><code>Haskell</code></a>は,1987年に生まれた<strong>静的型付けの純粋関数型言語</strong>です. Haskellには,様々な特徴がありますが,本講義では,特に代数的データ型による,代数的なプログラミングに焦点をあてて,代数的な仕様記述とHaskellの関連を中心に議論します.</p>
<p>Haskellがどんな言語で,どのようなメリットがあるのか,という話は今後本講義でも扱いますが,ここでは深入りしません. 取り敢えず,どのような言語かを細かく説明する前に,関数型言語の雰囲気を掴んでもらおうと思います.</p>
<h2 data-number="1.3" id="関数型言語の雰囲気"><span class="header-section-number">1.3</span> 関数型言語の雰囲気</h2>
<p>HaskellはLispやOCamlなどと同じ関数型言語です.関数型言語は関数によってプログラムを構築していく点にありますが,近年ではこのスタイルは関数型言語の専売特許というわけではなくなりつつあり,関数で書くことの特別さは,薄れつつあります. なので,ここでは,関数型言語の細かい機能について見る前に,関数型言語の考え方について,手続き型言語との違いという観点で見ていきましょう.</p>
<p>関数型言語でプログラミングををするとは,<strong>｢それが何か｣</strong>を分解して書いていくことです.
関数型プログラミングが宣言的であると言われる所以はそこにあります.手続き型言語が,｢何をどうするのか｣という手続きを書くのにたいして,｢欲しいものはなにか｣を宣言します.</p>
<p>こちらの(Haskell界隈では)有名な<a href="https://bartoszmilewski.com/2014/11/04/category-the-essence-of-composition/">ブログ</a>では,関数型言語の考え方について以下のように説明しています.</p>
<blockquote>
<p>Functional programmers have a peculiar way of approaching problems. They start by asking very Zen-like questions. For instance, when designing an interactive program, they would ask: What is interaction? When implementing Conway’s Game of Life, they would probably ponder about the meaning of life.</p>
</blockquote>
<ul>
<li>翻訳(DeepL大先生)</li>
</ul>
<blockquote>
<p>関数型プログラマーは問題への取り組み方が独特だ. 禅問答のような質問から始めるのだ.例えば,インタラクティブなプログラムを設計するとき,彼らは「インタラクションとは何か?コンウェイの「人生ゲーム」を実装するとき,彼らはおそらく人生の意味について熟考するだろう.</p>
</blockquote>
<p>手続き型プログラミングと関数型プログラミングの違いは色々とありますが,取り敢えずここでは,この文章に習って</p>
<ul>
<li>関数型プログラミング: <strong>｢それが何か｣</strong>を問い,<strong>｢それが何か｣</strong>をプログラムする.</li>
</ul>
<p>という観点に注目します. 例として以下の｢ウサギの問題｣について考えてみましょう.</p>
<div class="note">
<p><strong>ウサギの問題</strong></p>
<ul>
<li><p>1つがいのウサギは,生まれてから2ヶ月後から毎月1つがいずつのウサギを産む</p></li>
<li><p>ウサギが死ぬことはない</p></li>
<li><p>この条件の下で,生まれたばかりの1つがいのウサギは1年の間に何つがいのウサギになるか</p></li>
</ul>
</div>
<p>これについて,取り敢えず12ヶ月までのつがいの数をプログラムを用いて計算してみましょう.</p>
<p>まずは手続き型の考え方で数を数えてみます. 手続き型言語的には,｢ウサギのつがいの数｣を｢どのように求めるのかという手続き｣をプログラムに記述します.</p>
<div class="note">
<details>
<summary>
note
</summary>
<p>学生にプログラミングを教えているとこれくらいのプログラムは,for文,if文,代入などの概念をちらっと読んだだけで簡単にできる人もいれば,数時間教えてもできない人もいます.これが何によって異なるのかというのは,長年の謎で,教育の難しいところです.</p>
<p>しかも,プログラムを教える人間は大抵前者なので,教師も学生も何が分からないのか分からないという事態によくなってしまいますね.</p>
<p>しかし,大抵の場合後者の人に話を聞いていくと,そもそもこの手続きを日本語であっても書けないという人が多いようです. なので,本当に苦労するタイプの人は,パワーポイントでウサギの絵を並べてルールにのっとってウサギが増えていく様子を小学生に教える日本語資料を作ってというような作業を一緒にすることになります.</p>
これを書きながらこういった学生が実は関数型なら簡単だったりしないだろうか,と考えていますが,楽観的に過ぎるだろうなという予感がしています.
</details>
</div>
<p>いろいろな方法がありますが(何が起きて,次に何が起きて,というふうに手続きを考える)｢手続き型言語っぽい数え方｣を一つ考えると,例えば</p>
<div class="note">
<ul>
<li><p>つがいは,新生ウサギ(0ヶ月)→子供ウサギ(1ヶ月)→大人うさぎ(2ヶ月)の順で変化する</p></li>
<li><p>大人うさぎのつがいは毎月1つの新生うさぎのつがいを産む</p></li>
<li><p>0ヶ月の新生うさぎの(こどもが産めない),子供ウサギ,大人うさぎの数を記録する</p>
<ul>
<li>新生 1</li>
<li>子供 0</li>
<li>大人 0</li>
</ul></li>
<li><p>1月たつと</p>
<ul>
<li>大人と同じ数だけ新生が生まれる</li>
<li>子供が大人になる</li>
<li>新生が子供になる</li>
</ul></li>
<li><p>これを12ヶ月繰り返す</p></li>
</ul>
</div>
<p>というように｢何がどうなる｣という｢手順｣を書いた説明になるかと思います.
授業では大抵,これをフローチャートに書き直させて,フローチャートをプログラムに直すという作業をさせますが,そこは省略します.</p>
<p>これをPythonのプログラムにすると以下のようになり,結果は<code>233</code>となります.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 初期化</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>months <span class="op">=</span> <span class="dv">12</span>  <span class="co"># シミュレートする月数</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="co">#1ヶ月目の状態</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>new_born_pairs <span class="op">=</span> <span class="dv">0</span> <span class="co">#新生のつがいの数</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>young_pairs <span class="op">=</span> <span class="dv">1</span>  <span class="co"># 子供のつがいの数</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>mature_pairs <span class="op">=</span> <span class="dv">0</span>  <span class="co"># 大人のつがいの数</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="co"># 各月におけるうさぎのつがいの数をシミュレート</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> month <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>, months <span class="op">+</span> <span class="dv">1</span>):</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 大人と同じ数だけ新生が生まれる</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    new_born_pairs <span class="op">=</span> mature_pairs</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 子供が大人になる</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>    mature_pairs <span class="op">+=</span> young_pairs</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 新生が子供になる</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    young_pairs <span class="op">=</span> new_born_pairs</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a><span class="co"># 成熟したつがいと若いつがいの合計</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>total_pairs <span class="op">=</span> mature_pairs <span class="op">+</span> young_pairs</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(total_pairs)</span></code></pre></div>
<p>こういった考え方が,いわゆる手続き型的な考え方とプログラミングの方法になります.</p>
<p>では,関数型の考え方とはどのようなものでしょうか. 先ほど引用したように,関数型では,それが何かを考えます.つまり,ここで問われている｢つがいの数｣を抽象化して,その特徴を記述するわけですね.</p>
<p>特定の数がなにかのルールに基づいて段々と増えていくというときに,それを並べてみて,法則性を探るということが一般的に行われます.これは,高校数学で扱う漸化式の考え方ですね.</p>
<p>月ごとのつがいの数を,並べてみると以下のようになります. そして,その増え方を計算してみると一定のルールに基づいていることが分かります.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">月</th>
<th style="text-align: center;">つがいの数</th>
<th style="text-align: center;">計算</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">2</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">1 + 1</td>
</tr>
<tr class="even">
<td style="text-align: center;">3</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">1 + 2</td>
</tr>
<tr class="odd">
<td style="text-align: center;">4</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">2 + 3</td>
</tr>
<tr class="even">
<td style="text-align: center;">5</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">3 + 5</td>
</tr>
<tr class="odd">
<td style="text-align: center;">6</td>
<td style="text-align: center;">13</td>
<td style="text-align: center;">5 + 8</td>
</tr>
<tr class="even">
<td style="text-align: center;">7</td>
<td style="text-align: center;">21</td>
<td style="text-align: center;">8 + 13</td>
</tr>
<tr class="odd">
<td style="text-align: center;">8</td>
<td style="text-align: center;">34</td>
<td style="text-align: center;">13 + 21</td>
</tr>
<tr class="even">
<td style="text-align: center;">9</td>
<td style="text-align: center;">55</td>
<td style="text-align: center;">21 + 34</td>
</tr>
<tr class="odd">
<td style="text-align: center;">10</td>
<td style="text-align: center;">89</td>
<td style="text-align: center;">34 + 55</td>
</tr>
<tr class="even">
<td style="text-align: center;">11</td>
<td style="text-align: center;">144</td>
<td style="text-align: center;">55 + 89</td>
</tr>
<tr class="odd">
<td style="text-align: center;">12</td>
<td style="text-align: center;">233</td>
<td style="text-align: center;">89 + 144</td>
</tr>
</tbody>
</table>
<p>実はこのウサギのつがいの合計どの月でもは,1,1,2,3,5,8という風に前々月と前月のつがいの合計になることが知られています. このような,前の数字と前の前の数字の和によって次の数字を作る数をフィボナッチ数といいます.</p>
<div class="warn">
<p>※
普通フィボナッチ数というと,0から始まりますが,ここではウサギの例で考えたいので1から始まることにします.</p>
</div>
<p>フィボナッチ数を漸化式として捉えると,第n月のフィボナッチ数の正体は以下のように得られます.</p>
<div class="note">
<p><span class="math display">\[ F_0 = 1 \]</span>
<span class="math display">\[ F_1 = 1 \]</span>
<span class="math display">\[ F_n = F_{n-1} + F_{n-2} (n &gt;= 2)  \]</span></p>
</div>
<p>したがって,上の条件での12ヶ月後のウサギの数はなにかという問題は,フィボナッチ数の第12番めの項<span class="math inline">\(F_{12}\)</span>がなにかという問題であり,フィボナッチ数とはなにかといえば上の漸化式である,という風に考えることができます.</p>
<p>実際に計算手順を,一つひとつ追っていくのではなく,このように求めたい対象がなにかということを考えて,抽象化し記述するというのが,関数型言語の基本的な考え方になります.</p>
<p>ちなみに,これをHaskellで書くと以下のようになり,上の漸化式の書き方とかなり近い対応関係があることが分かります.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>fib <span class="dv">0</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>fib <span class="dv">1</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>fib n <span class="ot">=</span> fib (n <span class="op">-</span> <span class="dv">1</span>) <span class="op">+</span> fib (n <span class="op">-</span> <span class="dv">2</span>)</span></code></pre></div>
<div class="warn">
<p>※メモ化とかそういったことは,取り敢えずここでは置いておきます
(この辺の数学的定義そのままだと,実用には向かない問題は,後ほど扱います.)</p>
</div>
<p>これを実行してみると確かに正しい数が求められています.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span> :{</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="kw">|</span> <span class="ex">fib</span> :: Int <span class="at">-</span><span class="op">&gt;</span> Int</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="kw">|</span> <span class="ex">fib</span> 0 = 1</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="kw">|</span> <span class="ex">fib</span> 1 = 1</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="kw">|</span> <span class="ex">fib</span> n = fib <span class="er">(</span><span class="ex">n-1</span><span class="kw">)</span> <span class="ex">+</span> fib <span class="er">(</span><span class="ex">n-2</span><span class="kw">)</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="kw">|</span> <span class="ex">:}</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span> fib 12</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="ex">233</span></span></code></pre></div>
<p>当然フィボナッチ数の漸化式は広く知られていますし, むしろ最初から漸化式として学習することが多いでしょう. したがって, Pythonでの実装もフィボナッチ数が漸化式であるという前提で,以下のように書くほうが一般的です.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> Fib(n):</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> n <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">1</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> n <span class="op">==</span> <span class="dv">1</span>:</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">1</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> Fib(n<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span> Fib(n<span class="op">-</span><span class="dv">2</span>)</span></code></pre></div>
<p>また,最近では,PythonやJavaScriptなどの手続き型の言語にも,関数型の考え方が導入され,<strong>内包表記</strong>,<strong>再帰</strong>,<strong>ラムダ式</strong>などの関数型のシンタックスも一般的に使われるようになっています(これらの詳細についてはこのあとやっていきます).逆にHaskell等の関数型言語においても,手続き型のほうが便利な場合には手続き型の記法を利用します.</p>
<p>したがって,現在では関数型的な考え方と,手続き型の考え方というのは,それほど明確に分かれるものではありません.</p>
<p>ここでは,手続き型の考え方と関数型の考え方の違いを説明するために,Pythonの事例をあえてあまり用いられない方法で書きましたが,大げさに書けば手続き型と関数型の考え方の違いとはこのような考え方,問題へのアプローチの仕方にあります.</p>
<h2 data-number="1.4" id="関数型だと何が嬉しいのか"><span class="header-section-number">1.4</span> 関数型だと何が嬉しいのか</h2>
<p>前節では,関数型の考え方に関して簡単な事例をしましました. 関数型の考え方がしっくり来る人は,それが関数型を使う理由になるでしょうが,しっくり来るという抽象的な話ではなく,具体的な関数型言語のメリット/デメリットをこの節では紹介します. なお,関数型言語と一言でいっても,様々な言語がありますし,前述のように手続き型と関数型が明確に分かれる時代でもありません.</p>
<p>関数型言語の設計仕様は,関数型です. 手続き型言語の仕様定義にもいろいろな種類があります.</p>
<p>(執筆中)
例の論文のまとめ</p>
<p>厳密な仕様記述を書くとプログラムと1体1対応になる.そもそもHaskellで書けばプログラムと仕様が対応関係を持つようになりますし,数式への変換も容易です.</p>
<p>そういった意図もあり,私が内閣府で統計作成を市ていた時代には, 数式による定義,とプログラムのペアを対応付けたOSSとして基幹統計を開発することを提唱していましたが,それは色々な制約でまだ実現していません.</p>
<h2 data-number="1.5" id="設計も関数型で"><span class="header-section-number">1.5</span> 設計も関数型で</h2>
<p>(執筆中)</p>
<h3 data-number="1.5.1" id="雑談なんでhaskell"><span class="header-section-number">1.5.1</span> 雑談:なんでHaskell?</h3>
<p>(執筆中)</p>
]]></description>
    <pubDate>Fri, 18 Oct 2024 00:00:00 UT</pubDate>
    <guid>/lectures/iap1.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>特別講義(データサイエンス)演習回答</title>
    <link>/lectures/2024-03-29-special-lecture-datascience-answer.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#演習" id="toc-演習"><span class="toc-section-number">1</span> 3.3 演習</a></li>
<li><a href="#演習-1" id="toc-演習-1"><span class="toc-section-number">2</span> 3.4 演習</a></li>
<li><a href="#演習-2" id="toc-演習-2"><span class="toc-section-number">3</span> 3.5 演習</a></li>
<li><a href="#演習-3" id="toc-演習-3"><span class="toc-section-number">4</span> 3.6 演習</a></li>
<li><a href="#演習-4" id="toc-演習-4"><span class="toc-section-number">5</span> 3.8 演習</a></li>
<li><a href="#演習-5" id="toc-演習-5"><span class="toc-section-number">6</span> 3.9 演習</a></li>
<li><a href="#演習-6" id="toc-演習-6"><span class="toc-section-number">7</span> 5.9 演習</a></li>
<li><a href="#演習-7" id="toc-演習-7"><span class="toc-section-number">8</span> 5.10 演習</a></li>
<li><a href="#演習-8" id="toc-演習-8"><span class="toc-section-number">9</span> 5.11 演習</a></li>
<li><a href="#演習-9" id="toc-演習-9"><span class="toc-section-number">10</span> 5.13 演習</a></li>
<li><a href="#演習①" id="toc-演習①"><span class="toc-section-number">11</span> 5.17 演習①</a></li>
<li><a href="#演習②" id="toc-演習②"><span class="toc-section-number">12</span> 5.17 演習②</a></li>
<li><a href="#演習-10" id="toc-演習-10"><span class="toc-section-number">13</span> 6.3 演習</a></li>
<li><a href="#演習-11" id="toc-演習-11"><span class="toc-section-number">14</span> 6.4.1 演習</a></li>
<li><a href="#演習-12" id="toc-演習-12"><span class="toc-section-number">15</span> 6.4.2 演習</a></li>
<li><a href="#演習-13" id="toc-演習-13"><span class="toc-section-number">16</span> 6.4.2.4 演習</a></li>
<li><a href="#演習-14" id="toc-演習-14"><span class="toc-section-number">17</span> 6.4.2.5 演習</a></li>
<li><a href="#section" id="toc-section"><span class="toc-section-number">18</span> 7.1</a></li>
<li><a href="#演習-15" id="toc-演習-15"><span class="toc-section-number">19</span> 3.3 演習</a></li>
<li><a href="#演習-16" id="toc-演習-16"><span class="toc-section-number">20</span> 3.4 演習</a></li>
<li><a href="#演習-17" id="toc-演習-17"><span class="toc-section-number">21</span> 3.5 演習</a></li>
<li><a href="#演習-18" id="toc-演習-18"><span class="toc-section-number">22</span> 3.6 演習</a></li>
<li><a href="#演習-19" id="toc-演習-19"><span class="toc-section-number">23</span> 3.8 演習</a></li>
<li><a href="#演習-20" id="toc-演習-20"><span class="toc-section-number">24</span> 3.9 演習</a></li>
<li><a href="#演習-21" id="toc-演習-21"><span class="toc-section-number">25</span> 5.9 演習</a></li>
<li><a href="#演習-22" id="toc-演習-22"><span class="toc-section-number">26</span> 5.10 演習</a></li>
<li><a href="#演習-23" id="toc-演習-23"><span class="toc-section-number">27</span> 5.11 演習</a></li>
<li><a href="#演習-24" id="toc-演習-24"><span class="toc-section-number">28</span> 5.13 演習</a></li>
<li><a href="#演習①-1" id="toc-演習①-1"><span class="toc-section-number">29</span> 5.17 演習①</a></li>
<li><a href="#演習②-1" id="toc-演習②-1"><span class="toc-section-number">30</span> 5.17 演習②</a></li>
<li><a href="#演習-25" id="toc-演習-25"><span class="toc-section-number">31</span> 6.3 演習</a></li>
<li><a href="#演習-26" id="toc-演習-26"><span class="toc-section-number">32</span> 6.4.1 演習</a></li>
<li><a href="#演習-27" id="toc-演習-27"><span class="toc-section-number">33</span> 6.4.2 演習</a></li>
<li><a href="#演習-28" id="toc-演習-28"><span class="toc-section-number">34</span> 6.4.2.4 演習</a></li>
<li><a href="#演習-29" id="toc-演習-29"><span class="toc-section-number">35</span> 6.4.2.5 演習</a></li>
<li><a href="#演習-30" id="toc-演習-30"><span class="toc-section-number">36</span> 9.1-9.2 演習</a></li>
<li><a href="#演習-31" id="toc-演習-31"><span class="toc-section-number">37</span> 9.5 演習</a></li>
<li><a href="#演習-32" id="toc-演習-32"><span class="toc-section-number">38</span> 9.3-9.4 / 9.10-9.12 演習</a></li>
</ul>
</div>
<p><a href="https://yakagika.github.io/lectures/2024-03-29-special-lecture-datascience.html">特別講義(データサイエンス)</a>の演習回答例です.</p>
<p>講義中の学生の回答を参考にSAにまとめてもらったものです.
修正点などありましたら,教員に連絡してください.</p>
<h1 data-number="1" id="演習"><span class="header-section-number">1</span> 3.3 演習</h1>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 飴が40個あります.7人で同じ数ずつ分けると1人分は何個で何個あまりますか?</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="co"># 1人分の個数</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="dv">40</span><span class="op">//</span><span class="dv">7</span>)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="co"># 余り</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="dv">40</span><span class="op">%</span><span class="dv">7</span>)</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="co"># 底辺5cm,高さ4cmの三角形の面積はいくつですか?</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="dv">5</span><span class="op">*</span><span class="dv">4</span><span class="op">*</span><span class="fl">0.5</span>)</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="co"># 2の8乗はいくつですか?</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="dv">2</span><span class="op">**</span><span class="dv">8</span>)</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="co"># 累乗と掛け算の計算順序を丸括弧を使った計算で確かめてください.</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="dv">2</span><span class="op">+</span><span class="dv">3</span><span class="op">*</span><span class="dv">4</span>)</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>((<span class="dv">2</span><span class="op">+</span><span class="dv">3</span>)<span class="op">*</span><span class="dv">4</span>)</span></code></pre></div>
<h1 data-number="2" id="演習-1"><span class="header-section-number">2</span> 3.4 演習</h1>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 変数を利用して以下の猫型ロボットのBMIを計算してください</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="co"># BMI = 体重(kg)÷身長(m)の2乗</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="co"># 猫型ロボットの身長 129.3cm</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="co"># 猫型ロボットの体重 129.3kg</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>height_cm <span class="op">=</span> <span class="fl">129.3</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>weight <span class="op">=</span> <span class="fl">129.3</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>height_m <span class="op">=</span> height_cm<span class="op">/</span><span class="dv">100</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>BMI <span class="op">=</span> weight<span class="op">/</span>(height_m<span class="op">**</span><span class="dv">2</span>)</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(BMI)</span></code></pre></div>
<h1 data-number="3" id="演習-2"><span class="header-section-number">3</span> 3.5 演習</h1>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> <span class="st">&#39;abcdefg&#39;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="co"># &#39;abcdefg&#39; から &#39;cde&#39;をスライスで抜き出してください.</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(x[<span class="dv">2</span>:<span class="dv">5</span>])</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="co"># x = &#39;abcdefg&#39;と定義して, xに操作を加えて&#39;abfg&#39;を作ってください.</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(x[<span class="dv">0</span>:<span class="dv">2</span>] <span class="op">+</span> x[<span class="dv">5</span>:])</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="co"># x = &#39;abcdefg&#39;と定義して, xに操作を加えて&#39;bbbeee&#39;を作ってください.</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(x[<span class="dv">1</span>]<span class="op">*</span><span class="dv">3</span> <span class="op">+</span> x[<span class="dv">4</span>]<span class="op">*</span><span class="dv">3</span>)</span></code></pre></div>
<h1 data-number="4" id="演習-3"><span class="header-section-number">4</span> 3.6 演習</h1>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>xs <span class="op">=</span> [[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>],[<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>],[<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="co"># xsの長さを求める</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="bu">len</span>(xs))</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="co"># スライスを使って以下を抽出する</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="co">## [[4,5,6],[7,8,9]]</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(xs[<span class="dv">1</span>:])</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="co">## [[1,2,3]]</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(xs[:<span class="dv">1</span>])</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a><span class="co">## [[7,8,9]]</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(xs[<span class="dv">2</span>:])</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a><span class="co">## [8,9]</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(xs[<span class="dv">2</span>][<span class="dv">1</span>:])</span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a><span class="co"># [4,5,6]を[-4,-5,-6]に更新する</span></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>xs[<span class="dv">1</span>] <span class="op">=</span> [<span class="op">-</span><span class="dv">4</span>, <span class="op">-</span><span class="dv">5</span>, <span class="op">-</span><span class="dv">6</span>]</span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(xs)</span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a><span class="co"># 1 を -1に,9を-9にする</span></span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>xs[<span class="dv">0</span>][<span class="dv">0</span>] <span class="op">=</span> <span class="op">-</span><span class="dv">1</span></span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>xs[<span class="dv">2</span>][<span class="dv">2</span>] <span class="op">=</span> <span class="op">-</span><span class="dv">9</span></span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(xs)</span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a><span class="co"># [7,8,-9]のあとに,[10,11,12]を追加する</span></span>
<span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a>a <span class="op">=</span> [<span class="dv">10</span>,<span class="dv">11</span>,<span class="dv">12</span>]</span>
<span id="cb4-34"><a href="#cb4-34" aria-hidden="true" tabindex="-1"></a>xs.append(a)</span>
<span id="cb4-35"><a href="#cb4-35" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(xs)</span></code></pre></div>
<h1 data-number="5" id="演習-4"><span class="header-section-number">5</span> 3.8 演習</h1>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>fruits <span class="op">=</span> {<span class="st">&quot;リンゴ&quot;</span>:<span class="st">&quot;apple&quot;</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>		 ,<span class="st">&quot;レモン&quot;</span>:<span class="st">&quot;lemon&quot;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>		 ,<span class="st">&quot;ブドウ&quot;</span>:<span class="st">&quot;grape&quot;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>		 ,<span class="st">&quot;バナナ&quot;</span>:<span class="st">&quot;banana&quot;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>		 ,<span class="st">&quot;イチゴ&quot;</span>:<span class="st">&quot;strawberry&quot;</span>}</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(fruits)</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="co"># keyを指定してvalueにアクセス</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(fruits[<span class="st">&quot;リンゴ&quot;</span>])</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="co"># 新しいkeyとvalueの追加</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>fruits[<span class="st">&quot;モモ&quot;</span>] <span class="op">=</span> <span class="st">&quot;peach&quot;</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(fruits)</span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a><span class="co"># valueの変更</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>fruits[<span class="st">&quot;リンゴ&quot;</span>] <span class="op">=</span> <span class="st">&quot;ringo&quot;</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(fruits)</span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>fruits[<span class="st">&quot;リンゴ&quot;</span>] <span class="op">=</span> <span class="st">&quot;apple&quot;</span></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(fruits)</span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a><span class="co"># keyを指定して要素を削除</span></span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>fruits.pop(<span class="st">&quot;レモン&quot;</span>)</span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(fruits)</span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a><span class="co"># keyの一覧を取得</span></span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a>keys <span class="op">=</span> fruits.keys()</span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(keys)</span>
<span id="cb5-29"><a href="#cb5-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-30"><a href="#cb5-30" aria-hidden="true" tabindex="-1"></a><span class="co"># 値の一覧を取得</span></span>
<span id="cb5-31"><a href="#cb5-31" aria-hidden="true" tabindex="-1"></a>values <span class="op">=</span> fruits.values()</span>
<span id="cb5-32"><a href="#cb5-32" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(values)</span>
<span id="cb5-33"><a href="#cb5-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-34"><a href="#cb5-34" aria-hidden="true" tabindex="-1"></a><span class="co"># リストとして値の一覧を取得</span></span>
<span id="cb5-35"><a href="#cb5-35" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="bu">list</span>(fruits.values()))</span>
<span id="cb5-36"><a href="#cb5-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-37"><a href="#cb5-37" aria-hidden="true" tabindex="-1"></a><span class="co"># keyとvalueのペアの一覧(タプルのリスト)を取得</span></span>
<span id="cb5-38"><a href="#cb5-38" aria-hidden="true" tabindex="-1"></a>items <span class="op">=</span> fruits.items()</span>
<span id="cb5-39"><a href="#cb5-39" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(items)</span></code></pre></div>
<h1 data-number="6" id="演習-5"><span class="header-section-number">6</span> 3.9 演習</h1>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co"># ある値が偶数かどうかは,2で割った余りが0かどうかを判定することで判定できます.</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="co"># x=101,y=202として, 以下の命題の真偽をPythonで計算してください.</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> <span class="dv">101</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> <span class="dv">102</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="co"># xが偶数</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(x<span class="op">%</span><span class="dv">2</span> <span class="op">==</span> <span class="dv">0</span>)</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="co"># yが偶数</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(y<span class="op">%</span><span class="dv">2</span> <span class="op">==</span> <span class="dv">0</span>)</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="co"># xが偶数かつyが偶数</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(x<span class="op">%</span><span class="dv">2</span><span class="op">==</span><span class="dv">0</span> <span class="kw">and</span> y<span class="op">%</span><span class="dv">2</span><span class="op">==</span><span class="dv">0</span>)</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a><span class="co"># xが偶数またはyが偶数</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(x<span class="op">%</span><span class="dv">2</span><span class="op">==</span><span class="dv">0</span> <span class="kw">or</span> y<span class="op">%</span><span class="dv">2</span><span class="op">==</span><span class="dv">0</span>)</span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a><span class="co"># x+yが奇数</span></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>((x<span class="op">+</span>y)<span class="op">%</span><span class="dv">2</span> <span class="op">==</span> <span class="dv">1</span>)</span></code></pre></div>
<h1 data-number="7" id="演習-6"><span class="header-section-number">7</span> 5.9 演習</h1>
<div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/salary.csv&#39;</span>)</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="co"># ①</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.loc[<span class="dv">1</span>:<span class="dv">13</span>, <span class="st">&#39;industry&#39;</span>:<span class="st">&#39;salary&#39;</span>])</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.iloc[<span class="dv">1</span>:<span class="dv">14</span>, <span class="dv">0</span>:])</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="co"># ②</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.at[<span class="dv">4</span>, <span class="st">&#39;salary&#39;</span>])</span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.iat[<span class="dv">4</span>, <span class="dv">1</span>])</span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a><span class="co"># ③</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.loc[[<span class="dv">6</span>,<span class="dv">8</span>,<span class="dv">10</span>], [<span class="st">&#39;industry&#39;</span>]])</span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.iloc[[<span class="dv">6</span>,<span class="dv">8</span>,<span class="dv">10</span>], [<span class="dv">0</span>]])</span></code></pre></div>
<h1 data-number="8" id="演習-7"><span class="header-section-number">8</span> 5.10 演習</h1>
<div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/salary.csv&#39;</span>)</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>df.columns <span class="op">=</span> [<span class="st">&#39;Ind&#39;</span>,<span class="st">&#39;Sal&#39;</span>]</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="co"># Sal列が偶数のSal列の行</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[df[<span class="st">&#39;Sal&#39;</span>] <span class="op">%</span><span class="dv">2</span><span class="op">==</span><span class="dv">0</span> ][<span class="st">&#39;Sal&#39;</span>])</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="co"># Sal列が奇数のInd列の行</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[df[<span class="st">&#39;Sal&#39;</span>] <span class="op">%</span><span class="dv">2</span><span class="op">==</span><span class="dv">1</span> ][<span class="st">&#39;Ind&#39;</span>])</span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a><span class="co"># Ind列がInfo,Edu,Medのいずれかで,Sal列が4000以上5000未満のSal列</span></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> df.loc[<span class="dv">8</span>:<span class="dv">10</span>, <span class="st">&#39;Sal&#39;</span>]</span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(x)</span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> x[(x <span class="op">&gt;=</span> <span class="dv">4000</span>) <span class="op">&amp;</span> (x <span class="op">&lt;</span> <span class="dv">5000</span>)]</span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(y)</span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[(df[<span class="st">&#39;Ind&#39;</span>].isin([<span class="st">&#39;Information&#39;</span>, <span class="st">&#39;Academic&#39;</span>, <span class="st">&#39;Medical&#39;</span>])) <span class="op">&amp;</span> (df[<span class="st">&#39;Sal&#39;</span>] <span class="op">&gt;=</span> <span class="dv">4000</span>) <span class="op">&amp;</span> (df[<span class="st">&#39;Sal&#39;</span>] <span class="op">&lt;</span> <span class="dv">5000</span>)][<span class="st">&#39;Sal&#39;</span>])</span></code></pre></div>
<h1 data-number="9" id="演習-8"><span class="header-section-number">9</span> 5.11 演習</h1>
<div class="sourceCode" id="cb9"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/salary.csv&#39;</span>)</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>df.columns <span class="op">=</span> [<span class="st">&#39;Ind&#39;</span>,<span class="st">&#39;Sal&#39;</span>]</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="co"># columnsを日本語(産業,給与)に変更</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>df.columns <span class="op">=</span> [<span class="st">&#39;産業&#39;</span>,<span class="st">&#39;給与&#39;</span>]</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a><span class="co"># サービス業だと思われる行のみを抽出して,copy()</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>df2 <span class="op">=</span> df.loc[[<span class="dv">3</span>,<span class="dv">9</span>,<span class="dv">11</span>,<span class="dv">12</span>],[<span class="st">&#39;産業&#39;</span>,<span class="st">&#39;給与&#39;</span>]].copy()</span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df2)</span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a><span class="co"># コピーされたDataFrameに0から始まるインデックスを振り直す</span></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>df2 <span class="op">=</span> df2.reset_index(drop<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df2)</span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a><span class="co"># 元のDataFrameとコピーされたデータフレームの中身とidを確認</span></span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;id df:&#39;</span>,<span class="bu">id</span>(df))</span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;id df2:&#39;</span>,<span class="bu">id</span>(df2))</span></code></pre></div>
<h1 data-number="10" id="演習-9"><span class="header-section-number">10</span> 5.13 演習</h1>
<div class="sourceCode" id="cb10"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>values <span class="op">=</span> [[<span class="st">&#39;Taro&#39;</span>,<span class="dv">20</span>]</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>         ,[<span class="st">&#39;Jiro&#39;</span>,<span class="dv">30</span>]</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>         ,[<span class="st">&#39;Hanako&#39;</span>,<span class="dv">40</span>]]</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame(data<span class="op">=</span>values</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>                 ,columns<span class="op">=</span>[<span class="st">&#39;name&#39;</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>                          ,<span class="st">&#39;age&#39;</span>])</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a><span class="co"># age列をfloat型に変更</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;age&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;age&#39;</span>].astype(<span class="bu">float</span>)</span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;age&#39;</span>].dtypes)</span></code></pre></div>
<h1 data-number="11" id="演習①"><span class="header-section-number">11</span> 5.17 演習①</h1>
<div class="sourceCode" id="cb11"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame(index <span class="op">=</span> <span class="bu">range</span>(<span class="dv">20</span>))</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;1&#39;</span>] <span class="op">=</span> df.index</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;2&#39;</span>] <span class="op">=</span> df.index<span class="op">*</span><span class="dv">2</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;3&#39;</span>] <span class="op">=</span> df.index<span class="op">*</span><span class="dv">3</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;4&#39;</span>] <span class="op">=</span> df.index<span class="op">*</span><span class="dv">4</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;5&#39;</span>] <span class="op">=</span> df.index<span class="op">*</span><span class="dv">5</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="co">#df = pd.DataFrame()</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a><span class="co">#for i in range(1,6):</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a><span class="co">#    x = []</span></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a><span class="co">#    for j in range(20):</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a><span class="co">#        x.append(i*j)</span></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a><span class="co">#    df[str(i)] = x</span></span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a><span class="co">#print(df)</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a><span class="co"># &#39;3&#39;列を2倍した&#39;6&#39;という列を追加</span></span>
<span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;6&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;3&#39;</span>]<span class="op">*</span><span class="dv">2</span></span>
<span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb11-23"><a href="#cb11-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-24"><a href="#cb11-24" aria-hidden="true" tabindex="-1"></a><span class="co"># indexが20となる行を追加</span></span>
<span id="cb11-25"><a href="#cb11-25" aria-hidden="true" tabindex="-1"></a>df.loc[<span class="dv">20</span>] <span class="op">=</span> df.loc[<span class="dv">1</span>]<span class="op">*</span><span class="dv">20</span></span>
<span id="cb11-26"><a href="#cb11-26" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb11-27"><a href="#cb11-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-28"><a href="#cb11-28" aria-hidden="true" tabindex="-1"></a><span class="co"># &#39;mean&#39;という各行の平均値からなる列を追加</span></span>
<span id="cb11-29"><a href="#cb11-29" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;mean&#39;</span>] <span class="op">=</span> df.mean(axis<span class="op">=</span><span class="dv">1</span>)</span>
<span id="cb11-30"><a href="#cb11-30" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb11-31"><a href="#cb11-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-32"><a href="#cb11-32" aria-hidden="true" tabindex="-1"></a><span class="co"># indexが偶数の列のみを残して,すべての列をint型に変更した後BOM付きのUTF-8のcsvで保存</span></span>
<span id="cb11-33"><a href="#cb11-33" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> df[df.index<span class="op">%</span><span class="dv">2</span> <span class="op">==</span> <span class="dv">0</span>]</span>
<span id="cb11-34"><a href="#cb11-34" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(y)</span>
<span id="cb11-35"><a href="#cb11-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-36"><a href="#cb11-36" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> y.astype(<span class="bu">int</span>)</span>
<span id="cb11-37"><a href="#cb11-37" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(y)</span>
<span id="cb11-38"><a href="#cb11-38" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(y.dtypes)</span>
<span id="cb11-39"><a href="#cb11-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-40"><a href="#cb11-40" aria-hidden="true" tabindex="-1"></a>y.to_csv(<span class="st">&#39;data/5.17_ensyu1.csv&#39;</span>, encoding<span class="op">=</span><span class="st">&#39;utf-8-sig&#39;</span>)</span></code></pre></div>
<h1 data-number="12" id="演習②"><span class="header-section-number">12</span> 5.17 演習②</h1>
<div class="sourceCode" id="cb12"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="co">#データをrice.csvとしてutf-8で保存します.</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="co">#今回は&#39;米相場&#39;列だけを残してあります.</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/rice.csv&#39;</span>)</span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/rice.csv&#39;</span>)</span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.isna())</span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;#欠損値をNaNに----------------------------------&quot;</span>)</span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a><span class="co"># pd.to_numeric&#39;米相場&#39;列を数値型に変換</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a><span class="co">#&#39;coerce&#39;：変換できない値をNaNに変換します。</span></span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;米相場&#39;</span>] <span class="op">=</span> pd.to_numeric(df[<span class="st">&#39;米相場&#39;</span>], errors<span class="op">=</span><span class="st">&#39;coerce&#39;</span>)</span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a><span class="co"># DataFrameを確認して、変換後の値を確認</span></span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb12-19"><a href="#cb12-19" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;#NaNを0に〇----------------------------------</span><span class="ch">\n</span><span class="st">&quot;</span>,</span>
<span id="cb12-20"><a href="#cb12-20" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;@NaNを0に置き換える（必要に応じて適切な値を選択</span><span class="ch">\n</span><span class="st">&quot;</span>,</span>
<span id="cb12-21"><a href="#cb12-21" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;@filledは欠損値を特定の値で埋める</span><span class="ch">\n</span><span class="st">&quot;</span>,</span>
<span id="cb12-22"><a href="#cb12-22" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;@df.filled(特定の値,元のデータを直接変える）</span><span class="ch">\n</span><span class="st">&quot;</span>,</span>
<span id="cb12-23"><a href="#cb12-23" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;@df[&#39;米相場&#39;]=df[&#39;米相場&#39;].fillna(0))</span><span class="ch">\n</span><span class="st">&quot;</span></span>
<span id="cb12-24"><a href="#cb12-24" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;@しかしこれではデータのサイズが変わってしまうので平均が狂う</span><span class="ch">\n</span><span class="st">&quot;</span>,</span>
<span id="cb12-25"><a href="#cb12-25" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;#NaNの削除◯----------------------------------</span><span class="ch">\n</span><span class="st">&quot;</span>)</span>
<span id="cb12-26"><a href="#cb12-26" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.dropna(subset<span class="op">=</span>[<span class="st">&#39;米相場&#39;</span>],how<span class="op">=</span><span class="st">&#39;any&#39;</span>))</span>
<span id="cb12-27"><a href="#cb12-27" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb12-28"><a href="#cb12-28" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;#浮動小数点数型に変換〇----------------------------------&quot;</span>)</span>
<span id="cb12-29"><a href="#cb12-29" aria-hidden="true" tabindex="-1"></a><span class="co"># &#39;米相場&#39;列を浮動小数点型に変換</span></span>
<span id="cb12-30"><a href="#cb12-30" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;米相場&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;米相場&#39;</span>].astype(<span class="bu">float</span>)</span>
<span id="cb12-31"><a href="#cb12-31" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb12-32"><a href="#cb12-32" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;#平均値の計算〇----------------------------------&quot;</span>)</span>
<span id="cb12-33"><a href="#cb12-33" aria-hidden="true" tabindex="-1"></a><span class="co"># 平均値の計算（元の数値データを使うため、再計算）</span></span>
<span id="cb12-34"><a href="#cb12-34" aria-hidden="true" tabindex="-1"></a>df.loc[<span class="st">&quot;average&quot;</span>,<span class="st">&quot;米相場&quot;</span>] <span class="op">=</span>df.loc[<span class="dv">0</span>:,<span class="st">&quot;米相場&quot;</span>].mean()</span>
<span id="cb12-35"><a href="#cb12-35" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df) </span></code></pre></div>
<h1 data-number="13" id="演習-10"><span class="header-section-number">13</span> 6.3 演習</h1>
<div class="sourceCode" id="cb13"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 関東の都県を標準入力から受け取り,その都県の県庁所在地を返す.</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> <span class="bu">input</span>(<span class="st">&#39;関東の都道府県を入力してください&#39;</span>)</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> x <span class="op">==</span> <span class="st">&#39;千葉県&#39;</span> <span class="kw">or</span> x <span class="op">==</span> <span class="st">&#39;千葉&#39;</span>:</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;千葉市&#39;</span>)</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="cf">elif</span> x <span class="op">==</span> <span class="st">&#39;東京都&#39;</span> <span class="kw">or</span> x <span class="op">==</span> <span class="st">&#39;東京&#39;</span>:</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;東京&#39;</span>)</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="cf">elif</span> x <span class="op">==</span> <span class="st">&#39;神奈川県&#39;</span> <span class="kw">or</span> x <span class="op">==</span> <span class="st">&#39;神奈川&#39;</span>:</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;横浜市&#39;</span>)</span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="cf">elif</span> x <span class="op">==</span> <span class="st">&#39;埼玉県&#39;</span> <span class="kw">or</span> x <span class="op">==</span> <span class="st">&#39;埼玉&#39;</span>:</span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;さいたま市&#39;</span>)</span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a><span class="cf">elif</span> x <span class="op">==</span> <span class="st">&#39;茨城県&#39;</span> <span class="kw">or</span> x <span class="op">==</span> <span class="st">&#39;茨城&#39;</span>:</span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;水戸市&#39;</span>)</span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a><span class="cf">elif</span> x <span class="op">==</span> <span class="st">&#39;栃木県&#39;</span> <span class="kw">or</span> x <span class="op">==</span> <span class="st">&#39;栃木&#39;</span>:</span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;宇都宮市&#39;</span>)</span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a><span class="cf">elif</span> x <span class="op">==</span> <span class="st">&#39;群馬県&#39;</span> <span class="kw">or</span> x <span class="op">==</span> <span class="st">&#39;群馬&#39;</span>:</span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;前橋市&#39;</span>)</span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a><span class="cf">else</span>:</span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;関東の都道府県ではありません&#39;</span>)</span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a><span class="co"># input()関数で数値を受け取って, 偶数なら偶数, 奇数なら奇数という文字列を返す.</span></span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> <span class="bu">int</span>(<span class="bu">input</span>(<span class="st">&#39;数値を入力してください&#39;</span>))</span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> x<span class="op">%</span><span class="dv">2</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;偶数&#39;</span>)</span>
<span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a><span class="cf">elif</span> x<span class="op">%</span><span class="dv">2</span> <span class="op">==</span> <span class="dv">1</span>:</span>
<span id="cb13-26"><a href="#cb13-26" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;奇数&#39;</span>)</span>
<span id="cb13-27"><a href="#cb13-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-28"><a href="#cb13-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-29"><a href="#cb13-29" aria-hidden="true" tabindex="-1"></a><span class="co"># ランダムな1から10の数値を発生させて, その数値が5より大きければ&#39;BIG&#39;,小さければ&#39;SMALL&#39;と表示する.</span></span>
<span id="cb13-30"><a href="#cb13-30" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> random</span>
<span id="cb13-31"><a href="#cb13-31" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> random.randint(<span class="dv">1</span>,<span class="dv">10</span>)</span>
<span id="cb13-32"><a href="#cb13-32" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;数値:&#39;</span>,x)</span>
<span id="cb13-33"><a href="#cb13-33" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> x <span class="op">&gt;</span> <span class="dv">5</span>:</span>
<span id="cb13-34"><a href="#cb13-34" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;BIG&#39;</span>)</span>
<span id="cb13-35"><a href="#cb13-35" aria-hidden="true" tabindex="-1"></a><span class="cf">else</span>:</span>
<span id="cb13-36"><a href="#cb13-36" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;SMALL&#39;</span>)</span></code></pre></div>
<h1 data-number="14" id="演習-11"><span class="header-section-number">14</span> 6.4.1 演習</h1>
<div class="sourceCode" id="cb14"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="co"># x = 1 に3ずつ数を足しながらxの値をprint()する. xが1000を超えたら終了する.</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> <span class="dv">1</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> x <span class="op">&lt;</span> <span class="dv">1001</span>:</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>    x <span class="op">+=</span> <span class="dv">3</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(x)</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;---------&#39;</span>)</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a><span class="co"># 1から100までの数の和を求める.</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>total <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> x <span class="op">&lt;</span> <span class="dv">100</span>:</span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a>    x <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a>    total <span class="op">+=</span> x</span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(x)</span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;総和:&#39;</span>, total)</span>
<span id="cb14-17"><a href="#cb14-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-18"><a href="#cb14-18" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;---------&#39;</span>)</span>
<span id="cb14-19"><a href="#cb14-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-20"><a href="#cb14-20" aria-hidden="true" tabindex="-1"></a><span class="co"># 100から150までの数のうち,5で割り切れるかつ2で割り切れる数の和を求める</span></span>
<span id="cb14-21"><a href="#cb14-21" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> <span class="dv">99</span></span>
<span id="cb14-22"><a href="#cb14-22" aria-hidden="true" tabindex="-1"></a>total <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb14-23"><a href="#cb14-23" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> x <span class="op">&lt;</span> <span class="dv">150</span>:</span>
<span id="cb14-24"><a href="#cb14-24" aria-hidden="true" tabindex="-1"></a>    x <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb14-25"><a href="#cb14-25" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(x)</span>
<span id="cb14-26"><a href="#cb14-26" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> x<span class="op">%</span><span class="dv">10</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb14-27"><a href="#cb14-27" aria-hidden="true" tabindex="-1"></a>        total <span class="op">+=</span> x</span>
<span id="cb14-28"><a href="#cb14-28" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;総和:&#39;</span>,total)</span></code></pre></div>
<h1 data-number="15" id="演習-12"><span class="header-section-number">15</span> 6.4.2 演習</h1>
<div class="sourceCode" id="cb15"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="co"># x=0に[1,3,5,7,9,12]を順番に足して更新する. xの値を更新するたびにprint()する.</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> [<span class="dv">1</span>,<span class="dv">3</span>,<span class="dv">5</span>,<span class="dv">7</span>,<span class="dv">9</span>,<span class="dv">12</span>]:</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>    x <span class="op">+=</span> i</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(x)</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a><span class="co"># 人物の名前と成績を記録した辞書型xs={&#39;taro&#39;:&#39;S&#39;,&#39;hanako&#39;:&#39;B&#39;,&#39;yumi&#39;:&#39;A&#39;,&#39;jiro&#39;:&#39;D&#39;}から成績A以上の人物名だけをリストupper=[]に追加し,upperを表示する.</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a>xs <span class="op">=</span> {<span class="st">&#39;taro&#39;</span>:<span class="st">&#39;S&#39;</span>,<span class="st">&#39;hanako&#39;</span>:<span class="st">&#39;B&#39;</span>,<span class="st">&#39;yumi&#39;</span>:<span class="st">&#39;A&#39;</span>,<span class="st">&#39;jiro&#39;</span>:<span class="st">&#39;D&#39;</span>}</span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a>upper <span class="op">=</span> []</span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> name, grade <span class="kw">in</span> xs.items():</span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> grade <span class="kw">in</span> [<span class="st">&#39;S&#39;</span>, <span class="st">&#39;A&#39;</span>]:</span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a>        upper.append(name)</span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;---------</span><span class="ch">\n</span><span class="st">&#39;</span>, upper)</span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-15"><a href="#cb15-15" aria-hidden="true" tabindex="-1"></a><span class="co"># 100から150までの数のうち,５で割り切れるかつ２で割り切れる数の和を求める</span></span>
<span id="cb15-16"><a href="#cb15-16" aria-hidden="true" tabindex="-1"></a>total <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb15-17"><a href="#cb15-17" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">100</span>,<span class="dv">151</span>):</span>
<span id="cb15-18"><a href="#cb15-18" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> i<span class="op">%</span><span class="dv">10</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb15-19"><a href="#cb15-19" aria-hidden="true" tabindex="-1"></a>        total <span class="op">+=</span> i</span>
<span id="cb15-20"><a href="#cb15-20" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;---------</span><span class="ch">\n</span><span class="st">&#39;</span>, <span class="st">&#39;総和:&#39;</span>, total)</span>
<span id="cb15-21"><a href="#cb15-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-22"><a href="#cb15-22" aria-hidden="true" tabindex="-1"></a><span class="co"># xs = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]]として, for文の多重ループを利用して, xs[0]からxs[3]の合計値が入ったリストを求める</span></span>
<span id="cb15-23"><a href="#cb15-23" aria-hidden="true" tabindex="-1"></a>xs <span class="op">=</span> [[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>],[<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>,<span class="dv">10</span>],[<span class="dv">11</span>,<span class="dv">12</span>,<span class="dv">13</span>,<span class="dv">14</span>,<span class="dv">15</span>],[<span class="dv">16</span>,<span class="dv">17</span>,<span class="dv">18</span>,<span class="dv">19</span>,<span class="dv">20</span>]]</span>
<span id="cb15-24"><a href="#cb15-24" aria-hidden="true" tabindex="-1"></a>sum_list <span class="op">=</span> []</span>
<span id="cb15-25"><a href="#cb15-25" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> xs:</span>
<span id="cb15-26"><a href="#cb15-26" aria-hidden="true" tabindex="-1"></a>    total <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb15-27"><a href="#cb15-27" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> j <span class="kw">in</span> i:</span>
<span id="cb15-28"><a href="#cb15-28" aria-hidden="true" tabindex="-1"></a>        total <span class="op">+=</span> j</span>
<span id="cb15-29"><a href="#cb15-29" aria-hidden="true" tabindex="-1"></a>    sum_list.append(total)</span>
<span id="cb15-30"><a href="#cb15-30" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;---------</span><span class="ch">\n</span><span class="st">&#39;</span>, sum_list)</span>
<span id="cb15-31"><a href="#cb15-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-32"><a href="#cb15-32" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;---------&#39;</span>)</span>
<span id="cb15-33"><a href="#cb15-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-34"><a href="#cb15-34" aria-hidden="true" tabindex="-1"></a><span class="co"># FizzBuzzとはプログラミングの動作確認でよく用いられる欧米圏の言葉遊びゲームです.. 以下のルールに則って1から100までの数を順番にFizzBuzzの判定を行ってください.</span></span>
<span id="cb15-35"><a href="#cb15-35" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">101</span>):</span>
<span id="cb15-36"><a href="#cb15-36" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> i<span class="op">%</span><span class="dv">3</span> <span class="op">==</span> <span class="dv">0</span> <span class="kw">and</span> i<span class="op">%</span><span class="dv">5</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb15-37"><a href="#cb15-37" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(i, <span class="st">&#39;FizzBuzz&#39;</span>)</span>
<span id="cb15-38"><a href="#cb15-38" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> i<span class="op">%</span><span class="dv">3</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb15-39"><a href="#cb15-39" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(i, <span class="st">&#39;Fizz&#39;</span>)</span>
<span id="cb15-40"><a href="#cb15-40" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> i<span class="op">%</span><span class="dv">5</span> <span class="op">==</span><span class="dv">0</span>:</span>
<span id="cb15-41"><a href="#cb15-41" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(i, <span class="st">&#39;Buzz&#39;</span>)</span>
<span id="cb15-42"><a href="#cb15-42" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb15-43"><a href="#cb15-43" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(i)</span></code></pre></div>
<h1 data-number="16" id="演習-13"><span class="header-section-number">16</span> 6.4.2.4 演習</h1>
<div class="sourceCode" id="cb16"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 質問に対する回答をinput関数で受け取り,それに対して返答をする簡単なBotプログラムを作成してください. なお,分岐は最低5つ以上とすること.</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>answer <span class="op">=</span> <span class="bu">input</span>(<span class="st">&quot;テストは何点でしたか?(終了する場合は[終了]と入力してください.)</span><span class="ch">\n</span><span class="st">&quot;</span>)</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> <span class="va">True</span>:</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> answer <span class="op">==</span> <span class="st">&#39;終了&#39;</span>:</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">break</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> <span class="bu">int</span>(answer) <span class="op">&gt;</span> <span class="dv">100</span> <span class="kw">or</span> <span class="bu">int</span>(answer) <span class="op">&lt;</span> <span class="dv">0</span>:</span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;0 ~ 100の数値を入力してください.&quot;</span>)</span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>        answer <span class="op">=</span> <span class="bu">input</span>(<span class="st">&quot;テストは何点でしたか?</span><span class="ch">\n</span><span class="st">&quot;</span>)</span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">continue</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> <span class="bu">int</span>(answer) <span class="op">&gt;=</span> <span class="dv">90</span>:</span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;S:素晴らしいです.&quot;</span>)</span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true" tabindex="-1"></a>        answer <span class="op">=</span> <span class="bu">input</span>(<span class="st">&quot;他のテストは何点でしたか?</span><span class="ch">\n</span><span class="st">&quot;</span>)</span>
<span id="cb16-14"><a href="#cb16-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">continue</span></span>
<span id="cb16-15"><a href="#cb16-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> <span class="bu">int</span>(answer) <span class="op">&gt;=</span> <span class="dv">80</span>:</span>
<span id="cb16-16"><a href="#cb16-16" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;A:よく頑張りました.&quot;</span>)</span>
<span id="cb16-17"><a href="#cb16-17" aria-hidden="true" tabindex="-1"></a>        answer <span class="op">=</span> <span class="bu">input</span>(<span class="st">&quot;他のテストは何点でしたか?</span><span class="ch">\n</span><span class="st">&quot;</span>)</span>
<span id="cb16-18"><a href="#cb16-18" aria-hidden="true" tabindex="-1"></a>        <span class="cf">continue</span></span>
<span id="cb16-19"><a href="#cb16-19" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> <span class="bu">int</span>(answer) <span class="op">&gt;=</span> <span class="dv">70</span>:</span>
<span id="cb16-20"><a href="#cb16-20" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;B:お疲れ様でした.&quot;</span>)</span>
<span id="cb16-21"><a href="#cb16-21" aria-hidden="true" tabindex="-1"></a>        answer <span class="op">=</span> <span class="bu">input</span>(<span class="st">&quot;他のテストは何点でしたか?</span><span class="ch">\n</span><span class="st">&quot;</span>)</span>
<span id="cb16-22"><a href="#cb16-22" aria-hidden="true" tabindex="-1"></a>        <span class="cf">continue</span></span>
<span id="cb16-23"><a href="#cb16-23" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> <span class="bu">int</span>(answer) <span class="op">&gt;=</span> <span class="dv">60</span>:</span>
<span id="cb16-24"><a href="#cb16-24" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;C:もう少し頑張りましょう.&quot;</span>)</span>
<span id="cb16-25"><a href="#cb16-25" aria-hidden="true" tabindex="-1"></a>        answer <span class="op">=</span> <span class="bu">input</span>(<span class="st">&quot;他のテストは何点でしたか?</span><span class="ch">\n</span><span class="st">&quot;</span>)</span>
<span id="cb16-26"><a href="#cb16-26" aria-hidden="true" tabindex="-1"></a>        <span class="cf">continue</span></span>
<span id="cb16-27"><a href="#cb16-27" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> <span class="bu">int</span>(answer) <span class="op">&lt;=</span> <span class="dv">59</span>:</span>
<span id="cb16-28"><a href="#cb16-28" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;F:残念です.&quot;</span>)</span>
<span id="cb16-29"><a href="#cb16-29" aria-hidden="true" tabindex="-1"></a>        answer <span class="op">=</span> <span class="bu">input</span>(<span class="st">&quot;他のテストは何点でしたか?</span><span class="ch">\n</span><span class="st">&quot;</span>)</span>
<span id="cb16-30"><a href="#cb16-30" aria-hidden="true" tabindex="-1"></a>        <span class="cf">continue</span></span></code></pre></div>
<h1 data-number="17" id="演習-14"><span class="header-section-number">17</span> 6.4.2.5 演習</h1>
<div class="sourceCode" id="cb17"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/kome.csv&#39;</span>)</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a><span class="co"># 米相場列を数値型に変換</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a><span class="co"># 変換できない値 → NaN</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;米相場&#39;</span>] <span class="op">=</span> pd.to_numeric(df[<span class="st">&#39;米相場&#39;</span>], errors<span class="op">=</span><span class="st">&#39;coerce&#39;</span>)</span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a><span class="co"># NaNの削除</span></span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a>df.dropna(subset<span class="op">=</span>[<span class="st">&#39;米相場&#39;</span>], how<span class="op">=</span><span class="st">&#39;any&#39;</span>, inplace<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb17-13"><a href="#cb17-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-14"><a href="#cb17-14" aria-hidden="true" tabindex="-1"></a><span class="co"># indexを振り直す</span></span>
<span id="cb17-15"><a href="#cb17-15" aria-hidden="true" tabindex="-1"></a>df.reset_index(inplace<span class="op">=</span><span class="va">True</span>,drop<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb17-16"><a href="#cb17-16" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb17-17"><a href="#cb17-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-18"><a href="#cb17-18" aria-hidden="true" tabindex="-1"></a><span class="co">#米相場列をfloat型にする</span></span>
<span id="cb17-19"><a href="#cb17-19" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;米相場&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;米相場&#39;</span>].astype(<span class="bu">float</span>)</span>
<span id="cb17-20"><a href="#cb17-20" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb17-21"><a href="#cb17-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-22"><a href="#cb17-22" aria-hidden="true" tabindex="-1"></a><span class="co"># 西暦列から&#39;年&#39;を抜く</span></span>
<span id="cb17-23"><a href="#cb17-23" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> df.index:</span>
<span id="cb17-24"><a href="#cb17-24" aria-hidden="true" tabindex="-1"></a>    df.at[i, <span class="st">&#39;西暦&#39;</span>] <span class="op">=</span> df.at[i, <span class="st">&#39;西暦&#39;</span>][:<span class="op">-</span><span class="dv">1</span>]</span>
<span id="cb17-25"><a href="#cb17-25" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb17-26"><a href="#cb17-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-27"><a href="#cb17-27" aria-hidden="true" tabindex="-1"></a><span class="co"># 西暦列をint型にする</span></span>
<span id="cb17-28"><a href="#cb17-28" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;西暦&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;西暦&#39;</span>].astype(<span class="bu">int</span>)</span>
<span id="cb17-29"><a href="#cb17-29" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;西暦&#39;</span>].dtype)</span>
<span id="cb17-30"><a href="#cb17-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-31"><a href="#cb17-31" aria-hidden="true" tabindex="-1"></a><span class="co"># 西暦列の重複を除いた値を確認</span></span>
<span id="cb17-32"><a href="#cb17-32" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;西暦&#39;</span>].unique())</span>
<span id="cb17-33"><a href="#cb17-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-34"><a href="#cb17-34" aria-hidden="true" tabindex="-1"></a><span class="co"># 西暦ごとに米相場列の値をまとめる</span></span>
<span id="cb17-35"><a href="#cb17-35" aria-hidden="true" tabindex="-1"></a>data <span class="op">=</span> {i: [] <span class="cf">for</span> i <span class="kw">in</span> df[<span class="st">&#39;西暦&#39;</span>].unique()}</span>
<span id="cb17-36"><a href="#cb17-36" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(data)</span>
<span id="cb17-37"><a href="#cb17-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-38"><a href="#cb17-38" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> df.index:</span>
<span id="cb17-39"><a href="#cb17-39" aria-hidden="true" tabindex="-1"></a>    data[df.at[i,<span class="st">&#39;西暦&#39;</span>]] <span class="op">+=</span> [df.at[i,<span class="st">&#39;米相場&#39;</span>]]</span>
<span id="cb17-40"><a href="#cb17-40" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(data)</span>
<span id="cb17-41"><a href="#cb17-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-42"><a href="#cb17-42" aria-hidden="true" tabindex="-1"></a><span class="co"># 西暦ごとの米相場の平均値を計算</span></span>
<span id="cb17-43"><a href="#cb17-43" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> df[<span class="st">&#39;西暦&#39;</span>].unique():</span>
<span id="cb17-44"><a href="#cb17-44" aria-hidden="true" tabindex="-1"></a>    total <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb17-45"><a href="#cb17-45" aria-hidden="true" tabindex="-1"></a>    length <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb17-46"><a href="#cb17-46" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> j <span class="kw">in</span> data[i]:</span>
<span id="cb17-47"><a href="#cb17-47" aria-hidden="true" tabindex="-1"></a>        total <span class="op">+=</span> j</span>
<span id="cb17-48"><a href="#cb17-48" aria-hidden="true" tabindex="-1"></a>        length <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb17-49"><a href="#cb17-49" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f&#39;</span><span class="sc">{</span>i<span class="sc">}</span><span class="ss">年, mean:</span><span class="sc">{</span>total<span class="op">/</span>length<span class="sc">}</span><span class="ss">&#39;</span>)</span></code></pre></div>
<h1 data-number="18" id="section"><span class="header-section-number">18</span> 7.1</h1>
<div class="sourceCode" id="cb18"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="co"># 1 与えられた数値のリストの合計値を返す関数</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> get_sum(xs):</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>    total <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> x <span class="kw">in</span> xs:</span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>        total <span class="op">+=</span> x</span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> total</span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a><span class="co"># 2 与えられた数値のルストの最大値を返す関数</span></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> get_max(xs):</span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a>    max_value <span class="op">=</span> xs[<span class="dv">0</span>]</span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> x <span class="kw">in</span> xs[<span class="dv">1</span>:]:</span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> x <span class="op">&gt;</span> max_value:</span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a>            max_value <span class="op">=</span> x</span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> max_value</span>
<span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a><span class="co"># 3 与えられた数値にFizzBuzzの結果を文字列で返す関数</span></span>
<span id="cb18-18"><a href="#cb18-18" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> fizzBuzz(x):</span>
<span id="cb18-19"><a href="#cb18-19" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> x <span class="op">%</span> <span class="dv">3</span> <span class="op">==</span> <span class="dv">0</span> <span class="kw">and</span> x <span class="op">%</span> <span class="dv">5</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb18-20"><a href="#cb18-20" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="st">&#39;FizzBuzz&#39;</span></span>
<span id="cb18-21"><a href="#cb18-21" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> x <span class="op">%</span> <span class="dv">3</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb18-22"><a href="#cb18-22" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="st">&#39;Fizz&#39;</span></span>
<span id="cb18-23"><a href="#cb18-23" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> x <span class="op">%</span> <span class="dv">5</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb18-24"><a href="#cb18-24" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="st">&#39;Buzz&#39;</span></span>
<span id="cb18-25"><a href="#cb18-25" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb18-26"><a href="#cb18-26" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="bu">str</span>(x)</span>
<span id="cb18-27"><a href="#cb18-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-28"><a href="#cb18-28" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> filter_list(f,xs):</span>
<span id="cb18-29"><a href="#cb18-29" aria-hidden="true" tabindex="-1"></a>    result <span class="op">=</span> []</span>
<span id="cb18-30"><a href="#cb18-30" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> x <span class="kw">in</span> xs:</span>
<span id="cb18-31"><a href="#cb18-31" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> f(x):</span>
<span id="cb18-32"><a href="#cb18-32" aria-hidden="true" tabindex="-1"></a>            result.append(x)</span>
<span id="cb18-33"><a href="#cb18-33" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> result</span>
<span id="cb18-34"><a href="#cb18-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-35"><a href="#cb18-35" aria-hidden="true" tabindex="-1"></a>filter_list((<span class="kw">lambda</span> x: <span class="va">True</span> <span class="cf">if</span> x <span class="op">&gt;</span> <span class="dv">3</span> <span class="cf">else</span> <span class="va">False</span> ), [<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>]) <span class="co"># &gt;&gt;&gt;[4, 5]</span></span></code></pre></div>
<h1 data-number="19" id="演習-15"><span class="header-section-number">19</span> 3.3 演習</h1>
<div class="sourceCode" id="cb19"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 飴が40個あります.7人で同じ数ずつ分けると1人分は何個で何個あまりますか?</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="co"># 1人分の個数</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="dv">40</span><span class="op">//</span><span class="dv">7</span>)</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a><span class="co"># 余り</span></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="dv">40</span><span class="op">%</span><span class="dv">7</span>)</span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a><span class="co"># 底辺5cm,高さ4cmの三角形の面積はいくつですか?</span></span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="dv">5</span><span class="op">*</span><span class="dv">4</span><span class="op">*</span><span class="fl">0.5</span>)</span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a><span class="co"># 2の8乗はいくつですか?</span></span>
<span id="cb19-11"><a href="#cb19-11" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="dv">2</span><span class="op">**</span><span class="dv">8</span>)</span>
<span id="cb19-12"><a href="#cb19-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-13"><a href="#cb19-13" aria-hidden="true" tabindex="-1"></a><span class="co"># 累乗と掛け算の計算順序を丸括弧を使った計算で確かめてください.</span></span>
<span id="cb19-14"><a href="#cb19-14" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="dv">2</span><span class="op">+</span><span class="dv">3</span><span class="op">*</span><span class="dv">4</span>)</span>
<span id="cb19-15"><a href="#cb19-15" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>((<span class="dv">2</span><span class="op">+</span><span class="dv">3</span>)<span class="op">*</span><span class="dv">4</span>)</span></code></pre></div>
<h1 data-number="20" id="演習-16"><span class="header-section-number">20</span> 3.4 演習</h1>
<div class="sourceCode" id="cb20"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 変数を利用して以下の猫型ロボットのBMIを計算してください</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a><span class="co"># BMI = 体重(kg)÷身長(m)の2乗</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a><span class="co"># 猫型ロボットの身長 129.3cm</span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a><span class="co"># 猫型ロボットの体重 129.3kg</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a>height_cm <span class="op">=</span> <span class="fl">129.3</span></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a>weight <span class="op">=</span> <span class="fl">129.3</span></span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a>height_m <span class="op">=</span> height_cm<span class="op">/</span><span class="dv">100</span></span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-10"><a href="#cb20-10" aria-hidden="true" tabindex="-1"></a>BMI <span class="op">=</span> weight<span class="op">/</span>(height_m<span class="op">**</span><span class="dv">2</span>)</span>
<span id="cb20-11"><a href="#cb20-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-12"><a href="#cb20-12" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(BMI)</span></code></pre></div>
<h1 data-number="21" id="演習-17"><span class="header-section-number">21</span> 3.5 演習</h1>
<div class="sourceCode" id="cb21"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> <span class="st">&#39;abcdefg&#39;</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a><span class="co"># &#39;abcdefg&#39; から &#39;cde&#39;をスライスで抜き出してください.</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(x[<span class="dv">2</span>:<span class="dv">5</span>])</span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a><span class="co"># x = &#39;abcdefg&#39;と定義して, xに操作を加えて&#39;abfg&#39;を作ってください.</span></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(x[<span class="dv">0</span>:<span class="dv">2</span>] <span class="op">+</span> x[<span class="dv">5</span>:])</span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true" tabindex="-1"></a><span class="co"># x = &#39;abcdefg&#39;と定義して, xに操作を加えて&#39;bbbeee&#39;を作ってください.</span></span>
<span id="cb21-10"><a href="#cb21-10" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(x[<span class="dv">1</span>]<span class="op">*</span><span class="dv">3</span> <span class="op">+</span> x[<span class="dv">4</span>]<span class="op">*</span><span class="dv">3</span>)</span></code></pre></div>
<h1 data-number="22" id="演習-18"><span class="header-section-number">22</span> 3.6 演習</h1>
<div class="sourceCode" id="cb22"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a>xs <span class="op">=</span> [[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>],[<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>],[<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="co"># xsの長さを求める</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="bu">len</span>(xs))</span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a><span class="co"># スライスを使って以下を抽出する</span></span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true" tabindex="-1"></a><span class="co">## [[4,5,6],[7,8,9]]</span></span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(xs[<span class="dv">1</span>:])</span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-11"><a href="#cb22-11" aria-hidden="true" tabindex="-1"></a><span class="co">## [[1,2,3]]</span></span>
<span id="cb22-12"><a href="#cb22-12" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(xs[:<span class="dv">1</span>])</span>
<span id="cb22-13"><a href="#cb22-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-14"><a href="#cb22-14" aria-hidden="true" tabindex="-1"></a><span class="co">## [[7,8,9]]</span></span>
<span id="cb22-15"><a href="#cb22-15" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(xs[<span class="dv">2</span>:])</span>
<span id="cb22-16"><a href="#cb22-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-17"><a href="#cb22-17" aria-hidden="true" tabindex="-1"></a><span class="co">## [8,9]</span></span>
<span id="cb22-18"><a href="#cb22-18" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(xs[<span class="dv">2</span>][<span class="dv">1</span>:])</span>
<span id="cb22-19"><a href="#cb22-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-20"><a href="#cb22-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-21"><a href="#cb22-21" aria-hidden="true" tabindex="-1"></a><span class="co"># [4,5,6]を[-4,-5,-6]に更新する</span></span>
<span id="cb22-22"><a href="#cb22-22" aria-hidden="true" tabindex="-1"></a>xs[<span class="dv">1</span>] <span class="op">=</span> [<span class="op">-</span><span class="dv">4</span>, <span class="op">-</span><span class="dv">5</span>, <span class="op">-</span><span class="dv">6</span>]</span>
<span id="cb22-23"><a href="#cb22-23" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(xs)</span>
<span id="cb22-24"><a href="#cb22-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-25"><a href="#cb22-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-26"><a href="#cb22-26" aria-hidden="true" tabindex="-1"></a><span class="co"># 1 を -1に,9を-9にする</span></span>
<span id="cb22-27"><a href="#cb22-27" aria-hidden="true" tabindex="-1"></a>xs[<span class="dv">0</span>][<span class="dv">0</span>] <span class="op">=</span> <span class="op">-</span><span class="dv">1</span></span>
<span id="cb22-28"><a href="#cb22-28" aria-hidden="true" tabindex="-1"></a>xs[<span class="dv">2</span>][<span class="dv">2</span>] <span class="op">=</span> <span class="op">-</span><span class="dv">9</span></span>
<span id="cb22-29"><a href="#cb22-29" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(xs)</span>
<span id="cb22-30"><a href="#cb22-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-31"><a href="#cb22-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-32"><a href="#cb22-32" aria-hidden="true" tabindex="-1"></a><span class="co"># [7,8,-9]のあとに,[10,11,12]を追加する</span></span>
<span id="cb22-33"><a href="#cb22-33" aria-hidden="true" tabindex="-1"></a>a <span class="op">=</span> [<span class="dv">10</span>,<span class="dv">11</span>,<span class="dv">12</span>]</span>
<span id="cb22-34"><a href="#cb22-34" aria-hidden="true" tabindex="-1"></a>xs.append(a)</span>
<span id="cb22-35"><a href="#cb22-35" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(xs)</span></code></pre></div>
<h1 data-number="23" id="演習-19"><span class="header-section-number">23</span> 3.8 演習</h1>
<div class="sourceCode" id="cb23"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a>fruits <span class="op">=</span> {<span class="st">&quot;リンゴ&quot;</span>:<span class="st">&quot;apple&quot;</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>         ,<span class="st">&quot;レモン&quot;</span>:<span class="st">&quot;lemon&quot;</span></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a>         ,<span class="st">&quot;ブドウ&quot;</span>:<span class="st">&quot;grape&quot;</span></span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a>         ,<span class="st">&quot;バナナ&quot;</span>:<span class="st">&quot;banana&quot;</span></span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a>         ,<span class="st">&quot;イチゴ&quot;</span>:<span class="st">&quot;strawberry&quot;</span>}</span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(fruits)</span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-9"><a href="#cb23-9" aria-hidden="true" tabindex="-1"></a><span class="co"># keyを指定してvalueにアクセス</span></span>
<span id="cb23-10"><a href="#cb23-10" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(fruits[<span class="st">&quot;リンゴ&quot;</span>])</span>
<span id="cb23-11"><a href="#cb23-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-12"><a href="#cb23-12" aria-hidden="true" tabindex="-1"></a><span class="co"># 新しいkeyとvalueの追加</span></span>
<span id="cb23-13"><a href="#cb23-13" aria-hidden="true" tabindex="-1"></a>fruits[<span class="st">&quot;モモ&quot;</span>] <span class="op">=</span> <span class="st">&quot;peach&quot;</span></span>
<span id="cb23-14"><a href="#cb23-14" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(fruits)</span>
<span id="cb23-15"><a href="#cb23-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-16"><a href="#cb23-16" aria-hidden="true" tabindex="-1"></a><span class="co"># valueの変更</span></span>
<span id="cb23-17"><a href="#cb23-17" aria-hidden="true" tabindex="-1"></a>fruits[<span class="st">&quot;リンゴ&quot;</span>] <span class="op">=</span> <span class="st">&quot;ringo&quot;</span></span>
<span id="cb23-18"><a href="#cb23-18" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(fruits)</span>
<span id="cb23-19"><a href="#cb23-19" aria-hidden="true" tabindex="-1"></a>fruits[<span class="st">&quot;リンゴ&quot;</span>] <span class="op">=</span> <span class="st">&quot;apple&quot;</span></span>
<span id="cb23-20"><a href="#cb23-20" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(fruits)</span>
<span id="cb23-21"><a href="#cb23-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-22"><a href="#cb23-22" aria-hidden="true" tabindex="-1"></a><span class="co"># keyを指定して要素を削除</span></span>
<span id="cb23-23"><a href="#cb23-23" aria-hidden="true" tabindex="-1"></a>fruits.pop(<span class="st">&quot;レモン&quot;</span>)</span>
<span id="cb23-24"><a href="#cb23-24" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(fruits)</span>
<span id="cb23-25"><a href="#cb23-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-26"><a href="#cb23-26" aria-hidden="true" tabindex="-1"></a><span class="co"># keyの一覧を取得</span></span>
<span id="cb23-27"><a href="#cb23-27" aria-hidden="true" tabindex="-1"></a>keys <span class="op">=</span> fruits.keys()</span>
<span id="cb23-28"><a href="#cb23-28" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(keys)</span>
<span id="cb23-29"><a href="#cb23-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-30"><a href="#cb23-30" aria-hidden="true" tabindex="-1"></a><span class="co"># 値の一覧を取得</span></span>
<span id="cb23-31"><a href="#cb23-31" aria-hidden="true" tabindex="-1"></a>values <span class="op">=</span> fruits.values()</span>
<span id="cb23-32"><a href="#cb23-32" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(values)</span>
<span id="cb23-33"><a href="#cb23-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-34"><a href="#cb23-34" aria-hidden="true" tabindex="-1"></a><span class="co"># リストとして値の一覧を取得</span></span>
<span id="cb23-35"><a href="#cb23-35" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="bu">list</span>(fruits.values()))</span>
<span id="cb23-36"><a href="#cb23-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-37"><a href="#cb23-37" aria-hidden="true" tabindex="-1"></a><span class="co"># keyとvalueのペアの一覧(タプルのリスト)を取得</span></span>
<span id="cb23-38"><a href="#cb23-38" aria-hidden="true" tabindex="-1"></a>items <span class="op">=</span> fruits.items()</span>
<span id="cb23-39"><a href="#cb23-39" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(items)</span></code></pre></div>
<h1 data-number="24" id="演習-20"><span class="header-section-number">24</span> 3.9 演習</h1>
<div class="sourceCode" id="cb24"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="co"># ある値が偶数かどうかは,2で割った余りが0かどうかを判定することで判定できます.</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="co"># x=101,y=202として, 以下の命題の真偽をPythonで計算してください.</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> <span class="dv">101</span></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> <span class="dv">102</span></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a><span class="co"># xが偶数</span></span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(x<span class="op">%</span><span class="dv">2</span> <span class="op">==</span> <span class="dv">0</span>)</span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-10"><a href="#cb24-10" aria-hidden="true" tabindex="-1"></a><span class="co"># yが偶数</span></span>
<span id="cb24-11"><a href="#cb24-11" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(y<span class="op">%</span><span class="dv">2</span> <span class="op">==</span> <span class="dv">0</span>)</span>
<span id="cb24-12"><a href="#cb24-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-13"><a href="#cb24-13" aria-hidden="true" tabindex="-1"></a><span class="co"># xが偶数かつyが偶数</span></span>
<span id="cb24-14"><a href="#cb24-14" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(x<span class="op">%</span><span class="dv">2</span><span class="op">==</span><span class="dv">0</span> <span class="kw">and</span> y<span class="op">%</span><span class="dv">2</span><span class="op">==</span><span class="dv">0</span>)</span>
<span id="cb24-15"><a href="#cb24-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-16"><a href="#cb24-16" aria-hidden="true" tabindex="-1"></a><span class="co"># xが偶数またはyが偶数</span></span>
<span id="cb24-17"><a href="#cb24-17" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(x<span class="op">%</span><span class="dv">2</span><span class="op">==</span><span class="dv">0</span> <span class="kw">or</span> y<span class="op">%</span><span class="dv">2</span><span class="op">==</span><span class="dv">0</span>)</span>
<span id="cb24-18"><a href="#cb24-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-19"><a href="#cb24-19" aria-hidden="true" tabindex="-1"></a><span class="co"># x+yが奇数</span></span>
<span id="cb24-20"><a href="#cb24-20" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>((x<span class="op">+</span>y)<span class="op">%</span><span class="dv">2</span> <span class="op">==</span> <span class="dv">1</span>)</span></code></pre></div>
<h1 data-number="25" id="演習-21"><span class="header-section-number">25</span> 5.9 演習</h1>
<div class="sourceCode" id="cb25"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/salary.csv&#39;</span>)</span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a><span class="co"># ①</span></span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.loc[<span class="dv">1</span>:<span class="dv">13</span>, <span class="st">&#39;industry&#39;</span>:<span class="st">&#39;salary&#39;</span>])</span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.iloc[<span class="dv">1</span>:<span class="dv">14</span>, <span class="dv">0</span>:])</span>
<span id="cb25-9"><a href="#cb25-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-10"><a href="#cb25-10" aria-hidden="true" tabindex="-1"></a><span class="co"># ②</span></span>
<span id="cb25-11"><a href="#cb25-11" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.at[<span class="dv">4</span>, <span class="st">&#39;salary&#39;</span>])</span>
<span id="cb25-12"><a href="#cb25-12" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.iat[<span class="dv">4</span>, <span class="dv">1</span>])</span>
<span id="cb25-13"><a href="#cb25-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-14"><a href="#cb25-14" aria-hidden="true" tabindex="-1"></a><span class="co"># ③</span></span>
<span id="cb25-15"><a href="#cb25-15" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.loc[[<span class="dv">6</span>,<span class="dv">8</span>,<span class="dv">10</span>], [<span class="st">&#39;industry&#39;</span>]])</span>
<span id="cb25-16"><a href="#cb25-16" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.iloc[[<span class="dv">6</span>,<span class="dv">8</span>,<span class="dv">10</span>], [<span class="dv">0</span>]])</span></code></pre></div>
<h1 data-number="26" id="演習-22"><span class="header-section-number">26</span> 5.10 演習</h1>
<div class="sourceCode" id="cb26"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/salary.csv&#39;</span>)</span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>df.columns <span class="op">=</span> [<span class="st">&#39;Ind&#39;</span>,<span class="st">&#39;Sal&#39;</span>]</span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true" tabindex="-1"></a><span class="co"># Sal列が偶数のSal列の行</span></span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[df[<span class="st">&#39;Sal&#39;</span>] <span class="op">%</span><span class="dv">2</span><span class="op">==</span><span class="dv">0</span> ][<span class="st">&#39;Sal&#39;</span>])</span>
<span id="cb26-10"><a href="#cb26-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-11"><a href="#cb26-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-12"><a href="#cb26-12" aria-hidden="true" tabindex="-1"></a><span class="co"># Sal列が奇数のInd列の行</span></span>
<span id="cb26-13"><a href="#cb26-13" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[df[<span class="st">&#39;Sal&#39;</span>] <span class="op">%</span><span class="dv">2</span><span class="op">==</span><span class="dv">1</span> ][<span class="st">&#39;Ind&#39;</span>])</span>
<span id="cb26-14"><a href="#cb26-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-15"><a href="#cb26-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-16"><a href="#cb26-16" aria-hidden="true" tabindex="-1"></a><span class="co"># Ind列がInfo,Edu,Medのいずれかで,Sal列が4000以上5000未満のSal列</span></span>
<span id="cb26-17"><a href="#cb26-17" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> df.loc[<span class="dv">8</span>:<span class="dv">10</span>, <span class="st">&#39;Sal&#39;</span>]</span>
<span id="cb26-18"><a href="#cb26-18" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(x)</span>
<span id="cb26-19"><a href="#cb26-19" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> x[(x <span class="op">&gt;=</span> <span class="dv">4000</span>) <span class="op">&amp;</span> (x <span class="op">&lt;</span> <span class="dv">5000</span>)]</span>
<span id="cb26-20"><a href="#cb26-20" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(y)</span>
<span id="cb26-21"><a href="#cb26-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-22"><a href="#cb26-22" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[(df[<span class="st">&#39;Ind&#39;</span>].isin([<span class="st">&#39;Information&#39;</span>, <span class="st">&#39;Academic&#39;</span>, <span class="st">&#39;Medical&#39;</span>])) <span class="op">&amp;</span> (df[<span class="st">&#39;Sal&#39;</span>] <span class="op">&gt;=</span> <span class="dv">4000</span>) <span class="op">&amp;</span> (df[<span class="st">&#39;Sal&#39;</span>] <span class="op">&lt;</span> <span class="dv">5000</span>)][<span class="st">&#39;Sal&#39;</span>])</span></code></pre></div>
<h1 data-number="27" id="演習-23"><span class="header-section-number">27</span> 5.11 演習</h1>
<div class="sourceCode" id="cb27"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/salary.csv&#39;</span>)</span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a>df.columns <span class="op">=</span> [<span class="st">&#39;Ind&#39;</span>,<span class="st">&#39;Sal&#39;</span>]</span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true" tabindex="-1"></a><span class="co"># columnsを日本語(産業,給与)に変更</span></span>
<span id="cb27-8"><a href="#cb27-8" aria-hidden="true" tabindex="-1"></a>df.columns <span class="op">=</span> [<span class="st">&#39;産業&#39;</span>,<span class="st">&#39;給与&#39;</span>]</span>
<span id="cb27-9"><a href="#cb27-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb27-10"><a href="#cb27-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-11"><a href="#cb27-11" aria-hidden="true" tabindex="-1"></a><span class="co"># サービス業だと思われる行のみを抽出して,copy()</span></span>
<span id="cb27-12"><a href="#cb27-12" aria-hidden="true" tabindex="-1"></a>df2 <span class="op">=</span> df.loc[[<span class="dv">3</span>,<span class="dv">9</span>,<span class="dv">11</span>,<span class="dv">12</span>],[<span class="st">&#39;産業&#39;</span>,<span class="st">&#39;給与&#39;</span>]].copy()</span>
<span id="cb27-13"><a href="#cb27-13" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df2)</span>
<span id="cb27-14"><a href="#cb27-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-15"><a href="#cb27-15" aria-hidden="true" tabindex="-1"></a><span class="co"># コピーされたDataFrameに0から始まるインデックスを振り直す</span></span>
<span id="cb27-16"><a href="#cb27-16" aria-hidden="true" tabindex="-1"></a>df2 <span class="op">=</span> df2.reset_index(drop<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb27-17"><a href="#cb27-17" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df2)</span>
<span id="cb27-18"><a href="#cb27-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-19"><a href="#cb27-19" aria-hidden="true" tabindex="-1"></a><span class="co"># 元のDataFrameとコピーされたデータフレームの中身とidを確認</span></span>
<span id="cb27-20"><a href="#cb27-20" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;id df:&#39;</span>,<span class="bu">id</span>(df))</span>
<span id="cb27-21"><a href="#cb27-21" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;id df2:&#39;</span>,<span class="bu">id</span>(df2))</span></code></pre></div>
<h1 data-number="28" id="演習-24"><span class="header-section-number">28</span> 5.13 演習</h1>
<div class="sourceCode" id="cb28"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a>values <span class="op">=</span> [[<span class="st">&#39;Taro&#39;</span>,<span class="dv">20</span>]</span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a>         ,[<span class="st">&#39;Jiro&#39;</span>,<span class="dv">30</span>]</span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true" tabindex="-1"></a>         ,[<span class="st">&#39;Hanako&#39;</span>,<span class="dv">40</span>]]</span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame(data<span class="op">=</span>values</span>
<span id="cb28-8"><a href="#cb28-8" aria-hidden="true" tabindex="-1"></a>                 ,columns<span class="op">=</span>[<span class="st">&#39;name&#39;</span></span>
<span id="cb28-9"><a href="#cb28-9" aria-hidden="true" tabindex="-1"></a>                          ,<span class="st">&#39;age&#39;</span>])</span>
<span id="cb28-10"><a href="#cb28-10" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb28-11"><a href="#cb28-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-12"><a href="#cb28-12" aria-hidden="true" tabindex="-1"></a><span class="co"># age列をfloat型に変更</span></span>
<span id="cb28-13"><a href="#cb28-13" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;age&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;age&#39;</span>].astype(<span class="bu">float</span>)</span>
<span id="cb28-14"><a href="#cb28-14" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb28-15"><a href="#cb28-15" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;age&#39;</span>].dtypes)</span></code></pre></div>
<h1 data-number="29" id="演習①-1"><span class="header-section-number">29</span> 5.17 演習①</h1>
<div class="sourceCode" id="cb29"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame(index <span class="op">=</span> <span class="bu">range</span>(<span class="dv">20</span>))</span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;1&#39;</span>] <span class="op">=</span> df.index</span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;2&#39;</span>] <span class="op">=</span> df.index<span class="op">*</span><span class="dv">2</span></span>
<span id="cb29-6"><a href="#cb29-6" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;3&#39;</span>] <span class="op">=</span> df.index<span class="op">*</span><span class="dv">3</span></span>
<span id="cb29-7"><a href="#cb29-7" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;4&#39;</span>] <span class="op">=</span> df.index<span class="op">*</span><span class="dv">4</span></span>
<span id="cb29-8"><a href="#cb29-8" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;5&#39;</span>] <span class="op">=</span> df.index<span class="op">*</span><span class="dv">5</span></span>
<span id="cb29-9"><a href="#cb29-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb29-10"><a href="#cb29-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-11"><a href="#cb29-11" aria-hidden="true" tabindex="-1"></a><span class="co">#df = pd.DataFrame()</span></span>
<span id="cb29-12"><a href="#cb29-12" aria-hidden="true" tabindex="-1"></a><span class="co">#for i in range(1,6):</span></span>
<span id="cb29-13"><a href="#cb29-13" aria-hidden="true" tabindex="-1"></a><span class="co">#    x = []</span></span>
<span id="cb29-14"><a href="#cb29-14" aria-hidden="true" tabindex="-1"></a><span class="co">#    for j in range(20):</span></span>
<span id="cb29-15"><a href="#cb29-15" aria-hidden="true" tabindex="-1"></a><span class="co">#        x.append(i*j)</span></span>
<span id="cb29-16"><a href="#cb29-16" aria-hidden="true" tabindex="-1"></a><span class="co">#    df[str(i)] = x</span></span>
<span id="cb29-17"><a href="#cb29-17" aria-hidden="true" tabindex="-1"></a><span class="co">#print(df)</span></span>
<span id="cb29-18"><a href="#cb29-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-19"><a href="#cb29-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-20"><a href="#cb29-20" aria-hidden="true" tabindex="-1"></a><span class="co"># &#39;3&#39;列を2倍した&#39;6&#39;という列を追加</span></span>
<span id="cb29-21"><a href="#cb29-21" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;6&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;3&#39;</span>]<span class="op">*</span><span class="dv">2</span></span>
<span id="cb29-22"><a href="#cb29-22" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb29-23"><a href="#cb29-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-24"><a href="#cb29-24" aria-hidden="true" tabindex="-1"></a><span class="co"># indexが20となる行を追加</span></span>
<span id="cb29-25"><a href="#cb29-25" aria-hidden="true" tabindex="-1"></a>df.loc[<span class="dv">20</span>] <span class="op">=</span> df.loc[<span class="dv">1</span>]<span class="op">*</span><span class="dv">20</span></span>
<span id="cb29-26"><a href="#cb29-26" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb29-27"><a href="#cb29-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-28"><a href="#cb29-28" aria-hidden="true" tabindex="-1"></a><span class="co"># &#39;mean&#39;という各行の平均値からなる列を追加</span></span>
<span id="cb29-29"><a href="#cb29-29" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;mean&#39;</span>] <span class="op">=</span> df.mean(axis<span class="op">=</span><span class="dv">1</span>)</span>
<span id="cb29-30"><a href="#cb29-30" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb29-31"><a href="#cb29-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-32"><a href="#cb29-32" aria-hidden="true" tabindex="-1"></a><span class="co"># indexが偶数の列のみを残して,すべての列をint型に変更した後BOM付きのUTF-8のcsvで保存</span></span>
<span id="cb29-33"><a href="#cb29-33" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> df[df.index<span class="op">%</span><span class="dv">2</span> <span class="op">==</span> <span class="dv">0</span>]</span>
<span id="cb29-34"><a href="#cb29-34" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(y)</span>
<span id="cb29-35"><a href="#cb29-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-36"><a href="#cb29-36" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> y.astype(<span class="bu">int</span>)</span>
<span id="cb29-37"><a href="#cb29-37" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(y)</span>
<span id="cb29-38"><a href="#cb29-38" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(y.dtypes)</span>
<span id="cb29-39"><a href="#cb29-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-40"><a href="#cb29-40" aria-hidden="true" tabindex="-1"></a>y.to_csv(<span class="st">&#39;data/5.17_ensyu1.csv&#39;</span>, encoding<span class="op">=</span><span class="st">&#39;utf-8-sig&#39;</span>)</span></code></pre></div>
<h1 data-number="30" id="演習②-1"><span class="header-section-number">30</span> 5.17 演習②</h1>
<div class="sourceCode" id="cb30"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-3"><a href="#cb30-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-4"><a href="#cb30-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-5"><a href="#cb30-5" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/america.csv&#39;</span>)</span>
<span id="cb30-6"><a href="#cb30-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb30-7"><a href="#cb30-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-8"><a href="#cb30-8" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/america.csv&#39;</span>)</span>
<span id="cb30-9"><a href="#cb30-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.isna())</span>
<span id="cb30-10"><a href="#cb30-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-11"><a href="#cb30-11" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;#欠損値をNaNに----------------------------------&quot;</span>)</span>
<span id="cb30-12"><a href="#cb30-12" aria-hidden="true" tabindex="-1"></a><span class="co"># pd.to_numeric&#39;米相場&#39;列を数値型に変換</span></span>
<span id="cb30-13"><a href="#cb30-13" aria-hidden="true" tabindex="-1"></a><span class="co">#&#39;coerce&#39;：変換できない値をNaNに変換します。</span></span>
<span id="cb30-14"><a href="#cb30-14" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;米相場&#39;</span>] <span class="op">=</span> pd.to_numeric(df[<span class="st">&#39;米相場&#39;</span>], errors<span class="op">=</span><span class="st">&#39;coerce&#39;</span>)</span>
<span id="cb30-15"><a href="#cb30-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-16"><a href="#cb30-16" aria-hidden="true" tabindex="-1"></a><span class="co"># DataFrameを確認して、変換後の値を確認</span></span>
<span id="cb30-17"><a href="#cb30-17" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb30-18"><a href="#cb30-18" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;#NaNを0に〇----------------------------------</span><span class="ch">\n</span><span class="st">&quot;</span>,</span>
<span id="cb30-19"><a href="#cb30-19" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;@NaNを0に置き換える（必要に応じて適切な値を選択</span><span class="ch">\n</span><span class="st">&quot;</span>,</span>
<span id="cb30-20"><a href="#cb30-20" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;@filledは欠損値を特定の値で埋める</span><span class="ch">\n</span><span class="st">&quot;</span>,</span>
<span id="cb30-21"><a href="#cb30-21" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;@df.filled(特定の値,元のデータを直接変える）</span><span class="ch">\n</span><span class="st">&quot;</span>,</span>
<span id="cb30-22"><a href="#cb30-22" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;@df[&#39;米相場&#39;]=df[&#39;米相場&#39;].fillna(0))</span><span class="ch">\n</span><span class="st">&quot;</span></span>
<span id="cb30-23"><a href="#cb30-23" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;@しかしこれではデータの母数が変わってしまうので平均が狂う</span><span class="ch">\n</span><span class="st">&quot;</span>,</span>
<span id="cb30-24"><a href="#cb30-24" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;#NaNの削除◯----------------------------------</span><span class="ch">\n</span><span class="st">&quot;</span>)</span>
<span id="cb30-25"><a href="#cb30-25" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.dropna(subset<span class="op">=</span>[<span class="st">&#39;米相場&#39;</span>],how<span class="op">=</span><span class="st">&#39;any&#39;</span>))</span>
<span id="cb30-26"><a href="#cb30-26" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb30-27"><a href="#cb30-27" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;#浮動小数点数型に変換〇----------------------------------&quot;</span>)</span>
<span id="cb30-28"><a href="#cb30-28" aria-hidden="true" tabindex="-1"></a><span class="co"># &#39;米相場&#39;列を浮動小数点型に変換</span></span>
<span id="cb30-29"><a href="#cb30-29" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;米相場&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;米相場&#39;</span>].astype(<span class="bu">float</span>)</span>
<span id="cb30-30"><a href="#cb30-30" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb30-31"><a href="#cb30-31" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;#平均値の計算〇----------------------------------&quot;</span>)</span>
<span id="cb30-32"><a href="#cb30-32" aria-hidden="true" tabindex="-1"></a><span class="co"># 平均値の計算（元の数値データを使うため、再計算）</span></span>
<span id="cb30-33"><a href="#cb30-33" aria-hidden="true" tabindex="-1"></a>df.loc[<span class="st">&quot;average&quot;</span>,<span class="st">&quot;米相場&quot;</span>] <span class="op">=</span>df.loc[<span class="dv">0</span>:,<span class="st">&quot;米相場&quot;</span>].mean()</span>
<span id="cb30-34"><a href="#cb30-34" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span></code></pre></div>
<h1 data-number="31" id="演習-25"><span class="header-section-number">31</span> 6.3 演習</h1>
<div class="sourceCode" id="cb31"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 関東の都県を標準入力から受け取り,その都県の県庁所在地を返す.</span></span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> <span class="bu">input</span>(<span class="st">&#39;関東の都道府県を入力してください&#39;</span>)</span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> x <span class="op">==</span> <span class="st">&#39;千葉県&#39;</span> <span class="kw">or</span> x <span class="op">==</span> <span class="st">&#39;千葉&#39;</span>:</span>
<span id="cb31-4"><a href="#cb31-4" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;千葉市&#39;</span>)</span>
<span id="cb31-5"><a href="#cb31-5" aria-hidden="true" tabindex="-1"></a><span class="cf">elif</span> x <span class="op">==</span> <span class="st">&#39;東京都&#39;</span> <span class="kw">or</span> x <span class="op">==</span> <span class="st">&#39;東京&#39;</span>:</span>
<span id="cb31-6"><a href="#cb31-6" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;東京&#39;</span>)</span>
<span id="cb31-7"><a href="#cb31-7" aria-hidden="true" tabindex="-1"></a><span class="cf">elif</span> x <span class="op">==</span> <span class="st">&#39;神奈川県&#39;</span> <span class="kw">or</span> x <span class="op">==</span> <span class="st">&#39;神奈川&#39;</span>:</span>
<span id="cb31-8"><a href="#cb31-8" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;横浜市&#39;</span>)</span>
<span id="cb31-9"><a href="#cb31-9" aria-hidden="true" tabindex="-1"></a><span class="cf">elif</span> x <span class="op">==</span> <span class="st">&#39;埼玉県&#39;</span> <span class="kw">or</span> x <span class="op">==</span> <span class="st">&#39;埼玉&#39;</span>:</span>
<span id="cb31-10"><a href="#cb31-10" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;さいたま市&#39;</span>)</span>
<span id="cb31-11"><a href="#cb31-11" aria-hidden="true" tabindex="-1"></a><span class="cf">elif</span> x <span class="op">==</span> <span class="st">&#39;茨城県&#39;</span> <span class="kw">or</span> x <span class="op">==</span> <span class="st">&#39;茨城&#39;</span>:</span>
<span id="cb31-12"><a href="#cb31-12" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;水戸市&#39;</span>)</span>
<span id="cb31-13"><a href="#cb31-13" aria-hidden="true" tabindex="-1"></a><span class="cf">elif</span> x <span class="op">==</span> <span class="st">&#39;栃木県&#39;</span> <span class="kw">or</span> x <span class="op">==</span> <span class="st">&#39;栃木&#39;</span>:</span>
<span id="cb31-14"><a href="#cb31-14" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;宇都宮市&#39;</span>)</span>
<span id="cb31-15"><a href="#cb31-15" aria-hidden="true" tabindex="-1"></a><span class="cf">elif</span> x <span class="op">==</span> <span class="st">&#39;群馬県&#39;</span> <span class="kw">or</span> x <span class="op">==</span> <span class="st">&#39;群馬&#39;</span>:</span>
<span id="cb31-16"><a href="#cb31-16" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;前橋市&#39;</span>)</span>
<span id="cb31-17"><a href="#cb31-17" aria-hidden="true" tabindex="-1"></a><span class="cf">else</span>:</span>
<span id="cb31-18"><a href="#cb31-18" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;関東の都道府県ではありません&#39;</span>)</span>
<span id="cb31-19"><a href="#cb31-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-20"><a href="#cb31-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-21"><a href="#cb31-21" aria-hidden="true" tabindex="-1"></a><span class="co"># input()関数で数値を受け取って, 偶数なら偶数, 奇数なら奇数という文字列を返す.</span></span>
<span id="cb31-22"><a href="#cb31-22" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> <span class="bu">int</span>(<span class="bu">input</span>(<span class="st">&#39;数値を入力してください&#39;</span>))</span>
<span id="cb31-23"><a href="#cb31-23" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> x<span class="op">%</span><span class="dv">2</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb31-24"><a href="#cb31-24" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;偶数&#39;</span>)</span>
<span id="cb31-25"><a href="#cb31-25" aria-hidden="true" tabindex="-1"></a><span class="cf">elif</span> x<span class="op">%</span><span class="dv">2</span> <span class="op">==</span> <span class="dv">1</span>:</span>
<span id="cb31-26"><a href="#cb31-26" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;奇数&#39;</span>)</span>
<span id="cb31-27"><a href="#cb31-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-28"><a href="#cb31-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-29"><a href="#cb31-29" aria-hidden="true" tabindex="-1"></a><span class="co"># ランダムな1から10の数値を発生させて, その数値が5より大きければ&#39;BIG&#39;,小さければ&#39;SMALL&#39;と表示する.</span></span>
<span id="cb31-30"><a href="#cb31-30" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> random</span>
<span id="cb31-31"><a href="#cb31-31" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> random.randint(<span class="dv">1</span>,<span class="dv">10</span>)</span>
<span id="cb31-32"><a href="#cb31-32" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;数値:&#39;</span>,x)</span>
<span id="cb31-33"><a href="#cb31-33" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> x <span class="op">&gt;</span> <span class="dv">5</span>:</span>
<span id="cb31-34"><a href="#cb31-34" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;BIG&#39;</span>)</span>
<span id="cb31-35"><a href="#cb31-35" aria-hidden="true" tabindex="-1"></a><span class="cf">else</span>:</span>
<span id="cb31-36"><a href="#cb31-36" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;SMALL&#39;</span>)</span></code></pre></div>
<h1 data-number="32" id="演習-26"><span class="header-section-number">32</span> 6.4.1 演習</h1>
<div class="sourceCode" id="cb32"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="co"># x = 1 に3ずつ数を足しながらxの値をprint()する. xが1000を超えたら終了する.</span></span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> <span class="dv">1</span></span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> x <span class="op">&lt;</span> <span class="dv">1001</span>:</span>
<span id="cb32-4"><a href="#cb32-4" aria-hidden="true" tabindex="-1"></a>    x <span class="op">+=</span> <span class="dv">3</span></span>
<span id="cb32-5"><a href="#cb32-5" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(x)</span>
<span id="cb32-6"><a href="#cb32-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-7"><a href="#cb32-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;---------&#39;</span>)</span>
<span id="cb32-8"><a href="#cb32-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-9"><a href="#cb32-9" aria-hidden="true" tabindex="-1"></a><span class="co"># 1から100までの数の和を求める.</span></span>
<span id="cb32-10"><a href="#cb32-10" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb32-11"><a href="#cb32-11" aria-hidden="true" tabindex="-1"></a>total <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb32-12"><a href="#cb32-12" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> x <span class="op">&lt;</span> <span class="dv">100</span>:</span>
<span id="cb32-13"><a href="#cb32-13" aria-hidden="true" tabindex="-1"></a>    x <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb32-14"><a href="#cb32-14" aria-hidden="true" tabindex="-1"></a>    total <span class="op">+=</span> x</span>
<span id="cb32-15"><a href="#cb32-15" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(x)</span>
<span id="cb32-16"><a href="#cb32-16" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;総和:&#39;</span>, total)</span>
<span id="cb32-17"><a href="#cb32-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-18"><a href="#cb32-18" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;---------&#39;</span>)</span>
<span id="cb32-19"><a href="#cb32-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-20"><a href="#cb32-20" aria-hidden="true" tabindex="-1"></a><span class="co"># 100から150までの数のうち,5で割り切れるかつ2で割り切れる数の和を求める</span></span>
<span id="cb32-21"><a href="#cb32-21" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> <span class="dv">99</span></span>
<span id="cb32-22"><a href="#cb32-22" aria-hidden="true" tabindex="-1"></a>total <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb32-23"><a href="#cb32-23" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> x <span class="op">&lt;</span> <span class="dv">150</span>:</span>
<span id="cb32-24"><a href="#cb32-24" aria-hidden="true" tabindex="-1"></a>    x <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb32-25"><a href="#cb32-25" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(x)</span>
<span id="cb32-26"><a href="#cb32-26" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> x<span class="op">%</span><span class="dv">10</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb32-27"><a href="#cb32-27" aria-hidden="true" tabindex="-1"></a>        total <span class="op">+=</span> x</span>
<span id="cb32-28"><a href="#cb32-28" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;総和:&#39;</span>,total)</span></code></pre></div>
<h1 data-number="33" id="演習-27"><span class="header-section-number">33</span> 6.4.2 演習</h1>
<div class="sourceCode" id="cb33"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="co"># x=0に[1,3,5,7,9,12]を順番に足して更新する. xの値を更新するたびにprint()する.</span></span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> [<span class="dv">1</span>,<span class="dv">3</span>,<span class="dv">5</span>,<span class="dv">7</span>,<span class="dv">9</span>,<span class="dv">12</span>]:</span>
<span id="cb33-4"><a href="#cb33-4" aria-hidden="true" tabindex="-1"></a>    x <span class="op">+=</span> i</span>
<span id="cb33-5"><a href="#cb33-5" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(x)</span>
<span id="cb33-6"><a href="#cb33-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-7"><a href="#cb33-7" aria-hidden="true" tabindex="-1"></a><span class="co"># 人物の名前と成績を記録した辞書型xs={&#39;taro&#39;:&#39;S&#39;,&#39;hanako&#39;:&#39;B&#39;,&#39;yumi&#39;:&#39;A&#39;,&#39;jiro&#39;:&#39;D&#39;}から成績A以上の人物名だけをリストupper=[]に追加し,upperを表示する.</span></span>
<span id="cb33-8"><a href="#cb33-8" aria-hidden="true" tabindex="-1"></a>xs <span class="op">=</span> {<span class="st">&#39;taro&#39;</span>:<span class="st">&#39;S&#39;</span>,<span class="st">&#39;hanako&#39;</span>:<span class="st">&#39;B&#39;</span>,<span class="st">&#39;yumi&#39;</span>:<span class="st">&#39;A&#39;</span>,<span class="st">&#39;jiro&#39;</span>:<span class="st">&#39;D&#39;</span>}</span>
<span id="cb33-9"><a href="#cb33-9" aria-hidden="true" tabindex="-1"></a>upper <span class="op">=</span> []</span>
<span id="cb33-10"><a href="#cb33-10" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> name, grade <span class="kw">in</span> xs.items():</span>
<span id="cb33-11"><a href="#cb33-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> grade <span class="kw">in</span> [<span class="st">&#39;S&#39;</span>, <span class="st">&#39;A&#39;</span>]:</span>
<span id="cb33-12"><a href="#cb33-12" aria-hidden="true" tabindex="-1"></a>        upper.append(name)</span>
<span id="cb33-13"><a href="#cb33-13" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;---------</span><span class="ch">\n</span><span class="st">&#39;</span>, upper)</span>
<span id="cb33-14"><a href="#cb33-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-15"><a href="#cb33-15" aria-hidden="true" tabindex="-1"></a><span class="co"># 100から150までの数のうち,５で割り切れるかつ２で割り切れる数の和を求める</span></span>
<span id="cb33-16"><a href="#cb33-16" aria-hidden="true" tabindex="-1"></a>total <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb33-17"><a href="#cb33-17" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">100</span>,<span class="dv">151</span>):</span>
<span id="cb33-18"><a href="#cb33-18" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> i<span class="op">%</span><span class="dv">10</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb33-19"><a href="#cb33-19" aria-hidden="true" tabindex="-1"></a>        total <span class="op">+=</span> i</span>
<span id="cb33-20"><a href="#cb33-20" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;---------</span><span class="ch">\n</span><span class="st">&#39;</span>, <span class="st">&#39;総和:&#39;</span>, total)</span>
<span id="cb33-21"><a href="#cb33-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-22"><a href="#cb33-22" aria-hidden="true" tabindex="-1"></a><span class="co"># xs = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]]として, for文の多重ループを利用して, xs[0]からxs[3]の合計値が入ったリストを求める</span></span>
<span id="cb33-23"><a href="#cb33-23" aria-hidden="true" tabindex="-1"></a>xs <span class="op">=</span> [[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>],[<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>,<span class="dv">10</span>],[<span class="dv">11</span>,<span class="dv">12</span>,<span class="dv">13</span>,<span class="dv">14</span>,<span class="dv">15</span>],[<span class="dv">16</span>,<span class="dv">17</span>,<span class="dv">18</span>,<span class="dv">19</span>,<span class="dv">20</span>]]</span>
<span id="cb33-24"><a href="#cb33-24" aria-hidden="true" tabindex="-1"></a>sum_list <span class="op">=</span> []</span>
<span id="cb33-25"><a href="#cb33-25" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> xs:</span>
<span id="cb33-26"><a href="#cb33-26" aria-hidden="true" tabindex="-1"></a>    total <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb33-27"><a href="#cb33-27" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> j <span class="kw">in</span> i:</span>
<span id="cb33-28"><a href="#cb33-28" aria-hidden="true" tabindex="-1"></a>        total <span class="op">+=</span> j</span>
<span id="cb33-29"><a href="#cb33-29" aria-hidden="true" tabindex="-1"></a>    sum_list.append(total)</span>
<span id="cb33-30"><a href="#cb33-30" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;---------</span><span class="ch">\n</span><span class="st">&#39;</span>, sum_list)</span>
<span id="cb33-31"><a href="#cb33-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-32"><a href="#cb33-32" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;---------&#39;</span>)</span>
<span id="cb33-33"><a href="#cb33-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-34"><a href="#cb33-34" aria-hidden="true" tabindex="-1"></a><span class="co"># FizzBuzzとはプログラミングの動作確認でよく用いられる欧米圏の言葉遊びゲームです.. 以下のルールに則って1から100までの数を順番にFizzBuzzの判定を行ってください.</span></span>
<span id="cb33-35"><a href="#cb33-35" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">101</span>):</span>
<span id="cb33-36"><a href="#cb33-36" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> i<span class="op">%</span><span class="dv">3</span> <span class="op">==</span> <span class="dv">0</span> <span class="kw">and</span> i<span class="op">%</span><span class="dv">5</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb33-37"><a href="#cb33-37" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(i, <span class="st">&#39;FizzBuzz&#39;</span>)</span>
<span id="cb33-38"><a href="#cb33-38" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> i<span class="op">%</span><span class="dv">3</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb33-39"><a href="#cb33-39" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(i, <span class="st">&#39;Fizz&#39;</span>)</span>
<span id="cb33-40"><a href="#cb33-40" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> i<span class="op">%</span><span class="dv">5</span> <span class="op">==</span><span class="dv">0</span>:</span>
<span id="cb33-41"><a href="#cb33-41" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(i, <span class="st">&#39;Buzz&#39;</span>)</span>
<span id="cb33-42"><a href="#cb33-42" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb33-43"><a href="#cb33-43" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(i)</span></code></pre></div>
<h1 data-number="34" id="演習-28"><span class="header-section-number">34</span> 6.4.2.4 演習</h1>
<div class="sourceCode" id="cb34"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 質問に対する回答をinput関数で受け取り,それに対して返答をする簡単なBotプログラムを作成してください. なお,分岐は最低5つ以上とすること.</span></span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true" tabindex="-1"></a>answer <span class="op">=</span> <span class="bu">input</span>(<span class="st">&quot;テストは何点でしたか?(終了する場合は[終了]と入力してください.)</span><span class="ch">\n</span><span class="st">&quot;</span>)</span>
<span id="cb34-3"><a href="#cb34-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-4"><a href="#cb34-4" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> <span class="va">True</span>:</span>
<span id="cb34-5"><a href="#cb34-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> answer <span class="op">==</span> <span class="st">&#39;終了&#39;</span>:</span>
<span id="cb34-6"><a href="#cb34-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">break</span></span>
<span id="cb34-7"><a href="#cb34-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> <span class="bu">int</span>(answer) <span class="op">&gt;</span> <span class="dv">100</span> <span class="kw">or</span> <span class="bu">int</span>(answer) <span class="op">&lt;</span> <span class="dv">0</span>:</span>
<span id="cb34-8"><a href="#cb34-8" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;0 ~ 100の数値を入力してください.&quot;</span>)</span>
<span id="cb34-9"><a href="#cb34-9" aria-hidden="true" tabindex="-1"></a>        answer <span class="op">=</span> <span class="bu">input</span>(<span class="st">&quot;テストは何点でしたか?</span><span class="ch">\n</span><span class="st">&quot;</span>)</span>
<span id="cb34-10"><a href="#cb34-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">continue</span></span>
<span id="cb34-11"><a href="#cb34-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> <span class="bu">int</span>(answer) <span class="op">&gt;=</span> <span class="dv">90</span>:</span>
<span id="cb34-12"><a href="#cb34-12" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;S:素晴らしいです.&quot;</span>)</span>
<span id="cb34-13"><a href="#cb34-13" aria-hidden="true" tabindex="-1"></a>        answer <span class="op">=</span> <span class="bu">input</span>(<span class="st">&quot;他のテストは何点でしたか?</span><span class="ch">\n</span><span class="st">&quot;</span>)</span>
<span id="cb34-14"><a href="#cb34-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">continue</span></span>
<span id="cb34-15"><a href="#cb34-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> <span class="bu">int</span>(answer) <span class="op">&gt;=</span> <span class="dv">80</span>:</span>
<span id="cb34-16"><a href="#cb34-16" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;A:よく頑張りました.&quot;</span>)</span>
<span id="cb34-17"><a href="#cb34-17" aria-hidden="true" tabindex="-1"></a>        answer <span class="op">=</span> <span class="bu">input</span>(<span class="st">&quot;他のテストは何点でしたか?</span><span class="ch">\n</span><span class="st">&quot;</span>)</span>
<span id="cb34-18"><a href="#cb34-18" aria-hidden="true" tabindex="-1"></a>        <span class="cf">continue</span></span>
<span id="cb34-19"><a href="#cb34-19" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> <span class="bu">int</span>(answer) <span class="op">&gt;=</span> <span class="dv">70</span>:</span>
<span id="cb34-20"><a href="#cb34-20" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;B:お疲れ様でした.&quot;</span>)</span>
<span id="cb34-21"><a href="#cb34-21" aria-hidden="true" tabindex="-1"></a>        answer <span class="op">=</span> <span class="bu">input</span>(<span class="st">&quot;他のテストは何点でしたか?</span><span class="ch">\n</span><span class="st">&quot;</span>)</span>
<span id="cb34-22"><a href="#cb34-22" aria-hidden="true" tabindex="-1"></a>        <span class="cf">continue</span></span>
<span id="cb34-23"><a href="#cb34-23" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> <span class="bu">int</span>(answer) <span class="op">&gt;=</span> <span class="dv">60</span>:</span>
<span id="cb34-24"><a href="#cb34-24" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;C:もう少し頑張りましょう.&quot;</span>)</span>
<span id="cb34-25"><a href="#cb34-25" aria-hidden="true" tabindex="-1"></a>        answer <span class="op">=</span> <span class="bu">input</span>(<span class="st">&quot;他のテストは何点でしたか?</span><span class="ch">\n</span><span class="st">&quot;</span>)</span>
<span id="cb34-26"><a href="#cb34-26" aria-hidden="true" tabindex="-1"></a>        <span class="cf">continue</span></span>
<span id="cb34-27"><a href="#cb34-27" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> <span class="bu">int</span>(answer) <span class="op">&lt;=</span> <span class="dv">59</span>:</span>
<span id="cb34-28"><a href="#cb34-28" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;F:残念です.&quot;</span>)</span>
<span id="cb34-29"><a href="#cb34-29" aria-hidden="true" tabindex="-1"></a>        answer <span class="op">=</span> <span class="bu">input</span>(<span class="st">&quot;他のテストは何点でしたか?</span><span class="ch">\n</span><span class="st">&quot;</span>)</span>
<span id="cb34-30"><a href="#cb34-30" aria-hidden="true" tabindex="-1"></a>        <span class="cf">continue</span></span></code></pre></div>
<h1 data-number="35" id="演習-29"><span class="header-section-number">35</span> 6.4.2.5 演習</h1>
<div class="sourceCode" id="cb35"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb35-2"><a href="#cb35-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-3"><a href="#cb35-3" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/kome.csv&#39;</span>)</span>
<span id="cb35-4"><a href="#cb35-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb35-5"><a href="#cb35-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-6"><a href="#cb35-6" aria-hidden="true" tabindex="-1"></a><span class="co"># 米相場列を数値型に変換</span></span>
<span id="cb35-7"><a href="#cb35-7" aria-hidden="true" tabindex="-1"></a><span class="co"># 変換できない値 → NaN</span></span>
<span id="cb35-8"><a href="#cb35-8" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;米相場&#39;</span>] <span class="op">=</span> pd.to_numeric(df[<span class="st">&#39;米相場&#39;</span>], errors<span class="op">=</span><span class="st">&#39;coerce&#39;</span>)</span>
<span id="cb35-9"><a href="#cb35-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-10"><a href="#cb35-10" aria-hidden="true" tabindex="-1"></a><span class="co"># NaNの削除</span></span>
<span id="cb35-11"><a href="#cb35-11" aria-hidden="true" tabindex="-1"></a>df.dropna(subset<span class="op">=</span>[<span class="st">&#39;米相場&#39;</span>], how<span class="op">=</span><span class="st">&#39;any&#39;</span>, inplace<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb35-12"><a href="#cb35-12" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb35-13"><a href="#cb35-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-14"><a href="#cb35-14" aria-hidden="true" tabindex="-1"></a><span class="co"># indexを振り直す</span></span>
<span id="cb35-15"><a href="#cb35-15" aria-hidden="true" tabindex="-1"></a>df.reset_index(inplace<span class="op">=</span><span class="va">True</span>,drop<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb35-16"><a href="#cb35-16" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb35-17"><a href="#cb35-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-18"><a href="#cb35-18" aria-hidden="true" tabindex="-1"></a><span class="co">#米相場列をfloat型にする</span></span>
<span id="cb35-19"><a href="#cb35-19" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;米相場&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;米相場&#39;</span>].astype(<span class="bu">float</span>)</span>
<span id="cb35-20"><a href="#cb35-20" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb35-21"><a href="#cb35-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-22"><a href="#cb35-22" aria-hidden="true" tabindex="-1"></a><span class="co"># 西暦列から&#39;年&#39;を抜く</span></span>
<span id="cb35-23"><a href="#cb35-23" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> df.index:</span>
<span id="cb35-24"><a href="#cb35-24" aria-hidden="true" tabindex="-1"></a>    df.at[i, <span class="st">&#39;西暦&#39;</span>] <span class="op">=</span> df.at[i, <span class="st">&#39;西暦&#39;</span>][:<span class="op">-</span><span class="dv">1</span>]</span>
<span id="cb35-25"><a href="#cb35-25" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb35-26"><a href="#cb35-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-27"><a href="#cb35-27" aria-hidden="true" tabindex="-1"></a><span class="co"># 西暦列をint型にする</span></span>
<span id="cb35-28"><a href="#cb35-28" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;西暦&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;西暦&#39;</span>].astype(<span class="bu">int</span>)</span>
<span id="cb35-29"><a href="#cb35-29" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;西暦&#39;</span>].dtype)</span>
<span id="cb35-30"><a href="#cb35-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-31"><a href="#cb35-31" aria-hidden="true" tabindex="-1"></a><span class="co"># 西暦列の重複を除いた値を確認</span></span>
<span id="cb35-32"><a href="#cb35-32" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;西暦&#39;</span>].unique())</span>
<span id="cb35-33"><a href="#cb35-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-34"><a href="#cb35-34" aria-hidden="true" tabindex="-1"></a><span class="co"># 西暦ごとに米相場列の値をまとめる</span></span>
<span id="cb35-35"><a href="#cb35-35" aria-hidden="true" tabindex="-1"></a>data <span class="op">=</span> {i: [] <span class="cf">for</span> i <span class="kw">in</span> df[<span class="st">&#39;西暦&#39;</span>].unique()}</span>
<span id="cb35-36"><a href="#cb35-36" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(data)</span>
<span id="cb35-37"><a href="#cb35-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-38"><a href="#cb35-38" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> df.index:</span>
<span id="cb35-39"><a href="#cb35-39" aria-hidden="true" tabindex="-1"></a>    data[df.at[i,<span class="st">&#39;西暦&#39;</span>]] <span class="op">+=</span> [df.at[i,<span class="st">&#39;米相場&#39;</span>]]</span>
<span id="cb35-40"><a href="#cb35-40" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(data)</span>
<span id="cb35-41"><a href="#cb35-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-42"><a href="#cb35-42" aria-hidden="true" tabindex="-1"></a><span class="co"># 西暦ごとの米相場の平均値を計算</span></span>
<span id="cb35-43"><a href="#cb35-43" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> df[<span class="st">&#39;西暦&#39;</span>].unique():</span>
<span id="cb35-44"><a href="#cb35-44" aria-hidden="true" tabindex="-1"></a>    total <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb35-45"><a href="#cb35-45" aria-hidden="true" tabindex="-1"></a>    length <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb35-46"><a href="#cb35-46" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> j <span class="kw">in</span> data[i]:</span>
<span id="cb35-47"><a href="#cb35-47" aria-hidden="true" tabindex="-1"></a>        total <span class="op">+=</span> j</span>
<span id="cb35-48"><a href="#cb35-48" aria-hidden="true" tabindex="-1"></a>        length <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb35-49"><a href="#cb35-49" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f&#39;</span><span class="sc">{</span>i<span class="sc">}</span><span class="ss">年, mean:</span><span class="sc">{</span>total<span class="op">/</span>length<span class="sc">}</span><span class="ss">&#39;</span>)</span></code></pre></div>
<h1 data-number="36" id="演習-30"><span class="header-section-number">36</span> 9.1-9.2 演習</h1>
<div class="sourceCode" id="cb36"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 円グラフデータ,折れ線グラフデータ2,棒グラフデータ3を利用し,それぞれのグラフを作成してください. 表示が必要だと思われるデザインを設定してください.</span></span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb36-4"><a href="#cb36-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.pyplot <span class="im">as</span> plt</span>
<span id="cb36-5"><a href="#cb36-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> japanize_matplotlib</span>
<span id="cb36-6"><a href="#cb36-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-7"><a href="#cb36-7" aria-hidden="true" tabindex="-1"></a><span class="co"># 円グラフ</span></span>
<span id="cb36-8"><a href="#cb36-8" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/pie_chart_practice.csv&#39;</span>)</span>
<span id="cb36-9"><a href="#cb36-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb36-10"><a href="#cb36-10" aria-hidden="true" tabindex="-1"></a><span class="co"># ラベルの抽出</span></span>
<span id="cb36-11"><a href="#cb36-11" aria-hidden="true" tabindex="-1"></a>labels <span class="op">=</span> <span class="bu">list</span>(df[<span class="st">&#39;Category&#39;</span>])</span>
<span id="cb36-12"><a href="#cb36-12" aria-hidden="true" tabindex="-1"></a><span class="co"># 値の抽出</span></span>
<span id="cb36-13"><a href="#cb36-13" aria-hidden="true" tabindex="-1"></a>values <span class="op">=</span> <span class="bu">list</span>(df[<span class="st">&#39;Values&#39;</span>])</span>
<span id="cb36-14"><a href="#cb36-14" aria-hidden="true" tabindex="-1"></a><span class="co"># 円グラフの作成</span></span>
<span id="cb36-15"><a href="#cb36-15" aria-hidden="true" tabindex="-1"></a>plt.pie(values, labels<span class="op">=</span>labels, autopct<span class="op">=</span><span class="st">&#39;%1.0f</span><span class="sc">%%</span><span class="st">&#39;</span>)</span>
<span id="cb36-16"><a href="#cb36-16" aria-hidden="true" tabindex="-1"></a><span class="co"># タイトル</span></span>
<span id="cb36-17"><a href="#cb36-17" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;pie chart&#39;</span>)</span>
<span id="cb36-18"><a href="#cb36-18" aria-hidden="true" tabindex="-1"></a><span class="co"># グラフの表示</span></span>
<span id="cb36-19"><a href="#cb36-19" aria-hidden="true" tabindex="-1"></a>plt.show()</span>
<span id="cb36-20"><a href="#cb36-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-21"><a href="#cb36-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-22"><a href="#cb36-22" aria-hidden="true" tabindex="-1"></a><span class="co"># 折れ線グラフ</span></span>
<span id="cb36-23"><a href="#cb36-23" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/line_chart_practice.csv&#39;</span>)</span>
<span id="cb36-24"><a href="#cb36-24" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb36-25"><a href="#cb36-25" aria-hidden="true" tabindex="-1"></a><span class="co"># 折れ線グラフの作成</span></span>
<span id="cb36-26"><a href="#cb36-26" aria-hidden="true" tabindex="-1"></a>plt.plot(df[<span class="st">&#39;Month&#39;</span>]</span>
<span id="cb36-27"><a href="#cb36-27" aria-hidden="true" tabindex="-1"></a>        ,df[<span class="st">&#39;Value&#39;</span>]</span>
<span id="cb36-28"><a href="#cb36-28" aria-hidden="true" tabindex="-1"></a>        ,color<span class="op">=</span><span class="st">&#39;red&#39;</span>)</span>
<span id="cb36-29"><a href="#cb36-29" aria-hidden="true" tabindex="-1"></a><span class="co"># タイトル</span></span>
<span id="cb36-30"><a href="#cb36-30" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;line chart&#39;</span>)</span>
<span id="cb36-31"><a href="#cb36-31" aria-hidden="true" tabindex="-1"></a><span class="co"># x軸の表示範囲</span></span>
<span id="cb36-32"><a href="#cb36-32" aria-hidden="true" tabindex="-1"></a>plt.xlim(<span class="st">&#39;January&#39;</span>, <span class="st">&#39;June&#39;</span>)</span>
<span id="cb36-33"><a href="#cb36-33" aria-hidden="true" tabindex="-1"></a><span class="co"># 補助線</span></span>
<span id="cb36-34"><a href="#cb36-34" aria-hidden="true" tabindex="-1"></a>plt.minorticks_on()</span>
<span id="cb36-35"><a href="#cb36-35" aria-hidden="true" tabindex="-1"></a>plt.grid(which<span class="op">=</span><span class="st">&#39;both&#39;</span>)</span>
<span id="cb36-36"><a href="#cb36-36" aria-hidden="true" tabindex="-1"></a><span class="co"># x軸のラベル</span></span>
<span id="cb36-37"><a href="#cb36-37" aria-hidden="true" tabindex="-1"></a>plt.xlabel(<span class="st">&#39;Month&#39;</span>)</span>
<span id="cb36-38"><a href="#cb36-38" aria-hidden="true" tabindex="-1"></a><span class="co"># y軸のラベル</span></span>
<span id="cb36-39"><a href="#cb36-39" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&#39;Value&#39;</span>)</span>
<span id="cb36-40"><a href="#cb36-40" aria-hidden="true" tabindex="-1"></a><span class="co"># グラフの表示</span></span>
<span id="cb36-41"><a href="#cb36-41" aria-hidden="true" tabindex="-1"></a>plt.show()</span>
<span id="cb36-42"><a href="#cb36-42" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-43"><a href="#cb36-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-44"><a href="#cb36-44" aria-hidden="true" tabindex="-1"></a><span class="co"># 棒グラフ</span></span>
<span id="cb36-45"><a href="#cb36-45" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/bar_chart_practice.csv&#39;</span>)</span>
<span id="cb36-46"><a href="#cb36-46" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb36-47"><a href="#cb36-47" aria-hidden="true" tabindex="-1"></a><span class="co"># &#39;ggplot&#39;スタイルを使用</span></span>
<span id="cb36-48"><a href="#cb36-48" aria-hidden="true" tabindex="-1"></a>plt.style.use(<span class="st">&#39;ggplot&#39;</span>)</span>
<span id="cb36-49"><a href="#cb36-49" aria-hidden="true" tabindex="-1"></a><span class="co"># X軸の値を抽出</span></span>
<span id="cb36-50"><a href="#cb36-50" aria-hidden="true" tabindex="-1"></a>labels <span class="op">=</span> <span class="bu">list</span>(df[<span class="st">&#39;Item&#39;</span>])</span>
<span id="cb36-51"><a href="#cb36-51" aria-hidden="true" tabindex="-1"></a><span class="co"># y軸の値を抽出</span></span>
<span id="cb36-52"><a href="#cb36-52" aria-hidden="true" tabindex="-1"></a>values <span class="op">=</span> <span class="bu">list</span>(df[<span class="st">&#39;Value&#39;</span>])</span>
<span id="cb36-53"><a href="#cb36-53" aria-hidden="true" tabindex="-1"></a><span class="co"># 棒グラフの作成</span></span>
<span id="cb36-54"><a href="#cb36-54" aria-hidden="true" tabindex="-1"></a>plt.bar(x<span class="op">=</span>labels, height<span class="op">=</span>values)</span>
<span id="cb36-55"><a href="#cb36-55" aria-hidden="true" tabindex="-1"></a><span class="co"># タイトル</span></span>
<span id="cb36-56"><a href="#cb36-56" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;bar chart&#39;</span>)</span>
<span id="cb36-57"><a href="#cb36-57" aria-hidden="true" tabindex="-1"></a><span class="co"># ラベル</span></span>
<span id="cb36-58"><a href="#cb36-58" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&#39;Value&#39;</span>)</span>
<span id="cb36-59"><a href="#cb36-59" aria-hidden="true" tabindex="-1"></a><span class="co"># グラフの表示</span></span>
<span id="cb36-60"><a href="#cb36-60" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<h1 data-number="37" id="演習-31"><span class="header-section-number">37</span> 9.5 演習</h1>
<div class="sourceCode" id="cb37"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true" tabindex="-1"></a><span class="co"># データ1(質的データ)</span></span>
<span id="cb37-2"><a href="#cb37-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb37-3"><a href="#cb37-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb37-4"><a href="#cb37-4" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> matplotlib <span class="im">import</span> pyplot <span class="im">as</span> plt</span>
<span id="cb37-5"><a href="#cb37-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> japanize_matplotlib</span>
<span id="cb37-6"><a href="#cb37-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb37-7"><a href="#cb37-7" aria-hidden="true" tabindex="-1"></a><span class="co">#データの読み込み</span></span>
<span id="cb37-8"><a href="#cb37-8" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/qualitative_histogram_practice.csv&#39;</span>)</span>
<span id="cb37-9"><a href="#cb37-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb37-10"><a href="#cb37-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb37-11"><a href="#cb37-11" aria-hidden="true" tabindex="-1"></a><span class="co">#ヒストグラムを作りたいデータの列名を指定</span></span>
<span id="cb37-12"><a href="#cb37-12" aria-hidden="true" tabindex="-1"></a>target_column <span class="op">=</span> <span class="st">&#39;Category&#39;</span></span>
<span id="cb37-13"><a href="#cb37-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb37-14"><a href="#cb37-14" aria-hidden="true" tabindex="-1"></a><span class="co">#度数</span></span>
<span id="cb37-15"><a href="#cb37-15" aria-hidden="true" tabindex="-1"></a>freq <span class="op">=</span> df[target_column].value_counts(sort<span class="op">=</span><span class="va">False</span>)</span>
<span id="cb37-16"><a href="#cb37-16" aria-hidden="true" tabindex="-1"></a><span class="co">#順番の入れ替え</span></span>
<span id="cb37-17"><a href="#cb37-17" aria-hidden="true" tabindex="-1"></a>freq <span class="op">=</span> freq.reindex([<span class="st">&#39;Category A&#39;</span></span>
<span id="cb37-18"><a href="#cb37-18" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;Category B&#39;</span></span>
<span id="cb37-19"><a href="#cb37-19" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;Category C&#39;</span></span>
<span id="cb37-20"><a href="#cb37-20" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;Category D&#39;</span>],axis<span class="op">=</span><span class="st">&#39;index&#39;</span>)</span>
<span id="cb37-21"><a href="#cb37-21" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;度数&#39;</span>,freq)</span>
<span id="cb37-22"><a href="#cb37-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb37-23"><a href="#cb37-23" aria-hidden="true" tabindex="-1"></a>rel_freq <span class="op">=</span> freq <span class="op">/</span> df[target_column].count()  <span class="co"># 相対度数</span></span>
<span id="cb37-24"><a href="#cb37-24" aria-hidden="true" tabindex="-1"></a>cum_freq <span class="op">=</span> freq.cumsum()  <span class="co"># 累積度数</span></span>
<span id="cb37-25"><a href="#cb37-25" aria-hidden="true" tabindex="-1"></a>rel_cum_freq <span class="op">=</span> rel_freq.cumsum()  <span class="co"># 相対累積度数</span></span>
<span id="cb37-26"><a href="#cb37-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb37-27"><a href="#cb37-27" aria-hidden="true" tabindex="-1"></a>dist <span class="op">=</span> pd.DataFrame(</span>
<span id="cb37-28"><a href="#cb37-28" aria-hidden="true" tabindex="-1"></a>    {   <span class="st">&quot;Value&quot;</span>: freq.index,        <span class="co">#階級値</span></span>
<span id="cb37-29"><a href="#cb37-29" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Freq&quot;</span>: freq,               <span class="co">#度数</span></span>
<span id="cb37-30"><a href="#cb37-30" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Rel&quot;</span>: rel_freq,            <span class="co">#相対度数</span></span>
<span id="cb37-31"><a href="#cb37-31" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Cum&quot;</span>: cum_freq,            <span class="co">#累積度数</span></span>
<span id="cb37-32"><a href="#cb37-32" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;RelCum&quot;</span>: rel_cum_freq,     <span class="co">#相対累積度数</span></span>
<span id="cb37-33"><a href="#cb37-33" aria-hidden="true" tabindex="-1"></a>    },</span>
<span id="cb37-34"><a href="#cb37-34" aria-hidden="true" tabindex="-1"></a>    index<span class="op">=</span>freq.index</span>
<span id="cb37-35"><a href="#cb37-35" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb37-36"><a href="#cb37-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb37-37"><a href="#cb37-37" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(dist)</span>
<span id="cb37-38"><a href="#cb37-38" aria-hidden="true" tabindex="-1"></a>dist.to_csv(<span class="st">&#39;frequency_table_qualitative.csv&#39;</span>,encoding<span class="op">=</span><span class="st">&#39;utf-8-sig&#39;</span>,index<span class="op">=</span><span class="va">False</span>)</span>
<span id="cb37-39"><a href="#cb37-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb37-40"><a href="#cb37-40" aria-hidden="true" tabindex="-1"></a><span class="co"># ヒストグラム</span></span>
<span id="cb37-41"><a href="#cb37-41" aria-hidden="true" tabindex="-1"></a>plt.bar(x<span class="op">=</span>dist[<span class="st">&#39;Value&#39;</span>], height<span class="op">=</span>dist[<span class="st">&quot;Freq&quot;</span>],width<span class="op">=</span><span class="dv">1</span>)</span>
<span id="cb37-42"><a href="#cb37-42" aria-hidden="true" tabindex="-1"></a>plt.xticks(np.arange(<span class="bu">len</span>(dist)),<span class="bu">list</span>(dist.index),rotation<span class="op">=</span><span class="dv">15</span>)</span>
<span id="cb37-43"><a href="#cb37-43" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;qualitative_histogram&#39;</span>)</span>
<span id="cb37-44"><a href="#cb37-44" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<div class="sourceCode" id="cb38"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb38-1"><a href="#cb38-1" aria-hidden="true" tabindex="-1"></a><span class="co"># データ2(量的データ)</span></span>
<span id="cb38-2"><a href="#cb38-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb38-3"><a href="#cb38-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb38-4"><a href="#cb38-4" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> matplotlib <span class="im">import</span> pyplot <span class="im">as</span> plt</span>
<span id="cb38-5"><a href="#cb38-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> japanize_matplotlib</span>
<span id="cb38-6"><a href="#cb38-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> math</span>
<span id="cb38-7"><a href="#cb38-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-8"><a href="#cb38-8" aria-hidden="true" tabindex="-1"></a><span class="co">#ヒストグラムを作りたいデータの列名を指定</span></span>
<span id="cb38-9"><a href="#cb38-9" aria-hidden="true" tabindex="-1"></a>target_column <span class="op">=</span> <span class="st">&#39;Values&#39;</span></span>
<span id="cb38-10"><a href="#cb38-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-11"><a href="#cb38-11" aria-hidden="true" tabindex="-1"></a><span class="co"># スタージェス数</span></span>
<span id="cb38-12"><a href="#cb38-12" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> sturgesNumber(n):</span>
<span id="cb38-13"><a href="#cb38-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span>(math.floor(<span class="dv">1</span> <span class="op">+</span> math.log2(n)))</span>
<span id="cb38-14"><a href="#cb38-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-15"><a href="#cb38-15" aria-hidden="true" tabindex="-1"></a><span class="co"># データの読み込み</span></span>
<span id="cb38-16"><a href="#cb38-16" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/quantitative_histogram_practice.csv&#39;</span>)</span>
<span id="cb38-17"><a href="#cb38-17" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb38-18"><a href="#cb38-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-19"><a href="#cb38-19" aria-hidden="true" tabindex="-1"></a><span class="co">#階級数を決定</span></span>
<span id="cb38-20"><a href="#cb38-20" aria-hidden="true" tabindex="-1"></a>stnum <span class="op">=</span> sturgesNumber(<span class="bu">len</span>(df[target_column]))</span>
<span id="cb38-21"><a href="#cb38-21" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;sturges number:&#39;</span>,stnum)</span>
<span id="cb38-22"><a href="#cb38-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-23"><a href="#cb38-23" aria-hidden="true" tabindex="-1"></a><span class="co">#階級幅を決定</span></span>
<span id="cb38-24"><a href="#cb38-24" aria-hidden="true" tabindex="-1"></a>space <span class="op">=</span> <span class="bu">int</span>((df[target_column].<span class="bu">max</span>() <span class="op">-</span> df[target_column].<span class="bu">min</span>()) <span class="op">/</span> stnum)</span>
<span id="cb38-25"><a href="#cb38-25" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[target_column].<span class="bu">max</span>())</span>
<span id="cb38-26"><a href="#cb38-26" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[target_column].<span class="bu">min</span>())</span>
<span id="cb38-27"><a href="#cb38-27" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;space:&#39;</span>,space)</span>
<span id="cb38-28"><a href="#cb38-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-29"><a href="#cb38-29" aria-hidden="true" tabindex="-1"></a><span class="co">#階級幅の終端を指定</span></span>
<span id="cb38-30"><a href="#cb38-30" aria-hidden="true" tabindex="-1"></a>bins <span class="op">=</span> np.arange(start <span class="op">=</span> <span class="bu">int</span>(df[target_column].<span class="bu">min</span>()) <span class="op">-</span> <span class="dv">1</span> <span class="co">#最小値</span></span>
<span id="cb38-31"><a href="#cb38-31" aria-hidden="true" tabindex="-1"></a>                ,stop  <span class="op">=</span> <span class="bu">int</span>(df[target_column].<span class="bu">max</span>()) <span class="op">+</span> <span class="dv">1</span> <span class="co">#最大値</span></span>
<span id="cb38-32"><a href="#cb38-32" aria-hidden="true" tabindex="-1"></a>                ,step  <span class="op">=</span> space <span class="co">#階級幅</span></span>
<span id="cb38-33"><a href="#cb38-33" aria-hidden="true" tabindex="-1"></a>                )</span>
<span id="cb38-34"><a href="#cb38-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-35"><a href="#cb38-35" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;bins:&#39;</span>,bins)</span>
<span id="cb38-36"><a href="#cb38-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-37"><a href="#cb38-37" aria-hidden="true" tabindex="-1"></a><span class="co">#度数</span></span>
<span id="cb38-38"><a href="#cb38-38" aria-hidden="true" tabindex="-1"></a>freq <span class="op">=</span> df[target_column].value_counts(bins <span class="op">=</span>bins, sort<span class="op">=</span><span class="va">False</span>)</span>
<span id="cb38-39"><a href="#cb38-39" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;度数&#39;</span>,freq)</span>
<span id="cb38-40"><a href="#cb38-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-41"><a href="#cb38-41" aria-hidden="true" tabindex="-1"></a>rel_freq <span class="op">=</span> freq <span class="op">/</span> df[target_column].count()  <span class="co"># 相対度数</span></span>
<span id="cb38-42"><a href="#cb38-42" aria-hidden="true" tabindex="-1"></a>cum_freq <span class="op">=</span> freq.cumsum()                     <span class="co"># 累積度数</span></span>
<span id="cb38-43"><a href="#cb38-43" aria-hidden="true" tabindex="-1"></a>rel_cum_freq <span class="op">=</span> rel_freq.cumsum()             <span class="co"># 相対累積度数</span></span>
<span id="cb38-44"><a href="#cb38-44" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-45"><a href="#cb38-45" aria-hidden="true" tabindex="-1"></a>dist <span class="op">=</span> pd.DataFrame(</span>
<span id="cb38-46"><a href="#cb38-46" aria-hidden="true" tabindex="-1"></a>    {   <span class="st">&quot;Value&quot;</span>: freq.index,        <span class="co">#階級値</span></span>
<span id="cb38-47"><a href="#cb38-47" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Freq&quot;</span>: freq,               <span class="co">#度数</span></span>
<span id="cb38-48"><a href="#cb38-48" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Rel&quot;</span>: rel_freq,            <span class="co">#相対度数</span></span>
<span id="cb38-49"><a href="#cb38-49" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Cum&quot;</span>: cum_freq,            <span class="co">#累積度数</span></span>
<span id="cb38-50"><a href="#cb38-50" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;RelCum&quot;</span>: rel_cum_freq,     <span class="co">#相対累積度数</span></span>
<span id="cb38-51"><a href="#cb38-51" aria-hidden="true" tabindex="-1"></a>    },</span>
<span id="cb38-52"><a href="#cb38-52" aria-hidden="true" tabindex="-1"></a>    index<span class="op">=</span>freq.index</span>
<span id="cb38-53"><a href="#cb38-53" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb38-54"><a href="#cb38-54" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-55"><a href="#cb38-55" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(dist)</span>
<span id="cb38-56"><a href="#cb38-56" aria-hidden="true" tabindex="-1"></a>dist.to_csv(<span class="st">&#39;frequency_table_quantitative.csv&#39;</span>,encoding<span class="op">=</span><span class="st">&#39;utf-8-sig&#39;</span>,index<span class="op">=</span><span class="va">False</span>)</span>
<span id="cb38-57"><a href="#cb38-57" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-58"><a href="#cb38-58" aria-hidden="true" tabindex="-1"></a>plt.bar(x<span class="op">=</span>dist[<span class="st">&#39;Value&#39;</span>].astype(<span class="bu">str</span>)</span>
<span id="cb38-59"><a href="#cb38-59" aria-hidden="true" tabindex="-1"></a>       ,height<span class="op">=</span>dist[<span class="st">&quot;Freq&quot;</span>],width<span class="op">=</span><span class="dv">1</span>)</span>
<span id="cb38-60"><a href="#cb38-60" aria-hidden="true" tabindex="-1"></a>plt.xticks(np.arange(<span class="bu">len</span>(dist)),<span class="bu">list</span>(dist.index),rotation<span class="op">=</span><span class="dv">15</span>)</span>
<span id="cb38-61"><a href="#cb38-61" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;quantitative_histogram&#39;</span>)</span>
<span id="cb38-62"><a href="#cb38-62" aria-hidden="true" tabindex="-1"></a>plt.show()</span>
<span id="cb38-63"><a href="#cb38-63" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-64"><a href="#cb38-64" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-65"><a href="#cb38-65" aria-hidden="true" tabindex="-1"></a><span class="co"># 外れ値の除外</span></span>
<span id="cb38-66"><a href="#cb38-66" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;------外れ値除外後------&#39;</span>)</span>
<span id="cb38-67"><a href="#cb38-67" aria-hidden="true" tabindex="-1"></a><span class="co"># 四分位範囲を求める(第三四分位数-第一四分位数)</span></span>
<span id="cb38-68"><a href="#cb38-68" aria-hidden="true" tabindex="-1"></a>Q1 <span class="op">=</span> df[<span class="st">&#39;Values&#39;</span>].quantile(<span class="fl">0.25</span>)</span>
<span id="cb38-69"><a href="#cb38-69" aria-hidden="true" tabindex="-1"></a>Q3 <span class="op">=</span> df[<span class="st">&#39;Values&#39;</span>].quantile(<span class="fl">0.75</span>)</span>
<span id="cb38-70"><a href="#cb38-70" aria-hidden="true" tabindex="-1"></a>IQR <span class="op">=</span> Q3<span class="op">-</span>Q1</span>
<span id="cb38-71"><a href="#cb38-71" aria-hidden="true" tabindex="-1"></a><span class="co"># 四分位範囲を1.5倍に拡大し,範囲外の値を外れ値とする</span></span>
<span id="cb38-72"><a href="#cb38-72" aria-hidden="true" tabindex="-1"></a>lower <span class="op">=</span> Q1 <span class="op">-</span> <span class="fl">1.5</span><span class="op">*</span>IQR</span>
<span id="cb38-73"><a href="#cb38-73" aria-hidden="true" tabindex="-1"></a>upper <span class="op">=</span> Q3 <span class="op">+</span> <span class="fl">1.5</span><span class="op">*</span>IQR</span>
<span id="cb38-74"><a href="#cb38-74" aria-hidden="true" tabindex="-1"></a><span class="co"># 範囲内の値のみ残す</span></span>
<span id="cb38-75"><a href="#cb38-75" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;Values&#39;</span>] <span class="op">=</span> df[(df[<span class="st">&#39;Values&#39;</span>]<span class="op">&gt;=</span>lower)<span class="op">&amp;</span>(df[<span class="st">&#39;Values&#39;</span>]<span class="op">&lt;=</span>upper)]</span>
<span id="cb38-76"><a href="#cb38-76" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb38-77"><a href="#cb38-77" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-78"><a href="#cb38-78" aria-hidden="true" tabindex="-1"></a><span class="co">#階級数を決定</span></span>
<span id="cb38-79"><a href="#cb38-79" aria-hidden="true" tabindex="-1"></a>stnum <span class="op">=</span> sturgesNumber(<span class="bu">len</span>(df[target_column]))</span>
<span id="cb38-80"><a href="#cb38-80" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;sturges number:&#39;</span>,stnum)</span>
<span id="cb38-81"><a href="#cb38-81" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-82"><a href="#cb38-82" aria-hidden="true" tabindex="-1"></a><span class="co">#階級幅を決定</span></span>
<span id="cb38-83"><a href="#cb38-83" aria-hidden="true" tabindex="-1"></a>space <span class="op">=</span> <span class="bu">int</span>((df[target_column].<span class="bu">max</span>() <span class="op">-</span> df[target_column].<span class="bu">min</span>()) <span class="op">/</span> stnum)</span>
<span id="cb38-84"><a href="#cb38-84" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[target_column].<span class="bu">max</span>())</span>
<span id="cb38-85"><a href="#cb38-85" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[target_column].<span class="bu">min</span>())</span>
<span id="cb38-86"><a href="#cb38-86" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;space:&#39;</span>,space)</span>
<span id="cb38-87"><a href="#cb38-87" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-88"><a href="#cb38-88" aria-hidden="true" tabindex="-1"></a><span class="co">#階級幅の終端を指定</span></span>
<span id="cb38-89"><a href="#cb38-89" aria-hidden="true" tabindex="-1"></a>bins <span class="op">=</span> np.arange(start <span class="op">=</span> <span class="bu">int</span>(df[target_column].<span class="bu">min</span>()) <span class="op">-</span> <span class="dv">1</span> <span class="co">#最小値</span></span>
<span id="cb38-90"><a href="#cb38-90" aria-hidden="true" tabindex="-1"></a>                ,stop  <span class="op">=</span> <span class="bu">int</span>(df[target_column].<span class="bu">max</span>()) <span class="op">+</span> <span class="dv">1</span> <span class="co">#最大値</span></span>
<span id="cb38-91"><a href="#cb38-91" aria-hidden="true" tabindex="-1"></a>                ,step  <span class="op">=</span> space <span class="co">#階級幅</span></span>
<span id="cb38-92"><a href="#cb38-92" aria-hidden="true" tabindex="-1"></a>                )</span>
<span id="cb38-93"><a href="#cb38-93" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-94"><a href="#cb38-94" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;bins:&#39;</span>,bins)</span>
<span id="cb38-95"><a href="#cb38-95" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-96"><a href="#cb38-96" aria-hidden="true" tabindex="-1"></a><span class="co">#度数</span></span>
<span id="cb38-97"><a href="#cb38-97" aria-hidden="true" tabindex="-1"></a>freq <span class="op">=</span> df[target_column].value_counts(bins <span class="op">=</span>bins, sort<span class="op">=</span><span class="va">False</span>)</span>
<span id="cb38-98"><a href="#cb38-98" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;度数&#39;</span>,freq)</span>
<span id="cb38-99"><a href="#cb38-99" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-100"><a href="#cb38-100" aria-hidden="true" tabindex="-1"></a>rel_freq <span class="op">=</span> freq <span class="op">/</span> df[target_column].count()  <span class="co"># 相対度数</span></span>
<span id="cb38-101"><a href="#cb38-101" aria-hidden="true" tabindex="-1"></a>cum_freq <span class="op">=</span> freq.cumsum()                     <span class="co"># 累積度数</span></span>
<span id="cb38-102"><a href="#cb38-102" aria-hidden="true" tabindex="-1"></a>rel_cum_freq <span class="op">=</span> rel_freq.cumsum()             <span class="co"># 相対累積度数</span></span>
<span id="cb38-103"><a href="#cb38-103" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-104"><a href="#cb38-104" aria-hidden="true" tabindex="-1"></a>dist <span class="op">=</span> pd.DataFrame(</span>
<span id="cb38-105"><a href="#cb38-105" aria-hidden="true" tabindex="-1"></a>    {   <span class="st">&quot;Value&quot;</span>: freq.index,        <span class="co">#階級値</span></span>
<span id="cb38-106"><a href="#cb38-106" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Freq&quot;</span>: freq,               <span class="co">#度数</span></span>
<span id="cb38-107"><a href="#cb38-107" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Rel&quot;</span>: rel_freq,            <span class="co">#相対度数</span></span>
<span id="cb38-108"><a href="#cb38-108" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Cum&quot;</span>: cum_freq,            <span class="co">#累積度数</span></span>
<span id="cb38-109"><a href="#cb38-109" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;RelCum&quot;</span>: rel_cum_freq,     <span class="co">#相対累積度数</span></span>
<span id="cb38-110"><a href="#cb38-110" aria-hidden="true" tabindex="-1"></a>    },</span>
<span id="cb38-111"><a href="#cb38-111" aria-hidden="true" tabindex="-1"></a>    index<span class="op">=</span>freq.index</span>
<span id="cb38-112"><a href="#cb38-112" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb38-113"><a href="#cb38-113" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-114"><a href="#cb38-114" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(dist)</span>
<span id="cb38-115"><a href="#cb38-115" aria-hidden="true" tabindex="-1"></a>dist.to_csv(<span class="st">&#39;frequency_table_exclude_outlier.csv&#39;</span>,encoding<span class="op">=</span><span class="st">&#39;utf-8-sig&#39;</span>,index<span class="op">=</span><span class="va">False</span>)</span>
<span id="cb38-116"><a href="#cb38-116" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-117"><a href="#cb38-117" aria-hidden="true" tabindex="-1"></a>plt.bar(x<span class="op">=</span>dist[<span class="st">&#39;Value&#39;</span>].astype(<span class="bu">str</span>)</span>
<span id="cb38-118"><a href="#cb38-118" aria-hidden="true" tabindex="-1"></a>       ,height<span class="op">=</span>dist[<span class="st">&quot;Freq&quot;</span>],width<span class="op">=</span><span class="dv">1</span>)</span>
<span id="cb38-119"><a href="#cb38-119" aria-hidden="true" tabindex="-1"></a>plt.xticks(np.arange(<span class="bu">len</span>(dist)),<span class="bu">list</span>(dist.index),rotation<span class="op">=</span><span class="dv">15</span>)</span>
<span id="cb38-120"><a href="#cb38-120" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;quantitative_histogram_exclude_outlier&#39;</span>)</span>
<span id="cb38-121"><a href="#cb38-121" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<h1 data-number="38" id="演習-32"><span class="header-section-number">38</span> 9.3-9.4 / 9.10-9.12 演習</h1>
<div class="sourceCode" id="cb39"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb39-1"><a href="#cb39-1" aria-hidden="true" tabindex="-1"></a><span class="co"># GoogleTrendで4つのワードに関して同じ期間の推移を調べ以下の2通りの方法でCSVを作成してください.</span></span>
<span id="cb39-2"><a href="#cb39-2" aria-hidden="true" tabindex="-1"></a><span class="co"># GoogleTrendにおける&#39;バレーボール&#39;, &#39;ラグビー&#39;, &#39;バスケットボール&#39;, &#39;サッカー&#39;の1ヶ月間の推移</span></span>
<span id="cb39-3"><a href="#cb39-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-4"><a href="#cb39-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb39-5"><a href="#cb39-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.pyplot <span class="im">as</span> plt</span>
<span id="cb39-6"><a href="#cb39-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> japanize_matplotlib</span>
<span id="cb39-7"><a href="#cb39-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-8"><a href="#cb39-8" aria-hidden="true" tabindex="-1"></a><span class="co"># 1つのグラフに表示 for文を利用して1つのグラフに4つの折れ線グラフを色を変えて表示する. 凡例も表示する.</span></span>
<span id="cb39-9"><a href="#cb39-9" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/sports.csv&#39;</span>)</span>
<span id="cb39-10"><a href="#cb39-10" aria-hidden="true" tabindex="-1"></a>df.columns <span class="op">=</span> [<span class="st">&#39;date&#39;</span>, <span class="st">&#39;volleyball&#39;</span>, <span class="st">&#39;rugby&#39;</span>, <span class="st">&#39;basketball&#39;</span>, <span class="st">&#39;soccer&#39;</span>]</span>
<span id="cb39-11"><a href="#cb39-11" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;date&#39;</span>] <span class="op">=</span> pd.to_datetime(df[<span class="st">&#39;date&#39;</span>])</span>
<span id="cb39-12"><a href="#cb39-12" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb39-13"><a href="#cb39-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-14"><a href="#cb39-14" aria-hidden="true" tabindex="-1"></a><span class="co"># 折れ線グラフの作成</span></span>
<span id="cb39-15"><a href="#cb39-15" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> x <span class="kw">in</span> df.columns[<span class="dv">1</span>:]:</span>
<span id="cb39-16"><a href="#cb39-16" aria-hidden="true" tabindex="-1"></a>    plt.plot(df[<span class="st">&#39;date&#39;</span>],df[x],label<span class="op">=</span>x)</span>
<span id="cb39-17"><a href="#cb39-17" aria-hidden="true" tabindex="-1"></a><span class="co"># タイトル</span></span>
<span id="cb39-18"><a href="#cb39-18" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;sports&#39;</span>)</span>
<span id="cb39-19"><a href="#cb39-19" aria-hidden="true" tabindex="-1"></a><span class="co"># 判例</span></span>
<span id="cb39-20"><a href="#cb39-20" aria-hidden="true" tabindex="-1"></a>plt.legend()</span>
<span id="cb39-21"><a href="#cb39-21" aria-hidden="true" tabindex="-1"></a><span class="co"># x軸のラベルを15度傾ける</span></span>
<span id="cb39-22"><a href="#cb39-22" aria-hidden="true" tabindex="-1"></a>plt.xticks(rotation<span class="op">=</span><span class="dv">15</span>)</span>
<span id="cb39-23"><a href="#cb39-23" aria-hidden="true" tabindex="-1"></a><span class="co"># グラフの表示</span></span>
<span id="cb39-24"><a href="#cb39-24" aria-hidden="true" tabindex="-1"></a>plt.show()</span>
<span id="cb39-25"><a href="#cb39-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-26"><a href="#cb39-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-27"><a href="#cb39-27" aria-hidden="true" tabindex="-1"></a><span class="co"># グラフの分割 グラフを分割して,それぞれのワードに関して4象限の折れ線グラフを作成する.</span></span>
<span id="cb39-28"><a href="#cb39-28" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/sports.csv&#39;</span>)</span>
<span id="cb39-29"><a href="#cb39-29" aria-hidden="true" tabindex="-1"></a>df.columns <span class="op">=</span> [<span class="st">&#39;date&#39;</span>, <span class="st">&#39;volleyball&#39;</span>, <span class="st">&#39;rugby&#39;</span>, <span class="st">&#39;basketball&#39;</span>, <span class="st">&#39;soccer&#39;</span>]</span>
<span id="cb39-30"><a href="#cb39-30" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;date&#39;</span>] <span class="op">=</span> pd.to_datetime(df[<span class="st">&#39;date&#39;</span>])</span>
<span id="cb39-31"><a href="#cb39-31" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb39-32"><a href="#cb39-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-33"><a href="#cb39-33" aria-hidden="true" tabindex="-1"></a><span class="co"># 分割した折れ線グラフの作成</span></span>
<span id="cb39-34"><a href="#cb39-34" aria-hidden="true" tabindex="-1"></a>fig, axes <span class="op">=</span> plt.subplots(nrows<span class="op">=</span><span class="dv">2</span>, ncols<span class="op">=</span><span class="dv">2</span>, tight_layout<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb39-35"><a href="#cb39-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-36"><a href="#cb39-36" aria-hidden="true" tabindex="-1"></a>count <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb39-37"><a href="#cb39-37" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">2</span>):</span>
<span id="cb39-38"><a href="#cb39-38" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> j <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">2</span>):</span>
<span id="cb39-39"><a href="#cb39-39" aria-hidden="true" tabindex="-1"></a>        col <span class="op">=</span> df.columns[<span class="dv">1</span>:]</span>
<span id="cb39-40"><a href="#cb39-40" aria-hidden="true" tabindex="-1"></a>        axes[i,j].plot(df[<span class="st">&#39;date&#39;</span>],df[col[count]])</span>
<span id="cb39-41"><a href="#cb39-41" aria-hidden="true" tabindex="-1"></a>        axes[i,j].set_title(col[count])</span>
<span id="cb39-42"><a href="#cb39-42" aria-hidden="true" tabindex="-1"></a>        axes[i,j].tick_params(axis<span class="op">=</span><span class="st">&#39;x&#39;</span>, rotation<span class="op">=</span><span class="dv">15</span>)</span>
<span id="cb39-43"><a href="#cb39-43" aria-hidden="true" tabindex="-1"></a>        count <span class="op">+=</span><span class="dv">1</span></span>
<span id="cb39-44"><a href="#cb39-44" aria-hidden="true" tabindex="-1"></a>fig.suptitle(<span class="st">&#39;sports&#39;</span>)</span>
<span id="cb39-45"><a href="#cb39-45" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<div class="sourceCode" id="cb40"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb40-1"><a href="#cb40-1" aria-hidden="true" tabindex="-1"></a><span class="co"># こちらのカブトムシの種類別の体長と体重のデータを利用して散布図を作成してください.カブトムシの種類別に散布図の色や点の図形を変更してください.</span></span>
<span id="cb40-2"><a href="#cb40-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb40-3"><a href="#cb40-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb40-4"><a href="#cb40-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.pyplot <span class="im">as</span> plt</span>
<span id="cb40-5"><a href="#cb40-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> japanize_matplotlib</span>
<span id="cb40-6"><a href="#cb40-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> seaborn <span class="im">as</span> sns</span>
<span id="cb40-7"><a href="#cb40-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb40-8"><a href="#cb40-8" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/beetle_datal.csv&#39;</span>)</span>
<span id="cb40-9"><a href="#cb40-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb40-10"><a href="#cb40-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb40-11"><a href="#cb40-11" aria-hidden="true" tabindex="-1"></a><span class="co"># 散布図の作成</span></span>
<span id="cb40-12"><a href="#cb40-12" aria-hidden="true" tabindex="-1"></a>sns.scatterplot(x<span class="op">=</span>df[<span class="st">&#39;Length&#39;</span>], y<span class="op">=</span>df[<span class="st">&#39;Weight&#39;</span>], hue<span class="op">=</span><span class="st">&#39;Type&#39;</span>, data<span class="op">=</span>df)</span>
<span id="cb40-13"><a href="#cb40-13" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<div class="sourceCode" id="cb41"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb41-1"><a href="#cb41-1" aria-hidden="true" tabindex="-1"></a><span class="co"># こちらの森の地点別に採取できたカブトムシの種類を記録したデータを可視化しどの森でどのカブトムシが取れやすいのかを分析してください.</span></span>
<span id="cb41-2"><a href="#cb41-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb41-3"><a href="#cb41-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb41-4"><a href="#cb41-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.pyplot <span class="im">as</span> plt</span>
<span id="cb41-5"><a href="#cb41-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> japanize_matplotlib</span>
<span id="cb41-6"><a href="#cb41-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> seaborn <span class="im">as</span> sns</span>
<span id="cb41-7"><a href="#cb41-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb41-8"><a href="#cb41-8" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/forest_beetle_data.csv&#39;</span>)</span>
<span id="cb41-9"><a href="#cb41-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb41-10"><a href="#cb41-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb41-11"><a href="#cb41-11" aria-hidden="true" tabindex="-1"></a><span class="co"># クロス表の作成</span></span>
<span id="cb41-12"><a href="#cb41-12" aria-hidden="true" tabindex="-1"></a>cross <span class="op">=</span> pd.crosstab(df[<span class="st">&#39;Location&#39;</span>],df[<span class="st">&#39;Type&#39;</span>])</span>
<span id="cb41-13"><a href="#cb41-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb41-14"><a href="#cb41-14" aria-hidden="true" tabindex="-1"></a><span class="co"># 表示順の設定</span></span>
<span id="cb41-15"><a href="#cb41-15" aria-hidden="true" tabindex="-1"></a>cross <span class="op">=</span> cross.reindex([<span class="st">&#39;Allomyrina dichotoma&#39;</span>,<span class="st">&#39;Dynastes hercules&#39;</span>,<span class="st">&#39;Megasoma elephas&#39;</span>,<span class="st">&#39;Chalcosoma atlas&#39;</span>,], axis<span class="op">=</span><span class="st">&#39;columns&#39;</span>)</span>
<span id="cb41-16"><a href="#cb41-16" aria-hidden="true" tabindex="-1"></a>cross <span class="op">=</span> cross.reindex([<span class="st">&#39;Forest A&#39;</span>,<span class="st">&#39;Forest B&#39;</span>,<span class="st">&#39;Forest C&#39;</span>,<span class="st">&#39;Forest D&#39;</span>], axis<span class="op">=</span><span class="st">&#39;index&#39;</span>)</span>
<span id="cb41-17"><a href="#cb41-17" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(cross)</span>
<span id="cb41-18"><a href="#cb41-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb41-19"><a href="#cb41-19" aria-hidden="true" tabindex="-1"></a><span class="co"># 相対度数に変更</span></span>
<span id="cb41-20"><a href="#cb41-20" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> c <span class="kw">in</span> cross.columns:</span>
<span id="cb41-21"><a href="#cb41-21" aria-hidden="true" tabindex="-1"></a>    cross[c] <span class="op">=</span> cross[c] <span class="op">/</span> cross[c].<span class="bu">sum</span>()</span>
<span id="cb41-22"><a href="#cb41-22" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(cross)</span>
<span id="cb41-23"><a href="#cb41-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb41-24"><a href="#cb41-24" aria-hidden="true" tabindex="-1"></a><span class="co"># ヒートマップの作成</span></span>
<span id="cb41-25"><a href="#cb41-25" aria-hidden="true" tabindex="-1"></a>sns.heatmap( cross  <span class="co">#ヒートマップを作成したいテーブル</span></span>
<span id="cb41-26"><a href="#cb41-26" aria-hidden="true" tabindex="-1"></a>           , cmap<span class="op">=</span>plt.get_cmap(<span class="st">&#39;Reds&#39;</span>) <span class="co">#カラーマップ(省略可)</span></span>
<span id="cb41-27"><a href="#cb41-27" aria-hidden="true" tabindex="-1"></a>           , linewidths<span class="op">=</span><span class="fl">.5</span> <span class="co">#線の太さを指定することでセルを囲う線を表示</span></span>
<span id="cb41-28"><a href="#cb41-28" aria-hidden="true" tabindex="-1"></a>           , annot<span class="op">=</span><span class="va">True</span>  <span class="co">#セルに数値を表示</span></span>
<span id="cb41-29"><a href="#cb41-29" aria-hidden="true" tabindex="-1"></a>           )</span>
<span id="cb41-30"><a href="#cb41-30" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
]]></description>
    <pubDate>Fri, 29 Mar 2024 00:00:00 UT</pubDate>
    <guid>/lectures/2024-03-29-special-lecture-datascience-answer.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>

    </channel>
</rss>
