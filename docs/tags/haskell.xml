<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>yakagika - Posts tagged haskell</title>
        <link></link>
        <description><![CDATA[Personal blog of yakagika]]></description>
        <atom:link href="/tags/haskell.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Mon, 24 Mar 2025 00:00:00 UT</lastBuildDate>
        <item>
    <title>代数プログラミング入門 Ch3 Haskellを使ってみよう</title>
    <link>/lectures/iap3.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#haskellを使ってみよう" id="toc-haskellを使ってみよう"><span class="toc-section-number">1</span> Haskellを使ってみよう</a>
<ul>
<li><a href="#ghci" id="toc-ghci"><span class="toc-section-number">1.1</span> ghci</a></li>
<li><a href="#終了" id="toc-終了"><span class="toc-section-number">1.2</span> 終了</a></li>
<li><a href="#コメントアウト" id="toc-コメントアウト"><span class="toc-section-number">1.3</span> コメントアウト</a></li>
<li><a href="#複数行モード" id="toc-複数行モード"><span class="toc-section-number">1.4</span> 複数行モード</a></li>
<li><a href="#データ型" id="toc-データ型"><span class="toc-section-number">1.5</span> データ型</a>
<ul>
<li><a href="#数値型" id="toc-数値型"><span class="toc-section-number">1.5.1</span> 数値型</a></li>
<li><a href="#数値型の演算" id="toc-数値型の演算"><span class="toc-section-number">1.5.2</span> 数値型の演算</a></li>
<li><a href="#数値型の変換" id="toc-数値型の変換"><span class="toc-section-number">1.5.3</span> 数値型の変換</a></li>
<li><a href="#リスト" id="toc-リスト"><span class="toc-section-number">1.5.4</span> リスト</a></li>
<li><a href="#タプル" id="toc-タプル"><span class="toc-section-number">1.5.5</span> タプル</a></li>
<li><a href="#文字列型" id="toc-文字列型"><span class="toc-section-number">1.5.6</span> 文字列型</a></li>
</ul></li>
<li><a href="#論理型bool" id="toc-論理型bool"><span class="toc-section-number">1.6</span> 論理型(Bool)</a></li>
<li><a href="#スクリプトファイルの実行" id="toc-スクリプトファイルの実行"><span class="toc-section-number">1.7</span> スクリプトファイルの実行</a></li>
</ul></li>
</ul>
</div>
<h1 data-number="1" id="haskellを使ってみよう"><span class="header-section-number">1</span> Haskellを使ってみよう</h1>
<h2 data-number="1.1" id="ghci"><span class="header-section-number">1.1</span> ghci</h2>
<p>前節では, Stackを利用した,プロジェクトの作成と実行に関して扱いましたが, Haskellにも対話環境が存在します.
<code>stack ghci</code>コマンドを打つことで, Haskellの対話環境(<code>REPL</code>)が立ち上がります.</p>
<p>この節では,Haskellの基礎について学びますが,ghciの紹介も併せて,いくつかの基礎的な仕様については,ghci上で確認してみましょう.</p>
<h2 data-number="1.2" id="終了"><span class="header-section-number">1.2</span> 終了</h2>
<p>ghciではコマンドを<code>:</code>の後に入力します. ghciの終了コマンドは<code>:q</code>です.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> stack ghci</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span>:q</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Leaving</span> GHCi.</span></code></pre></div>
<h2 data-number="1.3" id="コメントアウト"><span class="header-section-number">1.3</span> コメントアウト</h2>
<p>Haslellではコメントアウトは <code>--</code> です. 複数行に渡る場合は <code>{- -}</code> で囲みます.</p>
<div class="warn">
<p>Haskellのプログラムを読んでいると <code>--|</code> や <code>--^</code> というタイプのコメントを良く見ますが, こちらはHaskellのドキュメント生成ライブラリにおいて, ドキュメント中に説明として記述するための記号です.
またコメント中に <code>&gt;&gt;&gt;</code> と記述することでテストが実装できるなどいろいろなものがありますが,本資料では扱いません.</p>
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="co">-- コメント</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="co">{- コメント-}</span></span></code></pre></div>
<h2 data-number="1.4" id="複数行モード"><span class="header-section-number">1.4</span> 複数行モード</h2>
<p>ghci上で複数行のプログラムを書く場合には <code>:{ :}</code> でプログラムを囲います. 例えば,先程のフィボナッチ数のプログラムをghci上で実行する場合,位置行ずつ定義すると,定義が更新されてき最後の <code>f n = f (n-1) + f (n-2)</code>のみが記憶されます. この場合,<code>n</code>は無限にマイナスに続いていくため,<code>Stack Overflow</code>エラーが表示されます.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> fib <span class="dv">0</span> <span class="ot">=</span> <span class="dv">1</span> <span class="co">-- fの定義が上書きされる</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> fib <span class="dv">1</span> <span class="ot">=</span> <span class="dv">1</span> <span class="co">-- fの定義が上書きされる</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> f n <span class="ot">=</span> f (n<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span> f (n<span class="op">-</span><span class="dv">2</span>)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> f <span class="dv">12</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="op">***</span> <span class="dt">Exception</span><span class="op">:</span> stack overflow</span></code></pre></div>
<p><code>:{ :}</code>で囲むことでひとまとまりの定義として認識されます.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>{</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span><span class="ot"> fib ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> fib <span class="dv">0</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> fib <span class="dv">1</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> fib n <span class="ot">=</span> fib (n<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span> fib (n<span class="op">-</span><span class="dv">2</span>)</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> <span class="op">:</span>}</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> fib <span class="dv">12</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="dv">233</span></span></code></pre></div>
<p>なお,スクリプトの場合は,<code>:{ :}</code>なしでそのまま改行すれば問題ありません.</p>
<h2 data-number="1.5" id="データ型"><span class="header-section-number">1.5</span> データ型</h2>
<p>型に関しては,かなり奥が深い,というよりHaskellの面白さは自分で型を作っていくことにあります. ただ,いきなりそれをすると,わけがわからなくなるのでまずは代数的データ型などには触れず以下の基礎的な型に関して説明します.</p>
<div class="note">
<ul>
<li>数値型
<ul>
<li>整数 (Int, Integer)</li>
<li>実数 (Float,Double)</li>
</ul></li>
<li>タプル</li>
<li>リスト (List)</li>
<li>文字,文字列 (Char,String,Text)</li>
<li>論理型(Bool)</li>
</ul>
</div>
<p>Haskellにおいて,値のデータ型はある程度自動推論されますが,特定のデータ型を明示したい場合には,値の後ろに<code>:: データ型</code>をつけます.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span><span class="ot"> ::</span> <span class="dt">Int</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span><span class="ot"> ::</span> <span class="dt">Double</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="fl">1.0</span></span></code></pre></div>
<p><code>ghci</code>において形の確認は<code>:t</code>あるいは<code>:type</code>コマンドの後ろに確認したいデータを入力することで行えます.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>t <span class="ch">&#39;c&#39;</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="ch">&#39;c&#39;</span><span class="ot"> ::</span> <span class="dt">Char</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> (<span class="dv">1</span><span class="ot"> ::</span> <span class="dt">Int</span>)</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>(<span class="dv">1</span><span class="ot"> ::</span> <span class="dt">Int</span>)<span class="ot"> ::</span> <span class="dt">Int</span></span></code></pre></div>
<h3 data-number="1.5.1" id="数値型"><span class="header-section-number">1.5.1</span> 数値型</h3>
<p>Haskellの基本的な数値型には以下の4つがあります. クラスに関しては後に扱うので,今はデータ型の更に大きな分類程度に考えておいてください.</p>
<table>
<thead>
<tr class="header">
<th>クラス</th>
<th>データ型</th>
<th>意味</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Integer (整数)</td>
<td><code>Int</code></td>
<td>固定長整数型</td>
</tr>
<tr class="even">
<td>Integer (整数)</td>
<td><code>Integer</code></td>
<td>多倍長整数型</td>
</tr>
<tr class="odd">
<td>Fractional (小数)</td>
<td><code>Float</code></td>
<td>単精度浮動小数型</td>
</tr>
<tr class="even">
<td>Fractional (小数)</td>
<td><code>Double</code></td>
<td>倍精度浮動小数型</td>
</tr>
</tbody>
</table>
<p><code>Int</code>と<code>Integer</code>は<code>整数</code>, <code>Float</code>と<code>Double</code>は<code>実数</code>を表しています.</p>
<div class="note">
<p><code>固定長/多倍長</code>, <code>単精度/倍精度</code> というのはどういう意味でしょうか?</p>
<p>コンピューターでは,データはすべて<code>0</code>と<code>1</code>のいずれかを表す<code>bit</code>の集まりによって表現されます. ちなみに<code>8bit</code>で<code>1byte</code>, <code>1024byte</code>で<code>1Kbyte</code>です.したがって,プログラミングで扱うデータに使用できるデータ量には制限があり,無限の長さの整数や少数を利用することはできません.</p>
<p>コンピューターの計算は主に中央演算処理装置(CPU)で行われますが,その計算過程でデータを一時的に記録するCPU内部の装置のことを汎用レジスタといい,現在では<code>64bit</code>以下の汎用レジスタを持った<code>64bit CPU</code>が良く利用されています.</p>
<p>現在一般的な<code>64bit CPU</code>においてHaskellは整数と小数を表すのに一般的に最大<code>64bit</code>の領域を確保します. したがって,整数では64bitで表せるデータ量(<code>-9223372036854775808 ~ 9223372036854775807</code>)を超えた整数を扱うことはできません.</p>
<p>ちなみにIntの最大値,最小値はghciで以下のように確認できます(
使用しているコンピューターによっては結果が変わる可能性があります).</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span><span class="ot"> minBound ::</span> <span class="dt">Int</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="op">-</span><span class="dv">9223372036854775808</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span><span class="ot"> maxBound ::</span> <span class="dt">Int</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="dv">9223372036854775807</span></span></code></pre></div>
<p>最大(小)値を超えるとオーバーフローします.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">9223372036854775807</span><span class="ot"> ::</span> <span class="dt">Int</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="dv">9223372036854775807</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> (<span class="dv">9223372036854775807</span> <span class="op">+</span> <span class="dv">1</span>)<span class="ot"> ::</span> <span class="dt">Int</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="op">-</span><span class="dv">9223372036854775808</span></span></code></pre></div>
</div>
<h3 data-number="1.5.2" id="数値型の演算"><span class="header-section-number">1.5.2</span> 数値型の演算</h3>
<p>Haskellにおける数値型の基本的な演算子は以下のように定義されています. 実数と整数で挙動が異なるものがあるので注意が必要です.</p>
<p>演算子には優先順位が設定されており,数字が大きいものから順に適用されます(最小0,最大9).
また,式を<code>()</code>で囲むことで,その内部が優先的に計算されます.</p>
<p><strong>また,<code>()</code>が式の最後に来る場合には<code>$</code>記号以下が<code>()</code>に囲まれているとみなすことができます.</strong></p>
<table>
<thead>
<tr class="header">
<th>計算</th>
<th>記号</th>
<th>優先順</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>足し算</td>
<td><code>+</code></td>
<td>6</td>
</tr>
<tr class="even">
<td>引き算</td>
<td><code>-</code></td>
<td>6</td>
</tr>
<tr class="odd">
<td>掛け算</td>
<td><code>*</code></td>
<td>7</td>
</tr>
<tr class="even">
<td>割り算</td>
<td><code>/</code></td>
<td>7</td>
</tr>
<tr class="odd">
<td>冪乗(整数)</td>
<td><code>^</code></td>
<td>8</td>
</tr>
<tr class="even">
<td>冪乗(実数)</td>
<td><code>**</code></td>
<td>8</td>
</tr>
</tbody>
</table>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="dv">2</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">2</span> <span class="op">-</span> <span class="dv">1</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">3</span> <span class="op">*</span> <span class="dv">3</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="dv">9</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">9</span> <span class="op">/</span> <span class="dv">3</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="fl">3.0</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">3</span> <span class="op">^</span> <span class="dv">3</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="dv">27</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">3</span> <span class="op">**</span> <span class="dv">3</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a><span class="fl">27.0</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">3</span> <span class="op">^</span> (<span class="dv">1</span><span class="op">/</span><span class="dv">2</span>) <span class="co">-- エラー</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">7</span><span class="op">:</span><span class="dv">3</span><span class="op">:</span> <span class="fu">error</span><span class="op">:</span> [<span class="dt">GHC</span><span class="op">-</span><span class="dv">39999</span>]</span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">3</span> <span class="op">**</span> (<span class="dv">1</span><span class="op">/</span><span class="dv">2</span>)</span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a><span class="fl">1.7320508075688772</span></span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">2</span> <span class="op">*</span> <span class="dv">3</span> <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a><span class="dv">7</span></span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">2</span> <span class="op">*</span> (<span class="dv">3</span> <span class="op">+</span> <span class="dv">1</span>)</span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a><span class="dv">8</span></span>
<span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">2</span> <span class="op">*</span> <span class="op">$</span> <span class="dv">3</span> <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a><span class="dv">8</span></span></code></pre></div>
<p>これらは中置演算子として定義されていますが演算子を<code>()</code>で囲むことによって前置(逆ポーランド記法)で利用することができます.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> (<span class="op">+</span>) <span class="dv">3</span> <span class="dv">4</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="dv">7</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> (<span class="op">*</span>) ((<span class="op">+</span>) <span class="dv">3</span> <span class="dv">4</span>) <span class="dv">2</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="dv">14</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> (<span class="op">*</span>) <span class="dv">2</span> <span class="op">$</span> (<span class="op">+</span>) <span class="dv">3</span> <span class="dv">4</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="dv">14</span></span></code></pre></div>
<p>また, 2引数関数として定義された前置の演算子は <code>``</code> (バッククオート)で囲むことで, 中置演算子として利用できます.</p>
<table>
<thead>
<tr class="header">
<th>計算</th>
<th>記号</th>
<th>優先順</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>整数除算</td>
<td><code>div</code></td>
<td>7</td>
</tr>
<tr class="even">
<td>剰余</td>
<td><code>mod</code></td>
<td>6</td>
</tr>
</tbody>
</table>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">5</span> <span class="op">/</span><span class="dv">2</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="fl">2.5</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="fu">div</span> <span class="dv">5</span> <span class="dv">2</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="dv">2</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">5</span> <span class="ot">`div`</span> <span class="dv">2</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="dv">2</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">5</span> <span class="ot">`mod`</span> <span class="dv">2</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span></span></code></pre></div>
<h3 data-number="1.5.3" id="数値型の変換"><span class="header-section-number">1.5.3</span> 数値型の変換</h3>
<p><code>Integral(整数)</code>から<code>Fractional(小数)</code>への変換は, <code>fromIntegral</code>を利用します.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span> fromIntegral <span class="er">(</span><span class="ex">1</span> :: Int<span class="kw">)</span> <span class="ex">::</span> Double</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="ex">1.0</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span> div 5 2</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span> 2 <span class="pp">**</span> <span class="er">(</span><span class="ex">div</span> 5 2<span class="kw">)</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>interactive<span class="op">&gt;</span>:6:1: <span class="ex">error:</span> <span class="pp">[</span><span class="ss">GHC</span><span class="pp">-</span><span class="ss">39999</span><span class="pp">]</span></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>    <span class="ex">•</span> Ambiguous type variable ‘a0’ arising from a use of ‘print’</span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>      <span class="ex">prevents</span> the constraint ‘<span class="er">(</span><span class="ex">Show</span> a0<span class="kw">)</span><span class="ex">’</span> from being solved.</span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>      <span class="ex">Probable</span> fix: use a type annotation to specify what ‘a0’ should be.</span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a>      <span class="ex">Potentially</span> matching instances:</span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a>        <span class="ex">instance</span> <span class="pp">[</span><span class="ss">safe</span><span class="pp">]</span> Show Version <span class="at">--</span> Defined in ‘Data.Version’</span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>        <span class="ex">instance</span> Show Exception.ArithException</span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a>          <span class="ex">--</span> Defined in ‘GHC.Exception.Type’</span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a>        <span class="ex">...plus</span> 39 others</span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a>        <span class="ex">...plus</span> 20 instances involving out-of-scope types</span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a>        <span class="kw">(</span><span class="ex">use</span> <span class="at">-fprint-potential-instances</span> to see them all<span class="kw">)</span></span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a>    <span class="ex">•</span> In a stmt of an interactive GHCi command: print it</span>
<span id="cb12-19"><a href="#cb12-19" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span> 2 <span class="pp">**</span> <span class="er">(</span><span class="ex">fromIntegral</span> <span class="er">(</span><span class="ex">div</span> 5 2<span class="kw">))</span></span>
<span id="cb12-20"><a href="#cb12-20" aria-hidden="true" tabindex="-1"></a><span class="ex">4.0</span></span></code></pre></div>
<p><code>Fractional(小数)</code>から<code>Integral(整数)</code>への変換は,基本的に何かしらの<strong>切り捨て</strong>を実施します.</p>
<table>
<colgroup>
<col style="width: 18%" />
<col style="width: 35%" />
<col style="width: 45%" />
</colgroup>
<thead>
<tr class="header">
<th>切り捨て関数名</th>
<th>意味</th>
<th>例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>ceiling</td>
<td>小数点以下を切り上げる</td>
<td><code>ceiling 3.2 → 4</code>, <br> <code>ceiling (-3.2) → -3</code></td>
</tr>
<tr class="even">
<td>floor</td>
<td>小数点以下を切り下げる</td>
<td><code>floor 3.8 → 3</code>, <br><code>floor (-3.8) → -4</code></td>
</tr>
<tr class="odd">
<td>truncate</td>
<td>小数部分を単純に切り捨てる</td>
<td><code>truncate 3.8 → 3</code>, <br><code>truncate (-3.8) → -3</code></td>
</tr>
<tr class="even">
<td>round</td>
<td>最も近い整数に丸める</td>
<td><code>round 3.5 → 4</code>, <br><code>round 3.4 → 3</code>, <br><code>round (-3.5) → -4</code></td>
</tr>
</tbody>
</table>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">2</span> <span class="op">^</span> (<span class="dv">2</span> <span class="op">/</span> <span class="dv">1</span>)</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">8</span><span class="op">:</span><span class="dv">3</span><span class="op">:</span> <span class="fu">error</span><span class="op">:</span> [<span class="dt">GHC</span><span class="op">-</span><span class="dv">39999</span>]</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    • <span class="dt">Could</span> <span class="fu">not</span> deduce ‘<span class="dt">Integral</span> b0’ arising from a use <span class="kw">of</span> ‘<span class="op">^</span>’</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>      <span class="co">--- 省略</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">2</span> <span class="op">^</span> (<span class="fu">truncate</span> (<span class="dv">2</span> <span class="op">/</span> <span class="dv">1</span>))</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="dv">4</span></span></code></pre></div>
<div class="note">
<p>練習問題</p>
<p>以下の問題をREPLを使って自分で解いてみましょう.
問題自体は小学生でも解けますが,重要なのはHaskellの挙動を確認することです.
どのように計算したかを併せて説明してください.</p>
<ul>
<li><p>飴が40個あります.7人で同じ数ずつ分けると1人分は何個で何個あまりますか?</p></li>
<li><p>底辺5cm,高さ4cmの三角形の面積はいくつですか?</p></li>
<li><p>2の8乗はいくつですか?</p></li>
<li><p>累乗と掛け算の計算順序を丸括弧を使った計算で確かめてください.</p></li>
</ul>
</div>
<h3 data-number="1.5.4" id="リスト"><span class="header-section-number">1.5.4</span> リスト</h3>
<p>複数のデータをまとめる方法はいくつかありますが,データを1列に並べた<code>List</code>型は代表的なデータ型です. Haskellには配列(<code>Array</code>や<code>Vector</code>)もありますが,まずは<code>List</code>について学習しましょう.
リストの操作にはここで扱う以外にも<code>リスト内包表記</code>や<code>高階関数</code>など様々なものがありますが,ここでは最も基本的ないくつかの機能のみに絞って,後ほど詳細を扱います.</p>
<p>Listは<strong>リストリテラル</strong><code>[]</code>の中に要素を記入して,<code>,</code>(コンマ)で区切ることで宣言できます.</p>
<div class="warn">
<p>Haskellにおいて,リテラルとは,<strong>特定のデータ型の値を直接記述する構文</strong>のことを指します.</p>
<ul>
<li><p>リストリテラル<code>[]</code>は,<code>[]</code>内の記述をリスト型として扱うリテラル</p></li>
<li><p>数値を記入するとそれは数値型として扱われる数値リテラル</p></li>
<li><p><code>""</code>で囲まれた記述は文字列型として扱われる文字列リテラル</p></li>
</ul>
<p>などがあります.</p>
<p>Haskellでは,自作したデータ型にリテラルを定めるなど様々な用法がありますが,ここでは扱いません.</p>
</div>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span></code></pre></div>
<p><code>[]</code>のみで空のリストが生成されます.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> []</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>[]</span></code></pre></div>
<p>注意点として,HaskellはPythonなどの言語のように<code>ダックタイピング</code>が許されていないため異なるデータを単一のリストの要素に含めることはできません.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="fl">2.0</span>,<span class="dv">3</span>]</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>[<span class="fl">1.0</span>,<span class="fl">2.0</span>,<span class="fl">3.0</span>]</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span><span class="ot">::</span><span class="dt">Int</span>,<span class="dv">2</span><span class="ot">::</span><span class="dt">Double</span>,<span class="dv">3</span><span class="ot">::</span><span class="dt">Int</span>]</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">22</span><span class="op">:</span><span class="dv">9</span><span class="op">:</span> <span class="fu">error</span><span class="op">:</span> [<span class="dt">GHC</span><span class="op">-</span><span class="dv">83865</span>]</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>    • <span class="dt">Couldn&#39;t</span> match expected <span class="kw">type</span> ‘<span class="dt">Int</span>’ with actual <span class="kw">type</span> ‘<span class="dt">Double</span>’</span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>    • <span class="dt">In</span> the expression<span class="op">:</span> <span class="dv">2</span><span class="ot"> ::</span> <span class="dt">Double</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>      <span class="dt">In</span> the expression<span class="op">:</span> [<span class="dv">1</span><span class="ot"> ::</span> <span class="dt">Int</span>, <span class="dv">2</span><span class="ot"> ::</span> <span class="dt">Double</span>, <span class="dv">3</span><span class="ot"> ::</span> <span class="dt">Int</span>]</span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>      <span class="dt">In</span> an equation for ‘it’<span class="op">:</span> it <span class="ot">=</span> [<span class="dv">1</span><span class="ot"> ::</span> <span class="dt">Int</span>, <span class="dv">2</span><span class="ot"> ::</span> <span class="dt">Double</span>, <span class="dv">3</span><span class="ot"> ::</span> <span class="dt">Int</span>]</span></code></pre></div>
<p>リストのデータ型は,要素のデータ型をリストリテラル<code>[]</code>で囲んだ形で表されます.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> ([<span class="dv">1</span><span class="ot">::</span><span class="dt">Int</span>,<span class="dv">2</span><span class="ot">::</span><span class="dt">Int</span>])</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>([<span class="dv">1</span><span class="ot">::</span><span class="dt">Int</span>,<span class="dv">2</span><span class="ot">::</span><span class="dt">Int</span>])<span class="ot"> ::</span> [<span class="dt">Int</span>]</span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> [<span class="ch">&#39;a&#39;</span>,<span class="ch">&#39;b&#39;</span>,<span class="ch">&#39;c&#39;</span>]</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>[<span class="ch">&#39;a&#39;</span>,<span class="ch">&#39;b&#39;</span>,<span class="ch">&#39;c&#39;</span>]<span class="ot"> ::</span> [<span class="dt">Char</span>]</span></code></pre></div>
<p>また,リストは<code>先頭要素 : リスト</code> によって宣言することも可能です. <code>:</code>を<code>cons 構築子</code>といいます. 構築子の意味については後ほど<code>代数的データ型</code>の説明とともに扱います.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">:</span> []</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>]</span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">:</span> [<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">:</span> <span class="dv">2</span> <span class="op">:</span> [<span class="dv">3</span>]</span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span></code></pre></div>
<p>リストの要素のインデックスによる取得は <code>!!</code>演算子を用いて<code>xs !! インデックス</code>の形で行います. インデックスは0から始まります. インデックスが超過した場合はエラーとなります.</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>] <span class="op">!!</span> <span class="dv">0</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>] <span class="op">!!</span> <span class="dv">1</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a><span class="dv">2</span></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>] <span class="op">!!</span> <span class="dv">2</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a><span class="dv">3</span></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>] <span class="op">!!</span> <span class="dv">3</span></span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a><span class="op">***</span> <span class="dt">Exception</span><span class="op">:</span> <span class="op">Prelude.!!:</span> <span class="fu">index</span> too large</span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a><span class="dt">CallStack</span> (from <span class="dt">HasCallStack</span>)<span class="op">:</span></span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a>  <span class="fu">error</span>, called at libraries<span class="op">/</span>base<span class="op">/</span><span class="dt">GHC</span><span class="op">/</span>List.hs<span class="op">:</span><span class="dv">1366</span><span class="op">:</span><span class="dv">14</span> <span class="kw">in</span> base<span class="op">:</span><span class="dt">GHC.List</span></span>
<span id="cb19-11"><a href="#cb19-11" aria-hidden="true" tabindex="-1"></a>  tooLarge, called at libraries<span class="op">/</span>base<span class="op">/</span><span class="dt">GHC</span><span class="op">/</span>List.hs<span class="op">:</span><span class="dv">1376</span><span class="op">:</span><span class="dv">50</span> <span class="kw">in</span> base<span class="op">:</span><span class="dt">GHC.List</span></span>
<span id="cb19-12"><a href="#cb19-12" aria-hidden="true" tabindex="-1"></a>  <span class="op">!!</span>, called at <span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">37</span><span class="op">:</span><span class="dv">9</span> <span class="kw">in</span> interactive<span class="op">:</span><span class="dt">Ghci15</span></span></code></pre></div>
<p><code>m~n</code>までの連続したリストを生成する場合には,<code>[m..n]</code>と記述します.これを<code>数列表記</code>といいます.</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span> <span class="op">..</span> <span class="dv">10</span>]</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>,<span class="dv">10</span>]</span></code></pre></div>
<p>コンマと併用することで階差数列などを表現することも可能です.</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="dv">3</span><span class="op">..</span><span class="dv">10</span>]</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>,<span class="dv">3</span>,<span class="dv">5</span>,<span class="dv">7</span>,<span class="dv">9</span>]</span></code></pre></div>
<p><code>[x..]</code>と終わりを指定しないことで,無限数列も作成できます. ghciでそのまま実行すると永遠に表示が止まりません(<code>ctrl+C</code>で止まります). ここでは,<code>[1,3,5,...]</code>の10番目と100番目の値を取り出してみます.</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="dv">3</span><span class="op">..</span>] <span class="op">!!</span> <span class="dv">10</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="dv">21</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="dv">3</span><span class="op">..</span>] <span class="op">!!</span> <span class="dv">100</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a><span class="dv">201</span></span></code></pre></div>
<div class="warn">
<p>Pythonなど言語では,値が宣言/生成されたタイミングでコンピュータがその値を評価する<code>正格(strict)評価</code>が一般的です. 一方HaskellはDefaultでは,実際にその値が呼び出された際に評価される<code>遅延(lazy)評価</code>を採用しており,それによりこのような無限の値を実現することができます.
正格評価で無限に値が続くリストを生成した場合, 生成した時点で永遠に計算が終わりませんが,遅延評価では無限のリストの中の具体的な値を利用するさいにその値が利用されます.</p>
<p>この機能はHaskellの大きな特徴の一つですが,一方でメモリリークや,速度の低下の原因になることがあります. したがって,ある程度大きなプログラムを書く場合には,正格評価と,遅延評価を明示的に切り替えることが推奨されています.</p>
<p>最初は気にする必要はありませんが,パッケージなどの提供するHaskellのデータ型には,strictなものとlazyなものの両方が用意されていることが多いので,違いを覚えておくと後々役に立ちます.</p>
</div>
<p>Haskellでリストを扱う際には,暗黙に<code>x</code>などの単一のアルファベットが要素,<code>xs</code>などの複数形がリストを表している場合が多く<code>x:xs</code>などと記述してリストの最初の要素と残りのリストを表します.</p>
<p>詳細は後ほど扱いますが,<code>束縛</code>されたリストから<code>パターンマッチ</code>によって値を取り出す場合によく利用されます.</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> x<span class="op">:</span>xs <span class="ot">=</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> x</span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span></span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> xs</span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a>[<span class="dv">2</span>,<span class="dv">3</span>]</span></code></pre></div>
<p>リスト同士の結合は<code>++</code>演算子によって行います.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>] <span class="op">++</span> [<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span></code></pre></div>
<p>リストの長さは<code>length</code> 関数で取得できます.</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="fu">length</span> []</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a><span class="dv">0</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="fu">length</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a><span class="dv">3</span></span></code></pre></div>
<h3 data-number="1.5.5" id="タプル"><span class="header-section-number">1.5.5</span> タプル</h3>
<p>Haskellではデータの組み合わせを表す方法として,後述の<code>直積型</code>がありますが,タプルも良く利用されます.タプルを利用するには要素を<code>()</code>(丸括弧)で囲い,<code>,</code>(コンマ)で区切ります. 要素数に制限はありません.</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> (<span class="dv">1</span>,<span class="dv">2</span>)</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a>(<span class="dv">1</span>,<span class="dv">2</span>)</span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> (<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>)</span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>(<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>)</span></code></pre></div>
<p>リストと同様に要素数の異なるタプルや,要素のデータ型の異なるタプルは別のデータ型として区別され,同一のリストなどに入れることはできません.</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [(<span class="dv">1</span>,<span class="dv">2</span>),(<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>)]</span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">60</span><span class="op">:</span><span class="dv">8</span><span class="op">:</span> <span class="fu">error</span><span class="op">:</span> [<span class="dt">GHC</span><span class="op">-</span><span class="dv">83865</span>]</span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a>    • <span class="dt">Couldn&#39;t</span> match expected <span class="kw">type</span><span class="op">:</span> (a, b)</span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true" tabindex="-1"></a>                  with actual <span class="kw">type</span><span class="op">:</span> (a0, b0, c0)</span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true" tabindex="-1"></a>    • <span class="dt">In</span> the expression<span class="op">:</span> (<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>)</span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true" tabindex="-1"></a>      <span class="dt">In</span> the expression<span class="op">:</span> [(<span class="dv">1</span>, <span class="dv">2</span>), (<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>)]</span>
<span id="cb27-8"><a href="#cb27-8" aria-hidden="true" tabindex="-1"></a>      <span class="dt">In</span> an equation for ‘it’<span class="op">:</span> it <span class="ot">=</span> [(<span class="dv">1</span>, <span class="dv">2</span>), (<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>)]</span>
<span id="cb27-9"><a href="#cb27-9" aria-hidden="true" tabindex="-1"></a>    • <span class="dt">Relevant</span> bindings include</span>
<span id="cb27-10"><a href="#cb27-10" aria-hidden="true" tabindex="-1"></a><span class="ot">        it ::</span> [(a, b)] (bound at <span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">60</span><span class="op">:</span><span class="dv">1</span>)</span></code></pre></div>
<p>要素数が2つのリストに限定して,要素を取り出す関数 <code>fst</code>,<code>snd</code>が用意されていますが,値の取り出しはパターンマッチがよく利用されます.</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="fu">fst</span> (<span class="dv">1</span>,<span class="dv">2</span>)</span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span></span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="fu">snd</span> (<span class="dv">1</span>,<span class="dv">2</span>)</span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a><span class="dv">2</span></span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> (x,y) <span class="ot">=</span> (<span class="dv">1</span>,<span class="dv">2</span>)</span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> x</span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span></span>
<span id="cb28-8"><a href="#cb28-8" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> y</span>
<span id="cb28-9"><a href="#cb28-9" aria-hidden="true" tabindex="-1"></a><span class="dv">2</span></span></code></pre></div>
<h3 data-number="1.5.6" id="文字列型"><span class="header-section-number">1.5.6</span> 文字列型</h3>
<p>Haskellの文字列型は歴史的に少し複雑な状況になっており,Preludeにおける<code>String</code>型の使い勝手があまり良くありません. なので, <code>text</code>パッケージの提供する<code>Text</code>型を利用するのが一般的です. なので,後ほどTextを導入しますが,一旦String型に関して見てみましょう.</p>
<p>Haskellでは1文字を表す <code>Char</code>型と文字列を表す<code>String</code>型を区別し,<code>Char</code>は<code>''</code>(シングルクォーテーション),<code>String</code>は<code>""</code>(ダブルクオーテーション)で囲みます.</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="ch">&#39;c&#39;</span></span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a><span class="ch">&#39;c&#39;</span></span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>t <span class="ch">&#39;c&#39;</span></span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true" tabindex="-1"></a><span class="ch">&#39;c&#39;</span><span class="ot"> ::</span> <span class="dt">Char</span></span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="st">&quot;String&quot;</span></span>
<span id="cb29-6"><a href="#cb29-6" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>t <span class="st">&quot;String&quot;</span></span>
<span id="cb29-7"><a href="#cb29-7" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;String&quot;</span><span class="ot"> ::</span> <span class="dt">String</span></span></code></pre></div>
<p>Haskellにおける文字型<code>Char</code>のリスト<code>[Char]</code>の別名(<code>型シノニム</code>)です. <code>型シノニム</code>は型に別の名前をつけることで,用途などを区別する機能です.
型シノニムは,以下のように, <code>type 型シノニム = 元のデータ型</code>という形で定義します.</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">String</span> <span class="ot">=</span> [<span class="dt">Char</span>]</span></code></pre></div>
<p>したがって,String型にはListの演算が適用できます.</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="st">&quot;String&quot;</span> <span class="op">!!</span> <span class="dv">1</span></span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a><span class="ch">&#39;t&#39;</span></span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="ch">&#39;!&#39;</span> <span class="op">:</span> <span class="st">&quot;String&quot;</span></span>
<span id="cb31-4"><a href="#cb31-4" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;!String&quot;</span></span>
<span id="cb31-5"><a href="#cb31-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="st">&quot;!!&quot;</span> <span class="op">++</span>  <span class="st">&quot;String&quot;</span></span>
<span id="cb31-6"><a href="#cb31-6" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;!!String&quot;</span></span>
<span id="cb31-7"><a href="#cb31-7" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="fu">length</span> <span class="st">&quot;String&quot;</span></span>
<span id="cb31-8"><a href="#cb31-8" aria-hidden="true" tabindex="-1"></a><span class="dv">6</span></span></code></pre></div>
<p>ただし,<code>String</code>型は非効率なため,現在ではあまり使われておらず,基本的に<code>text</code>パッケージの提供する <code>Data.Text</code>を利用することが推奨されています.</p>
<p><code>package.yaml</code>の<code>dependencies</code>に以下のように<code>text</code>を追加します.</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="fu">dependencies</span><span class="kw">:</span></span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> base &gt;= 4.7 &amp;&amp; &lt; 5</span></span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> text</span></span></code></pre></div>
<p>スクリプトの最初に以下のように,記述することで文字列リテラル<code>""</code>が<code>Text</code>型に利用できるようになります.</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Text</span></span></code></pre></div>
<p><code>{-# LANGUAGE OverloadedStrings #-}</code>は言語拡張を表しており,Haskellの処理系に機能を追加する宣言です. <code>OverloadedString</code>は文字列リテラルをTextなどの他の文字列を表すデータ型に適用できるようにする拡張です.</p>
<p><code>ghci</code>で言語拡張を導入するには,<code>:set</code>に続けて <code>-X言語拡張名</code>を記述します.</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> <span class="st">&quot;Text&quot;</span></span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;Text&quot;</span><span class="ot"> ::</span> <span class="dt">String</span></span>
<span id="cb34-3"><a href="#cb34-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XOverloadedStrings</span></span>
<span id="cb34-4"><a href="#cb34-4" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="kw">import</span> <span class="dt">Data.Text</span></span>
<span id="cb34-5"><a href="#cb34-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> <span class="st">&quot;Text&quot;</span></span>
<span id="cb34-6"><a href="#cb34-6" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;Text&quot;</span><span class="ot"> ::</span> <span class="dt">Data.String.IsString</span> a <span class="ot">=&gt;</span> a</span></code></pre></div>
<h2 data-number="1.6" id="論理型bool"><span class="header-section-number">1.6</span> 論理型(Bool)</h2>
<p>それが正しいか間違っているか判別できる文を<strong>命題</strong>といいます. 命題の結果を表すものとして真(正しい),偽(間違っている)という値を用います. 真と偽を併せて<strong>真偽値</strong>といいます.</p>
<p>例えば,<code>1は2より大きい</code>という命題は,間違っているので<strong>偽</strong>となります. <code>人間は必ず死ぬ</code>という命題は,今のところ不老不死の人間がいないので<strong>真</strong>です.</p>
<p>真偽値を表すデータ型として<code>Bool</code>があります. <code>Bool</code>は<code>True</code>(真),<code>False</code>(偽)のいずれかです.</p>
<p>Haskellには命題の判定を行う<code>関係演算子</code>として,以下のようなものが準備されています.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">記号</th>
<th style="text-align: center;">意味</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>&gt;</code></td>
<td style="text-align: center;">より大きい</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&gt;=</code></td>
<td style="text-align: center;">以上</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>&lt;</code></td>
<td style="text-align: center;">より小さい</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&lt;=</code></td>
<td style="text-align: center;">以下</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>==</code></td>
<td style="text-align: center;">等しい</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>/=</code></td>
<td style="text-align: center;">等しくない</td>
</tr>
</tbody>
</table>
<p>数値などの大小関係を調べるときには,比較演算子 <code>&gt;</code>,<code>&gt;=</code>.<code>&lt;</code>,<code>&lt;=</code>を利用します. 演算子の左右に数値を書くと,結果に応じて真偽値が帰ってきます.</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">&gt;</span> <span class="dv">2</span></span>
<span id="cb35-2"><a href="#cb35-2" aria-hidden="true" tabindex="-1"></a><span class="dt">False</span></span>
<span id="cb35-3"><a href="#cb35-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">&lt;</span> <span class="fl">1.5</span></span>
<span id="cb35-4"><a href="#cb35-4" aria-hidden="true" tabindex="-1"></a><span class="dt">True</span></span></code></pre></div>
<p>値が等しいか/等しくないかを判定するには,<code>==</code>と<code>!=</code>を利用します.</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">4</span> <span class="op">==</span> <span class="dv">4</span></span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true" tabindex="-1"></a><span class="dt">True</span></span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="st">&quot;cat&quot;</span> <span class="op">/=</span> <span class="st">&quot;cat&quot;</span></span>
<span id="cb36-4"><a href="#cb36-4" aria-hidden="true" tabindex="-1"></a><span class="dt">False</span></span></code></pre></div>
<p><code>True</code> や <code>False</code>などの<code>Bool</code>値は, <code>AND</code>(かつ),<code>OR</code>(または),<code>NOT</code>という演算で計算することができます(<code>XOR</code>というのもあるが省略).
HaskellではAND は <code>&amp;&amp;</code>, OR は <code>||</code>, NOT は <code>not</code> という演算子が提供されています.</p>
<p>A,Bが命題だとして,<code>A &amp;&amp; B</code>は両方<code>True</code>のときに,<code>True</code>となります. <code>A || B</code>は片方どちらかが<code>True</code>のときに<code>True</code>となります.</p>
<p>例えば,</p>
<ul>
<li><p><code>1は2より大きい かつ 2は0より大きい</code> という命題は,<code>2は0より大きい</code>は正しいですが,<code>1は2より大きい</code>が間違っているので全体として,<code>False</code>です.</p></li>
<li><p><code>ネコは哺乳類である または ネコは鳥類である</code>という命題は <code>ネコは鳥類である</code>が間違っていますが全体としては<code>True</code>です.</p></li>
</ul>
<p>演算の結果は,それぞれ以下のようになります. これを真偽値表といいます. ここでは,最低限の例だけを紹介しますが,より深く理解したい人は論理学などの講義を受講しましょう.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">命題Aの値</th>
<th style="text-align: center;">Bの値</th>
<th style="text-align: center;"><code>A &amp;&amp; B</code></th>
<th style="text-align: center;"><code>A || B</code></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">True</td>
<td style="text-align: center;">False</td>
<td style="text-align: center;">True</td>
<td style="text-align: center;">True</td>
</tr>
<tr class="even">
<td style="text-align: center;">False</td>
<td style="text-align: center;">True</td>
<td style="text-align: center;">False</td>
<td style="text-align: center;">True</td>
</tr>
<tr class="odd">
<td style="text-align: center;">True</td>
<td style="text-align: center;">False</td>
<td style="text-align: center;">False</td>
<td style="text-align: center;">True</td>
</tr>
<tr class="even">
<td style="text-align: center;">False</td>
<td style="text-align: center;">False</td>
<td style="text-align: center;">False</td>
<td style="text-align: center;">True</td>
</tr>
</tbody>
</table>
<div class="sourceCode" id="cb37"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">&gt;</span> <span class="dv">2</span></span>
<span id="cb37-2"><a href="#cb37-2" aria-hidden="true" tabindex="-1"></a><span class="dt">False</span></span>
<span id="cb37-3"><a href="#cb37-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">2</span> <span class="op">&gt;</span> <span class="dv">0</span></span>
<span id="cb37-4"><a href="#cb37-4" aria-hidden="true" tabindex="-1"></a><span class="dt">True</span></span>
<span id="cb37-5"><a href="#cb37-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">&gt;</span> <span class="dv">2</span> <span class="op">&amp;&amp;</span> <span class="dv">2</span> <span class="op">&gt;</span> <span class="dv">0</span></span>
<span id="cb37-6"><a href="#cb37-6" aria-hidden="true" tabindex="-1"></a><span class="dt">False</span></span>
<span id="cb37-7"><a href="#cb37-7" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">&gt;</span> <span class="dv">2</span> <span class="op">||</span> <span class="dv">2</span> <span class="op">&gt;</span> <span class="dv">0</span></span>
<span id="cb37-8"><a href="#cb37-8" aria-hidden="true" tabindex="-1"></a><span class="dt">True</span></span></code></pre></div>
<p><code>not</code> は命題の否定を表しており <code>True</code>が<code>False</code>,<code>False</code>が<code>True</code>になります.<code>not</code>は命題の前に書きます.</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb38-1"><a href="#cb38-1" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span> 1 <span class="op">&gt;</span> 2</span>
<span id="cb38-2"><a href="#cb38-2" aria-hidden="true" tabindex="-1"></a><span class="ex">False</span></span>
<span id="cb38-3"><a href="#cb38-3" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span> not <span class="er">(</span><span class="ex">1</span> <span class="op">&gt;</span> 2<span class="kw">)</span></span>
<span id="cb38-4"><a href="#cb38-4" aria-hidden="true" tabindex="-1"></a><span class="ex">True</span></span></code></pre></div>
<div class="note">
<p><strong>演習</strong></p>
<p>ある値が偶数かどうかは,2で割った余りが0かどうかを判定することで判定できます.
<code>x=101</code>,<code>y=202</code>として, 以下の命題の真偽を判定してください.</p>
<ul>
<li>xが偶数</li>
<li>yが偶数</li>
<li>xが偶数かつyが偶数</li>
<li>xが偶数またはyが偶数</li>
<li>x + y が奇数</li>
</ul>
</div>
<h2 data-number="1.7" id="スクリプトファイルの実行"><span class="header-section-number">1.7</span> スクリプトファイルの実行</h2>
<div class="warn">
<p>ここから先は,コードが複数行に渡ることが多くなるので,ghciの利用をやめてスクリプトを書きます.</p>
<p><code>app</code> フォルダ内に <code>practice.hs</code>を作成しそこで事例の勉強をしましょう.</p>
</div>
<p><code>practice.hs</code> ファイルを作成したら,ファイルを以下のように記述しましょう.</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb39-1"><a href="#cb39-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></span>
<span id="cb39-2"><a href="#cb39-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Text</span></span>
<span id="cb39-3"><a href="#cb39-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-4"><a href="#cb39-4" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb39-5"><a href="#cb39-5" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;practice&quot;</span></span></code></pre></div>
<div class="warn">
<p><code>module XXX () where</code></p>
<p>という記述は,他のファイルからインポート可能なmodule化を行うための宣言です.
また,Stackでは,<strong>大文字で始まる<code>*.hs</code>ファイルは,moduleとして認識されます.</strong></p>
<p>したがって,一つのプロジェクトに複数の実行可能ファイルを生成する場合には,</p>
<p><code>module XXX () where</code></p>
<p>の記述をなくし, ファイル名を小文字ではじめる必要があります.</p>
<p>これは,<code>Hello World</code>のために編集した<code>Main.hs</code>も同様であるため,<code>Main.hs</code>を<code>hello.hs</code>に名前を変更し,ファイル内の <code>module Main (main) where</code>の記述も削除し,以下のように変更しましょう.</p>
<p>cf. <a href="https://www.reddit.com/r/haskell/comments/capuz7/multiple_executable_in_project/">他にもいくつかの方法があるようです</a></p>
</div>
<div class="sourceCode" id="cb40"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb40-1"><a href="#cb40-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Lib</span></span>
<span id="cb40-2"><a href="#cb40-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb40-3"><a href="#cb40-3" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb40-4"><a href="#cb40-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> helloWorld</span></code></pre></div>
<p><code>package.yaml</code>の<code>executables:</code>を以下のように編集して<code>hello.hs</code>と<code>practice.hs</code>を実行可能ファイルとして登録します. <code>Data.Text</code>を利用するために,<code>dependencies:</code>以下に<code>- text</code>を追加しておきましょう.</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb41-1"><a href="#cb41-1" aria-hidden="true" tabindex="-1"></a><span class="fu">dependencies</span><span class="kw">:</span></span>
<span id="cb41-2"><a href="#cb41-2" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> base &gt;= 4.7 &amp;&amp; &lt; 5</span></span>
<span id="cb41-3"><a href="#cb41-3" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> text</span></span>
<span id="cb41-4"><a href="#cb41-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb41-5"><a href="#cb41-5" aria-hidden="true" tabindex="-1"></a><span class="co">#ghc-options:</span></span>
<span id="cb41-6"><a href="#cb41-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb41-7"><a href="#cb41-7" aria-hidden="true" tabindex="-1"></a><span class="fu">library</span><span class="kw">:</span></span>
<span id="cb41-8"><a href="#cb41-8" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">source-dirs</span><span class="kw">:</span><span class="at"> src</span></span>
<span id="cb41-9"><a href="#cb41-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb41-10"><a href="#cb41-10" aria-hidden="true" tabindex="-1"></a><span class="fu">executables</span><span class="kw">:</span></span>
<span id="cb41-11"><a href="#cb41-11" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">hello</span><span class="kw">:</span></span>
<span id="cb41-12"><a href="#cb41-12" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">main</span><span class="kw">:</span><span class="at">                main.hs</span></span>
<span id="cb41-13"><a href="#cb41-13" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">source-dirs</span><span class="kw">:</span><span class="at">         app</span></span>
<span id="cb41-14"><a href="#cb41-14" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">ghc-options</span><span class="kw">:</span></span>
<span id="cb41-15"><a href="#cb41-15" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -threaded</span></span>
<span id="cb41-16"><a href="#cb41-16" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -rtsopts</span></span>
<span id="cb41-17"><a href="#cb41-17" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -with-rtsopts=-N</span></span>
<span id="cb41-18"><a href="#cb41-18" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">dependencies</span><span class="kw">:</span></span>
<span id="cb41-19"><a href="#cb41-19" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> hello-world</span></span>
<span id="cb41-20"><a href="#cb41-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb41-21"><a href="#cb41-21" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">practice</span><span class="kw">:</span></span>
<span id="cb41-22"><a href="#cb41-22" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">main</span><span class="kw">:</span><span class="at">                practice.hs</span></span>
<span id="cb41-23"><a href="#cb41-23" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">source-dirs</span><span class="kw">:</span><span class="at">         app</span></span>
<span id="cb41-24"><a href="#cb41-24" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">ghc-options</span><span class="kw">:</span></span>
<span id="cb41-25"><a href="#cb41-25" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -threaded</span></span>
<span id="cb41-26"><a href="#cb41-26" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -rtsopts</span></span>
<span id="cb41-27"><a href="#cb41-27" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -with-rtsopts=-N</span></span>
<span id="cb41-28"><a href="#cb41-28" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">dependencies</span><span class="kw">:</span></span>
<span id="cb41-29"><a href="#cb41-29" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> hello-world</span></span></code></pre></div>
<p><code>stack run practice</code> で<code>practice!</code>と表示されれば成功です.</p>
<p>これからスクリプトで実行していくにあたって,<code>practice.hs</code>の中身をもう少し詳しく見てみましょう.</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb42-1"><a href="#cb42-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Lib</span></span>
<span id="cb42-2"><a href="#cb42-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb42-3"><a href="#cb42-3" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb42-4"><a href="#cb42-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;practice!!&quot;</span></span></code></pre></div>
<p>haskellのプログラムを実行すると, <code>main関数</code>のみが実行されます.</p>
<p>Haskellは関数型言語なので,これから<code>import Lib</code>と<code>main</code>の間に関数を定義していき,<code>main</code>の中で実行していくことになります.</p>
<p>main 関数で行うことは関数として実行することになりますが,これから学習する通常の関数の定義で記述するのは今は難しいので,<code>do</code>記法を紹介します. main 関数の=以下に<code>do</code>と書くことで,do以下のインデントブロックに記述された内容が手続き型的に1行ずつ実行されます.</p>
<p>以下のプログラムでは, <code>"practice1"</code>,<code>"practice2"</code>,<code>"practice3"</code>の順に標準出力されます.</p>
<div class="sourceCode" id="cb43"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb43-1"><a href="#cb43-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Lib</span></span>
<span id="cb43-2"><a href="#cb43-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-3"><a href="#cb43-3" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb43-4"><a href="#cb43-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb43-5"><a href="#cb43-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">putStrLn</span> <span class="st">&quot;practice1&quot;</span> <span class="co">-- &quot;practice1&quot;</span></span>
<span id="cb43-6"><a href="#cb43-6" aria-hidden="true" tabindex="-1"></a>    <span class="fu">putStrLn</span> <span class="st">&quot;practice2&quot;</span> <span class="co">-- &quot;practice2&quot;</span></span>
<span id="cb43-7"><a href="#cb43-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">putStrLn</span> <span class="st">&quot;practice3&quot;</span> <span class="co">-- &quot;practice3&quot;</span></span></code></pre></div>
<p><code>stack run practice</code>の結果を確認すると以下のようになります.</p>
<div class="sourceCode" id="cb44"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb44-1"><a href="#cb44-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> stack <span class="ex">run</span> practice</span>
<span id="cb44-2"><a href="#cb44-2" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;practice1&quot;</span></span>
<span id="cb44-3"><a href="#cb44-3" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;practice2&quot;</span></span>
<span id="cb44-4"><a href="#cb44-4" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;practice3&quot;</span></span></code></pre></div>
<p>また,ghciと異なって,出力結果が同じ画面に現れないので,
以降のコード例では, その行の結果をコメントで書くこととします. コメント部分は,記述しなくても結果は変わらないので,省略しても構いません.</p>
]]></description>
    <pubDate>Mon, 24 Mar 2025 00:00:00 UT</pubDate>
    <guid>/lectures/iap3.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>代数プログラミング入門 Ch5 代数的データ型</title>
    <link>/lectures/iap5.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#代数的データ型" id="toc-代数的データ型"><span class="toc-section-number">1</span> 代数的データ型</a>
<ul>
<li><a href="#命題と条件式" id="toc-命題と条件式"><span class="toc-section-number">1.1</span> 命題と条件式</a></li>
<li><a href="#集合" id="toc-集合"><span class="toc-section-number">1.2</span> 集合</a></li>
<li><a href="#型注釈と関数" id="toc-型注釈と関数"><span class="toc-section-number">1.3</span> 型注釈と関数</a>
<ul>
<li><a href="#内包表記" id="toc-内包表記"><span class="toc-section-number">1.3.1</span> 内包表記</a></li>
</ul></li>
<li><a href="#包含" id="toc-包含"><span class="toc-section-number">1.4</span> 包含</a></li>
<li><a href="#積と和" id="toc-積と和"><span class="toc-section-number">1.5</span> 積と和</a></li>
</ul></li>
<li><a href="#代数とクラス" id="toc-代数とクラス"><span class="toc-section-number">2</span> 代数とクラス</a>
<ul>
<li><a href="#マグマ" id="toc-マグマ"><span class="toc-section-number">2.1</span> マグマ</a></li>
<li><a href="#半群" id="toc-半群"><span class="toc-section-number">2.2</span> 半群</a></li>
<li><a href="#モノイド" id="toc-モノイド"><span class="toc-section-number">2.3</span> モノイド</a></li>
<li><a href="#群" id="toc-群"><span class="toc-section-number">2.4</span> 群</a></li>
<li><a href="#リスト" id="toc-リスト"><span class="toc-section-number">2.5</span> リスト</a></li>
<li><a href="#ツリー" id="toc-ツリー"><span class="toc-section-number">2.6</span> ツリー</a></li>
<li><a href="#ネットワーク" id="toc-ネットワーク"><span class="toc-section-number">2.7</span> ネットワーク</a></li>
</ul></li>
<li><a href="#手続き型haskell" id="toc-手続き型haskell"><span class="toc-section-number">3</span> 手続き型Haskell</a></li>
<li><a href="#圏論とhaskell" id="toc-圏論とhaskell"><span class="toc-section-number">4</span> 圏論とHaskell</a></li>
<li><a href="#発展会計プログラム" id="toc-発展会計プログラム"><span class="toc-section-number">5</span> 発展:会計プログラム</a></li>
</ul>
</div>
<h1 data-number="1" id="代数的データ型"><span class="header-section-number">1</span> 代数的データ型</h1>
<p>Haskellのデータ型はすべて代数的データ型です. 代数的データ型には, <strong>列挙型</strong>,<strong>直積型</strong>,<strong>直和型</strong>があり,構文として<strong>レコード構文</strong>などが存在します.</p>
<p>集合論の説明と対応したコードの書き方.
(圏論で書けというのはそのうちやりたい.)</p>
<h2 data-number="1.1" id="命題と条件式"><span class="header-section-number">1.1</span> 命題と条件式</h2>
<p>集合を定義するにあたって,数理的な定義の記法に用いる演算子を導入する. 数理的な定義の内,そこで述べられた言説が,「真か偽のいずれかに分類可能とされるもの」を命題といい,条件が与えられた命題を条件式という.</p>
<p><code>x</code>に関する条件式を
<span class="math inline">P(x)≔***</span> や <span class="math inline">Q(x)</span>
と書き，<code>***</code>の部分に,命題が記述される．</p>
<p>命題の記述には以下の論理演算子が用いられる．</p>
<ul>
<li><p><span class="math inline">P(x) \lor Q(x)</span>： <span class="math inline">P(x)</span>または<span class="math inline">Q(x)</span></p></li>
<li><p><span class="math inline">P(x) \land Q(x)</span>：P(x)かつQ(x)</p></li>
<li><p><span class="math inline">p(x) \Rightarrow q(x)</span>：<span class="math inline">p(x)</span>ならば<span class="math inline">q(x)</span></p></li>
<li><p><span class="math inline">p(x) \Leftrightarrow q(x) ∶</span> <span class="math inline">p(x)</span>ならば <span class="math inline">q(x)</span> かつ <span class="math inline">q(x)</span> ならば <span class="math inline">p(x)</span></p></li>
<li><p>$ p(x):p(x)$ の否定</p></li>
</ul>
<p>なお, <span class="math inline">p(x) \Rightarrow q(x) \Leftrightarrow \neg p(x) \lor q(x)</span></p>
<h2 data-number="1.2" id="集合"><span class="header-section-number">1.2</span> 集合</h2>
<p>Haskellではデータ型を集合と<strong>みなすこと</strong>ができます(むしろ良く議論されるのは集合の圏 <strong><span class="math inline">\mathbb{Set}</span></strong>
ですが,集合論の範囲でしばらく話しを進めます). Haskellの型はあくまで型であり,厳密には集合ではありません. また,このあと出てくるリストを使った<code>内包表記</code>などの<strong>集合論的な書き方</strong>も数学における集合ではありません.
あくまで類似したものです.</p>
<p>しかし,Haskellを集合とみなすことで,関数型プログラミングや,代数的データ型の意味がより直感的に理解できるようになります. しばらく,集合論とHaskellの対応について考えてみましょう.</p>
<div class="note">
<p>特定のモノがそこに｢属するか判定可能なモノの集まり｣を｢集合｣という．</p>
</div>
<p>集合の細かな定義は置いておいて,この講義では取り敢えずこのくらいの認識で問題ありません. しかし,ただのモノの集まりではなく,特定のモノがそこに属するかどうかを判定できる必要があるので注意が必要です.</p>
<p>例えば, ｢頭の良い人の集合｣のようなものは,｢頭が良い基準｣が人によって異なるので,集合とはみなせません.</p>
<p>ノーベル賞受賞者の集合,フィールズ賞受賞者の集合,メンサ会員の集合,XX模試の偏差値が70以上の人の集合,特定の科目で85点以上取った人の集合,など,誰でも判別可能な定義が必要です.</p>
<p>私が過去に飼ったことのある犬の種類の集合を<code>MyDogs</code>という名前で呼ぶと,<code>MyDogs</code>に属するモノたちを<code>{ }</code>を使って以下のように書くことができます.</p>
<p><span class="math display">\begin{align*}
MyDogs = &amp; \{ GoldenRetriever \\
         &amp;, BlackRetriever    \\
         &amp;, ShetlandSheepdog \\
         &amp;, StandardPoodle \\
         &amp;, StandardPoodle \}
\end{align*}</span></p>
<p>このとき,<code>GoldenRetriever</code>や,<code>ShetlandSheepdog</code>は<code>MyDogs</code>の<code>要素</code>であるといい,要素が特定の集合に属するとき,</p>
<p><span class="math display"> GoldenRetriever \in MyDogs </span> の様に書きます. 要素に属さないことは <span class="math inline">Chihuahua \notin MyDogs</span>と書きます.</p>
<p>Haskellにおいて,このようなデータ型を以下の様に定義することが可能です.
データ型の宣言は, <code>data</code>のあとに続いて,<code>データ型の名前(型構築子)</code>を書き,<code>=</code>の後ろにその<code>中身(コンストラクタ/データ構築子)</code>を書きます.
型構築子やデータ構築子は,大文字の英字で始めるのが規則です.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">MyDogs</span> <span class="ot">=</span> <span class="dt">GoldenRetriever</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">BlackRetriever</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">ShetlandSheepdog</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">StandardPoodle</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">StandardPoodle</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>            <span class="kw">deriving</span> <span class="dt">Show</span></span></code></pre></div>
<p>この様にそこに属する要素をすべて書き出す(列挙する)データ型を<code>列挙型</code>といいます.</p>
<div class="warn">
<p>ちなみに,大文字の英字で始まってさえいればUTF-8の文字や絵文字,記号は使用できるので,以下のような記述も可能ですが,あまりおすすめしません.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">My</span>🐶   <span class="ot">=</span> <span class="dt">P</span>ゴールデンレトリーバー</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">P</span>ブラックレトリーバー</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">P</span>シェットランドシープドッグ</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">P</span>スタンダードプードル</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">P</span>ビーグル</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>            <span class="kw">deriving</span> <span class="dt">Show</span></span></code></pre></div>
</div>
<p><code>deriving Show</code>はコンストラクタを文字列に変換する関する<code>show</code>を自動で導入するための記法です. 自分で定義することも可能ですが,詳細に関しては後ほど扱います.</p>
<p><code>deriving Show</code>を入れていない状態で</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="fu">print</span> <span class="dt">GoldenRetriever</span></span></code></pre></div>
<p>などを実行すると,以下のエラーがでますが,<code>deriving Show</code>を追加することで,表示することが可能となります.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>{</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> <span class="kw">data</span> <span class="dt">MyDogs</span> <span class="ot">=</span> <span class="dt">GoldenRetriever</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span>             <span class="op">|</span> <span class="dt">BlackRetriever</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> <span class="op">:</span>}</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="fu">print</span> <span class="dt">GoldenRetriever</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">17</span><span class="op">:</span><span class="dv">1</span><span class="op">:</span> <span class="fu">error</span><span class="op">:</span> [<span class="dt">GHC</span><span class="op">-</span><span class="dv">39999</span>]</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    • <span class="dt">No</span> <span class="kw">instance</span> for ‘<span class="dt">Show</span> <span class="dt">MyDogs</span>’ arising from a use <span class="kw">of</span> ‘print’</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    • <span class="dt">In</span> the expression<span class="op">:</span> <span class="fu">print</span> <span class="dt">GoldenRetriever</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>      <span class="dt">In</span> an equation for ‘it’<span class="op">:</span> it <span class="ot">=</span> <span class="fu">print</span> <span class="dt">GoldenRetriever</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>{</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> <span class="kw">data</span> <span class="dt">MyDogs</span> <span class="ot">=</span> <span class="dt">GoldenRetriever</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span>             <span class="op">|</span> <span class="dt">BlackRetriever</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span>             <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> <span class="op">:</span>}</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="fu">print</span> <span class="dt">GoldenRetriever</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a><span class="dt">GoldenRetriever</span></span></code></pre></div>
<p>なお, <code>print</code>の<a href="https://hackage.haskell.org/package/base-4.19.1.0/docs/src/System.IO.html#print">実装</a>は</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="fu">print</span><span class="ot"> ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="fu">print</span> x <span class="ot">=</span> <span class="fu">putStrLn</span> (<span class="fu">show</span> x)</span></code></pre></div>
<p>となっています.</p>
<p>要素が一つも属さない集合を<code>空集合</code>といい,記号<span class="math inline">\phi</span> または<span class="math inline">｛｝</span>によって表されます．
Haskellでは空集合を表すデータ型として<code>Data.Void</code>に定義された<code>Void</code>が存在します. データ型として<code>ボトム型</code>,記号では<code>⊥</code>で表される場合もあります.</p>
<p><code>Void</code>と同じ値を持たないデータ型は,コンストラクタを記述しないことで自分で実装することもできます. 例えば私が犬を今までに一匹もかったことがなければ, <span class="math display"> MyPet = \phi </span> となり,データ型としては以下のように定義されます. 値が存在しない空集合と対応していることが分かります.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Mypet</span></span></code></pre></div>
<p><code>Void</code>型は値が存在しないため実行することはできませんが,コンパイルを通すことはできます. ただし,あまり実用する機会はないので,以下の部分は興味がある人だけ開いて読んでください.</p>
<div class="note">
<ul>
<li>Voidの利用例 開く/閉じる</li>
</ul>
<p><code>Void</code>型を利用したコードを記述する方法はいくつかありますが, <code>undefined</code>した実装などが良く用いられます.
<code>undefined</code>は遅延評価を利用した値で,具体的な値や式の記述を省略することができます.
未実装の部分を含めたコードを取り敢えず部分的にコンパイルしてみたい場合や, エラー処理などで利用されます.</p>
<p>以下のコードはコンパイルは通りますが,実行時には<code>undefined, called</code>エラーが発生します.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="ot">somFunc ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>someFunc <span class="ot">=</span> <span class="fu">undefined</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> <span class="op">$</span> someFunc <span class="dv">1</span></span></code></pre></div>
<p><code>Void</code>型を利用するケースは非常に限定的ですが,値が無いことを明示的に示したい場合などに利用されます.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE EmptyCase #-}</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE EmptyDataDeriving #-}</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Empty</span> <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="ot">head&#39; ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> <span class="dt">Empty</span> <span class="ot">-&gt;</span>  a</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>head&#39; []     e <span class="ot">=</span> <span class="kw">case</span> e <span class="kw">of</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>head&#39; (x<span class="op">:</span>[]) _ <span class="ot">=</span> x</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>head&#39; (x<span class="op">:</span>xs) _ <span class="ot">=</span> x</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> <span class="op">$</span> head&#39; ([]<span class="ot">::</span>[<span class="dt">Int</span>]) <span class="fu">undefined</span> <span class="co">-- &gt;&gt;&gt; undefined, called at</span></span></code></pre></div>
<p>このコードでは, 明示的に<code>先頭の値</code>が存在しないことを<code>Empty</code>で表し,<code>EmptyDataDeriving</code>拡張で<code>undefined</code>を評価することでエラーを発生させています.</p>
<p>しかし,こういったパターンでは,以下の<code>error</code>による実装や,後に説明する<code>Maybe型</code>を利用するほうが一般的です.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">head&#39;&#39; ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span>  a</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>head&#39;&#39; []     <span class="ot">=</span> <span class="fu">error</span> <span class="st">&quot;Empty List&quot;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>head&#39;&#39; (x<span class="op">:</span>[]) <span class="ot">=</span> x</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>head&#39;&#39; (x<span class="op">:</span>xs) <span class="ot">=</span> x</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> <span class="op">$</span> head&#39;&#39; ([]<span class="ot">::</span>[<span class="dt">Int</span>]) <span class="co">-- practice: Empty List error, called at</span></span></code></pre></div>
</div>
<p>単一の要素だけが存在するデータ型として<code>Unit</code>型も準備されており,<code>()</code>のような空のタプルとして表されます.</p>
<p>集合の表記法には，外延的表記及び内包的表記という2通りが存在する．外延的表記とは，集合Sに含まれる要素を全て記述する方法で，x,yを要素とする集合を，
S={x,y}
と書く．集合には順番は関係ないため，{x,y}={y,z}である．また，一つの集合に同じ要素は2つ以上属することができず，{x,x}のような集合は定義できない．</p>
<p>内包的表記とは，その集合に何が属するのかを定義する方法で集合Sに属する要素の集合をｘとすると，ｘがどの集合の要素であるか，どのような条件を持つかなどによって表記する．xの属する集合をX，条件式p(x)とすると，内包的表記では
S={x│x∈ X,p(x)}
と書かれる．また，内包表記において，関数や定数を定義することも許されており，
関数をf[x]で表すと，
S={f(x)|x∈X,f(x)=x+1}
のように表記される．
条件の例として，R<sup>+を非負の実数としたとき，R</sup>+５以下の非負の実数を，以下のように書く．
{x|x∈R^+,x≤5}
集合には，集合が属することも可能で，集合SがTに属するときS∈ Tが成り立つ．
また，集合Sの要素を幾つか取り出した集合TをSの部分集合といい，
T⊂S
と表記される．
S={x,y,z}のとき，Sの部分集合は
{x},{x,y},{x,z},{z,y},{x,y,z},ϕ
となる．任意の集合Sに対して
ϕ⊂S
は成り立つ．
また，集合Sの部分集合全体の集合を冪集合といい，pow[S]または2^S と書く．
pow[{x,y,z}]={{x},{x,y},{x,z},{z,y},{x,y,z},ϕ}</p>
<h2 data-number="1.3" id="型注釈と関数"><span class="header-section-number">1.3</span> 型注釈と関数</h2>
<h3 data-number="1.3.1" id="内包表記"><span class="header-section-number">1.3.1</span> 内包表記</h3>
<h2 data-number="1.4" id="包含"><span class="header-section-number">1.4</span> 包含</h2>
<h2 data-number="1.5" id="積と和"><span class="header-section-number">1.5</span> 積と和</h2>
<h1 data-number="2" id="代数とクラス"><span class="header-section-number">2</span> 代数とクラス</h1>
<h2 data-number="2.1" id="マグマ"><span class="header-section-number">2.1</span> マグマ</h2>
<h2 data-number="2.2" id="半群"><span class="header-section-number">2.2</span> 半群</h2>
<h2 data-number="2.3" id="モノイド"><span class="header-section-number">2.3</span> モノイド</h2>
<h2 data-number="2.4" id="群"><span class="header-section-number">2.4</span> 群</h2>
<h2 data-number="2.5" id="リスト"><span class="header-section-number">2.5</span> リスト</h2>
<h2 data-number="2.6" id="ツリー"><span class="header-section-number">2.6</span> ツリー</h2>
<h2 data-number="2.7" id="ネットワーク"><span class="header-section-number">2.7</span> ネットワーク</h2>
<h1 data-number="3" id="手続き型haskell"><span class="header-section-number">3</span> 手続き型Haskell</h1>
<h1 data-number="4" id="圏論とhaskell"><span class="header-section-number">4</span> 圏論とHaskell</h1>
<h1 data-number="5" id="発展会計プログラム"><span class="header-section-number">5</span> 発展:会計プログラム</h1>
<p>yakagika</p>
]]></description>
    <pubDate>Fri, 18 Oct 2024 00:00:00 UT</pubDate>
    <guid>/lectures/iap5.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>代数プログラミング入門 Ch4 関数</title>
    <link>/lectures/iap4.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#関数" id="toc-関数"><span class="toc-section-number">1</span> 関数</a>
<ul>
<li><a href="#関数と演算子" id="toc-関数と演算子"><span class="toc-section-number">1.1</span> 関数と演算子</a>
<ul>
<li><a href="#結合性" id="toc-結合性"><span class="toc-section-number">1.1.1</span> 結合性</a></li>
</ul></li>
<li><a href="#カリー化部分適用" id="toc-カリー化部分適用"><span class="toc-section-number">1.2</span> カリー化,部分適用</a></li>
<li><a href="#分岐" id="toc-分岐"><span class="toc-section-number">1.3</span> 分岐</a>
<ul>
<li><a href="#パターンマッチ" id="toc-パターンマッチ"><span class="toc-section-number">1.3.1</span> パターンマッチ</a></li>
<li><a href="#ガード" id="toc-ガード"><span class="toc-section-number">1.3.2</span> ガード</a></li>
<li><a href="#case式" id="toc-case式"><span class="toc-section-number">1.3.3</span> case式</a></li>
<li><a href="#if式" id="toc-if式"><span class="toc-section-number">1.3.4</span> if式</a></li>
</ul></li>
<li><a href="#再帰" id="toc-再帰"><span class="toc-section-number">1.4</span> 再帰</a></li>
<li><a href="#高階関数" id="toc-高階関数"><span class="toc-section-number">1.5</span> 高階関数</a>
<ul>
<li><a href="#map" id="toc-map"><span class="toc-section-number">1.5.1</span> map</a></li>
<li><a href="#filter" id="toc-filter"><span class="toc-section-number">1.5.2</span> filter</a></li>
<li><a href="#fold" id="toc-fold"><span class="toc-section-number">1.5.3</span> fold</a></li>
<li><a href="#zipwith-zip" id="toc-zipwith-zip"><span class="toc-section-number">1.5.4</span> zipWith, zip</a></li>
</ul></li>
<li><a href="#無名関数ラムダ式" id="toc-無名関数ラムダ式"><span class="toc-section-number">1.6</span> 無名関数(ラムダ式)</a></li>
<li><a href="#関数合成" id="toc-関数合成"><span class="toc-section-number">1.7</span> 関数合成</a></li>
</ul></li>
<li><a href="#変数値の束縛" id="toc-変数値の束縛"><span class="toc-section-number">2</span> 変数(値の束縛)</a>
<ul>
<li><a href="#トップレベル変数" id="toc-トップレベル変数"><span class="toc-section-number">2.1</span> トップレベル変数</a></li>
<li><a href="#ローカル変数" id="toc-ローカル変数"><span class="toc-section-number">2.2</span> ローカル変数</a>
<ul>
<li><a href="#let式" id="toc-let式"><span class="toc-section-number">2.2.1</span> let式</a></li>
<li><a href="#where節" id="toc-where節"><span class="toc-section-number">2.2.2</span> where節</a></li>
</ul></li>
</ul></li>
<li><a href="#練習問題関数総合" id="toc-練習問題関数総合"><span class="toc-section-number">3</span> 練習問題(関数総合)</a></li>
</ul>
</div>
<h1 data-number="1" id="関数"><span class="header-section-number">1</span> 関数</h1>
<p>Haskellは関数型言語なので,関数の記述がプログラミングにおける花形です. この章ではHaskellの関数に関する記法を学びましょう.</p>
<h2 data-number="1.1" id="関数と演算子"><span class="header-section-number">1.1</span> 関数と演算子</h2>
<p>関数型言語では関数を組み合わせてプログラムを書きます. 関数の正確な定義は後に譲るとして,ここでは取り敢えず｢特定のデータ型の値を受け取って,特定のデータ型の値を返すもの｣という定義にしましょう.このとき受け取る値を<strong>引数</strong>,返す値を<strong>返り値</strong>といいます.</p>
<p>Haskellでは,数学の記法と非常に近い方法で関数を定義します.
例えば,</p>
<p><span class="math display">
f : \mathbb{Z} \rightarrow \mathbb{Z} \\
f(x) = x + 1
</span></p>
<p>という,整数<code>x</code>を受け取って整数<code>x + 1</code>を返すだけの関数について考えましょう.</p>
<p>Haskellでは上の関数は以下のように定義されます.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">f ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>f x <span class="ot">=</span> x <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> f <span class="dv">4</span> <span class="co">--  5</span></span></code></pre></div>
<p><code>()</code>の代わりにスペースを使う点以外は全く同じ書き方で, <code>=</code>の左側に関数名と引数,右側に返り値を書きます.
関数名は小文字の英字で始めるというルールがあります.</p>
<p><code>f :: Int -&gt; Int</code>は型注釈であり,この<code>f</code>という関数が,引数に<code>Int</code>を取り,返り値として<code>Int</code>を返すということを指定しています.
型注釈は高度な処理をしない限り省略しても自動的にGHCが推論してくれますが,可読性のためにもできるだけ書くようにしましょう.</p>
<p><code>do</code>以下の記述で, <code>f 4</code>の結果を確認しています. <code>print</code>は,文字列に変換可能な値を受け取り,標準出力する関数です. また <code>(f 4)</code>を省略して<code>$ f 4</code> としています.</p>
<p>引数は何個でも利用できます. 例えば2引数関数</p>
<p><span class="math display"> multiple(x,y) = x * y </span></p>
<p>は以下のように定義できます.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">multiple ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>multiple x y <span class="ot">=</span> x <span class="op">*</span> y</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>multiple <span class="dv">3</span> <span class="dv">4</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> multiple <span class="dv">3</span> <span class="dv">4</span> <span class="co">--  12.0</span></span></code></pre></div>
<p>また,以下の記号を組み合わせて中置演算子名として利用することも可能です.</p>
<div class="note">
<p>~ ! # $ % &amp; * + = . / &lt; &gt; ? @   ^ | -</p>
</div>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">(.*) ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>x <span class="op">.*</span> y <span class="ot">=</span> x <span class="op">*</span> y</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="dv">3</span> <span class="op">.*</span> <span class="dv">4</span> <span class="co">--  12.0</span></span></code></pre></div>
<p>絵文字などのUnicode記号も利用することができます.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>(✖)<span class="ot"> ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>x ✖ y <span class="ot">=</span> x <span class="op">*</span> y</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="dv">3</span> ✖ <span class="dv">4</span> <span class="co">--  12.0</span></span></code></pre></div>
<p>記号を利用して関数を定義する場合には,定義時に<code>()</code> で囲うことで一般の関数のように定義することができます.
例えば, 乗算を新たに定義するとして,以下のように書くことができます.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">(.*) ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>(<span class="op">.*</span>) x y <span class="ot">=</span> x <span class="op">*</span> y</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="dv">3</span> <span class="op">.*</span> <span class="dv">4</span> <span class="co">--  12</span></span></code></pre></div>
<p>前置の2引数関数も<code>``</code> (バッククオート)で囲むことで中置演算子として定義することができます.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>x <span class="ot">`multiple`</span> y <span class="ot">=</span> x <span class="op">*</span> y</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="dv">3</span> <span class="ot">`multiple `</span> <span class="dv">4</span> <span class="co">--  12</span></span></code></pre></div>
<h3 data-number="1.1.1" id="結合性"><span class="header-section-number">1.1.1</span> 結合性</h3>
<p>先に述べたように異なる複数の演算子が連なっている式は, 演算子の優先順位に従って計算される順位が変わります.</p>
<p>例えば,<code>*</code> の優先順位は7で, <code>+</code> の優先順位は6なので,<code>2 * 3 + 3</code> という式は,</p>
<pre><code>   2 * 3  + 3
= (2 * 3) + 3
= 6 + 3
= 9</code></pre>
<p>と言う風に<code>*</code>が優先して計算されます.</p>
<p>では,同じ演算子が複数回連なっている場合にはどのような順序で計算されるのでしょうか? このルールを決めるのが <strong>結合性(Associativity)</strong> です.</p>
<div class="note">
<p>結合性には, <strong>左結合(Left-associative)</strong>, <strong>右結合(Right-associative)</strong>, <strong>非結合(Non-associative)</strong> の3種類があり,ユーザーが定義することができます.</p>
<ul>
<li><strong>左結合(Left-associative)</strong></li>
</ul>
<p>左結合の場合, 演算子は左から右へと評価されます. 例えば, <code>+</code> は左結合であり,式 <code>a + b + c</code> は <code>(a + b) + c</code> として評価されます</p>
<ul>
<li><strong>右結合(Right-associative)</strong></li>
</ul>
<p>右結合演算子の場合,演算子は右から左へと評価されます.例えば、<code>^</code>は右結合です。式 <code>a ^ b ^ c</code> は <code>a ^ (b ^ c)</code> として評価されます</p>
<ul>
<li><strong>非結合(Non-associative)</strong></li>
</ul>
<p>非結合演算子は,同じ式内で連続して使用することは許されていません. 非結合演算子の例としては,比較演算子（<code>&lt;</code>,<code>&gt;</code> など）があります.</p>
<p>式 <code>a &lt; b &lt; c</code> は Haskell では文法的に不正です. 比較を連鎖させる場合は,<code>a &lt; b &amp;&amp; b &lt; c</code>のように明確に分けて記述する必要があります.</p>
</div>
<p>ユーザーが作成した演算子の結合性を指定するには,右,左,非の順に<code>infixr</code>,<code>infixl</code>,<code>infix</code>宣言を利用します. いずれも, <code>infix(r/l/なし) 優先順位 記号</code> の順に書きます.</p>
<p>例えば先程作成した,<code>.*</code> を右結合の優先順位7で指定するには,以下のように書きます.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>x <span class="op">.*</span> y <span class="ot">=</span> x <span class="op">*</span> y</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">7</span> <span class="op">.*</span></span></code></pre></div>
<h2 data-number="1.2" id="カリー化部分適用"><span class="header-section-number">1.2</span> カリー化,部分適用</h2>
<p>Haskellでは多引数関数を実装できることは先程確認しました. しかし,Haskellは<strong>すべての関数が,引数を一つだけとる</strong>という原則があります. これは,矛盾するようですが,この矛盾を解消する概念が<strong><code>カリー化(Currying)</code></strong>です.</p>
<p>カリー化とは複数引数関数に対して,｢一つの引数を取り,次に残りの引数を取る関数を返すようにする変換｣です.</p>
<p>例として,以下のxとyを受け取りその和を返す関数<code>add</code>は</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">add ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>add x y <span class="ot">=</span> x <span class="op">+</span> y</span></code></pre></div>
<p>実際には</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">add ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>)</span></code></pre></div>
<p>として機能しています. 関数の呼び出しは左結合なので,</p>
<p><code>add 5 10 = (add 5) 10</code> であり, ここで<code>(add 5) :: Int -&gt; Int</code>という新たな関数に2が適用されています.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span> :{</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="kw">|</span> <span class="ex">add</span> :: Int <span class="at">-</span><span class="op">&gt;</span> Int <span class="at">-</span><span class="op">&gt;</span> Int</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="kw">|</span> <span class="ex">add</span> x y = x + y</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="kw">|</span> <span class="ex">:}</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span> :t add</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="ex">add</span> :: Int <span class="at">-</span><span class="op">&gt;</span> Int <span class="at">-</span><span class="op">&gt;</span> Int</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span> :t <span class="er">(</span><span class="ex">add</span> 5<span class="kw">)</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="kw">(</span><span class="ex">add</span> 5<span class="kw">)</span> <span class="ex">::</span> Int <span class="at">-</span><span class="op">&gt;</span> Int</span></code></pre></div>
<p>Haskellでは,標準で全ての関数がカリー化されており,これによって関数の複数の引数のうち一部だけを与えて,残りの引数を持つ関数を生成する<strong><code>部分適用(Partial Application)</code></strong>が可能となっています.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- add関数を利用した部分適用</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="ot">add5 ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>add5 <span class="ot">=</span> add <span class="dv">5</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- 実際の利用例</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>result <span class="ot">=</span> add5 <span class="dv">10</span></span></code></pre></div>
<h2 data-number="1.3" id="分岐"><span class="header-section-number">1.3</span> 分岐</h2>
<p>関数型言語において,手続き型言語におけるIF文に相当するのが<strong>パターンマッチ</strong>と<strong>指示関数(特性関数)</strong>です.</p>
<h3 data-number="1.3.1" id="パターンマッチ"><span class="header-section-number">1.3.1</span> パターンマッチ</h3>
<p>パターンマッチに近い概念は既にフィボナッチ数の漸化式として出てきています.フィボナッチ数の漸化式は,以下のように表されます.</p>
<div class="note">
<p><span class="math display">
F_0 = 1 \\
F_1 = 1 \\
F_n = F_{n-1} + F_{n-2} (n &gt;= 2)
</span></p>
</div>
<p>この関数はPythonでは,以下のようにif文による分岐で記述されるのが一般的です.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> fib(x):</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> x <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">1</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> x <span class="op">==</span> <span class="dv">1</span>:</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">1</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> fib(x<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span> f(x<span class="op">-</span><span class="dv">2</span>)</span></code></pre></div>
<p>これをHaskellでパターンマッチを利用して以下のように定義することができます.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="ot">fib ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>fib <span class="dv">0</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>fib <span class="dv">1</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>fib n <span class="ot">=</span> fib (n <span class="op">-</span> <span class="dv">1</span>) <span class="op">+</span> fib (n <span class="op">-</span> <span class="dv">2</span>)</span></code></pre></div>
<p>このHaskellのコードは,</p>
<ul>
<li><p>関数<code>fib</code>の引数が<code>0</code>のときには返り値として<code>1</code>を返し,</p></li>
<li><p>関数<code>fib</code>の引数が<code>1</code>のときには返り値として<code>1</code>を返し,</p></li>
<li><p>関数<code>fib</code>の引数が<code>それ以外</code>のときには返り値として<code>fib (n - 1) + fib (n - 2)</code>を返します.</p></li>
</ul>
<p>この最後の<code>fib n = fib (n - 1) + fib (n - 2)</code>は再帰関数といって後ほど扱いますが,取り敢えず,特定の引数に対して特定の返り値を指定するこのような関数の記述方法を<strong>パターンマッチ</strong>といいます.</p>
<p>パターンマッチは,数値以外の引数に関しても適用可能であり,リストではリストの要素数に応じて使い分けることが多いです.</p>
<p>以下の,<code>strHead</code>関数は,リストの先頭の要素を文字列として表示する関数です.リストが空のときには<code>"Empty"</code>,要素が一つのときにはその要素,それ以外のときには先頭の要素を文字列にして返します.</p>
<p><code>show</code>の詳細は後ほど扱いますが,どの様に標準出力に表示するかを定めてあるデータ型を文字列に変換する関数です.</p>
<div class="warn">
<p><code>Show a =&gt;</code>の部分は任意のデータ型<code>a</code>が<code>show</code>を利用できるという制約を意味しており, <strong>型クラス制約</strong>といいます.
クラスの詳細に関しては後ほど扱います.</p>
</div>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="ot">strHead ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>strHead []     <span class="ot">=</span> <span class="st">&quot;Empty&quot;</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>strHead [x]    <span class="ot">=</span> <span class="fu">show</span> x</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>strHead (x<span class="op">:</span>xs) <span class="ot">=</span> <span class="fu">show</span> x</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> strHead [] <span class="co">--  &quot;Empty&quot;</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> strHead [<span class="dv">3</span>,<span class="dv">4</span>] <span class="co">--  &quot;3&quot;</span></span></code></pre></div>
<p>パターンマッチはこのようにリスト<code>x:xs</code>の先頭部分<code>x</code>を指定するなどの利用法が可能です. 値の特定の部分を取得する用法として頻出なのがタプルを引数に取るパターンマッチです.</p>
<p>以下のコードは,3つ組のタプル<code>(x,y,z)</code>から指定した位置の値を取り出す関数<code>getFromTuple</code>です.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>getFromTuple (x,y,z) <span class="dv">0</span> <span class="ot">=</span> x</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>getFromTuple (x,y,z) <span class="dv">1</span> <span class="ot">=</span> y</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>getFromTuple (x,y,z) <span class="dv">2</span> <span class="ot">=</span> z</span></code></pre></div>
<p>このような用法は後に紹介する代数的データ型を扱う際にも頻出します.</p>
<h3 data-number="1.3.2" id="ガード"><span class="header-section-number">1.3.2</span> ガード</h3>
<p>数式における分岐は,指示関数を用いて行うこともできます.</p>
<div class="note">
<p><span class="math display">
fib(n) =
\begin{cases}
1, ~if~n = 0 \\
1, ~if~n = 1 \\
fib(n-1) + fib(n-2),~if~n &gt;=2
\end{cases}
</span></p>
</div>
<p>Haskellにおいて指示関数の記法に相当するのが<strong>ガード</strong>です.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="ot">fib ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>fib n <span class="op">|</span> n <span class="op">==</span> <span class="dv">0</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>      <span class="op">|</span> n <span class="op">==</span> <span class="dv">1</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>      <span class="op">|</span> n <span class="op">&gt;=</span> <span class="dv">2</span> <span class="ot">=</span> fib (n<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span> fib (n<span class="op">-</span><span class="dv">2</span>)</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> fib <span class="dv">5</span> <span class="co">--  8</span></span></code></pre></div>
<p>特徴関数におけるifの位置が先に来ている以外は,基本的に対応関係にあるのがわかるかと思います.</p>
<h3 data-number="1.3.3" id="case式"><span class="header-section-number">1.3.3</span> case式</h3>
<p>パターンマッチをインデントブロックで実現する手法として<strong>case式</strong>があります. パターンマッチで判定する変数を<code>case 変数 of</code> のあとに指定して, それぞれのパターンとその結果を<code>-&gt;</code>でつなげる記法です. 指定のパターンに当てはまらないものすべて(これを<strong>ワイルドカード</strong>といいます)を指定するために<code>_</code>を利用します.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="ot">fib ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>fib n <span class="ot">=</span> <span class="kw">case</span> n <span class="kw">of</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>        <span class="dv">0</span> <span class="ot">-&gt;</span> <span class="dv">1</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>        <span class="dv">1</span> <span class="ot">-&gt;</span> <span class="dv">1</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>        _ <span class="ot">-&gt;</span> fib (n<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span> fib (n<span class="op">-</span><span class="dv">2</span>)</span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> fib <span class="dv">5</span> <span class="co">--  8</span></span></code></pre></div>
<p>ワイルドカードはどのような値に対しても同じ値を返す関数を実装する場合などにも利用されます.</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="ot">return10 ::</span> a <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>return10 _ <span class="ot">=</span> <span class="dv">10</span></span></code></pre></div>
<h3 data-number="1.3.4" id="if式"><span class="header-section-number">1.3.4</span> if式</h3>
<p>Haskellにはifも存在します. <code>if 条件</code>に当てはまる場合の返り値を<code>then</code>で指定します. <code>else if</code> で条件を追加し, <code>else</code>でそれ以外のパターンを指定します. Pythonなどのif文と異なり,式なので<code>else</code>の場合の返り値も必ず指定する必要があります.</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="ot">fib ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>fib n <span class="ot">=</span> <span class="kw">if</span> n <span class="op">==</span> <span class="dv">0</span> <span class="kw">then</span> <span class="dv">1</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>        <span class="kw">else</span> <span class="kw">if</span> n <span class="op">==</span> <span class="dv">1</span> <span class="kw">then</span> <span class="dv">1</span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a>        <span class="kw">else</span> fib (n<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span> fib (n<span class="op">-</span><span class="dv">2</span>)</span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> fib <span class="dv">5</span> <span class="co">--  8</span></span></code></pre></div>
<p>Haskellではあまりif式は利用されませんが,
1行で書けるため,式の中で部分的に利用する場合に便利です.</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="ot">fib ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>fib n <span class="ot">=</span> <span class="kw">if</span> n <span class="op">==</span> <span class="dv">0</span> <span class="kw">then</span> <span class="dv">1</span> <span class="kw">else</span> <span class="kw">if</span> n <span class="op">==</span> <span class="dv">1</span> <span class="kw">then</span> <span class="dv">1</span> <span class="kw">else</span> fib (n<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span> fib (n<span class="op">-</span><span class="dv">2</span>)</span></code></pre></div>
<h2 data-number="1.4" id="再帰"><span class="header-section-number">1.4</span> 再帰</h2>
<p>Haskellにおいても<strong>for文に相当する記法は存在します</strong>が,基本的にループは<strong>再帰</strong>によって実装されます.
再帰とは関数内で自分自身を呼び出すことです. これまで何度も登場していた<code>fib</code>も再帰を利用していましたが,
もう少し細かく見てみましょう.</p>
<p>以下のPythonにおけるfor文を事例に考えてみましょう.</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> total(xs):</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a>    result <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> x <span class="kw">in</span> xs:</span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a>        result <span class="op">+=</span> x</span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> result</span></code></pre></div>
<p>これと同値なプログラムをHaskellで記述すると以下のようになります.</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="ot">total ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>total []  <span class="ot">=</span> <span class="dv">0</span></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a>total [x] <span class="ot">=</span> x</span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a>total (x<span class="op">:</span>xs) <span class="ot">=</span> x <span class="op">+</span> (total xs)</span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> <span class="op">$</span> tatal [<span class="dv">1</span><span class="op">..</span><span class="dv">10</span>] <span class="co">--  55</span></span></code></pre></div>
<p>このtotal関数は,与えられたリストが空の場合0を返し,要素が一つの場合その要素を返します.
要素が複数あるリストの場合には,先頭の要素<code>x</code>をそれ以降の要素<code>xs</code>の合計に足すという処理を行います.</p>
<p><code>total [1,2,3]</code>における処理の流れを追っていくと以下のようになります.</p>
<pre><code>total [1,2,3]
= 1 + (total [2,3])
= 1 + (2 + (total [3]))
= 1 + 2 + 3 + (total [])
= 1 + 2 + 3 + 0
= 6</code></pre>
<p>再帰の基本は,<strong>ループの終了状態</strong>をパターンマッチなどで指定して,そこに至るまでの状態の変化を再帰で記述することです.
処理がどのような状態になったら終わるのかを意識して記述しないと永遠に終了しないプログラムになるので注意しましょう.</p>
<div class="note">
<p>練習問題</p>
<ol type="1">
<li><p>リストの長さを返す<code>length2 :: [a] -&gt; Int</code> 関数を新しく実装してください.</p></li>
<li><p>与えられた整数のリストを引数にとり,要素毎にFizzBuzzを実行した結果を文字列のリストで返す関数
<code>fizzBuzz :: [Int] -&gt; [String]</code>実装してください.</p></li>
</ol>
</div>
<h2 data-number="1.5" id="高階関数"><span class="header-section-number">1.5</span> 高階関数</h2>
<p>これまで扱ってきた関数の引数はすべて,値でしたが値ではなく<strong>関数</strong>を引数として指定することが可能です. <strong>関数を引数に取る関数を高階関数といいます</strong>.</p>
<p>例えば関数<code>f</code>とリスト<code>[x,y,z]</code>を引数として受け取り,リストの各要素に<code>f</code>を適用したリスト<code>[f x, f y, f z]</code>を返す関数は以下のように実装できます.</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="ot">applyFToList ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [b]</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>applyFToList f []     <span class="ot">=</span> []</span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>applyFToList f [x]    <span class="ot">=</span> [f x]</span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a>applyFToList f (x<span class="op">:</span>xs) <span class="ot">=</span>  (f x)<span class="op">:</span> (applyFToList f xs)</span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> applyFToList (<span class="dv">2</span><span class="op">*</span>) [<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>]  <span class="co">-- [8,10,12]</span></span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> applyFToList (<span class="dv">1</span><span class="op">+</span>) [<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>]  <span class="co">-- [5,6,7]</span></span>
<span id="cb25-9"><a href="#cb25-9" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> applyFToList <span class="fu">show</span> [<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>]  <span class="co">-- [&quot;4&quot;,&quot;5&quot;,&quot;6&quot;]</span></span>
<span id="cb25-10"><a href="#cb25-10" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> applyFToList fib  [<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>]  <span class="co">-- [5,8,13]</span></span></code></pre></div>
<p>関数部分は, <code>(a -&gt; b)</code>のように,丸括弧で囲んでいます.</p>
<h3 data-number="1.5.1" id="map"><span class="header-section-number">1.5.1</span> map</h3>
<p>この関数と同じものが組み込み関数(あらかじめ定義された関数)として提供されている代表的な高階関数<code>map :: (a -&gt; b) -&gt; [a] -&gt; [b]</code>です.</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="fu">map</span> (<span class="dv">2</span><span class="op">*</span>) [<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>]  <span class="co">-- [8,10,12]</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="fu">map</span> (<span class="dv">1</span><span class="op">+</span>) [<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>]  <span class="co">-- [5,6,7]</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="fu">map</span> <span class="fu">show</span> [<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>]  <span class="co">-- [&quot;4&quot;,&quot;5&quot;,&quot;6&quot;]</span></span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="fu">map</span> fib  [<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>]  <span class="co">-- [5,8,13]</span></span></code></pre></div>
<div class="warn">
<ul>
<li><h2 id="prelude">Prelude</h2>
Haskellの組み込み関数はライブラリ<code>Prelude</code>として提供されています.
<code>Prelude</code>はすべてのプロジェクトで自動で読み込まれています.</li>
</ul>
<p><code>map</code>関数は他のライブラリでも同名のものが提供されているため,それらと名前が被っている場合はどちらの<code>map</code>を利用するのか判別できないというエラーが起きます.</p>
<p>例として,<code>Data.Text</code>も<code>map</code>を提供しているために,<code>Data.Text</code>を<code>import</code>している場合には以下のようなエラーが出ます.</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="ex">Ambiguous</span> occurrence ‘map’</span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a>    <span class="ex">It</span> could refer to</span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a>       <span class="ex">either</span> ‘Prelude.map’,</span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a>              <span class="ex">imported</span> from ‘Prelude’ at app/practice.hs:1:1</span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true" tabindex="-1"></a>              <span class="kw">(</span><span class="ex">and</span> originally defined in ‘GHC.Base’<span class="kw">)</span></span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true" tabindex="-1"></a>           <span class="ex">or</span> ‘Data.Text.map’,</span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true" tabindex="-1"></a>              <span class="ex">imported</span> from ‘Data.Text’ at app/practice.hs:4:1-16</span></code></pre></div>
<p>同名の関数が複数のライブラリで定義されている場合は,<code>Prelude.map</code>など,どのライブラリの<code>map</code>であるかを明示するか,
<code>hiding</code>を利用して特定の関数のみを<code>import</code>対象から外します.</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Text</span> <span class="kw">hiding</span> (map)</span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- map 以外すべてをimport</span></span></code></pre></div>
<p>あるいは,利用する関数のみを明示的に<code>import</code>することも可能です.</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Text</span> <span class="kw">hiding</span> (<span class="dt">Text</span>,empty)</span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- Text,emptyのみをimport</span></span></code></pre></div>
</div>
<p>以下, よく用いられる代表的な高階関数に関して紹介します.</p>
<h3 data-number="1.5.2" id="filter"><span class="header-section-number">1.5.2</span> filter</h3>
<p><code>filter :: (a -&gt; Bool) -&gt; [a] -&gt; [a]</code>はリストの中から与えられた関数で判定される条件に合致するもののみを抽出する関数です.</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Text</span> (elem)</span>
<span id="cb30-3"><a href="#cb30-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-4"><a href="#cb30-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb30-5"><a href="#cb30-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="fu">filter</span> (<span class="dv">10</span> <span class="op">&lt;</span> ) [<span class="dv">5</span>,<span class="dv">10</span>,<span class="dv">15</span>,<span class="dv">20</span>] <span class="co">--  [15,20]</span></span>
<span id="cb30-6"><a href="#cb30-6" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="fu">filter</span> (Data.Text.elem <span class="ch">&#39;a&#39;</span>) [<span class="st">&quot;cat&quot;</span>,<span class="st">&quot;dog&quot;</span>,<span class="st">&quot;bird&quot;</span>] <span class="co">--  [&quot;cat&quot;]</span></span></code></pre></div>
<h3 data-number="1.5.3" id="fold"><span class="header-section-number">1.5.3</span> fold</h3>
<p><code>foldl :: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</code>,</p>
<p><code>foldr :: (a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; b</code></p>
<p>は畳み込み関数です.<code>foldl</code>はリストの左端,<code>foldr</code>はリストの右端から値を一つずつ抜き出して,2引数関数によって一つの値に畳み込んでいきます.
リストのデータ構造的に基本的には<code>foldl</code>のほうが効率が良いので<code>foldl</code>が用いられます.</p>
<p>例として,</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="fu">foldl</span> (<span class="op">+</span>) <span class="dv">0</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>] <span class="co">--  6</span></span></code></pre></div>
<p>の挙動は,</p>
<p><code>foldl (+) 0 [1,2,3]</code></p>
<p><code>foldl (+) (0+1) [2,3]</code></p>
<p><code>foldl (+) (1+2) [3]</code></p>
<p><code>foldl (+) (3+3) []</code></p>
<p><code>6</code></p>
<p>となります.</p>
<h3 data-number="1.5.4" id="zipwith-zip"><span class="header-section-number">1.5.4</span> zipWith, zip</h3>
<p><code>zipWith :: (a -&gt; b -&gt; c) -&gt; [a] -&gt; [b] -&gt; [c]</code></p>
<p>は2つのリストからそれぞれ値を順番に取り出して,関数を適用した結果をリストに格納する高階関数です.</p>
<p>例として.</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="fu">zipWith</span> (<span class="op">++</span>) [<span class="st">&quot;a&quot;</span>,<span class="st">&quot;b&quot;</span>,<span class="st">&quot;c&quot;</span>] [<span class="st">&quot;x&quot;</span>,<span class="st">&quot;y&quot;</span>,<span class="st">&quot;z&quot;</span>] <span class="co">--  [&quot;ax&quot;,&quot;by&quot;,&quot;cz&quot;]</span></span></code></pre></div>
<p>の挙動は,</p>
<p><code>zipWith (++) ["a","b","c"] ["x","y","z"]</code></p>
<p><code>["a" ++ "x" ,"b" ++ "y","c" ++ "z"]</code></p>
<p>となります.</p>
<p><code>zip :: [a] -&gt; [b] -&gt; [(a,b)]</code></p>
<p>は2つのリストからそれぞれ値を順番に取り出して,<code>[(左のリスト値,右のリストの値)]</code>を返す関数です.
タプルを返す2引数関数 <code>,</code> によって <code>zipWith (,)</code> として実装されます.</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="ot">zip&#39; ::</span> [a] <span class="ot">-&gt;</span> [b] <span class="ot">-&gt;</span> [(a,b)]</span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a>zip&#39; <span class="ot">=</span> <span class="fu">zipWith</span> (,)</span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-4"><a href="#cb33-4" aria-hidden="true" tabindex="-1"></a><span class="ot">tuple ::</span> a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> (a,b)</span>
<span id="cb33-5"><a href="#cb33-5" aria-hidden="true" tabindex="-1"></a>tuple a b <span class="ot">=</span> (a,b)</span>
<span id="cb33-6"><a href="#cb33-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-7"><a href="#cb33-7" aria-hidden="true" tabindex="-1"></a><span class="ot">zip&#39;&#39; ::</span> [a] <span class="ot">-&gt;</span> [b] <span class="ot">-&gt;</span> [(a,b)]</span>
<span id="cb33-8"><a href="#cb33-8" aria-hidden="true" tabindex="-1"></a>zip&#39;&#39; <span class="ot">=</span> <span class="fu">zipWith</span> tuple</span>
<span id="cb33-9"><a href="#cb33-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-10"><a href="#cb33-10" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb33-11"><a href="#cb33-11" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="fu">zip</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>] [<span class="dv">11</span>,<span class="dv">12</span>,<span class="dv">13</span>] <span class="co">--  [(1,11),(2,12),(3,13)]</span></span>
<span id="cb33-12"><a href="#cb33-12" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> zip&#39; [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>] [<span class="dv">11</span>,<span class="dv">12</span>,<span class="dv">13</span>] <span class="co">--  [(1,11),(2,12),(3,13)]</span></span>
<span id="cb33-13"><a href="#cb33-13" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> zip&#39;&#39; [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>] [<span class="dv">11</span>,<span class="dv">12</span>,<span class="dv">13</span>] <span class="co">--  [(1,11),(2,12),(3,13)]</span></span></code></pre></div>
<div class="note">
<ul>
<li><h2 id="練習問題">練習問題</h2></li>
<li>与えられた整数のリストの各要素を二乗する関数squareListを,mapを使って定義してください.</li>
</ul>
<div class="sourceCode" id="cb34"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true" tabindex="-1"></a>squareList [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>] <span class="co">-- [1,4,9,16]</span></span></code></pre></div>
<ul>
<li>整数のリストの総積を計算する関数productListを,foldlを使って定義してください.</li>
</ul>
<div class="sourceCode" id="cb35"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true" tabindex="-1"></a>productList [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>] <span class="co">-- 24</span></span></code></pre></div>
<ul>
<li>2つのリストから,それぞれの要素の大きい方を選んで新しいリストを作る関数maxListを,zipWithを使って定義してください.</li>
</ul>
<div class="sourceCode" id="cb36"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a>maxList [<span class="dv">1</span>,<span class="dv">4</span>,<span class="dv">3</span>] [<span class="dv">2</span>,<span class="dv">2</span>,<span class="dv">5</span>] <span class="co">-- [2,4,5]</span></span></code></pre></div>
</div>
<h2 data-number="1.6" id="無名関数ラムダ式"><span class="header-section-number">1.6</span> 無名関数(ラムダ式)</h2>
<p>高階関数に与える関数はその場限りの利用となる場合が多いため,先程の<code>zipWith</code>と<code>tuple</code>によって<code>zip</code>を定義した例のように, いちいち別の関数名をつけることは手間が多くなり,コードも冗長になりがちです.
そのような場合に, 使い捨ての関数を定義する手法が,<strong>無名関数(ラムダ式) Lambda expression</strong>です.</p>
<p>ラムダ計算は<span class="math inline">\lambda</span>を表す記号,<code>\</code>を用いて, <code>\ 引数 -&gt; 返り値</code>の形で式を定義できます.</p>
<p>例として,</p>
<p><code>f x y z = x + y + z</code> は</p>
<p><code>\ x y z -&gt; x + y + z</code> となります.</p>
<p><code>zipWith</code> の例は以下のようにも定義できます.</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb37-2"><a href="#cb37-2" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="fu">zip</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>] [<span class="dv">11</span>,<span class="dv">12</span>,<span class="dv">13</span>] <span class="co">-- [(1,11),(2,12),(3,13)]</span></span>
<span id="cb37-3"><a href="#cb37-3" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="fu">zipWith</span> (\ x y <span class="ot">-&gt;</span> (x,y)) [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>] [<span class="dv">11</span>,<span class="dv">12</span>,<span class="dv">13</span>] <span class="co">--  [(1,11),(2,12),(3,13)]</span></span></code></pre></div>
<p>また,練習問題中の<code>maxList</code>は,以下のように定義できます.</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb38-1"><a href="#cb38-1" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb38-2"><a href="#cb38-2" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="fu">zipWith</span> (\x y <span class="ot">-&gt;</span> <span class="kw">if</span> x <span class="op">&gt;</span> y <span class="kw">then</span> x <span class="kw">else</span> y)</span>
<span id="cb38-3"><a href="#cb38-3" aria-hidden="true" tabindex="-1"></a>                    [<span class="dv">1</span>,<span class="dv">4</span>,<span class="dv">3</span>]</span>
<span id="cb38-4"><a href="#cb38-4" aria-hidden="true" tabindex="-1"></a>                    [<span class="dv">2</span>,<span class="dv">2</span>,<span class="dv">5</span>] <span class="co">-- [2,4,5]</span></span></code></pre></div>
<div class="note">
<ul>
<li><h2 id="flip-と高階関数"><code>flip</code> と高階関数</h2></li>
</ul>
<p><code>flip :: (a -&gt; b -&gt; c) -&gt; b -&gt; a -&gt; c</code>は,<strong>関数の引数の順番を入れ替える関数</strong>であり,以下のような挙動を示します.</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb39-1"><a href="#cb39-1" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb39-2"><a href="#cb39-2" aria-hidden="true" tabindex="-1"></a>   <span class="fu">print</span> <span class="op">$</span> (,) <span class="st">&quot;a&quot;</span> <span class="st">&quot;b&quot;</span> <span class="co">-- (&quot;a&quot;,&quot;b&quot;)</span></span>
<span id="cb39-3"><a href="#cb39-3" aria-hidden="true" tabindex="-1"></a>   <span class="fu">print</span> <span class="op">$</span> <span class="fu">flip</span> (,) <span class="st">&quot;a&quot;</span> <span class="st">&quot;b&quot;</span> <span class="co">-- (&quot;b&quot;,&quot;a&quot;)</span></span>
<span id="cb39-4"><a href="#cb39-4" aria-hidden="true" tabindex="-1"></a>   <span class="co">---</span></span>
<span id="cb39-5"><a href="#cb39-5" aria-hidden="true" tabindex="-1"></a>   <span class="fu">print</span> <span class="op">$</span> (<span class="op">&gt;</span>) <span class="dv">1</span> <span class="dv">2</span> <span class="co">-- False</span></span>
<span id="cb39-6"><a href="#cb39-6" aria-hidden="true" tabindex="-1"></a>   <span class="fu">print</span> <span class="op">$</span> <span class="fu">flip</span> (<span class="op">&gt;</span>) <span class="dv">1</span> <span class="dv">2</span> <span class="co">-- True</span></span></code></pre></div>
<p>高階関数にラムダ式を組み合わせたことで,記述が長くなった場合などには,<code>flip</code>で引数の関数とリストを入れ替え,<strong>手続き型言語における<code>for文</code>に近い記法</strong>を採用する場合があります.</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb40-1"><a href="#cb40-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb40-2"><a href="#cb40-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb40-3"><a href="#cb40-3" aria-hidden="true" tabindex="-1"></a>   <span class="fu">print</span> <span class="op">$</span> <span class="fu">flip</span> <span class="fu">map</span> [<span class="op">-</span><span class="dv">3</span> <span class="op">..</span> <span class="dv">3</span>]</span>
<span id="cb40-4"><a href="#cb40-4" aria-hidden="true" tabindex="-1"></a>         <span class="op">$</span> \ x <span class="ot">-&gt;</span> <span class="kw">case</span> x <span class="op">&gt;=</span> <span class="dv">0</span> <span class="kw">of</span></span>
<span id="cb40-5"><a href="#cb40-5" aria-hidden="true" tabindex="-1"></a>                <span class="dt">True</span>  <span class="ot">-&gt;</span> <span class="dv">1</span></span>
<span id="cb40-6"><a href="#cb40-6" aria-hidden="true" tabindex="-1"></a>                <span class="dt">False</span> <span class="ot">-&gt;</span> <span class="dv">0</span></span>
<span id="cb40-7"><a href="#cb40-7" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- [0,0,0,1,1,1,1]</span></span></code></pre></div>
<p>このような<code>flip</code>,ラムダ式と<code>$</code>を組み合わせた記法は今後の<strong>状態系</strong>や<strong>モナド</strong>に関する議論などで頻出します.
また,このような書き方を前提とした<code>forM</code>,<code>forM_</code>などの関数も登場するので,頭の片隅に入れておいてください.</p>
</div>
<div class="note">
<ul>
<li><h2 id="練習問題-1">練習問題</h2></li>
<li>ラムダ式と高階関数を利用して,リストの各要素に3を加える関数addThreeを定義してください.</li>
</ul>
<div class="sourceCode" id="cb41"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb41-1"><a href="#cb41-1" aria-hidden="true" tabindex="-1"></a>addThree [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>] <span class="co">-- [4,5,6]</span></span></code></pre></div>
<ul>
<li>ラムダ式と高階関数を利用して,整数のリストから偶数だけを取り出す関数onlyEvenを定義してください.</li>
</ul>
<div class="sourceCode" id="cb42"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb42-1"><a href="#cb42-1" aria-hidden="true" tabindex="-1"></a>onlyEven [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>] <span class="co">-- [2,4,6]</span></span></code></pre></div>
<ul>
<li>ラムダ式と高階関数を利用して,整数のリストに含まれる要素の絶対値の合計を求める関数sumAbsを定義してください.</li>
</ul>
<div class="sourceCode" id="cb43"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb43-1"><a href="#cb43-1" aria-hidden="true" tabindex="-1"></a>sumAbs [<span class="op">-</span><span class="dv">3</span>,<span class="dv">4</span>,<span class="op">-</span><span class="dv">1</span>,<span class="dv">2</span>] <span class="co">-- 10</span></span></code></pre></div>
</div>
<h2 data-number="1.7" id="関数合成"><span class="header-section-number">1.7</span> 関数合成</h2>
<p>数学において,2つの関数 <span class="math inline">f(x), g(x)</span>があるとき, <span class="math inline">f(g(x))</span>を合成関数と呼び, <span class="math display">f \circ g </span> とも書きます.
通常Haskellでも関数を合成する場合には,</p>
<p><code>f (g x)</code> あるいは <code>f $ g x</code> と書きますが,関数 <code>(.)</code>によって <code>(f . g) x</code> と書くことができます.
関数定義においては</p>
<p><code>h = f . g</code> のように定義することが可能です.</p>
<div class="sourceCode" id="cb44"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb44-1"><a href="#cb44-1" aria-hidden="true" tabindex="-1"></a><span class="ot">f ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb44-2"><a href="#cb44-2" aria-hidden="true" tabindex="-1"></a>f x <span class="ot">=</span> <span class="dv">2</span> <span class="op">*</span> x</span>
<span id="cb44-3"><a href="#cb44-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb44-4"><a href="#cb44-4" aria-hidden="true" tabindex="-1"></a><span class="ot">g ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb44-5"><a href="#cb44-5" aria-hidden="true" tabindex="-1"></a>g x <span class="ot">=</span> <span class="dv">3</span> <span class="op">+</span> x</span>
<span id="cb44-6"><a href="#cb44-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb44-7"><a href="#cb44-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb44-8"><a href="#cb44-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- 実行例</span></span>
<span id="cb44-9"><a href="#cb44-9" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb44-10"><a href="#cb44-10" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb44-11"><a href="#cb44-11" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- f(g(x))</span></span>
<span id="cb44-12"><a href="#cb44-12" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> f <span class="op">$</span> g <span class="dv">2</span> <span class="co">-- 10</span></span>
<span id="cb44-13"><a href="#cb44-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- \[f \circ  g \]</span></span>
<span id="cb44-14"><a href="#cb44-14" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> (f <span class="op">.</span> g) <span class="dv">2</span> <span class="co">-- 10</span></span>
<span id="cb44-15"><a href="#cb44-15" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- 定義</span></span>
<span id="cb44-16"><a href="#cb44-16" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> h <span class="ot">=</span> f <span class="op">.</span> g</span>
<span id="cb44-17"><a href="#cb44-17" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> h <span class="dv">2</span> <span class="co">-- 10</span></span></code></pre></div>
<p>:::</p>
<h1 data-number="2" id="変数値の束縛"><span class="header-section-number">2</span> 変数(値の束縛)</h1>
<p>Pythonなどの言語では,特定の変数に値を代入することができます.例えば,以下の最大値を求めるプログラムでは,変数<code>m</code>に最初の中身はリストの最初の要素が代入された後,次々とより大きな変数が代入されていきます. <code>変数</code>は名前の通り,次々とその値を変更していきます.</p>
<div class="sourceCode" id="cb45"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb45-1"><a href="#cb45-1" aria-hidden="true" tabindex="-1"></a>xs <span class="op">=</span> [<span class="dv">3</span>,<span class="dv">5</span>,<span class="dv">2</span>,<span class="dv">4</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">1</span>]</span>
<span id="cb45-2"><a href="#cb45-2" aria-hidden="true" tabindex="-1"></a>m  <span class="op">=</span> xs[<span class="dv">0</span>]</span>
<span id="cb45-3"><a href="#cb45-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb45-4"><a href="#cb45-4" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> x <span class="kw">in</span> xs[<span class="dv">1</span>:]:</span>
<span id="cb45-5"><a href="#cb45-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> x <span class="op">&gt;</span> m:</span>
<span id="cb45-6"><a href="#cb45-6" aria-hidden="true" tabindex="-1"></a>        m <span class="op">=</span> x</span>
<span id="cb45-7"><a href="#cb45-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;max value:&#39;</span>,m)</span></code></pre></div>
<p>一方でHaskellでは,変数に一度値を割り当てると,その変数の値を後から変更することができません. 変数に値を再代入するという操作が許されていないのです. この性質を<code>普遍性</code> （immutability）といいます. したがって,Haskellでは代入という言葉を使わず<code>束縛</code>といいます.
これは,通常の手続き型言語との大きな違いになります.</p>
<div class="warn">
<p>※1 値を変えられないなら｢変数じゃない｣じゃないという意見もありますが,数学において変数と呼ばれているものに近い概念だと考えましょう.</p>
<p>※2 実は後にでてくる<code>State</code>や<code>ST</code>などHaskellでも<code>再代入(破壊的代入)</code>を扱うことはできますが,特定の仕組みによって以下の純粋関数型言語の特徴を保っています.</p>
</div>
<p>例えば,以下のように一度値を束縛した変数に新しく変数を代入しようとすると<code>xという変数に複数の宣言をしている</code>というエラーが出ます(ghciでやる場合には,<code>:{ :}</code>を入れる必要があり余計にややこしいですね.すみません).</p>
<div class="sourceCode" id="cb46"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb46-1"><a href="#cb46-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>{</span>
<span id="cb46-2"><a href="#cb46-2" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> x <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb46-3"><a href="#cb46-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> x <span class="ot">=</span> <span class="dv">2</span></span>
<span id="cb46-4"><a href="#cb46-4" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> <span class="op">:</span>}</span>
<span id="cb46-5"><a href="#cb46-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb46-6"><a href="#cb46-6" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">5</span><span class="op">:</span><span class="dv">1</span><span class="op">:</span> <span class="fu">error</span><span class="op">:</span></span>
<span id="cb46-7"><a href="#cb46-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Multiple</span> declarations <span class="kw">of</span> ‘x’</span>
<span id="cb46-8"><a href="#cb46-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Declared</span> at<span class="op">:</span> <span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">4</span><span class="op">:</span><span class="dv">1</span></span>
<span id="cb46-9"><a href="#cb46-9" aria-hidden="true" tabindex="-1"></a>                 <span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">5</span><span class="op">:</span><span class="dv">1</span></span></code></pre></div>
<p>これは一見非常に不便なように感じられますが,これによって関数型プログラムでは,プログラムの安全性を高めています.</p>
<p>例えばPythonにおける以下のプログラムについて考えてみましょう.</p>
<div class="sourceCode" id="cb47"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb47-1"><a href="#cb47-1" aria-hidden="true" tabindex="-1"></a>counter <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb47-2"><a href="#cb47-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb47-3"><a href="#cb47-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> count_plus(x):</span>
<span id="cb47-4"><a href="#cb47-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">global</span> counter</span>
<span id="cb47-5"><a href="#cb47-5" aria-hidden="true" tabindex="-1"></a>    counter <span class="op">+=</span> x</span>
<span id="cb47-6"><a href="#cb47-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> counter</span>
<span id="cb47-7"><a href="#cb47-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb47-8"><a href="#cb47-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(count(<span class="dv">1</span>))  <span class="co"># 出力: 1</span></span>
<span id="cb47-9"><a href="#cb47-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(count(<span class="dv">1</span>))  <span class="co"># 出力: 2</span></span></code></pre></div>
<p>このプログラムでは,<code>count()</code>関数に対して同じ引数1を与えているにもかかわらず,関数を呼び出すたびに,グローバル変数<code>counter</code>が変更されて,結果が変わります. 同じ関数を呼び出しても,結果が変わるために関数のみから,関数の挙動を把握することができません.</p>
<p>一方でHaskellでは,常に同じ関数は,同じ入力に対して,同じ返り値を返します. このような特性を<strong>参照透過性(Referential Transparency)</strong>と呼び,これによってプログラムの挙動を把握しやすくしています.</p>
<p>また,上記のPythonのプログラムは,関数を実行するたびに,関数の外にある,<code>counter</code>という変数の状態が変化しています. このような,関数が実行されることで単に値を返す以外に何らかの｢外部の状態を変化させる｣ことを関数の<strong>副作用(Side Effect)</strong>といいます. これは言い換えれば,関数の実行によるプログラム全体への影響が,関数以外の外部の状態に依存していることを意味しており,プログラムの挙動を予測することを難しくします.</p>
<p>参照透過性と副作用は相互に結びついた概念ですが,Haskellでは参照透過性を保ち,副作用を排除するようにプログラムが設計されています.
このように, <strong>｢参照透過性｣</strong> と <strong>｢副作用の排除｣</strong> の両方を持った関数型言語を <strong>純粋関数型言語</strong> と呼びHaskellの大きな特徴の一つです.</p>
<p>Haskellにおいて,変数への再代入が禁止されていることのメリットは理解していただけたかと思いますが,Haskellにも変数自体はあります.</p>
<p>Haskellにおける変数は主に,<strong>トップレベル変数</strong>及び<strong>ローカル変数</strong>に大別されます.</p>
<h2 data-number="2.1" id="トップレベル変数"><span class="header-section-number">2.1</span> トップレベル変数</h2>
<p>先程の <code>x=1</code>のように,独立して宣言される変数を<code>トップレベル変数</code>と呼びます. トップレベル変数は,Pythonなどの言語における<code>グローバル変数</code>と同様に,スクリプト内のどこ場所からでも利用することができます.</p>
<div class="sourceCode" id="cb48"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb48-1"><a href="#cb48-1" aria-hidden="true" tabindex="-1"></a>x <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb48-2"><a href="#cb48-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb48-3"><a href="#cb48-3" aria-hidden="true" tabindex="-1"></a><span class="ot">someFunc ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb48-4"><a href="#cb48-4" aria-hidden="true" tabindex="-1"></a>someFunc y <span class="ot">=</span> x <span class="op">+</span> y</span>
<span id="cb48-5"><a href="#cb48-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb48-6"><a href="#cb48-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb48-7"><a href="#cb48-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> someFunc <span class="dv">1</span> <span class="co">--  2</span></span></code></pre></div>
<h2 data-number="2.2" id="ローカル変数"><span class="header-section-number">2.2</span> ローカル変数</h2>
<p>手続き型言語においてスコープが制限された変数のように,特定の関数内でのみ参照可能な局所変数として,<strong>ローカル変数</strong>が存在します. Haskellにおけるローカル変数は, <code>let式</code>,<code>where節</code>の2つのパターンが用意されています(ラムダ式内の引数も見方によってはローカル変数かもしれません.)</p>
<h3 data-number="2.2.1" id="let式"><span class="header-section-number">2.2.1</span> let式</h3>
<p>関数内で <code>let 宣言 in 式</code>の形式で局所変数を定義できます.</p>
<div class="sourceCode" id="cb49"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb49-1"><a href="#cb49-1" aria-hidden="true" tabindex="-1"></a><span class="ot">someFunc ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb49-2"><a href="#cb49-2" aria-hidden="true" tabindex="-1"></a>someFunc y <span class="ot">=</span> <span class="kw">let</span> x <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb49-3"><a href="#cb49-3" aria-hidden="true" tabindex="-1"></a>           <span class="kw">in</span> x <span class="op">+</span> y</span>
<span id="cb49-4"><a href="#cb49-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb49-5"><a href="#cb49-5" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb49-6"><a href="#cb49-6" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> someFunc <span class="dv">1</span> <span class="co">--  2</span></span></code></pre></div>
<p>この変数<code>x</code>は別の関数内で参照することはできません.</p>
<div class="sourceCode" id="cb50"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb50-1"><a href="#cb50-1" aria-hidden="true" tabindex="-1"></a><span class="ot">someFunc ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb50-2"><a href="#cb50-2" aria-hidden="true" tabindex="-1"></a>someFunc y <span class="ot">=</span> <span class="kw">let</span> x <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb50-3"><a href="#cb50-3" aria-hidden="true" tabindex="-1"></a>           <span class="kw">in</span> x <span class="op">+</span> y</span>
<span id="cb50-4"><a href="#cb50-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb50-5"><a href="#cb50-5" aria-hidden="true" tabindex="-1"></a><span class="ot">someFunc2 ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb50-6"><a href="#cb50-6" aria-hidden="true" tabindex="-1"></a>someFunc2 y <span class="ot">=</span> x <span class="op">+</span> y</span>
<span id="cb50-7"><a href="#cb50-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb50-8"><a href="#cb50-8" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb50-9"><a href="#cb50-9" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> someFunc2 <span class="dv">1</span> <span class="co">--  Variable not in scope: x :: Int</span></span></code></pre></div>
<p>複数の宣言をひとまとめにすることも可能です.</p>
<div class="sourceCode" id="cb51"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb51-1"><a href="#cb51-1" aria-hidden="true" tabindex="-1"></a><span class="ot">someFunc ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb51-2"><a href="#cb51-2" aria-hidden="true" tabindex="-1"></a>someFunc z <span class="ot">=</span> <span class="kw">let</span> x <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb51-3"><a href="#cb51-3" aria-hidden="true" tabindex="-1"></a>                 y <span class="ot">=</span> <span class="dv">2</span></span>
<span id="cb51-4"><a href="#cb51-4" aria-hidden="true" tabindex="-1"></a>           <span class="kw">in</span> x <span class="op">+</span> y <span class="op">+</span> z</span>
<span id="cb51-5"><a href="#cb51-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb51-6"><a href="#cb51-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb51-7"><a href="#cb51-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> someFunc <span class="dv">1</span> <span class="co">--  4</span></span></code></pre></div>
<p><code>Do</code>記法を利用すると<code>in</code>を省略することができます.</p>
<div class="sourceCode" id="cb52"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb52-1"><a href="#cb52-1" aria-hidden="true" tabindex="-1"></a><span class="ot">someFunc ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb52-2"><a href="#cb52-2" aria-hidden="true" tabindex="-1"></a>someFunc z <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb52-3"><a href="#cb52-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> x <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb52-4"><a href="#cb52-4" aria-hidden="true" tabindex="-1"></a>        y <span class="ot">=</span> <span class="dv">2</span></span>
<span id="cb52-5"><a href="#cb52-5" aria-hidden="true" tabindex="-1"></a>    x <span class="op">+</span> y <span class="op">+</span> z</span>
<span id="cb52-6"><a href="#cb52-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb52-7"><a href="#cb52-7" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb52-8"><a href="#cb52-8" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> someFunc <span class="dv">1</span> <span class="co">--  4</span></span></code></pre></div>
<h3 data-number="2.2.2" id="where節"><span class="header-section-number">2.2.2</span> where節</h3>
<p>数式の直後にインデントをつけて<code>where 宣言</code>と書くことでも局所変数や局所関数を定義できます.</p>
<div class="sourceCode" id="cb53"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb53-1"><a href="#cb53-1" aria-hidden="true" tabindex="-1"></a><span class="ot">someFunc ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb53-2"><a href="#cb53-2" aria-hidden="true" tabindex="-1"></a>someFunc z <span class="ot">=</span> f z</span>
<span id="cb53-3"><a href="#cb53-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">where</span></span>
<span id="cb53-4"><a href="#cb53-4" aria-hidden="true" tabindex="-1"></a>    x <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb53-5"><a href="#cb53-5" aria-hidden="true" tabindex="-1"></a>    y <span class="ot">=</span> <span class="dv">2</span></span>
<span id="cb53-6"><a href="#cb53-6" aria-hidden="true" tabindex="-1"></a>    f z <span class="ot">=</span> x <span class="op">+</span> y <span class="op">+</span> z</span>
<span id="cb53-7"><a href="#cb53-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb53-8"><a href="#cb53-8" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb53-9"><a href="#cb53-9" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> someFunc <span class="dv">1</span> <span class="co">--  4</span></span></code></pre></div>
<h1 data-number="3" id="練習問題関数総合"><span class="header-section-number">3</span> 練習問題(関数総合)</h1>
<div class="note">
<h2 data-number="3.1" id="統計量"><span class="header-section-number">3.1</span> 1. 統計量</h2>
<ul>
<li><p>与えられたリストの標本標準偏差<code>s</code>を計算する関数を実装してください.</p></li>
<li><p>与えられた2つのリストの積率相関係数<code>r</code>を計算する関数を実装してください.</p></li>
</ul>
<p>それぞれの定義は以下とします.</p>
<p><span class="math display">
s = \sqrt{\frac{\sum_{i=1}^{n}(x_i - \bar{x})^2}{n}}
</span>
<span class="math display">
r = \frac{\sum_{i=1}^{n}(x_i - \bar{x})(y_i - \bar{y})}{\sqrt{\sum_{i=1}^{n}(x_i - \bar{x})^2 \sum_{i=1}^{n}(y_i - \bar{y})^2}}
</span></p>
<div class="sourceCode" id="cb54"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb54-1"><a href="#cb54-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- 実行例</span></span>
<span id="cb54-2"><a href="#cb54-2" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb54-3"><a href="#cb54-3" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb54-4"><a href="#cb54-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> xs <span class="ot">=</span> [<span class="dv">1</span>, <span class="dv">2</span> <span class="op">..</span> <span class="dv">5</span>]</span>
<span id="cb54-5"><a href="#cb54-5" aria-hidden="true" tabindex="-1"></a>      ys <span class="ot">=</span> [<span class="dv">5</span>, <span class="dv">4</span> <span class="op">..</span> <span class="dv">1</span>]</span>
<span id="cb54-6"><a href="#cb54-6" aria-hidden="true" tabindex="-1"></a>  <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;標準偏差: &quot;</span> <span class="op">++</span> <span class="fu">show</span> (stddev xs) <span class="co">---  1.4142135623730951</span></span>
<span id="cb54-7"><a href="#cb54-7" aria-hidden="true" tabindex="-1"></a>  <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;相関係数: &quot;</span> <span class="op">++</span> <span class="fu">show</span> (correlation xs ys) <span class="co">--- -0.9999999999999998</span></span></code></pre></div>
<details>
<summary>
回答例
</summary>
<div class="sourceCode" id="cb55"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb55-1"><a href="#cb55-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- 平均値を求める関数\mean :: [Double] -&gt; Double</span></span>
<span id="cb55-2"><a href="#cb55-2" aria-hidden="true" tabindex="-1"></a>mean xs <span class="ot">=</span> <span class="fu">sum</span> xs <span class="op">/</span> <span class="fu">fromIntegral</span> (<span class="fu">length</span> xs)</span>
<span id="cb55-3"><a href="#cb55-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb55-4"><a href="#cb55-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- 標本標準偏差を求める関数</span></span>
<span id="cb55-5"><a href="#cb55-5" aria-hidden="true" tabindex="-1"></a><span class="ot">stddev ::</span> [<span class="dt">Double</span>] <span class="ot">-&gt;</span> <span class="dt">Double</span></span>
<span id="cb55-6"><a href="#cb55-6" aria-hidden="true" tabindex="-1"></a>stddev xs <span class="ot">=</span> <span class="fu">sqrt</span> variance</span>
<span id="cb55-7"><a href="#cb55-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb55-8"><a href="#cb55-8" aria-hidden="true" tabindex="-1"></a>    m <span class="ot">=</span> mean xs</span>
<span id="cb55-9"><a href="#cb55-9" aria-hidden="true" tabindex="-1"></a>    n <span class="ot">=</span> <span class="fu">fromIntegral</span> (<span class="fu">length</span> xs)</span>
<span id="cb55-10"><a href="#cb55-10" aria-hidden="true" tabindex="-1"></a>    variance <span class="ot">=</span> <span class="fu">sum</span> (<span class="fu">map</span> (\x <span class="ot">-&gt;</span> (x <span class="op">-</span> m)<span class="op">^</span><span class="dv">2</span>) xs) <span class="op">/</span> n</span>
<span id="cb55-11"><a href="#cb55-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb55-12"><a href="#cb55-12" aria-hidden="true" tabindex="-1"></a><span class="co">-- 積率相関係数を求める関数</span></span>
<span id="cb55-13"><a href="#cb55-13" aria-hidden="true" tabindex="-1"></a><span class="ot">correlation ::</span> [<span class="dt">Double</span>] <span class="ot">-&gt;</span> [<span class="dt">Double</span>] <span class="ot">-&gt;</span> <span class="dt">Double</span></span>
<span id="cb55-14"><a href="#cb55-14" aria-hidden="true" tabindex="-1"></a>correlation xs ys <span class="ot">=</span> covariance <span class="op">/</span> (stddev xs <span class="op">*</span> stddev ys)</span>
<span id="cb55-15"><a href="#cb55-15" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb55-16"><a href="#cb55-16" aria-hidden="true" tabindex="-1"></a>    mx <span class="ot">=</span> mean xs</span>
<span id="cb55-17"><a href="#cb55-17" aria-hidden="true" tabindex="-1"></a>    my <span class="ot">=</span> mean ys</span>
<span id="cb55-18"><a href="#cb55-18" aria-hidden="true" tabindex="-1"></a>    n  <span class="ot">=</span> <span class="fu">fromIntegral</span> (<span class="fu">length</span> xs)</span>
<span id="cb55-19"><a href="#cb55-19" aria-hidden="true" tabindex="-1"></a>    covariance <span class="ot">=</span> <span class="fu">sum</span> (<span class="fu">zipWith</span> (\x y <span class="ot">-&gt;</span> (x <span class="op">-</span> mx)<span class="op">*</span>(y <span class="op">-</span> my)) xs ys) <span class="op">/</span> n</span>
<span id="cb55-20"><a href="#cb55-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb55-21"><a href="#cb55-21" aria-hidden="true" tabindex="-1"></a><span class="co">-- 実行例</span></span>
<span id="cb55-22"><a href="#cb55-22" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb55-23"><a href="#cb55-23" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb55-24"><a href="#cb55-24" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> xs <span class="ot">=</span> [<span class="dv">1</span>, <span class="dv">2</span> <span class="op">..</span> <span class="dv">5</span>]</span>
<span id="cb55-25"><a href="#cb55-25" aria-hidden="true" tabindex="-1"></a>      ys <span class="ot">=</span> [<span class="dv">5</span>, <span class="dv">4</span> <span class="op">..</span> <span class="dv">1</span>]</span>
<span id="cb55-26"><a href="#cb55-26" aria-hidden="true" tabindex="-1"></a>  <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;標準偏差: &quot;</span> <span class="op">++</span> <span class="fu">show</span> (stddev xs) <span class="co">---  1.4142135623730951</span></span>
<span id="cb55-27"><a href="#cb55-27" aria-hidden="true" tabindex="-1"></a>  <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;相関係数: &quot;</span> <span class="op">++</span> <span class="fu">show</span> (correlation xs ys) <span class="co">--- -0.9999999999999998</span></span></code></pre></div>
</details>
<h2 data-number="3.2" id="パーセプトロン"><span class="header-section-number">3.2</span> 2. パーセプトロン</h2>
<ul>
<li>or 回路を表すパーセプトロンの発火関数 <code>f x1 x2</code> を以下のように定める.
(パーセプトロンの意味などがわからない場合は, <a href="slds14.html">特別講義資料</a>を参照のこと)</li>
</ul>
<p><span class="math display">
f(x1, x2) =
\begin{cases}
1 &amp; (0.5 x_1 + 0.5 x_2 \geq 0.2)\\
0 &amp; (\text{otherwise})
\end{cases}
</span></p>
<p>この回路を表す<code>perceptronOR :: Bool -&gt; Bool -&gt; Bool</code>を実装せよ.</p>
<div class="sourceCode" id="cb56"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb56-1"><a href="#cb56-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- 実行例</span></span>
<span id="cb56-2"><a href="#cb56-2" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb56-3"><a href="#cb56-3" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb56-4"><a href="#cb56-4" aria-hidden="true" tabindex="-1"></a>   <span class="fu">print</span> <span class="op">$</span> perceptronOR <span class="dt">False</span> <span class="dt">False</span> <span class="co">-- False</span></span>
<span id="cb56-5"><a href="#cb56-5" aria-hidden="true" tabindex="-1"></a>   <span class="fu">print</span> <span class="op">$</span> perceptronOR <span class="dt">True</span> <span class="dt">False</span>  <span class="co">-- True</span></span>
<span id="cb56-6"><a href="#cb56-6" aria-hidden="true" tabindex="-1"></a>   <span class="fu">print</span> <span class="op">$</span> perceptronOR <span class="dt">False</span> <span class="dt">True</span>  <span class="co">-- True</span></span>
<span id="cb56-7"><a href="#cb56-7" aria-hidden="true" tabindex="-1"></a>   <span class="fu">print</span> <span class="op">$</span> perceptronOR <span class="dt">True</span> <span class="dt">True</span>   <span class="co">-- True</span></span></code></pre></div>
<details>
<summary>
回答例
</summary>
<div class="sourceCode" id="cb57"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb57-1"><a href="#cb57-1" aria-hidden="true" tabindex="-1"></a><span class="ot">perceptronOR ::</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb57-2"><a href="#cb57-2" aria-hidden="true" tabindex="-1"></a>perceptronOR x1 x2</span>
<span id="cb57-3"><a href="#cb57-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="fu">sum</span> <span class="op">&gt;=</span> <span class="dv">0</span>  <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb57-4"><a href="#cb57-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> <span class="dt">False</span></span>
<span id="cb57-5"><a href="#cb57-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb57-6"><a href="#cb57-6" aria-hidden="true" tabindex="-1"></a>    g <span class="dt">True</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb57-7"><a href="#cb57-7" aria-hidden="true" tabindex="-1"></a>    g <span class="dt">False</span> <span class="ot">=</span> <span class="dv">0</span></span>
<span id="cb57-8"><a href="#cb57-8" aria-hidden="true" tabindex="-1"></a>    <span class="fu">sum</span> <span class="ot">=</span> <span class="fl">0.5</span> <span class="op">*</span> g x1 <span class="op">+</span> <span class="fl">0.5</span> <span class="op">*</span> g x2 <span class="op">-</span> <span class="fl">0.2</span></span>
<span id="cb57-9"><a href="#cb57-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb57-10"><a href="#cb57-10" aria-hidden="true" tabindex="-1"></a><span class="co">-- 実行例</span></span>
<span id="cb57-11"><a href="#cb57-11" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb57-12"><a href="#cb57-12" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb57-13"><a href="#cb57-13" aria-hidden="true" tabindex="-1"></a>   <span class="fu">print</span> <span class="op">$</span> perceptronOR <span class="dt">False</span> <span class="dt">False</span> <span class="co">-- False</span></span>
<span id="cb57-14"><a href="#cb57-14" aria-hidden="true" tabindex="-1"></a>   <span class="fu">print</span> <span class="op">$</span> perceptronOR <span class="dt">True</span> <span class="dt">False</span>  <span class="co">-- True</span></span>
<span id="cb57-15"><a href="#cb57-15" aria-hidden="true" tabindex="-1"></a>   <span class="fu">print</span> <span class="op">$</span> perceptronOR <span class="dt">False</span> <span class="dt">True</span>  <span class="co">-- True</span></span>
<span id="cb57-16"><a href="#cb57-16" aria-hidden="true" tabindex="-1"></a>   <span class="fu">print</span> <span class="op">$</span> perceptronOR <span class="dt">True</span> <span class="dt">True</span>   <span class="co">-- True</span></span></code></pre></div>
</details>
</div>
]]></description>
    <pubDate>Fri, 18 Oct 2024 00:00:00 UT</pubDate>
    <guid>/lectures/iap4.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>代数プログラミング入門 Ch2 環境構築</title>
    <link>/lectures/iap2.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#haskellセットアップ" id="toc-haskellセットアップ"><span class="toc-section-number">1</span> Haskellセットアップ</a>
<ul>
<li><a href="#環境構築" id="toc-環境構築"><span class="toc-section-number">1.1</span> 環境構築</a></li>
<li><a href="#hello-world" id="toc-hello-world"><span class="toc-section-number">1.2</span> Hello World</a></li>
</ul></li>
</ul>
</div>
<h1 data-number="1" id="haskellセットアップ"><span class="header-section-number">1</span> Haskellセットアップ</h1>
<p>言語の特徴や意味を色々と説明してきましたが,習うより慣れろということで,そろそろHaskellを利用してみましょう.Haskellの開発環境には様々なものがありますが,現在良く使われているものとして<a href="https://www.haskell.org/cabal/"><code>Cabal</code></a> + <a href="https://www.haskell.org/ghcup/"><code>GHCup</code></a>あるいは<a href="https://docs.haskellstack.org/en/stable/"><code>Stack</code></a>の2つがあります. CabalとStackはプロジェクトのビルドを行うためのアーキテクチャであり,GHCupは周辺環境のインストーラーです. どちらで開発を行ってもいいのですが,本稿では<code>Stack</code>を用います.</p>
<p>Stackは現在のHaskellの標準的なコンパイラである,<code>Glasgow Haskell Compiler（GHC）</code>に基づいたビルド環境です(cabalもGHCですが). 他の言語と同様にHaskellでも様々なpackage(ライブラリ)を利用するのですが,package毎に他のpackageや,GHC(Haskellのコンパイラ)との依存関係があります.それらを使用するpackage事に調整することが人間には至難の業であり, 特定のpackageの依存関係を満たせば他のpackageの依存関係が満たされなくなるという試行錯誤を永遠と繰り返すことを<code>cabal hell</code>などと呼びます.</p>
<p>Stackにはそのようなpackage間の依存関係を満たすバージョンの組み合わせ(<code>resolver</code>)を利用して,自動で解決してくれる機能があり,Haskellでのブロジェクトの開発を容易にしてくれます. resolverの集まりを<a href="https://www.stackage.org"><code>Stackage</code></a>といい, resolverで扱われるpackageをまとめて管理するレポジトリのことを<a href="https://hackage.haskell.org"><code>Hackage</code></a>といいます.</p>
<h2 data-number="1.1" id="環境構築"><span class="header-section-number">1.1</span> 環境構築</h2>
<p>Stackの環境構築の方法は基本的には,<a href="https://docs.haskellstack.org/en/stable/">公式サイト</a>に従ってください. 使用しているOS毎にインストール方法が異なるので注意しましょう特にMacユーザーはIntel Mac と Apple silliconでインストール方法が異なるので正しい方を選択するようにしてください.</p>
<p>インストールが終わったら,以下のコマンドでstackを最新版にupgradeします.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">stack</span> upgrade</span></code></pre></div>
<p>次に,開発用のディレクトリに移動して,開発用のプロジェクトを作成していきます. Stackでは,新しいプロジェクトの作成は<code>stack new [project-name]</code> コマンドで行われます. <code>stack new [project-name]</code>コマンドで新しいプロジェクトを作成すると,必要なファイルが含まれた<code>[project-name]</code>という名前のディレクトリが作成されます. 作成されたディレクトリに移動しましょう.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> ls</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> stack <span class="ex">new</span> hello-world</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> ls</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ex">hello-world</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> cd <span class="ex">hello-world</span></span></code></pre></div>
<p>作成されたディレクトリの構成は以下のようになっています.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> tree</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="bu">.</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="ex">├──</span> CHANGELOG.md</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="ex">├──</span> LICENSE</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="ex">├──</span> README.md</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="ex">├──</span> Setup.hs</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="ex">├──</span> app</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> ├── hello.hs</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="ex">├──</span> hello-world.cabal</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="ex">├──</span> package.yaml</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="ex">├──</span> src</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> └── Lib.hs</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="ex">├──</span> stack.yaml</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="ex">└──</span> test</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>    <span class="ex">└──</span> Spec.hs</span></code></pre></div>
<p>それぞれの用途と意味は以下のとおりです.</p>
<div class="note">
<ul>
<li><p><code>app</code>フォルダの中には,実行可能ファイル用のプログラム</p>
<ul>
<li><p>プロジェクトをbuildすると,<code>Main.hs</code>から実行可能ファイル(executable)が生成されます</p></li>
<li><p>この後,<code>Main.hs</code>の中身を編集して<code>Hello World</code>用のプログラムを作成します.</p></li>
</ul></li>
</ul>
<hr />
<ul>
<li><p><code>src</code>フォルダ内には,実行可能ファイルで利用するライブラリが格納されます.</p>
<ul>
<li>ここに自分で開発したライブラリを含めることも可能です.</li>
</ul></li>
</ul>
<hr />
<ul>
<li><p><code>package.yaml</code>ファイルはプロジェクトの設定を記入するファイルです.</p>
<ul>
<li><p>Hackageなどの外部のライブラリを利用する場合には,<code>package.yaml</code>内の<code>dependencies:</code>部分に,使用したいライブラリを記述します.</p></li>
<li><p>Stackは<code>stack setup</code>コマンドによって,package.yaml内に記述されたライブラリの依存関係を解決するresolverを自動で選択しますが,
自分で使いたいresolverを<code>package.yaml</code>内の<code>resolver:</code>に続けて書くことで,指定することも可能です.</p></li>
<li><p>その他実行可能ファイルの設定や,コンパイルオプションなどを指定することができます.</p></li>
<li><p><code>package.yaml</code> の設定に従って,プロジェクトの設定ファイル <code>test.cabal</code>が自動で作成されます.
基本的にstackを使っている範囲では<code>.cabal</code>ファイルを自分で編集することはありません.</p></li>
</ul></li>
</ul>
<hr />
<ul>
<li><p><code>stack.yaml</code>ファイルは,stackの設定を記入します</p>
<ul>
<li>resolverに含まれないライブラリ(自分のGitHub上にあるライブラリなど)を指定する,あるいはあえてresolverとは異なるバージョンを利用するときなどには
<code>extra-deps:</code>に続けて,使用したいライブラリのレポジトリやバージョンを明示します.</li>
</ul></li>
</ul>
</div>
<p>これらの利用法は,今後ライブラリを使用し始めたときに改めて学習すれば大丈夫なので,取り敢えずプログラムを作成してきましょう.</p>
<h2 data-number="1.2" id="hello-world"><span class="header-section-number">1.2</span> Hello World</h2>
<p>環境構築が上手くできているかを確認するために,<code>Hello World</code>用のプログラムを作成してみましょう.</p>
<p>まずは,<code>app/Main.hs</code>をテキストエディタで開いて編集します.</p>
<p><code>app/Main.hs</code>を開くと,以下のようなファイルになっているかと思います. Haskellのプログラムをコンパイルした実行可能ファイルでは,<code>main =</code> 内の記述が実行されます.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Main</span> (main) <span class="kw">where</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Lib</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> someFunc</span></code></pre></div>
<p>現在は<code>sumFunc</code>という関数が実行されます. <code>sumFunc</code>は <code>import Lib</code> の記述によって, <code>src/Lib.hs</code>からimportされています. <code>src/Lib.hs</code>を開くと,</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Lib</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    ( someFunc</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    ) <span class="kw">where</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="ot">someFunc ::</span> <span class="dt">IO</span> ()</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>someFunc <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;someFunc&quot;</span></span></code></pre></div>
<p>という風に<code>someFunc</code>が定義されています. プログラム内の <code>someFunc :: IO ()</code> は<code>someFunc</code>の型注釈です. <code>IO ()</code> というのは,標準入出力 <code>IO</code> において, アクション <code>()</code> を実行するという意味ですが,ここではそれぞれの詳細は省きます. <code>putStrLn</code> は文字列を引数にとり,標準入出力<code>IO</code>に受け取った文字列を出力するというアクション<code>()</code>を返す関数であり,ここでは,<code>"someFunc"</code>という文字列が出力されます. この<code>"someFunc"</code> 部分を <code>"Hello World"</code>に書き換えれば,Hello Worldは実行できます.関数の定義はこのあと徐々に扱いますが, someFuncは,引数を取らないので関数というよりは実際には値です.</p>
<p><code>Lib.hs</code> に<code>helloWorld</code>と出力する値<code>helloWorld</code>を追加し,全体を以下のように書き換えましょう.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Lib</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    ( someFunc</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    , helloWorld</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    ) <span class="kw">where</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="ot">someFunc ::</span> <span class="dt">IO</span> ()</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>someFunc <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;someFunc&quot;</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="ot">helloWorld ::</span> <span class="dt">IO</span> ()</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>helloWorld <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;Hello World&quot;</span></span></code></pre></div>
<p><code>module Lib () where</code> はモジュール宣言で,他のプログラムから<code>import Lib</code>で,<code>src/Lib.hs</code>内に定義された関数や値などの内 <code>()</code>内に記述されたものを読み込むことができるようにします.
作成した値<code>helloWorld</code>を<code>()</code>内に<code>helloWorld</code>を追加することを忘れないようにしましょう.</p>
<p>併せて <code>app/Main.hs</code> を書き換えて,作成した<code>helloWorld</code>を実行しましょう.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Main</span> (main) <span class="kw">where</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Lib</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> helloWorld</span></code></pre></div>
<p>このプログラムをコンパイルして得られる実行可能ファイルの名前などは,<code>package.yaml</code>内で定義されています.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="fu">ghc-options</span><span class="kw">:</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Wall</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Wcompat</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Widentities</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Wincomplete-record-updates</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Wincomplete-uni-patterns</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Wmissing-export-lists</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Wmissing-home-modules</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Wpartial-fields</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Wredundant-constraints</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="fu">library</span><span class="kw">:</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">source-dirs</span><span class="kw">:</span><span class="at"> src</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a><span class="fu">executables</span><span class="kw">:</span></span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">hello-world-exe</span><span class="kw">:</span></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">main</span><span class="kw">:</span><span class="at">                Main.hs</span></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">source-dirs</span><span class="kw">:</span><span class="at">         app</span></span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">ghc-options</span><span class="kw">:</span></span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -threaded</span></span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -rtsopts</span></span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -with-rtsopts=-N</span></span>
<span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">dependencies</span><span class="kw">:</span></span>
<span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> hello-world</span></span></code></pre></div>
<p><code>ghc-options:</code> 以下の項目はghcのコンパイルオプションであり,<code>W</code>で始まるいずれのオプションもコンパイル時の<code>Warning</code>を追加するものです. これらのコンパイルオプションがあると,プログラムの品質を高めることができますが, 利用していてWarningが邪魔に感じた場合は,すべて削除しても問題ありません(
その場合は以下のように,<code>ghc-options:</code>部分を<code>#</code>でコメントアウトしてください.)</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co">#ghc-options:</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="fu">library</span><span class="kw">:</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">source-dirs</span><span class="kw">:</span><span class="at"> src</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="fu">executables</span><span class="kw">:</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">hello-world-exe</span><span class="kw">:</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">main</span><span class="kw">:</span><span class="at">                Main.hs</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">source-dirs</span><span class="kw">:</span><span class="at">         app</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">ghc-options</span><span class="kw">:</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -threaded</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -rtsopts</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -with-rtsopts=-N</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">dependencies</span><span class="kw">:</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> hello-world</span></span></code></pre></div>
<p>特に,本講義資料では,品質よりも分かりやすさを優先してできるだけシンプルな実装を紹介する他,事例としてあえて間違ったコードを入力する場面も存在します. そのままサンプルを入力すると多数のWarningが表示されることになるので,以下の説明中で登場する出力結果ではこれらのオプションはすべて切った状態のものとなっている点に留意してください.</p>
<p><code>library:</code>以下の記述で,利用するライブラリのPATH,<code>executables:</code>以下の記述で実行可能ファイルについて記述されています. ここでは, executableとして’app’フォルダ内にある’Main.hs’が’hello-world-exe’という名称でコンパイルされることが書かれています.<code>ghc-options:</code>以下は,コンパイル時のオプションを設定していますが,ここでは詳細は省略します.</p>
<p><code>Main.hs</code>以外のファイルをここに追加すれば,いくらでも実行可能ファイルは増やすことができます.</p>
<p><code>hello-world-exe</code>部分をもっと短い名前に変更することも可能です.なお生成される実行可能ファイルはMacでは<code>hello-world-exe</code>,Windowsでは<code>hello-world-exe.exe</code>になるので注意してください.</p>
<p>それでは,以下のコマンドでこのプロジェクトをbuildして,実行してみましょう.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ex">stack</span> build</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="ex">stack</span> exec hello-world-exe</span></code></pre></div>
<p><code>stack build</code>のあと,プログラムにミスがなければ以下のように出力されるはずです(一部省略しています).</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> stack build</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="ex">hello-world</span><span class="op">&gt;</span> build <span class="er">(</span><span class="ex">lib</span> + exe<span class="kw">)</span> <span class="ex">with</span> ghc-9.6.4</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Preprocessing</span> library for hello-world-0.1.0.0..</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="ex">Building</span> library for hello-world-0.1.0.0..</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="ex">[1</span> of 2] Compiling Lib [Source file changed]</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="ex">Preprocessing</span> executable <span class="st">&#39;hello-world-exe&#39;</span> for hello-world-0.1.0.0..</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="ex">Building</span> executable <span class="st">&#39;hello-world-exe&#39;</span> for hello-world-0.1.0.0..</span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="ex">[1</span> of 2] Compiling Main [Source file changed]</span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a><span class="ex">[3</span> of 3] Linking .stack-work/dist/x86_64-osx/ghc-9.6.4/build/hello-world-exe/hello-world-exe [Objects changed]</span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a><span class="ex">hello-world</span><span class="op">&gt;</span> copy/register</span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="ex">Registering</span> library for hello-world-0.1.0.0..</span></code></pre></div>
<p>どこかで,タイプミスなどがあると例えば以下のようなエラーが表示される可能性もあります(一部省略しています).</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ex">hello-world</span><span class="op">&gt;</span> build <span class="er">(</span><span class="ex">lib</span> + exe<span class="kw">)</span> <span class="ex">with</span> ghc-9.6.4</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="ex">Preprocessing</span> library for hello-world-0.1.0.0..</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Building</span> library for hello-world-0.1.0.0..</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="ex">Preprocessing</span> executable <span class="st">&#39;hello-world-exe&#39;</span> for hello-world-0.1.0.0..</span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="ex">Building</span> executable <span class="st">&#39;hello-world-exe&#39;</span> for hello-world-0.1.0.0..</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="ex">[1</span> of 2] Compiling Main [Source file changed]</span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a><span class="ex">/Users/akagi/Documents/Programs/Haskell/blog/hello-world/app/Main.hs:6:8:</span> error: <span class="pp">[</span><span class="ss">GHC</span><span class="pp">-</span><span class="ss">88464</span><span class="pp">]</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>    <span class="ex">Variable</span> not in scope: hellWorld :: IO <span class="er">(</span><span class="kw">)</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>    <span class="ex">Suggested</span> fix: Perhaps use ‘helloWorld’ <span class="er">(</span><span class="ex">imported</span> from Lib<span class="kw">)</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a>  <span class="kw">|</span></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span> <span class="kw">|</span> <span class="ex">main</span> = hellWorld</span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>  <span class="kw">|</span>        <span class="ex">^^^^^^^^^</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a><span class="ex">Error:</span> <span class="pp">[</span><span class="ss">S</span><span class="pp">-</span><span class="ss">7282</span><span class="pp">]</span></span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a>       <span class="ex">Stack</span> failed to execute the build plan.</span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a>       <span class="ex">While</span> executing the build plan, Stack encountered the error:</span>
<span id="cb12-19"><a href="#cb12-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-20"><a href="#cb12-20" aria-hidden="true" tabindex="-1"></a>       <span class="ex">[S-7011]</span></span>
<span id="cb12-21"><a href="#cb12-21" aria-hidden="true" tabindex="-1"></a>       <span class="ex">While</span> building package hello-world-0.1.0.0</span>
<span id="cb12-22"><a href="#cb12-22" aria-hidden="true" tabindex="-1"></a>       <span class="ex">Process</span> exited with code: ExitFailure 1</span></code></pre></div>
<p>上のエラーでは, <code>Main.hs</code>の6行目で使用されている,<code>hellWorld</code>が定義されていないという意味になります.
<code>helloWorld</code>と<code>o</code>を追加して正しい名称にしたあともう一度 <code>stack build</code>をしてみましょう.</p>
<p><code>stack exec hello-world-exe</code>の後,<code>Hello World</code>と出力されていれば成功です.</p>
<p>なお,build と exec を併せて一つのコマンド<code>stack run</code> で代替することも可能です.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> stack run hello-world-exe</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="ex">hello-world</span><span class="op">&gt;</span> build <span class="er">(</span><span class="ex">lib</span> + exe<span class="kw">)</span> <span class="ex">with</span> ghc-9.6.4</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Preprocessing</span> library for hello-world-0.1.0.0..</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="ex">Building</span> library for hello-world-0.1.0.0..</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="ex">Preprocessing</span> executable <span class="st">&#39;hello-world-exe&#39;</span> for hello-world-0.1.0.0..</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="ex">Building</span> executable <span class="st">&#39;hello-world-exe&#39;</span> for hello-world-0.1.0.0..</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="ex">hello-world</span><span class="op">&gt;</span> copy/register</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="ex">Registering</span> library for hello-world-0.1.0.0..</span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World</span></code></pre></div>
]]></description>
    <pubDate>Fri, 18 Oct 2024 00:00:00 UT</pubDate>
    <guid>/lectures/iap2.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>代数プログラミング入門 Ch1 イントロダクション</title>
    <link>/lectures/iap1.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#はじめに" id="toc-はじめに"><span class="toc-section-number">1</span> はじめに</a>
<ul>
<li><a href="#本資料の読み方" id="toc-本資料の読み方"><span class="toc-section-number">1.1</span> 本資料の読み方</a></li>
<li><a href="#haskellとは" id="toc-haskellとは"><span class="toc-section-number">1.2</span> Haskellとは</a></li>
<li><a href="#関数型言語の雰囲気" id="toc-関数型言語の雰囲気"><span class="toc-section-number">1.3</span> 関数型言語の雰囲気</a></li>
<li><a href="#関数型だと何が嬉しいのか" id="toc-関数型だと何が嬉しいのか"><span class="toc-section-number">1.4</span> 関数型だと何が嬉しいのか</a></li>
<li><a href="#設計も関数型で" id="toc-設計も関数型で"><span class="toc-section-number">1.5</span> 設計も関数型で</a>
<ul>
<li><a href="#雑談なんでhaskell" id="toc-雑談なんでhaskell"><span class="toc-section-number">1.5.1</span> 雑談:なんでHaskell?</a></li>
</ul></li>
</ul></li>
</ul>
</div>
<p>(執筆準備中)</p>
<p>代数の基礎と,代数による仕様記述,Haskellの基礎に関して書いていく予定です.
現在執筆中のため, 構成及び内容が今後変わります.</p>
<h1 data-number="1" id="はじめに"><span class="header-section-number">1</span> はじめに</h1>
<p>本資料は,正規の大学の科目ではなく, 学内での学生,教員の勉強会において使用する予定のものとなります. したがって,講義形式で作成しますが,通常の講義よりはかなり緩めの記述,内容が含まれます.</p>
<p>本講義では,関数型プログラミング言語Haskellの基礎,使用法,及び設計に関して扱います.
想定する履修者はPythonやJavaScriptなどの手続き型言語の使用経験はあるが,関数型言語を利用したことがない大学学部生です. 関数型言語の特徴を説明する際に手続き型言語の例としてPythonでの記述が出てきますが,Pythonの文法等に関しては既知のものとして扱います.(こちらはもとも官庁用の報告書として執筆したものを(大幅に)改変したものですので,もともとの資料ではVBAやJavaを事例として用いていました.)</p>
<p>また,本講義では代数学を利用したプログラミングの設計に関する方法論も扱います.集合論や代数学に関する知識は前提とせず,初歩から扱いますので,数学に関する前提知識は特に必要ありません. なお,本講義は集合論や代数学の習得を目的としているわけではないので,これらに関してはかなり簡略化した説明になります.専門的に数学を学びたい方向けの講義ではないことを理解したうえで受講してください.</p>
<p>一方で,CLIの操作やディレクトリの概念,ソフトウェアのインストール,テキストエディタの設定などの基本的なPC操作に関しては,扱いません. それらが分からない方は,それらを自分で学習するか,それらを扱っている講義を履修してから受講することをおすすめします.</p>
<h2 data-number="1.1" id="本資料の読み方"><span class="header-section-number">1.1</span> 本資料の読み方</h2>
<p>(執筆中)</p>
<h2 data-number="1.2" id="haskellとは"><span class="header-section-number">1.2</span> Haskellとは</h2>
<p><a href="https://www.haskell.org"><code>Haskell</code></a>は,1987年に生まれた<strong>静的型付けの純粋関数型言語</strong>です. Haskellには,様々な特徴がありますが,本講義では,特に代数的データ型による,代数的なプログラミングに焦点をあてて,代数的な仕様記述とHaskellの関連を中心に議論します.</p>
<p>Haskellがどんな言語で,どのようなメリットがあるのか,という話は今後本講義でも扱いますが,ここでは深入りしません. 取り敢えず,どのような言語かを細かく説明する前に,関数型言語の雰囲気を掴んでもらおうと思います.</p>
<h2 data-number="1.3" id="関数型言語の雰囲気"><span class="header-section-number">1.3</span> 関数型言語の雰囲気</h2>
<p>HaskellはLispやOCamlなどと同じ関数型言語です.関数型言語は関数によってプログラムを構築していく点にありますが,近年ではこのスタイルは関数型言語の専売特許というわけではなくなりつつあり,関数で書くことの特別さは,薄れつつあります. なので,ここでは,関数型言語の細かい機能について見る前に,関数型言語の考え方について,手続き型言語との違いという観点で見ていきましょう.</p>
<p>関数型言語でプログラミングををするとは,<strong>｢それが何か｣</strong>を分解して書いていくことです.
関数型プログラミングが宣言的であると言われる所以はそこにあります.手続き型言語が,｢何をどうするのか｣という手続きを書くのにたいして,｢欲しいものはなにか｣を宣言します.</p>
<p>こちらの(Haskell界隈では)有名な<a href="https://bartoszmilewski.com/2014/11/04/category-the-essence-of-composition/">ブログ</a>では,関数型言語の考え方について以下のように説明しています.</p>
<blockquote>
<p>Functional programmers have a peculiar way of approaching problems. They start by asking very Zen-like questions. For instance, when designing an interactive program, they would ask: What is interaction? When implementing Conway’s Game of Life, they would probably ponder about the meaning of life.</p>
</blockquote>
<ul>
<li>翻訳(DeepL大先生)</li>
</ul>
<blockquote>
<p>関数型プログラマーは問題への取り組み方が独特だ. 禅問答のような質問から始めるのだ.例えば,インタラクティブなプログラムを設計するとき,彼らは「インタラクションとは何か?コンウェイの「人生ゲーム」を実装するとき,彼らはおそらく人生の意味について熟考するだろう.</p>
</blockquote>
<p>手続き型プログラミングと関数型プログラミングの違いは色々とありますが,取り敢えずここでは,この文章に習って</p>
<ul>
<li>関数型プログラミング: <strong>｢それが何か｣</strong>を問い,<strong>｢それが何か｣</strong>をプログラムする.</li>
</ul>
<p>という観点に注目します. 例として以下の｢ウサギの問題｣について考えてみましょう.</p>
<div class="note">
<p><strong>ウサギの問題</strong></p>
<ul>
<li><p>1つがいのウサギは,生まれてから2ヶ月後から毎月1つがいずつのウサギを産む</p></li>
<li><p>ウサギが死ぬことはない</p></li>
<li><p>この条件の下で,生まれたばかりの1つがいのウサギは1年の間に何つがいのウサギになるか</p></li>
</ul>
</div>
<p>これについて,取り敢えず12ヶ月までのつがいの数をプログラムを用いて計算してみましょう.</p>
<p>まずは手続き型の考え方で数を数えてみます. 手続き型言語的には,｢ウサギのつがいの数｣を｢どのように求めるのかという手続き｣をプログラムに記述します.</p>
<div class="note">
<details>
<summary>
note
</summary>
<p>学生にプログラミングを教えているとこれくらいのプログラムは,for文,if文,代入などの概念をちらっと読んだだけで簡単にできる人もいれば,数時間教えてもできない人もいます.これが何によって異なるのかというのは,長年の謎で,教育の難しいところです.</p>
<p>しかも,プログラムを教える人間は大抵前者なので,教師も学生も何が分からないのか分からないという事態によくなってしまいますね.</p>
<p>しかし,大抵の場合後者の人に話を聞いていくと,そもそもこの手続きを日本語であっても書けないという人が多いようです. なので,本当に苦労するタイプの人は,パワーポイントでウサギの絵を並べてルールにのっとってウサギが増えていく様子を小学生に教える日本語資料を作ってというような作業を一緒にすることになります.</p>
これを書きながらこういった学生が実は関数型なら簡単だったりしないだろうか,と考えていますが,楽観的に過ぎるだろうなという予感がしています.
</details>
</div>
<p>いろいろな方法がありますが(何が起きて,次に何が起きて,というふうに手続きを考える)｢手続き型言語っぽい数え方｣を一つ考えると,例えば</p>
<div class="note">
<ul>
<li><p>つがいは,新生ウサギ(0ヶ月)→子供ウサギ(1ヶ月)→大人うさぎ(2ヶ月)の順で変化する</p></li>
<li><p>大人うさぎのつがいは毎月1つの新生うさぎのつがいを産む</p></li>
<li><p>0ヶ月の新生うさぎの(こどもが産めない),子供ウサギ,大人うさぎの数を記録する</p>
<ul>
<li>新生 1</li>
<li>子供 0</li>
<li>大人 0</li>
</ul></li>
<li><p>1月たつと</p>
<ul>
<li>大人と同じ数だけ新生が生まれる</li>
<li>子供が大人になる</li>
<li>新生が子供になる</li>
</ul></li>
<li><p>これを12ヶ月繰り返す</p></li>
</ul>
</div>
<p>というように｢何がどうなる｣という｢手順｣を書いた説明になるかと思います.
授業では大抵,これをフローチャートに書き直させて,フローチャートをプログラムに直すという作業をさせますが,そこは省略します.</p>
<p>これをPythonのプログラムにすると以下のようになり,結果は<code>233</code>となります.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 初期化</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>months <span class="op">=</span> <span class="dv">12</span>  <span class="co"># シミュレートする月数</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="co">#1ヶ月目の状態</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>new_born_pairs <span class="op">=</span> <span class="dv">0</span> <span class="co">#新生のつがいの数</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>young_pairs <span class="op">=</span> <span class="dv">1</span>  <span class="co"># 子供のつがいの数</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>mature_pairs <span class="op">=</span> <span class="dv">0</span>  <span class="co"># 大人のつがいの数</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="co"># 各月におけるうさぎのつがいの数をシミュレート</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> month <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>, months <span class="op">+</span> <span class="dv">1</span>):</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 大人と同じ数だけ新生が生まれる</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    new_born_pairs <span class="op">=</span> mature_pairs</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 子供が大人になる</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>    mature_pairs <span class="op">+=</span> young_pairs</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 新生が子供になる</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    young_pairs <span class="op">=</span> new_born_pairs</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a><span class="co"># 成熟したつがいと若いつがいの合計</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>total_pairs <span class="op">=</span> mature_pairs <span class="op">+</span> young_pairs</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(total_pairs)</span></code></pre></div>
<p>こういった考え方が,いわゆる手続き型的な考え方とプログラミングの方法になります.</p>
<p>では,関数型の考え方とはどのようなものでしょうか. 先ほど引用したように,関数型では,それが何かを考えます.つまり,ここで問われている｢つがいの数｣を抽象化して,その特徴を記述するわけですね.</p>
<p>特定の数がなにかのルールに基づいて段々と増えていくというときに,それを並べてみて,法則性を探るということが一般的に行われます.これは,高校数学で扱う漸化式の考え方ですね.</p>
<p>月ごとのつがいの数を,並べてみると以下のようになります. そして,その増え方を計算してみると一定のルールに基づいていることが分かります.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">月</th>
<th style="text-align: center;">つがいの数</th>
<th style="text-align: center;">計算</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">2</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">1 + 1</td>
</tr>
<tr class="even">
<td style="text-align: center;">3</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">1 + 2</td>
</tr>
<tr class="odd">
<td style="text-align: center;">4</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">2 + 3</td>
</tr>
<tr class="even">
<td style="text-align: center;">5</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">3 + 5</td>
</tr>
<tr class="odd">
<td style="text-align: center;">6</td>
<td style="text-align: center;">13</td>
<td style="text-align: center;">5 + 8</td>
</tr>
<tr class="even">
<td style="text-align: center;">7</td>
<td style="text-align: center;">21</td>
<td style="text-align: center;">8 + 13</td>
</tr>
<tr class="odd">
<td style="text-align: center;">8</td>
<td style="text-align: center;">34</td>
<td style="text-align: center;">13 + 21</td>
</tr>
<tr class="even">
<td style="text-align: center;">9</td>
<td style="text-align: center;">55</td>
<td style="text-align: center;">21 + 34</td>
</tr>
<tr class="odd">
<td style="text-align: center;">10</td>
<td style="text-align: center;">89</td>
<td style="text-align: center;">34 + 55</td>
</tr>
<tr class="even">
<td style="text-align: center;">11</td>
<td style="text-align: center;">144</td>
<td style="text-align: center;">55 + 89</td>
</tr>
<tr class="odd">
<td style="text-align: center;">12</td>
<td style="text-align: center;">233</td>
<td style="text-align: center;">89 + 144</td>
</tr>
</tbody>
</table>
<p>実はこのウサギのつがいの合計どの月でもは,1,1,2,3,5,8という風に前々月と前月のつがいの合計になることが知られています. このような,前の数字と前の前の数字の和によって次の数字を作る数をフィボナッチ数といいます.</p>
<div class="warn">
<p>※
普通フィボナッチ数というと,0から始まりますが,ここではウサギの例で考えたいので1から始まることにします.</p>
</div>
<p>フィボナッチ数を漸化式として捉えると,第n月のフィボナッチ数の正体は以下のように得られます.</p>
<div class="note">
<p><span class="math display">
F_0 = 1 \\
F_1 = 1 \\
F_n = F_{n-1} + F_{n-2} (n &gt;= 2)
</span></p>
</div>
<p>したがって,上の条件での12ヶ月後のウサギの数はなにかという問題は,フィボナッチ数の第12番めの項<span class="math inline">F_{12}</span>がなにかという問題であり,フィボナッチ数とはなにかといえば上の漸化式である,という風に考えることができます.</p>
<p>実際に計算手順を,一つひとつ追っていくのではなく,このように求めたい対象がなにかということを考えて,抽象化し記述するというのが,関数型言語の基本的な考え方になります.</p>
<p>ちなみに,これをHaskellで書くと以下のようになり,上の漸化式の書き方とかなり近い対応関係があることが分かります.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>fib <span class="dv">0</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>fib <span class="dv">1</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>fib n <span class="ot">=</span> fib (n <span class="op">-</span> <span class="dv">1</span>) <span class="op">+</span> fib (n <span class="op">-</span> <span class="dv">2</span>)</span></code></pre></div>
<div class="warn">
<p>※メモ化とかそういったことは,取り敢えずここでは置いておきます
(この辺の数学的定義そのままだと,実用には向かない問題は,後ほど扱います.)</p>
</div>
<p>これを実行してみると確かに正しい数が求められています.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span> :{</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="kw">|</span> <span class="ex">fib</span> :: Int <span class="at">-</span><span class="op">&gt;</span> Int</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="kw">|</span> <span class="ex">fib</span> 0 = 1</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="kw">|</span> <span class="ex">fib</span> 1 = 1</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="kw">|</span> <span class="ex">fib</span> n = fib <span class="er">(</span><span class="ex">n-1</span><span class="kw">)</span> <span class="ex">+</span> fib <span class="er">(</span><span class="ex">n-2</span><span class="kw">)</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="kw">|</span> <span class="ex">:}</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span> fib 12</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="ex">233</span></span></code></pre></div>
<p>当然フィボナッチ数の漸化式は広く知られていますし, むしろ最初から漸化式として学習することが多いでしょう. したがって, Pythonでの実装もフィボナッチ数が漸化式であるという前提で,以下のように書くほうが一般的です.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> Fib(n):</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> n <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">1</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> n <span class="op">==</span> <span class="dv">1</span>:</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">1</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> Fib(n<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span> Fib(n<span class="op">-</span><span class="dv">2</span>)</span></code></pre></div>
<p>また,最近では,PythonやJavaScriptなどの手続き型の言語にも,関数型の考え方が導入され,<strong>内包表記</strong>,<strong>再帰</strong>,<strong>ラムダ式</strong>などの関数型のシンタックスも一般的に使われるようになっています(これらの詳細についてはこのあとやっていきます).逆にHaskell等の関数型言語においても,手続き型のほうが便利な場合には手続き型の記法を利用します.</p>
<p>したがって,現在では関数型的な考え方と,手続き型の考え方というのは,それほど明確に分かれるものではありません.</p>
<p>ここでは,手続き型の考え方と関数型の考え方の違いを説明するために,Pythonの事例をあえてあまり用いられない方法で書きましたが,大げさに書けば手続き型と関数型の考え方の違いとはこのような考え方,問題へのアプローチの仕方にあります.</p>
<h2 data-number="1.4" id="関数型だと何が嬉しいのか"><span class="header-section-number">1.4</span> 関数型だと何が嬉しいのか</h2>
<p>前節では,関数型の考え方に関して簡単な事例をしましました. 関数型の考え方がしっくり来る人は,それが関数型を使う理由になるでしょうが,しっくり来るという抽象的な話ではなく,具体的な関数型言語のメリット/デメリットをこの節では紹介します. なお,関数型言語と一言でいっても,様々な言語がありますし,前述のように手続き型と関数型が明確に分かれる時代でもありません.</p>
<p>関数型言語の設計仕様は,関数型です. 手続き型言語の仕様定義にもいろいろな種類があります.</p>
<p>(執筆中)
例の論文のまとめ</p>
<p>厳密な仕様記述を書くとプログラムと1体1対応になる.そもそもHaskellで書けばプログラムと仕様が対応関係を持つようになりますし,数式への変換も容易です.</p>
<p>そういった意図もあり,私が内閣府で統計作成を市ていた時代には, 数式による定義,とプログラムのペアを対応付けたOSSとして基幹統計を開発することを提唱していましたが,それは色々な制約でまだ実現していません.</p>
<h2 data-number="1.5" id="設計も関数型で"><span class="header-section-number">1.5</span> 設計も関数型で</h2>
<p>(執筆中)</p>
<h3 data-number="1.5.1" id="雑談なんでhaskell"><span class="header-section-number">1.5.1</span> 雑談:なんでHaskell?</h3>
<p>(執筆中)</p>
]]></description>
    <pubDate>Fri, 18 Oct 2024 00:00:00 UT</pubDate>
    <guid>/lectures/iap1.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>Hakyllでブログ作成</title>
    <link>/posts/2024-03-29-a-first-post.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#はじめに" id="toc-はじめに"><span class="toc-section-number">1</span> はじめに</a></li>
<li><a href="#stack" id="toc-stack"><span class="toc-section-number">2</span> stack</a></li>
<li><a href="#katex" id="toc-katex"><span class="toc-section-number">3</span> KaTeX</a></li>
<li><a href="#シンタクスハイライトの変更" id="toc-シンタクスハイライトの変更"><span class="toc-section-number">4</span> シンタクスハイライトの変更</a></li>
<li><a href="#目次の生成" id="toc-目次の生成"><span class="toc-section-number">5</span> 目次の生成</a></li>
<li><a href="#sitemapの生成" id="toc-sitemapの生成"><span class="toc-section-number">6</span> sitemapの生成</a></li>
<li><a href="#複数のタグを付ける" id="toc-複数のタグを付ける"><span class="toc-section-number">7</span> 複数のタグを付ける</a></li>
</ul>
</div>
<h1 data-number="1" id="はじめに"><span class="header-section-number">1</span> はじめに</h1>
<p>講義資料の公開,置き場やら自分のプロフィール載せるために取り敢えずブログを作った.</p>
<p>取り敢えずHaskell静的サイトでググって最初に出てきたHakyllを使うことにした.</p>
<p><a href="https://jaspervdj.be/hakyll/index.html">Haklly</a>開発者のjaspervdjの<a href="https://jaspervdj.be">ブログ</a>の<a href="https://github.com/jaspervdj/jaspervdj">ソースコード</a>をほとんどそのまま使っている
ため,今後色々変えていく予定.</p>
<p>取り敢えずの変更点として,</p>
<ul>
<li>↑はcabalで開発していたので,stackにした</li>
<li>Hakyll+KaTeXで数式を書けるようにした</li>
<li>シンタックスハイライトの追加</li>
<li>目次の追加</li>
<li>safari対応</li>
<li>細かなデザインの変更</li>
</ul>
<p>など. ソースコードは<a href="https://github.com/yakagika/yakagika.github.io">こちら</a>.
今後なにか変更を加えたら書いていく.</p>
<h1 data-number="2" id="stack"><span class="header-section-number">2</span> stack</h1>
<p>package.yamlを追加したのみ.
これで,</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">stack</span> build</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="ex">stack</span> exec main build <span class="er">(</span><span class="ex">2回目以降はrebuild</span><span class="kw">)</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="ex">stack</span> exec main watch</span></code></pre></div>
<p>で確認できる.
(執筆段階では,まだローカルで試しているだけ)
package.yamlは以下.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="fu">ependencies</span><span class="kw">:</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> base</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> binary</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> directory</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> filepath</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> hakyll</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> pandoc</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> process</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> text</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> containers</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="fu">library</span><span class="kw">:</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">source-dirs</span><span class="kw">:</span><span class="at"> src</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="fu">_exe-defs</span><span class="kw">:</span><span class="at"> </span><span class="ot">&amp;exe-defaults</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">dependencies</span><span class="kw">:</span><span class="at"> blog</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a><span class="fu">executables</span><span class="kw">:</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">main</span><span class="kw">:</span></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">&lt;&lt;</span><span class="kw">:</span><span class="at"> </span><span class="ot">*exe-defaults</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">main</span><span class="kw">:</span><span class="at">                Main.hs</span></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">source-dirs</span><span class="kw">:</span><span class="at">         src</span></span></code></pre></div>
<h1 data-number="3" id="katex"><span class="header-section-number">3</span> KaTeX</h1>
<p>基本的にはこちらの<a href="https://axiomatic.neophilus.net/using-katex-with-hakyll/">サイト</a>を参考にした2015年の記事で現在はHakyllを使っておらず,ソースコードが消えていたので,補うのに苦労した.
KaTeXの情報が古かったので,mathCtxを最新のKaTeXの<a href="https://github.com/KaTeX/KaTeX">テンプレ</a>にした.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">mathCtx ::</span> <span class="dt">Context</span> a</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>mathCtx <span class="ot">=</span> field <span class="st">&quot;katex&quot;</span> <span class="op">$</span> \item <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    katex <span class="ot">&lt;-</span> getMetadataField (itemIdentifier item) <span class="st">&quot;katex&quot;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="fu">return</span> <span class="op">$</span> <span class="kw">case</span> katex <span class="kw">of</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">Just</span> <span class="st">&quot;false&quot;</span> <span class="ot">-&gt;</span> <span class="st">&quot;&quot;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">Just</span> <span class="st">&quot;off&quot;</span> <span class="ot">-&gt;</span> <span class="st">&quot;&quot;</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>                    _ <span class="ot">-&gt;</span> <span class="st">&quot;&lt;link rel=\&quot;stylesheet\&quot; href=\&quot;https://cdn.jsdelivr.net/npm/katex@0.16.10/dist/katex.min.css\&quot; integrity=\&quot;sha384-wcIxkf4k558AjM3Yz3BBFQUbk/zgIYC2R0QpeeYb+TwlBVMrlgLqwRjRtGZiK7ww\&quot; crossorigin=\&quot;anonymous\&quot;&gt;\n\</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="st">                             \&lt;script defer src=\&quot;https://cdn.jsdelivr.net/npm/katex@0.16.10/dist/katex.min.js\&quot; integrity=\&quot;sha384-hIoBPJpTUs74ddyc4bFZSM1TVlQDA60VBbJS0oA934VSz82sBx1X7kSx2ATBDIyd\&quot; crossorigin=\&quot;anonymous\&quot;&gt;&lt;/script&gt;\n\</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="st">                             \&lt;script defer src=\&quot;https://cdn.jsdelivr.net/npm/katex@0.16.10/dist/contrib/auto-render.min.js\&quot; integrity=\&quot;sha384-43gviWU0YVjaDtb/GhzOouOXtZMP/7XUzwPTstBeZFe/+rCMvRwr4yROQP43s0Xk\&quot; crossorigin=\&quot;anonymous\&quot; onload=\&quot;renderMathInElement(document.body);\&quot;&gt;&lt;/script&gt;&quot;</span></span></code></pre></div>
<p>これでコンテクストを作って,mappend (&lt;&gt;)でdefaultContext (template/default.html)に追加する.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>match (<span class="st">&quot;lectures/*.md&quot;</span> <span class="op">.||.</span> <span class="st">&quot;lectures/*.html&quot;</span> <span class="op">.||.</span> <span class="st">&quot;lectures/*.lhs&quot;</span>) <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>        route   <span class="op">$</span> setExtension <span class="st">&quot;.html&quot;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>        compile <span class="op">$</span> pandocCompiler</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> saveSnapshot <span class="st">&quot;content&quot;</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> <span class="fu">return</span> <span class="op">.</span> <span class="fu">fmap</span> demoteHeaders</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/lecture.html&quot;</span> (postCtx tags)</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/content.html&quot;</span> (mathCtx <span class="op">&lt;&gt;</span> defaultContext )</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> (mathCtx <span class="op">&lt;&gt;</span> defaultContext)</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> relativizeUrls</span></code></pre></div>
<p>もとのブログは,markdownのメタデータにおいて,
katex : trueとなっているものだけにKaTeXを適用するのが方針で,
以下のように書くことで実現できる.
<del>“$$”で数式が書けるようにdelimitersを設定する必要があるのだが,Hakyllの仕様で,“$”が消えるので全部二重にしたら上手く行った.</del></p>
<div class="sourceCode" id="cb5"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">&lt;!-- 旧版 --&gt;</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;!DOCTYPE </span>html<span class="dt">&gt;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;html</span> <span class="er">lang</span><span class="ot">=</span><span class="st">&quot;en&quot;</span> <span class="er">$if(dark)$class</span><span class="ot">=</span><span class="st">&quot;dark&quot;</span><span class="er">$endif$</span><span class="kw">&gt;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;head&gt;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>        <span class="kw">&lt;meta</span> <span class="er">charset</span><span class="ot">=</span><span class="st">&quot;UTF-8&quot;</span><span class="kw">&gt;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>        <span class="kw">&lt;meta</span> <span class="er">name</span><span class="ot">=</span><span class="st">&quot;viewport&quot;</span> <span class="er">content</span><span class="ot">=</span><span class="st">&quot;width=device-width&quot;</span><span class="kw">&gt;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>        <span class="kw">&lt;title&gt;</span>yakagika - $title$<span class="kw">&lt;/title&gt;</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>        <span class="co">&lt;!-- Stylesheets. --&gt;</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>        <span class="kw">&lt;link</span> <span class="er">rel</span><span class="ot">=</span><span class="st">&quot;stylesheet&quot;</span> <span class="er">type</span><span class="ot">=</span><span class="st">&quot;text/css&quot;</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;/style.css?v=0&quot;</span><span class="kw">&gt;</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>        <span class="co">&lt;!-- RSS. --&gt;</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>        <span class="kw">&lt;link</span> <span class="er">rel</span><span class="ot">=</span><span class="st">&quot;alternate&quot;</span> <span class="er">type</span><span class="ot">=</span><span class="st">&quot;application/rss+xml&quot;</span> <span class="er">title</span><span class="ot">=</span><span class="st">&quot;yakagika&quot;</span> <span class="kw">&gt;</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>        <span class="co">&lt;!-- href=&quot;http://jaspervdj.be/rss.xml&quot; --&gt;</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>        <span class="co">&lt;!-- Metadata. --&gt;</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>        <span class="kw">&lt;meta</span> <span class="er">name</span><span class="ot">=</span><span class="st">&quot;keywords&quot;</span> <span class="er">content</span><span class="ot">=</span><span class="st">&quot;yakagika Haskell ExchangeAlgebra&quot;</span><span class="kw">&gt;</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>        <span class="kw">&lt;meta</span> <span class="er">name</span><span class="ot">=</span><span class="st">&quot;description&quot;</span> <span class="er">content</span><span class="ot">=</span><span class="st">&quot;Personal home page and blog of yakagika.&quot;</span><span class="kw">&gt;</span></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>        $if(katex)$</span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>        <span class="co">&lt;!-- KaTeXのスタイルシートとJavaScriptのリンクを動的に挿入 --&gt;</span></span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>        $katex$</span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>        $endif$</span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a>        $if(description)$<span class="kw">&lt;meta</span> <span class="er">property</span><span class="ot">=</span><span class="st">&quot;og:description&quot;</span> <span class="er">content</span><span class="ot">=</span><span class="st">&quot;$description$&quot;</span> <span class="kw">/&gt;</span>$endif$</span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;/head&gt;</span></span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;body&gt;</span></span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a>        <span class="kw">&lt;div</span> <span class="er">id</span> <span class="ot">=</span><span class="st">&quot;navigation&quot;</span><span class="kw">&gt;</span></span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a>            <span class="kw">&lt;h1&gt;</span>Contents<span class="kw">&lt;/h1&gt;</span></span>
<span id="cb5-29"><a href="#cb5-29" aria-hidden="true" tabindex="-1"></a>            <span class="kw">&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;/&quot;</span><span class="kw">&gt;</span>Home<span class="kw">&lt;/a&gt;</span></span>
<span id="cb5-30"><a href="#cb5-30" aria-hidden="true" tabindex="-1"></a>            <span class="kw">&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;/posts.html&quot;</span><span class="kw">&gt;</span>Blog<span class="kw">&lt;/a&gt;</span></span>
<span id="cb5-31"><a href="#cb5-31" aria-hidden="true" tabindex="-1"></a>            <span class="kw">&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;/lectures.html&quot;</span><span class="kw">&gt;</span>Lecture<span class="kw">&lt;/a&gt;</span></span>
<span id="cb5-32"><a href="#cb5-32" aria-hidden="true" tabindex="-1"></a>            <span class="kw">&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;/research.html&quot;</span><span class="kw">&gt;</span>Research<span class="kw">&lt;/a&gt;</span></span>
<span id="cb5-33"><a href="#cb5-33" aria-hidden="true" tabindex="-1"></a>            <span class="kw">&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;/contact.html&quot;</span><span class="kw">&gt;</span>Contact<span class="kw">&lt;/a&gt;</span></span>
<span id="cb5-34"><a href="#cb5-34" aria-hidden="true" tabindex="-1"></a>            <span class="co">&lt;!-- &lt;a href=&quot;/cv.html&quot;&gt;CV&lt;/a&gt; --&gt;</span></span>
<span id="cb5-35"><a href="#cb5-35" aria-hidden="true" tabindex="-1"></a>            <span class="kw">&lt;h1&gt;</span>Links<span class="kw">&lt;/h1&gt;</span></span>
<span id="cb5-36"><a href="#cb5-36" aria-hidden="true" tabindex="-1"></a>            <span class="kw">&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;http://github.com/yakagika&quot;</span><span class="kw">&gt;</span>GitHub<span class="kw">&lt;/a&gt;</span></span>
<span id="cb5-37"><a href="#cb5-37" aria-hidden="true" tabindex="-1"></a>        <span class="kw">&lt;/div&gt;</span></span>
<span id="cb5-38"><a href="#cb5-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-39"><a href="#cb5-39" aria-hidden="true" tabindex="-1"></a>        $body$</span>
<span id="cb5-40"><a href="#cb5-40" aria-hidden="true" tabindex="-1"></a>        <span class="co">&lt;!-- GUID --&gt;</span></span>
<span id="cb5-41"><a href="#cb5-41" aria-hidden="true" tabindex="-1"></a>        <span class="kw">&lt;div</span> <span class="er">style</span><span class="ot">=</span><span class="st">&quot;display: none&quot;</span><span class="kw">&gt;</span>ce0f13b2-4a83-4c1c-b2b9-b6d18f4ee6d2<span class="kw">&lt;/div&gt;</span></span>
<span id="cb5-42"><a href="#cb5-42" aria-hidden="true" tabindex="-1"></a>        $if(katex)$</span>
<span id="cb5-43"><a href="#cb5-43" aria-hidden="true" tabindex="-1"></a>        <span class="co">&lt;!-- KaTeX JavaScript and auto-render extension --&gt;</span></span>
<span id="cb5-44"><a href="#cb5-44" aria-hidden="true" tabindex="-1"></a>        <span class="kw">&lt;script&gt;</span></span>
<span id="cb5-45"><a href="#cb5-45" aria-hidden="true" tabindex="-1"></a>          <span class="bu">document</span><span class="op">.</span><span class="fu">addEventListener</span>(<span class="st">&quot;DOMContentLoaded&quot;</span><span class="op">,</span> <span class="kw">function</span>() {</span>
<span id="cb5-46"><a href="#cb5-46" aria-hidden="true" tabindex="-1"></a>            <span class="fu">renderMathInElement</span>(<span class="bu">document</span><span class="op">.</span><span class="at">body</span><span class="op">,</span> {</span>
<span id="cb5-47"><a href="#cb5-47" aria-hidden="true" tabindex="-1"></a>              <span class="dt">delimiters</span><span class="op">:</span> [</span>
<span id="cb5-48"><a href="#cb5-48" aria-hidden="true" tabindex="-1"></a>                {<span class="dt">left</span><span class="op">:</span> <span class="st">&quot;$$$$&quot;</span><span class="op">,</span> <span class="dt">right</span><span class="op">:</span> <span class="st">&quot;$$$$&quot;</span><span class="op">,</span> <span class="dt">display</span><span class="op">:</span> <span class="kw">true</span>}<span class="op">,</span></span>
<span id="cb5-49"><a href="#cb5-49" aria-hidden="true" tabindex="-1"></a>                {<span class="dt">left</span><span class="op">:</span> <span class="st">&quot;$$&quot;</span><span class="op">,</span> <span class="dt">right</span><span class="op">:</span> <span class="st">&quot;$$&quot;</span><span class="op">,</span> <span class="dt">display</span><span class="op">:</span> <span class="kw">false</span>} <span class="co">// インライン数式用のデリミタを追加</span></span>
<span id="cb5-50"><a href="#cb5-50" aria-hidden="true" tabindex="-1"></a>              ]</span>
<span id="cb5-51"><a href="#cb5-51" aria-hidden="true" tabindex="-1"></a>            })<span class="op">;</span></span>
<span id="cb5-52"><a href="#cb5-52" aria-hidden="true" tabindex="-1"></a>          })<span class="op">;</span></span>
<span id="cb5-53"><a href="#cb5-53" aria-hidden="true" tabindex="-1"></a>        <span class="kw">&lt;/script&gt;</span></span>
<span id="cb5-54"><a href="#cb5-54" aria-hidden="true" tabindex="-1"></a>        $endif$</span>
<span id="cb5-55"><a href="#cb5-55" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;/body&gt;</span></span>
<span id="cb5-56"><a href="#cb5-56" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/html&gt;</span></span></code></pre></div>
<p><del>とりあえずこんな感じで出せる.</del></p>
<div class="sourceCode" id="cb6"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>あいうえお <span class="fu">\\</span>( f(あ) = a^2 <span class="fu">\\</span>) かきくけこ</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>あいうえお <span class="ss">$ f(あ) = a^2 $</span> かきくけこ</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="ss">$$ f(x) = </span><span class="sc">\frac</span><span class="ss">{1}{x}  $$</span></span></code></pre></div>
<p><del>あいうえお \( f(あ) = a^2 \) かきくけこ</del></p>
<p><del>あいうえお $ f(あ) = a^2 $ かきくけこ</del></p>
<p><del><span class="math display"> f(x) = \frac{1}{x}  </span></del></p>
<p>(2025/03/27修正) –</p>
<p>上の方法だと,<code>Pandoc</code>時点で数式処理されて<code>math inline</code>となった要素と<code>JavaScript</code>側で処理されて<code>latex.inlline</code>となった要素が混在して,ところどころデザインが崩れるので,Pandocの時点でKaTeXを使用するように変更した.</p>
<p>結構苦労したので追記.</p>
<p><code>writerOption</code> において <code>Pandoc.writerHTMLMathMethod  = Pandoc.KaTeX ""</code> と設定することでKaTeXで数式が処理される.
<code>$ ... $</code>で式を示したい場合は,
<code>Pandoc.writerExtensions</code>に<code>Pandoc.enableExtension Pandoc.Ext_tex_math_dollars</code>を指定する. <code>Ext_tex_math_double_backslash</code>は<code>\( .. \)</code>など.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Custom WriterOptions: disable `$...$` math, enable fenced_divs, plus TOC etc.</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="ot">customWriterOptions ::</span> <span class="dt">Pandoc.WriterOptions</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>customWriterOptions <span class="ot">=</span> defaultHakyllWriterOptions</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  { Pandoc.writerHTMLMathMethod  <span class="ot">=</span> <span class="dt">Pandoc.KaTeX</span> <span class="st">&quot;&quot;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>  , Pandoc.writerExtensions      <span class="ot">=</span> Pandoc.enableExtension <span class="dt">Pandoc.Ext_fenced_divs</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>                                 <span class="op">$</span> Pandoc.enableExtension <span class="dt">Pandoc.Ext_tex_math_dollars</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>                                 <span class="op">$</span> Pandoc.enableExtension <span class="dt">Pandoc.Ext_tex_math_double_backslash</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>                                 <span class="op">$</span> Pandoc.enableExtension <span class="dt">Pandoc.Ext_tex_math_single_backslash</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>                                 <span class="op">$</span> Pandoc.pandocExtensions</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>match (<span class="st">&quot;lectures/*.md&quot;</span> <span class="op">.||.</span> <span class="st">&quot;lectures/*.html&quot;</span> <span class="op">.||.</span> <span class="st">&quot;lectures/*.lhs&quot;</span>) <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>        route   <span class="op">$</span> setExtension <span class="st">&quot;.html&quot;</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>        compile <span class="op">$</span> pandocCompilerWith customReaderOptions customWriterOptions</span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> saveSnapshot <span class="st">&quot;content&quot;</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> <span class="fu">return</span> <span class="op">.</span> <span class="fu">fmap</span> demoteHeaders</span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/lecture.html&quot;</span> (postCtx tags)</span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/content.html&quot;</span> (mathCtx <span class="op">&lt;&gt;</span> defaultContext )</span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> (mathCtx <span class="op">&lt;&gt;</span> defaultContext)</span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> relativizeUrls</span></code></pre></div>
<p>これで</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ss">$x=1$</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="ss">$$</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="ss">x = 1</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="ss">$$</span></span></code></pre></div>
<p>と書かれているmdから</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;span</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;math inline&quot;</span><span class="kw">&gt;</span> $x=1$ <span class="kw">&lt;/span&gt;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;span</span> <span class="er">class</span><span class="ot">=</span><span class="st">&quot;math display&quot;</span><span class="kw">&gt;</span> $x=1$ <span class="kw">&lt;/span&gt;</span></span></code></pre></div>
<p>のような形のhtmlに変換される. これを<code>default.html</code>側でレンダリングする.レンダリングは以下でOK.
(cf.<a href="https://github.com/jaspervdj/hakyll/issues/1006#issuecomment-2369250865">https://github.com/jaspervdj/hakyll/issues/1006#issuecomment-2369250865</a>)</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;head&gt;</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>$if(katex)$</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>    $katex$</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>$endif$</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/head&gt;</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;body&gt;</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a> <span class="kw">&lt;script&gt;</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>    <span class="bu">document</span><span class="op">.</span><span class="fu">addEventListener</span>(<span class="st">&quot;DOMContentLoaded&quot;</span><span class="op">,</span> <span class="kw">function</span> () {</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>      <span class="kw">var</span> mathElements <span class="op">=</span> <span class="bu">document</span><span class="op">.</span><span class="fu">querySelectorAll</span>(<span class="st">&#39;.math&#39;</span>)<span class="op">;</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>      <span class="cf">for</span> (<span class="kw">var</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> mathElements<span class="op">.</span><span class="at">length</span><span class="op">;</span> i<span class="op">++</span>) {</span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>        <span class="kw">var</span> texText <span class="op">=</span> mathElements[i]<span class="op">.</span><span class="at">firstChild</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> (mathElements[i]<span class="op">.</span><span class="at">tagName</span> <span class="op">==</span> <span class="st">&quot;SPAN&quot;</span>) {</span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>            katex<span class="op">.</span><span class="fu">render</span>( texText<span class="op">.</span><span class="at">data</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>                        <span class="op">,</span> mathElements[i]</span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a>                        <span class="op">,</span> { <span class="dt">displayMode</span><span class="op">:</span> mathElements[i]<span class="op">.</span><span class="at">classList</span><span class="op">.</span><span class="fu">contains</span>(<span class="st">&quot;display&quot;</span>)</span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a>                          <span class="op">,</span> <span class="dt">throwOnError</span><span class="op">:</span> <span class="kw">true</span> }</span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a>                        )<span class="op">;</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a>          }</span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a>      }</span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a>    })<span class="op">;</span></span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;/script&gt;</span></span>
<span id="cb10-23"><a href="#cb10-23" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/body&gt;</span></span></code></pre></div>
<h1 data-number="4" id="シンタクスハイライトの変更"><span class="header-section-number">4</span> シンタクスハイライトの変更</h1>
<p>シンタックスハイライトを変更した
シンタックスは,pandocCompilerのオプションとして指定できる.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Text.Pandoc.Highlighting</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="ot">pandocCodeStyle ::</span> <span class="dt">Style</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>pandocCodeStyle <span class="ot">=</span> breezeDark</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="ot">customWriterOptions::</span> <span class="dt">Pandoc.WriterOptions</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>customWriterOptions <span class="ot">=</span> defaultHakyllWriterOptions { Pandoc.writerHTMLMathMethod <span class="ot">=</span> <span class="dt">Pandoc.MathJax</span> <span class="st">&quot;&quot;</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>                                                 , Pandoc.writerHighlightStyle <span class="ot">=</span> <span class="dt">Just</span> pandocCodeStyle}</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="ot">myPandocCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>myPandocCompiler <span class="ot">=</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>    pandocCompilerWith defaultHakyllReaderOptions customWriterOptions</span></code></pre></div>
<p>このように適用することでこのブログの見た目になっている.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a> match (<span class="st">&quot;posts/*.md&quot;</span> <span class="op">.||.</span> <span class="st">&quot;posts/*.html&quot;</span> <span class="op">.||.</span> <span class="st">&quot;posts/*.lhs&quot;</span>) <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>        route   <span class="op">$</span> setExtension <span class="st">&quot;.html&quot;</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>        compile <span class="op">$</span> myPandocCompiler</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> saveSnapshot <span class="st">&quot;content&quot;</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> <span class="fu">return</span> <span class="op">.</span> <span class="fu">fmap</span> demoteHeaders</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/post.html&quot;</span> (postCtx tags)</span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/content.html&quot;</span> (mathCtx <span class="op">&lt;&gt;</span> defaultContext)</span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> (mathCtx <span class="op">&lt;&gt;</span> defaultContext)</span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> relativizeUrls</span></code></pre></div>
<h1 data-number="5" id="目次の生成"><span class="header-section-number">5</span> 目次の生成</h1>
<p><a href="https://svejcar.dev/posts/2019/11/27/table-of-contents-in-hakyll/">こちらのサイト</a>そのままで導入した.
だんだんPandocのOptionが長くなっていく…</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Prelude</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Data.Functor.Identity</span> (runIdentity)</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>tocTemplate <span class="ot">=</span> <span class="fu">either</span> <span class="fu">error</span> Prelude.id <span class="op">.</span> runIdentity <span class="op">.</span> Pandoc.compileTemplate <span class="st">&quot;&quot;</span> <span class="op">$</span> T.unlines</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>  [ <span class="st">&quot;&lt;div class=\&quot;toc\&quot;&gt;&lt;div class=\&quot;header\&quot;&gt;Table of Contents&lt;/div&gt;&quot;</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>  , <span class="st">&quot;$toc$&quot;</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>  , <span class="st">&quot;&lt;/div&gt;&quot;</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>  , <span class="st">&quot;$body$&quot;</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>  ]</span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a><span class="ot">customWriterOptions::</span> <span class="dt">Pandoc.WriterOptions</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a>customWriterOptions <span class="ot">=</span> defaultHakyllWriterOptions</span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a>                        { Pandoc.writerHTMLMathMethod   <span class="ot">=</span> <span class="dt">Pandoc.MathJax</span> <span class="st">&quot;&quot;</span>       <span class="co">-- LaTeX</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a>                        , Pandoc.writerNumberSections   <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a>                        , Pandoc.writerHighlightStyle   <span class="ot">=</span> <span class="dt">Just</span> pandocCodeStyle    <span class="co">-- Syntax</span></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a>                        , Pandoc.writerTableOfContents  <span class="ot">=</span> <span class="dt">True</span>                    <span class="co">-- toc</span></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a>                        , Pandoc.writerTOCDepth         <span class="ot">=</span> <span class="dv">3</span></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a>                        , Pandoc.writerTemplate          <span class="ot">=</span> <span class="dt">Just</span> tocTemplate</span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a>                        }</span></code></pre></div>
<p>として,</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>    match (<span class="st">&quot;posts/*.md&quot;</span> <span class="op">.||.</span> <span class="st">&quot;posts/*.html&quot;</span> <span class="op">.||.</span> <span class="st">&quot;posts/*.lhs&quot;</span>) <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>        route   <span class="op">$</span> setExtension <span class="st">&quot;.html&quot;</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>        compile <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>                underlying <span class="ot">&lt;-</span> getUnderlying</span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>                toc        <span class="ot">&lt;-</span> getMetadataField underlying <span class="st">&quot;tableOfContents&quot;</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>                <span class="kw">let</span> writerOptions&#39; <span class="ot">=</span> <span class="fu">maybe</span> defaultHakyllWriterOptions (<span class="fu">const</span> customWriterOptions) toc</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>                pandocCompilerWith defaultHakyllReaderOptions writerOptions&#39;</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> saveSnapshot <span class="st">&quot;content&quot;</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> <span class="fu">return</span> <span class="op">.</span> <span class="fu">fmap</span> demoteHeaders</span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/post.html&quot;</span> (postCtx tags)</span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/content.html&quot;</span> (mathCtx <span class="op">&lt;&gt;</span> defaultContext)</span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> (mathCtx <span class="op">&lt;&gt;</span> defaultContext)</span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> relativizeUrls</span></code></pre></div>
<h1 data-number="6" id="sitemapの生成"><span class="header-section-number">6</span> sitemapの生成</h1>
<p>postCtxを修正して, 修正時間(<code>mtime</code>),url(<code>url</code>)を追加.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="ot">postCtx ::</span> <span class="dt">Tags</span> <span class="ot">-&gt;</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>postCtx tags <span class="ot">=</span> <span class="fu">mconcat</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>    [ modificationTimeField <span class="st">&quot;mtime&quot;</span> <span class="st">&quot;%Y-%m-%d&quot;</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>    , dateField <span class="st">&quot;date&quot;</span> <span class="st">&quot;%Y-%m-%d&quot;</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>    , tagsField <span class="st">&quot;tags&quot;</span> tags</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>    , urlField <span class="st">&quot;url&quot;</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>    , <span class="dt">Context</span> <span class="op">$</span> \key <span class="ot">-&gt;</span> <span class="kw">case</span> key <span class="kw">of</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;title&quot;</span> <span class="ot">-&gt;</span> unContext (mapContext escapeHtml defaultContext) key</span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a>        _       <span class="ot">-&gt;</span> unContext <span class="fu">mempty</span> key</span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a>    , defaultContext</span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a>    ]</span></code></pre></div>
<p><code>templates</code>に<code>sitemap.xml</code>を追加.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode xml"><code class="sourceCode xml"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="fu">&lt;?xml</span><span class="ot"> version=</span><span class="st">&quot;1.0&quot;</span><span class="ot"> encoding=</span><span class="st">&quot;UTF-8&quot;</span><span class="fu">?&gt;</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>&lt;<span class="kw">urlset</span><span class="ot"> xmlns=</span><span class="st">&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;</span>&gt;</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>    $for(entries)$</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>    &lt;<span class="kw">url</span>&gt;</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>        &lt;<span class="kw">loc</span>&gt;$url$&lt;/<span class="kw">loc</span>&gt;</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>        &lt;<span class="kw">lastmod</span>&gt;$mtime$&lt;/<span class="kw">lastmod</span>&gt;</span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>    &lt;/<span class="kw">url</span>&gt;</span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>    $endfor$</span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>&lt;/<span class="kw">urlset</span>&gt;</span></code></pre></div>
<p><code>create</code>で<code>sitemap</code>を生成.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a>    create [<span class="st">&quot;sitemap.xml&quot;</span>] <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>        route idRoute</span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>        compile <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>            posts <span class="ot">&lt;-</span> loadAllSnapshots <span class="st">&quot;posts/*&quot;</span> <span class="st">&quot;content&quot;</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>            lectures <span class="ot">&lt;-</span> loadAllSnapshots <span class="st">&quot;lectures/*&quot;</span> <span class="st">&quot;content&quot;</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>            <span class="kw">let</span> allPosts <span class="ot">=</span> posts <span class="op">++</span> lectures</span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>            <span class="kw">let</span> sitemapCtx <span class="ot">=</span> constField <span class="st">&quot;root&quot;</span> <span class="st">&quot;https://yakagika.github.io&quot;</span> <span class="op">&lt;&gt;</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>                             listField <span class="st">&quot;entries&quot;</span> (postCtx tags) (<span class="fu">return</span> allPosts)</span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a>            makeItem <span class="st">&quot;&quot;</span></span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/sitemap.xml&quot;</span> sitemapCtx</span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true" tabindex="-1"></a>                <span class="op">&gt;&gt;=</span> relativizeUrls</span></code></pre></div>
<p>以下のようなサイトマップが生成される.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode xml"><code class="sourceCode xml"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="fu">&lt;?xml</span><span class="ot"> version=</span><span class="st">&quot;1.0&quot;</span><span class="ot"> encoding=</span><span class="st">&quot;UTF-8&quot;</span> <span class="fu">?&gt;</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>&lt;<span class="kw">urlset</span><span class="ot"> xmlns=</span><span class="st">&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;</span>&gt;</span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>    &lt;<span class="kw">url</span>&gt;</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>        &lt;<span class="kw">loc</span>&gt;/posts/2024-03-29-a-first-post.html&lt;/<span class="kw">loc</span>&gt;</span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>        &lt;<span class="kw">lastmod</span>&gt;2024-06-12&lt;/<span class="kw">lastmod</span>&gt;</span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>    &lt;/<span class="kw">url</span>&gt;</span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a>    &lt;<span class="kw">url</span>&gt;</span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a>        &lt;<span class="kw">loc</span>&gt;/lectures/2024-03-29-introduction-to-algebraic-programing.html&lt;/<span class="kw">loc</span>&gt;</span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a>        &lt;<span class="kw">lastmod</span>&gt;2024-06-12&lt;/<span class="kw">lastmod</span>&gt;</span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a>    &lt;/<span class="kw">url</span>&gt;</span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a>    &lt;<span class="kw">url</span>&gt;</span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a>        &lt;<span class="kw">loc</span>&gt;/lectures/2024-03-29-introduction-to-statistics.html&lt;/<span class="kw">loc</span>&gt;</span>
<span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a>        &lt;<span class="kw">lastmod</span>&gt;2024-06-12&lt;/<span class="kw">lastmod</span>&gt;</span>
<span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a>    &lt;/<span class="kw">url</span>&gt;</span>
<span id="cb18-18"><a href="#cb18-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-19"><a href="#cb18-19" aria-hidden="true" tabindex="-1"></a>    &lt;<span class="kw">url</span>&gt;</span>
<span id="cb18-20"><a href="#cb18-20" aria-hidden="true" tabindex="-1"></a>        &lt;<span class="kw">loc</span>&gt;/lectures/2024-03-29-special-lecture-datascience-answer.html&lt;/<span class="kw">loc</span>&gt;</span>
<span id="cb18-21"><a href="#cb18-21" aria-hidden="true" tabindex="-1"></a>        &lt;<span class="kw">lastmod</span>&gt;2024-06-12&lt;/<span class="kw">lastmod</span>&gt;</span>
<span id="cb18-22"><a href="#cb18-22" aria-hidden="true" tabindex="-1"></a>    &lt;/<span class="kw">url</span>&gt;</span>
<span id="cb18-23"><a href="#cb18-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-24"><a href="#cb18-24" aria-hidden="true" tabindex="-1"></a>    &lt;<span class="kw">url</span>&gt;</span>
<span id="cb18-25"><a href="#cb18-25" aria-hidden="true" tabindex="-1"></a>        &lt;<span class="kw">loc</span>&gt;/lectures/2024-03-29-special-lecture-datascience.html&lt;/<span class="kw">loc</span>&gt;</span>
<span id="cb18-26"><a href="#cb18-26" aria-hidden="true" tabindex="-1"></a>        &lt;<span class="kw">lastmod</span>&gt;2024-06-12&lt;/<span class="kw">lastmod</span>&gt;</span>
<span id="cb18-27"><a href="#cb18-27" aria-hidden="true" tabindex="-1"></a>    &lt;/<span class="kw">url</span>&gt;</span>
<span id="cb18-28"><a href="#cb18-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-29"><a href="#cb18-29" aria-hidden="true" tabindex="-1"></a>&lt;/<span class="kw">urlset</span>&gt;</span></code></pre></div>
<h1 data-number="7" id="複数のタグを付ける"><span class="header-section-number">7</span> 複数のタグを付ける</h1>
<p>lectures と post の2つからタグを生成する.</p>
<p>複数の<code>Pattern</code>から<code>Tags</code>を生成するための<code>buildTagsWithList</code>を定義して.</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a>buildTagsWithList :: MonadMetadata m <span class="op">=&gt;</span> [Pattern] <span class="op">-&gt;</span> (String <span class="op">-&gt;</span> Identifier) <span class="op">-&gt;</span> m Tags</span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>buildTagsWithList patterns makeId <span class="op">=</span> do</span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>    ids <span class="op">&lt;-</span> concat <span class="op">&lt;</span>$<span class="op">&gt;</span> mapM getMatches patterns</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a>    tagMap <span class="op">&lt;-</span> foldM addTags M.empty ids</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a>    let <span class="bu">set</span><span class="st">&#39; = S.fromList ids</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a><span class="er">    return $ Tags </span>(M.toList tagMap) makeId (PatternDependency (mconcat patterns) <span class="bu">set</span><span class="st">&#39;)</span></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a><span class="er">  where</span></span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">--</span> Create a tag <span class="bu">map</span> <span class="cf">for</span> one page</span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a>    addTags tagMap <span class="bu">id</span><span class="st">&#39; = do</span></span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a><span class="er">        tags &lt;- getTags id&#39;</span></span>
<span id="cb19-11"><a href="#cb19-11" aria-hidden="true" tabindex="-1"></a>        let tagMap<span class="st">&#39; = M.fromList $ zip tags $ repeat [id&#39;</span>]</span>
<span id="cb19-12"><a href="#cb19-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> $ M.unionWith (<span class="op">++</span>) tagMap tagMap<span class="st">&#39;</span></span></code></pre></div>
<p>以下のように使う.</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="op">--</span> Build tags</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>tags <span class="op">&lt;-</span> buildTagsWithList [<span class="st">&quot;posts/*&quot;</span>,<span class="st">&quot;lectures/*&quot;</span>] (fromCapture <span class="st">&quot;tags/*.html&quot;</span>)</span></code></pre></div>
<p><code>markdown</code>のメタデータに以下のように設定すると,ちゃんと動く.</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode md"><code class="sourceCode markdown"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="co">---</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a><span class="an">title:</span><span class="co"> 特別講義(データサイエンス)</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a><span class="an">description:</span><span class="co"> 資料</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a><span class="an">tags:</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a><span class="co">    - datascience</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a><span class="co">    - statistics</span></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a><span class="co">    - python</span></span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a><span class="an">featured:</span><span class="co"> true</span></span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true" tabindex="-1"></a><span class="an">tableOfContents:</span><span class="co"> true</span></span>
<span id="cb21-10"><a href="#cb21-10" aria-hidden="true" tabindex="-1"></a><span class="co">---</span></span></code></pre></div>
<p>yakagika</p>
]]></description>
    <pubDate>Fri, 29 Mar 2024 00:00:00 UT</pubDate>
    <guid>/posts/2024-03-29-a-first-post.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>

    </channel>
</rss>
