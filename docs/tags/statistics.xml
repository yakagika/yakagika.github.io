<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>yakagika - Posts tagged statistics</title>
        <link></link>
        <description><![CDATA[Personal blog of yakagika]]></description>
        <atom:link href="/tags/statistics.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Fri, 18 Oct 2024 00:00:00 UT</lastBuildDate>
        <item>
    <title>代数プログラミング入門 Ch5 代数的データ型</title>
    <link>/lectures/iap5.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#代数的データ型" id="toc-代数的データ型"><span class="toc-section-number">1</span> 代数的データ型</a>
<ul>
<li><a href="#命題と条件式" id="toc-命題と条件式"><span class="toc-section-number">1.1</span> 命題と条件式</a></li>
<li><a href="#集合" id="toc-集合"><span class="toc-section-number">1.2</span> 集合</a></li>
<li><a href="#型注釈と関数" id="toc-型注釈と関数"><span class="toc-section-number">1.3</span> 型注釈と関数</a>
<ul>
<li><a href="#内包表記" id="toc-内包表記"><span class="toc-section-number">1.3.1</span> 内包表記</a></li>
</ul></li>
<li><a href="#包含" id="toc-包含"><span class="toc-section-number">1.4</span> 包含</a></li>
<li><a href="#積と和" id="toc-積と和"><span class="toc-section-number">1.5</span> 積と和</a></li>
</ul></li>
<li><a href="#代数とクラス" id="toc-代数とクラス"><span class="toc-section-number">2</span> 代数とクラス</a>
<ul>
<li><a href="#マグマ" id="toc-マグマ"><span class="toc-section-number">2.1</span> マグマ</a></li>
<li><a href="#半群" id="toc-半群"><span class="toc-section-number">2.2</span> 半群</a></li>
<li><a href="#モノイド" id="toc-モノイド"><span class="toc-section-number">2.3</span> モノイド</a></li>
<li><a href="#群" id="toc-群"><span class="toc-section-number">2.4</span> 群</a></li>
<li><a href="#リスト" id="toc-リスト"><span class="toc-section-number">2.5</span> リスト</a></li>
<li><a href="#ツリー" id="toc-ツリー"><span class="toc-section-number">2.6</span> ツリー</a></li>
<li><a href="#ネットワーク" id="toc-ネットワーク"><span class="toc-section-number">2.7</span> ネットワーク</a></li>
</ul></li>
<li><a href="#手続き型haskell" id="toc-手続き型haskell"><span class="toc-section-number">3</span> 手続き型Haskell</a></li>
<li><a href="#圏論とhaskell" id="toc-圏論とhaskell"><span class="toc-section-number">4</span> 圏論とHaskell</a></li>
<li><a href="#発展会計プログラム" id="toc-発展会計プログラム"><span class="toc-section-number">5</span> 発展:会計プログラム</a></li>
</ul>
</div>
<h1 data-number="1" id="代数的データ型"><span class="header-section-number">1</span> 代数的データ型</h1>
<p>Haskellのデータ型はすべて代数的データ型です. 代数的データ型には, <strong>列挙型</strong>,<strong>直積型</strong>,<strong>直和型</strong>があり,構文として<strong>レコード構文</strong>などが存在します.</p>
<p>集合論の説明と対応したコードの書き方.
(圏論で書けというのはそのうちやりたい.)</p>
<h2 data-number="1.1" id="命題と条件式"><span class="header-section-number">1.1</span> 命題と条件式</h2>
<p>集合を定義するにあたって,数理的な定義の記法に用いる演算子を導入する. 数理的な定義の内,そこで述べられた言説が,「真か偽のいずれかに分類可能とされるもの」を命題といい,条件が与えられた命題を条件式という.</p>
<p><code>x</code>に関する条件式を
<span class="math inline">\(P(x)≔***\)</span> や <span class="math inline">\(Q(x)\)</span>
と書き，<code>***</code>の部分に,命題が記述される．</p>
<p>命題の記述には以下の論理演算子が用いられる．</p>
<ul>
<li><p><span class="math inline">\(P(x) \lor Q(x)\)</span>： <span class="math inline">\(P(x)\)</span>または<span class="math inline">\(Q(x)\)</span></p></li>
<li><p><span class="math inline">\(P(x) \land Q(x)\)</span>：P(x)かつQ(x)</p></li>
<li><p><span class="math inline">\(p(x) \Rightarrow q(x)\)</span>：<span class="math inline">\(p(x)\)</span>ならば<span class="math inline">\(q(x)\)</span></p></li>
<li><p><span class="math inline">\(p(x) \Leftrightarrow q(x) ∶\)</span> <span class="math inline">\(p(x)\)</span>ならば <span class="math inline">\(q(x)\)</span> かつ <span class="math inline">\(q(x)\)</span> ならば <span class="math inline">\(p(x)\)</span></p></li>
<li><p>$ p(x):p(x)$ の否定</p></li>
</ul>
<p>なお, <span class="math inline">\(p(x) \Rightarrow q(x) \Leftrightarrow \neg p(x) \lor q(x)\)</span></p>
<h2 data-number="1.2" id="集合"><span class="header-section-number">1.2</span> 集合</h2>
<p>Haskellではデータ型を集合と<strong>みなすこと</strong>ができます(むしろ良く議論されるのは集合の圏 <strong><span class="math inline">\(\mathbb{Set}\)</span></strong>
ですが,集合論の範囲でしばらく話しを進めます). Haskellの型はあくまで型であり,厳密には集合ではありません. また,このあと出てくるリストを使った<code>内包表記</code>などの<strong>集合論的な書き方</strong>も数学における集合ではありません.
あくまで類似したものです.</p>
<p>しかし,Haskellを集合とみなすことで,関数型プログラミングや,代数的データ型の意味がより直感的に理解できるようになります. しばらく,集合論とHaskellの対応について考えてみましょう.</p>
<div class="note">
<p>特定のモノがそこに｢属するか判定可能なモノの集まり｣を｢集合｣という．</p>
</div>
<p>集合の細かな定義は置いておいて,この講義では取り敢えずこのくらいの認識で問題ありません. しかし,ただのモノの集まりではなく,特定のモノがそこに属するかどうかを判定できる必要があるので注意が必要です.</p>
<p>例えば, ｢頭の良い人の集合｣のようなものは,｢頭が良い基準｣が人によって異なるので,集合とはみなせません.</p>
<p>ノーベル賞受賞者の集合,フィールズ賞受賞者の集合,メンサ会員の集合,XX模試の偏差値が70以上の人の集合,特定の科目で85点以上取った人の集合,など,誰でも判別可能な定義が必要です.</p>
<p>私が過去に飼ったことのある犬の種類の集合を<code>MyDogs</code>という名前で呼ぶと,<code>MyDogs</code>に属するモノたちを<code>{ }</code>を使って以下のように書くことができます.</p>
<p><span class="math display">\[\begin{align*}
MyDogs = &amp; \{ GoldenRetriever \\
         &amp;, BlackRetriever    \\
         &amp;, ShetlandSheepdog \\
         &amp;, StandardPoodle \\
         &amp;, StandardPoodle \}
\end{align*}\]</span></p>
<p>このとき,<code>GoldenRetriever</code>や,<code>ShetlandSheepdog</code>は<code>MyDogs</code>の<code>要素</code>であるといい,要素が特定の集合に属するとき,</p>
<p><span class="math display">\[ GoldenRetriever \in MyPets \]</span> の様に書きます. 要素に属さないことは <span class="math inline">\(Chihuahua \notin MyPet\)</span>と書きます.</p>
<p>Haskellにおいて,このようなデータ型を以下の様に定義することが可能です.
データ型の宣言は, <code>data</code>のあとに続いて,<code>データ型の名前(型構築子)</code>を書き,<code>=</code>の後ろにその<code>中身(コンストラクタ/データ構築子)</code>を書きます.
型構築子やデータ構築子は,大文字の英字で始めるのが規則です.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">MyDogs</span> <span class="ot">=</span> <span class="dt">GoldenRetriever</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">BlackRetriever</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">ShetlandSheepdog</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">StandardPoodle</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">StandardPoodle</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>            <span class="kw">deriving</span> <span class="dt">Show</span></span></code></pre></div>
<p>この様にそこに属する要素をすべて書き出す(列挙する)データ型を<code>列挙型</code>といいます.</p>
<div class="warn">
<p>ちなみに,大文字の英字で始まってさえいればUTF-8の文字や絵文字,記号は使用できるので,以下のような記述も可能ですが,あまりおすすめしません.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">My</span>🐶   <span class="ot">=</span> <span class="dt">P</span>ゴールデンレトリーバー</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">P</span>ブラックレトリーバー</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">P</span>シェットランドシープドッグ</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">P</span>スタンダードプードル</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>            <span class="op">|</span> <span class="dt">P</span>ビーグル</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>            <span class="kw">deriving</span> <span class="dt">Show</span></span></code></pre></div>
</div>
<p><code>deriving Show</code>はコンストラクタを文字列に変換する関する<code>show</code>を自動で導入するための記法です. 自分で定義することも可能ですが,詳細に関しては後ほど扱います.</p>
<p><code>deriving Show</code>を入れていない状態で</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="fu">print</span> <span class="dt">GoldenRetriever</span></span></code></pre></div>
<p>などを実行すると,以下のエラーがでますが,<code>deriving Show</code>を追加することで,表示することが可能となります.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>{</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> <span class="kw">data</span> <span class="dt">MyDogs</span> <span class="ot">=</span> <span class="dt">GoldenRetriever</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span>             <span class="op">|</span> <span class="dt">BlackRetriever</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> <span class="op">:</span>}</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="fu">print</span> <span class="dt">GoldenRetriever</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">17</span><span class="op">:</span><span class="dv">1</span><span class="op">:</span> <span class="fu">error</span><span class="op">:</span> [<span class="dt">GHC</span><span class="op">-</span><span class="dv">39999</span>]</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    • <span class="dt">No</span> <span class="kw">instance</span> for ‘<span class="dt">Show</span> <span class="dt">MyDogs</span>’ arising from a use <span class="kw">of</span> ‘print’</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    • <span class="dt">In</span> the expression<span class="op">:</span> <span class="fu">print</span> <span class="dt">GoldenRetriever</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>      <span class="dt">In</span> an equation for ‘it’<span class="op">:</span> it <span class="ot">=</span> <span class="fu">print</span> <span class="dt">GoldenRetriever</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>{</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> <span class="kw">data</span> <span class="dt">MyDogs</span> <span class="ot">=</span> <span class="dt">GoldenRetriever</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span>             <span class="op">|</span> <span class="dt">BlackRetriever</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span>             <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> <span class="op">:</span>}</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="fu">print</span> <span class="dt">GoldenRetriever</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a><span class="dt">GoldenRetriever</span></span></code></pre></div>
<p>なお, <code>print</code>の<a href="https://hackage.haskell.org/package/base-4.19.1.0/docs/src/System.IO.html#print">実装</a>は</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="fu">print</span><span class="ot"> ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="fu">print</span> x <span class="ot">=</span> <span class="fu">putStrLn</span> (<span class="fu">show</span> x)</span></code></pre></div>
<p>となっています.</p>
<p>要素が一つも属さない集合を<code>空集合</code>といい,記号<span class="math inline">\(\phi\)</span> または<span class="math inline">\(｛｝\)</span>によって表されます．
Haskellでは空集合を表すデータ型として<code>Data.Void</code>に定義された<code>Void</code>が存在します. データ型として<code>ボトム型</code>,記号では<code>⊥</code>で表される場合もあります.</p>
<p><code>Void</code>と同じ値を持たないデータ型は,コンストラクタを記述しないことで自分で実装することもできます. 例えば私が犬を今までに一匹もかったことがなければ, <span class="math display">\[ MyPet = \phi \]</span> となり,データ型としては以下のように定義されます. 値が存在しない空集合と対応していることが分かります.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Mypet</span></span></code></pre></div>
<p><code>Void</code>型は値が存在しないため実行することはできませんが,コンパイルを通すことはできます. ただし,あまり実用する機会はないので,以下の部分は興味がある人だけ開いて読んでください.</p>
<div class="note">
<ul>
<li>Voidの利用例 開く/閉じる</li>
</ul>
<p><code>Void</code>型を利用したコードを記述する方法はいくつかありますが, <code>undefined</code>した実装などが良く用いられます.
<code>undefined</code>は遅延評価を利用した値で,具体的な値や式の記述を省略することができます.
未実装の部分を含めたコードを取り敢えず部分的にコンパイルしてみたい場合や, エラー処理などで利用されます.</p>
<p>以下のコードはコンパイルは通りますが,実行時には<code>undefined, called</code>エラーが発生します.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="ot">somFunc ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>someFunc <span class="ot">=</span> <span class="fu">undefined</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> <span class="op">$</span> someFunc <span class="dv">1</span></span></code></pre></div>
<p><code>Void</code>型を利用するケースは非常に限定的ですが,値が無いことを明示的に示したい場合などに利用されます.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE EmptyCase #-}</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE EmptyDataDeriving #-}</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Empty</span> <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="ot">head&#39; ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> <span class="dt">Empty</span> <span class="ot">-&gt;</span>  a</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>head&#39; []     e <span class="ot">=</span> <span class="kw">case</span> e <span class="kw">of</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>head&#39; (x<span class="op">:</span>[]) _ <span class="ot">=</span> x</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>head&#39; (x<span class="op">:</span>xs) _ <span class="ot">=</span> x</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> <span class="op">$</span> head&#39; ([]<span class="ot">::</span>[<span class="dt">Int</span>]) <span class="fu">undefined</span> <span class="co">-- &gt;&gt;&gt; undefined, called at</span></span></code></pre></div>
<p>このコードでは, 明示的に<code>先頭の値</code>が存在しないことを<code>Empty</code>で表し,<code>EmptyDataDeriving</code>拡張で<code>undefined</code>を評価することでエラーを発生させています.</p>
<p>しかし,こういったパターンでは,以下の<code>error</code>による実装や,後に説明する<code>Maybe型</code>を利用するほうが一般的です.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">head&#39;&#39; ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span>  a</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>head&#39;&#39; []     <span class="ot">=</span> <span class="fu">error</span> <span class="st">&quot;Empty List&quot;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>head&#39;&#39; (x<span class="op">:</span>[]) <span class="ot">=</span> x</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>head&#39;&#39; (x<span class="op">:</span>xs) <span class="ot">=</span> x</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> <span class="op">$</span> head&#39;&#39; ([]<span class="ot">::</span>[<span class="dt">Int</span>]) <span class="co">-- practice: Empty List error, called at</span></span></code></pre></div>
</div>
<p>単一の要素だけが存在するデータ型として<code>Unit</code>型も準備されており,<code>()</code>のような空のタプルとして表されます.</p>
<p>集合の表記法には，外延的表記及び内包的表記という2通りが存在する．外延的表記とは，集合Sに含まれる要素を全て記述する方法で，x,yを要素とする集合を，
S={x,y}
と書く．集合には順番は関係ないため，{x,y}={y,z}である．また，一つの集合に同じ要素は2つ以上属することができず，{x,x}のような集合は定義できない．</p>
<p>内包的表記とは，その集合に何が属するのかを定義する方法で集合Sに属する要素の集合をｘとすると，ｘがどの集合の要素であるか，どのような条件を持つかなどによって表記する．xの属する集合をX，条件式p(x)とすると，内包的表記では
S={x│x∈ X,p(x)}
と書かれる．また，内包表記において，関数や定数を定義することも許されており，
関数をf[x]で表すと，
S={f(x)|x∈X,f(x)=x+1}
のように表記される．
条件の例として，R<sup>+を非負の実数としたとき，R</sup>+５以下の非負の実数を，以下のように書く．
{x|x∈R^+,x≤5}
集合には，集合が属することも可能で，集合SがTに属するときS∈ Tが成り立つ．
また，集合Sの要素を幾つか取り出した集合TをSの部分集合といい，
T⊂S
と表記される．
S={x,y,z}のとき，Sの部分集合は
{x},{x,y},{x,z},{z,y},{x,y,z},ϕ
となる．任意の集合Sに対して
ϕ⊂S
は成り立つ．
また，集合Sの部分集合全体の集合を冪集合といい，pow[S]または2^S と書く．
pow[{x,y,z}]={{x},{x,y},{x,z},{z,y},{x,y,z},ϕ}</p>
<h2 data-number="1.3" id="型注釈と関数"><span class="header-section-number">1.3</span> 型注釈と関数</h2>
<h3 data-number="1.3.1" id="内包表記"><span class="header-section-number">1.3.1</span> 内包表記</h3>
<h2 data-number="1.4" id="包含"><span class="header-section-number">1.4</span> 包含</h2>
<h2 data-number="1.5" id="積と和"><span class="header-section-number">1.5</span> 積と和</h2>
<h1 data-number="2" id="代数とクラス"><span class="header-section-number">2</span> 代数とクラス</h1>
<h2 data-number="2.1" id="マグマ"><span class="header-section-number">2.1</span> マグマ</h2>
<h2 data-number="2.2" id="半群"><span class="header-section-number">2.2</span> 半群</h2>
<h2 data-number="2.3" id="モノイド"><span class="header-section-number">2.3</span> モノイド</h2>
<h2 data-number="2.4" id="群"><span class="header-section-number">2.4</span> 群</h2>
<h2 data-number="2.5" id="リスト"><span class="header-section-number">2.5</span> リスト</h2>
<h2 data-number="2.6" id="ツリー"><span class="header-section-number">2.6</span> ツリー</h2>
<h2 data-number="2.7" id="ネットワーク"><span class="header-section-number">2.7</span> ネットワーク</h2>
<h1 data-number="3" id="手続き型haskell"><span class="header-section-number">3</span> 手続き型Haskell</h1>
<h1 data-number="4" id="圏論とhaskell"><span class="header-section-number">4</span> 圏論とHaskell</h1>
<h1 data-number="5" id="発展会計プログラム"><span class="header-section-number">5</span> 発展:会計プログラム</h1>
<p>yakagika</p>
]]></description>
    <pubDate>Fri, 18 Oct 2024 00:00:00 UT</pubDate>
    <guid>/lectures/iap5.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>代数プログラミング入門 Ch4 関数</title>
    <link>/lectures/iap4.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#関数" id="toc-関数"><span class="toc-section-number">1</span> 関数</a>
<ul>
<li><a href="#スクリプトファイルの実行" id="toc-スクリプトファイルの実行"><span class="toc-section-number">1.1</span> スクリプトファイルの実行</a></li>
<li><a href="#関数と演算子" id="toc-関数と演算子"><span class="toc-section-number">1.2</span> 関数と演算子</a>
<ul>
<li><a href="#結合性" id="toc-結合性"><span class="toc-section-number">1.2.1</span> 結合性</a></li>
</ul></li>
<li><a href="#分岐" id="toc-分岐"><span class="toc-section-number">1.3</span> 分岐</a>
<ul>
<li><a href="#パターンマッチ" id="toc-パターンマッチ"><span class="toc-section-number">1.3.1</span> パターンマッチ</a></li>
<li><a href="#ガード" id="toc-ガード"><span class="toc-section-number">1.3.2</span> ガード</a></li>
<li><a href="#case式" id="toc-case式"><span class="toc-section-number">1.3.3</span> case式</a></li>
<li><a href="#if式" id="toc-if式"><span class="toc-section-number">1.3.4</span> if式</a></li>
</ul></li>
<li><a href="#再帰" id="toc-再帰"><span class="toc-section-number">1.4</span> 再帰</a></li>
<li><a href="#ラムダ式" id="toc-ラムダ式"><span class="toc-section-number">1.5</span> ラムダ式</a></li>
<li><a href="#高階関数" id="toc-高階関数"><span class="toc-section-number">1.6</span> 高階関数</a></li>
<li><a href="#合成" id="toc-合成"><span class="toc-section-number">1.7</span> 合成</a></li>
<li><a href="#値の束縛" id="toc-値の束縛"><span class="toc-section-number">1.8</span> 値の束縛</a></li>
</ul></li>
</ul>
</div>
<h1 data-number="1" id="関数"><span class="header-section-number">1</span> 関数</h1>
<p>Haskellは関数型言語なので,関数の記述がプログラミングにおける花形です. この章ではHaskellの関数に関する記法を学びましょう.</p>
<h2 data-number="1.1" id="スクリプトファイルの実行"><span class="header-section-number">1.1</span> スクリプトファイルの実行</h2>
<div class="warn">
<p>ここから先は,コードが複数行に渡ることが多くなるので,ghciの利用をやめてスクリプトを書きます.</p>
<p><code>app</code> フォルダ内に <code>practice.hs</code>を作成しそこで事例の勉強をしましょう.</p>
</div>
<p><code>practice.hs</code> ファイルを作成したら,ファイルを以下のように記述しましょう.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Text</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;practice&quot;</span></span></code></pre></div>
<div class="warn">
<p><code>module XXX () where</code></p>
<p>という記述は,他のファイルからインポート可能なmodule化を行うための宣言です.
また,Stackでは,<strong>大文字で始まる<code>*.hs</code>ファイルは,moduleとして認識されます.</strong></p>
<p>したがって,一つのプロジェクトに複数の実行可能ファイルを生成する場合には,</p>
<p><code>module XXX () where</code></p>
<p>の記述をなくし, ファイル名を小文字ではじめる必要があります.</p>
<p>これは,<code>Hello World</code>のために編集した<code>Main.hs</code>も同様であるため,<code>Main.hs</code>を<code>hello.hs</code>に名前を変更し,ファイル内の <code>module Main (main) where</code>の記述も削除し,以下のように変更しましょう.</p>
<p>cf. <a href="https://www.reddit.com/r/haskell/comments/capuz7/multiple_executable_in_project/">他にもいくつかの方法があるようです</a></p>
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Lib</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> helloWorld</span></code></pre></div>
<p><code>package.yaml</code>の<code>executables:</code>を以下のように編集して<code>hello.hs</code>と<code>practice.hs</code>を実行可能ファイルとして登録します. <code>Data.Text</code>を利用するために,<code>dependencies:</code>以下に<code>- text</code>を追加しておきましょう.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="fu">dependencies</span><span class="kw">:</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> base &gt;= 4.7 &amp;&amp; &lt; 5</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> text</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="co">#ghc-options:</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="fu">library</span><span class="kw">:</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">source-dirs</span><span class="kw">:</span><span class="at"> src</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="fu">executables</span><span class="kw">:</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">hello</span><span class="kw">:</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">main</span><span class="kw">:</span><span class="at">                main.hs</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">source-dirs</span><span class="kw">:</span><span class="at">         app</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">ghc-options</span><span class="kw">:</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -threaded</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -rtsopts</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -with-rtsopts=-N</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">dependencies</span><span class="kw">:</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> hello-world</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">practice</span><span class="kw">:</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">main</span><span class="kw">:</span><span class="at">                practice.hs</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">source-dirs</span><span class="kw">:</span><span class="at">         app</span></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">ghc-options</span><span class="kw">:</span></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -threaded</span></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -rtsopts</span></span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -with-rtsopts=-N</span></span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">dependencies</span><span class="kw">:</span></span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> hello-world</span></span></code></pre></div>
<p><code>stack run practice</code> で<code>practice!</code>と表示されれば成功です.</p>
<p>これからスクリプトで実行していくにあたって,<code>practice.hs</code>の中身をもう少し詳しく見てみましょう.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Lib</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;practice!!&quot;</span></span></code></pre></div>
<p>haskellのプログラムを実行すると, <code>main関数</code>のみが実行されます.</p>
<p>Haskellは関数型言語なので,これから<code>import Lib</code>と<code>main</code>の間に関数を定義していき,<code>main</code>の中で実行していくことになります.</p>
<p>main 関数で行うことは関数として実行することになりますが,これから学習する通常の関数の定義で記述するのは今は難しいので,<code>do</code>記法を紹介します. main 関数の=以下に<code>do</code>と書くことで,do以下のインデントブロックに記述された内容が手続き型的に1行ずつ実行されます.</p>
<p>以下のプログラムでは, <code>"practice1"</code>,<code>"practice2"</code>,<code>"practice3"</code>の順に標準出力されます.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Lib</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">putStrLn</span> <span class="st">&quot;practice1&quot;</span> <span class="co">-- &gt;&gt;&gt; &quot;practice1&quot;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="fu">putStrLn</span> <span class="st">&quot;practice2&quot;</span> <span class="co">-- &gt;&gt;&gt; &quot;practice2&quot;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">putStrLn</span> <span class="st">&quot;practice3&quot;</span> <span class="co">-- &gt;&gt;&gt; &quot;practice3&quot;</span></span></code></pre></div>
<p><code>stack run practice</code>の結果を確認すると以下のようになります.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> stack <span class="ex">run</span> practice</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;practice1&quot;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;practice2&quot;</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;practice3&quot;</span></span></code></pre></div>
<p>また,ghciと異なって,出力結果が同じ画面に現れないので,
以降のコード例では, その行の結果をコメント内で<code>&gt;&gt;&gt;</code>に続けて書くこととします. コメント部分は,記述しなくても結果は変わらないので,省略しても構いません.</p>
<h2 data-number="1.2" id="関数と演算子"><span class="header-section-number">1.2</span> 関数と演算子</h2>
<p>関数型言語では関数を組み合わせてプログラムを書きます. 関数の正確な定義は後に譲るとして,ここでは取り敢えず｢特定のデータ型の値を受け取って,特定のデータ型の値を返すもの｣という定義にしましょう.このとき受け取る値を<strong>引数</strong>,返す値を<strong>返り値</strong>といいます.</p>
<p>Haskellでは,数学の記法と非常に近い方法で関数を定義します.
例えば,</p>
<p><span class="math display">\[
f : \mathbb{Z} \rightarrow \mathbb{Z} \\
f(x) = x + 1
\]</span></p>
<p>という,整数<code>x</code>を受け取って整数<code>x + 1</code>を返すだけの関数について考えましょう.</p>
<p>Haskellでは上の関数は以下のように定義されます.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">f ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>f x <span class="ot">=</span> x <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> f <span class="dv">4</span> <span class="co">-- &gt;&gt;&gt; 5</span></span></code></pre></div>
<p><code>()</code>の代わりにスペースを使う点以外は全く同じ書き方で, <code>=</code>の左側に関数名と引数,右側に返り値を書きます.
関数名は小文字の英字で始めれるというルールがあります.</p>
<p><code>f :: Int -&gt; Int</code>は型注釈であり,この<code>f</code>という関数が,引数に<code>Int</code>を取り,返り値として<code>Int</code>を返すということを指定しています.</p>
<p><code>do</code>以下の記述で, <code>f 4</code>の結果を確認しています. <code>print</code>は,文字列に変換可能な値を受取,標準出力する関数です. また <code>(f 4)</code>を省略して<code>$ f 4</code> としています.</p>
<p>引数は何個でも利用できます. 例えば2引数関数</p>
<p><span class="math display">\[ multiple(x,y) = x * y \]</span></p>
<p>は以下のように定義できます.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">multiple ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>multiple x y <span class="ot">=</span> x <span class="op">*</span> y</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>multiple <span class="dv">3</span> <span class="dv">4</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> multiple <span class="dv">3</span> <span class="dv">4</span> <span class="co">-- &gt;&gt;&gt; 12.0</span></span></code></pre></div>
<p>また,以下の記号を組み合わせて中置演算子名として利用することも可能です.</p>
<div class="note">
<p>~ ! # $ % &amp; * + = . / &lt; &gt; ? @   ^ | -</p>
</div>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">(.*) ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>x <span class="op">.*</span> y <span class="ot">=</span> x <span class="op">*</span> y</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="dv">3</span> <span class="op">.*</span> <span class="dv">4</span> <span class="co">-- &gt;&gt;&gt; 12.0</span></span></code></pre></div>
<p>絵文字などのUnicode記号も利用することができます.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>(✖)<span class="ot"> ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>x ✖ y <span class="ot">=</span> x <span class="op">*</span> y</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="dv">3</span> ✖ <span class="dv">4</span> <span class="co">-- &gt;&gt;&gt; 12.0</span></span></code></pre></div>
<p>記号を利用して関数を定義する場合には,定義時に<code>()</code> で囲うことで一般の関数のように定義することができます.
例えば, 乗算を新たに定義するとして,以下のように書くことができます.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ot">(.*) ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>(<span class="op">.*</span>) x y <span class="ot">=</span> x <span class="op">*</span> y</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="dv">3</span> <span class="op">.*</span> <span class="dv">4</span> <span class="co">-- &gt;&gt;&gt; 12</span></span></code></pre></div>
<p>前置の2引数関数も<code>``</code> (バッククオート)で囲むことで中置演算子として定義することができます.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>x <span class="ot">`multiple`</span> y <span class="ot">=</span> x <span class="op">*</span> y</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="dv">3</span> <span class="ot">`multiple `</span> <span class="dv">4</span> <span class="co">-- &gt;&gt;&gt; 12</span></span></code></pre></div>
<h3 data-number="1.2.1" id="結合性"><span class="header-section-number">1.2.1</span> 結合性</h3>
<p>先に述べたように異なる複数の演算子が連なっている式は, 演算子の優先順位に従って計算される順位が変わります.</p>
<p>例えば,<code>*</code> の優先順位は7で, <code>+</code> の優先順位は6なので,<code>2 * 3 + 3</code> という式は,</p>
<pre><code>   2 * 3  + 3
= (2 * 3) + 3
= 6 + 3
= 9</code></pre>
<p>と言う風に<code>*</code>が優先して計算されます.</p>
<p>では,同じ演算子が複数回連なっている場合にはどのような順序で計算されるのでしょうか? このルールを決めるのが <strong>結合性(Associativity)</strong> です.</p>
<div class="note">
<p>結合性には, <strong>左結合(Left-associative)</strong>, <strong>右結合(Right-associative)</strong>, <strong>非結合(Non-associative)</strong> の3種類があり,ユーザーが定義することができます.</p>
<ul>
<li><strong>左結合(Left-associative)</strong></li>
</ul>
<p>左結合の場合, 演算子は左から右へと評価されます. 例えば, <code>+</code> は左結合であり,式 <code>a + b + c</code> は <code>(a + b) + c</code> として評価されます</p>
<ul>
<li><strong>右結合(Right-associative)</strong></li>
</ul>
<p>右結合演算子の場合,演算子は右から左へと評価されます.例えば、<code>^</code>は右結合です。式 <code>a ^ b ^ c</code> は <code>a ^ (b ^ c)</code> として評価されます</p>
<ul>
<li><strong>非結合(Non-associative)</strong></li>
</ul>
<p>非結合演算子は,同じ式内で連続して使用することは許されていません. 非結合演算子の例としては,比較演算子（<code>&lt;</code>,<code>&gt;</code> など）があります.</p>
<p>式 <code>a &lt; b &lt; c</code> は Haskell では文法的に不正です. 比較を連鎖させる場合は,<code>a &lt; b &amp;&amp; b &lt; c</code>のように明確に分けて記述する必要があります.</p>
</div>
<p>ユーザーが作成した演算子の結合性を指定するには,右,左,非の順に<code>infixr</code>,<code>infixl</code>,<code>infix</code>宣言を利用します. いずれも, <code>infix(r/l/なし) 優先順位 記号</code> の順に書きます.</p>
<p>例えば先程作成した,<code>.*</code> を右結合の優先順位7で指定するには,以下のように書きます.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>x <span class="op">.*</span> y <span class="ot">=</span> x <span class="op">*</span> y</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">7</span> <span class="op">.*</span></span></code></pre></div>
<h2 data-number="1.3" id="分岐"><span class="header-section-number">1.3</span> 分岐</h2>
<p>関数型言語において,手続き型言語におけるIF文に相当するのが<strong>パターンマッチ</strong>と<strong>指示関数(特性関数)</strong>です.</p>
<h3 data-number="1.3.1" id="パターンマッチ"><span class="header-section-number">1.3.1</span> パターンマッチ</h3>
<p>パターンマッチに近い概念は既にフィボナッチ数の漸化式として出てきています.フィボナッチ数の漸化式は,以下のように表されます.</p>
<div class="note">
<p><span class="math display">\[ F_0 = 1 \]</span>
<span class="math display">\[ F_1 = 1 \]</span>
<span class="math display">\[ F_n = F_{n-1} + F_{n-2} (n &gt;= 2)  \]</span></p>
</div>
<p>この関数はPythonでは,以下のようにif文による分岐で記述されるのが一般的です.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> fib(x):</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> x <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">1</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> x <span class="op">==</span> <span class="dv">1</span>:</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">1</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> fib(x<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span> f(x<span class="op">-</span><span class="dv">2</span>)</span></code></pre></div>
<p>これをHaskellでパターンマッチを利用して以下のように定義することができます.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="ot">fib ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>fib <span class="dv">0</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>fib <span class="dv">1</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>fib n <span class="ot">=</span> fib (n <span class="op">-</span> <span class="dv">1</span>) <span class="op">+</span> fib (n <span class="op">-</span> <span class="dv">2</span>)</span></code></pre></div>
<p>このHaskellのコードは,</p>
<ul>
<li><p>関数<code>fib</code>の引数が<code>0</code>のときには返り値として<code>1</code>を返し,</p></li>
<li><p>関数<code>fib</code>の引数が<code>1</code>のときには返り値として<code>1</code>を返し,</p></li>
<li><p>関数<code>fib</code>の引数が<code>それ以外</code>のときには返り値として<code>fib (n - 1) + fib (n - 2)</code>を返します.</p></li>
</ul>
<p>この最後の<code>fib n = fib (n - 1) + fib (n - 2)</code>は再帰関数といって後ほど扱いますが,取り敢えず,特定の引数に対して特定の返り値を指定するこのような関数の記述方法を<strong>パターンマッチ</strong>といいます.</p>
<p>パターンマッチは,数値以外の引数に関しても適用可能であり,リストではリストの要素数に応じて使い分けることが多いです.</p>
<p>以下の,<code>strHead</code>関数は,リストの先頭の要素を文字列として表示する関数です.リストが空のときには<code>"Empty"</code>,要素が一つのときにはその要素,それ以外のときには先頭の要素を文字列にして返します.</p>
<p><code>show</code>の詳細は後ほど扱いますが,どの様に標準出力に表示するかを定めてあるデータ型を文字列に変換する関数です.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="ot">strHead ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>strHead []     <span class="ot">=</span> <span class="st">&quot;Empty&quot;</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>strHead [x]    <span class="ot">=</span> <span class="fu">show</span> x</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>strHead (x<span class="op">:</span>xs) <span class="ot">=</span> <span class="fu">show</span> x</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> strHead [] <span class="co">-- &gt;&gt;&gt; &quot;Empty&quot;</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> strHead [<span class="dv">3</span>,<span class="dv">4</span>] <span class="co">-- &gt;&gt;&gt; &quot;3&quot;</span></span></code></pre></div>
<p>パターンマッチはこのようにリスト<code>x:xs</code>の先頭部分<code>x</code>を指定するなどの利用法が可能です. 値の特定の部分を取得する用法として頻出なのがタプルを引数に取るパターンマッチです.</p>
<p>以下のコードは,3つ組のタプル<code>(x,y,z)</code>から指定した位置の値を取り出す関数<code>getFromTuple</code>です.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a>getFromTuple (x,y,z) <span class="dv">0</span> <span class="ot">=</span> x</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>getFromTuple (x,y,z) <span class="dv">1</span> <span class="ot">=</span> y</span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>getFromTuple (x,y,z) <span class="dv">2</span> <span class="ot">=</span> z</span></code></pre></div>
<p>このような用法は後に紹介する代数的データ型を扱う際にも頻出します.</p>
<h3 data-number="1.3.2" id="ガード"><span class="header-section-number">1.3.2</span> ガード</h3>
<p>数式における分岐は,指示関数を用いて行うこともできます.</p>
<div class="note">
<p><span class="math display">\[
fib(n) =
\begin{cases}
1, ~if~n = 0 \\
1, ~if~n = 1 \\
fib(n-1) + fib(n-2),~if~n &gt;=2
\end{cases}
\]</span></p>
</div>
<p>Haskellにおいて指示関数の記法に相当するのが<strong>ガード</strong>です.</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="ot">fib ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>fib n <span class="op">|</span> n <span class="op">==</span> <span class="dv">0</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>      <span class="op">|</span> n <span class="op">==</span> <span class="dv">1</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a>      <span class="op">|</span> n <span class="op">&gt;=</span> <span class="dv">2</span> <span class="ot">=</span> fib (n<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span> fib (n<span class="op">-</span><span class="dv">2</span>)</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> fib <span class="dv">5</span> <span class="co">-- &gt;&gt;&gt; 8</span></span></code></pre></div>
<p>特徴関数におけるifの位置が先に来ている以外は,基本的に対応関係にあるのがわかるかと思います.</p>
<h3 data-number="1.3.3" id="case式"><span class="header-section-number">1.3.3</span> case式</h3>
<p>パターンマッチをインデントブロックで実現する手法として<strong>case式</strong>があります. パターンマッチで判定する変数を<code>case 変数 of</code> のあとに指定して, それぞれのパターンとその結果を<code>-&gt;</code>でつなげる記法です. 指定のパターンに当てはまらないものすべて(これを<strong>ワイルドカード</strong>といいます)を指定するために<code>_</code>を利用します.</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="ot">fib ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>fib n <span class="ot">=</span> <span class="kw">case</span> n <span class="kw">of</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>        <span class="dv">0</span> <span class="ot">-&gt;</span> <span class="dv">1</span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a>        <span class="dv">1</span> <span class="ot">-&gt;</span> <span class="dv">1</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a>        _ <span class="ot">-&gt;</span> fib (n<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span> fib (n<span class="op">-</span><span class="dv">2</span>)</span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> fib <span class="dv">5</span> <span class="co">-- &gt;&gt;&gt; 8</span></span></code></pre></div>
<p>ワイルドカードはどのような値に対しても同じ値を返す関数を実装する場合などにも利用されます.</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a><span class="ot">return10 ::</span> a <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>return10 _ <span class="ot">=</span> <span class="dv">10</span></span></code></pre></div>
<h3 data-number="1.3.4" id="if式"><span class="header-section-number">1.3.4</span> if式</h3>
<p>Haskellにはifも存在します. <code>if 条件</code>に当てはまる場合の返り値を<code>then</code>で指定します. <code>else if</code> で条件を追加し, <code>else</code>でそれ以外のパターンを指定します. Pythonなどのif文と異なり,式なので<code>else</code>の場合の返り値も必ず指定する必要があります.</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="ot">fib ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a>fib n <span class="ot">=</span> <span class="kw">if</span> n <span class="op">==</span> <span class="dv">0</span> <span class="kw">then</span> <span class="dv">1</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a>        <span class="kw">else</span> <span class="kw">if</span> n <span class="op">==</span> <span class="dv">1</span> <span class="kw">then</span> <span class="dv">1</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a>        <span class="kw">else</span> fib (n<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span> fib (n<span class="op">-</span><span class="dv">2</span>)</span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> fib <span class="dv">5</span> <span class="co">-- &gt;&gt;&gt; 8</span></span></code></pre></div>
<p>Haskellではあまりif式は利用されませんが,
1行で書けるため,式の中で部分的に利用する場合に便利です.</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="ot">fib ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>fib n <span class="ot">=</span> <span class="kw">if</span> n <span class="op">==</span> <span class="dv">0</span> <span class="kw">then</span> <span class="dv">1</span> <span class="kw">else</span> <span class="kw">if</span> n <span class="op">==</span> <span class="dv">1</span> <span class="kw">then</span> <span class="dv">1</span> <span class="kw">else</span> fib (n<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span> fib (n<span class="op">-</span><span class="dv">2</span>)</span></code></pre></div>
<h2 data-number="1.4" id="再帰"><span class="header-section-number">1.4</span> 再帰</h2>
<p>Haskellにおいてもfor文に相当する記法は存在しますが,基本的にループは<strong>再帰</strong>によって実装されます.
再帰とは関数内で自分自身を呼び出すことです. これまで何度も登場していた<code>fib</code>も再帰を利用していましたが,
もう少し細かく見てみましょう.</p>
<p>以下のPythonにおけるfor文を事例に考えてみましょう.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> total(xs):</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a>    result <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> x <span class="kw">in</span> xs:</span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a>        result <span class="op">+=</span> x</span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> result</span></code></pre></div>
<p>これと同値なプログラムをHaskellで記述すると以下のようになります.</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="ot">total ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>total []  <span class="ot">=</span> <span class="dv">0</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>total [x] <span class="ot">=</span> x</span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a>total (x<span class="op">:</span>xs) <span class="ot">=</span> x <span class="op">+</span> (total xs)</span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> <span class="op">$</span> tatal [<span class="dv">1</span><span class="op">..</span><span class="dv">10</span>] <span class="co">-- &gt;&gt;&gt; 55</span></span></code></pre></div>
<p>このtotal関数は,与えられたリストが空の場合0を返し,要素が一つの場合その要素を返します.
要素が複数あるリストの場合には,先頭の要素<code>x</code>をそれ以降の要素<code>xs</code>の合計に足すという処理を行います.</p>
<p><code>total [1,2,3]</code>における処理の流れを追っていくと以下のようになります.</p>
<pre><code>total [1,2,3]
= 1 + (total [2,3])
= 1 + (2 + (total [3]))
= 1 + 2 + 3 + (total [])
= 1 + 2 + 3 + 0
= 6</code></pre>
<p>再帰の基本は,<strong>ループの終了状態</strong>をパターンマッチなどで指定して,そこに至るまでの状態の変化を再帰で記述することです.
処理がどのような状態になったら終わるのかを意識して記述しないと永遠に終了しないプログラムになるので注意しましょう.</p>
<div class="note">
<p>練習問題</p>
<ol type="1">
<li><p>リストの長さを返す<code>length2 :: [a] -&gt; Int</code> 関数を新しく実装してください.</p></li>
<li><p>与えられた整数のリストを引数にとり,要素毎にFizzBuzzを実行した結果を文字列のリストで返す関数
<code>fizzBuzz :: [Int] -&gt; [String]</code>実装してください.</p></li>
</ol>
</div>
<h2 data-number="1.5" id="ラムダ式"><span class="header-section-number">1.5</span> ラムダ式</h2>
<h2 data-number="1.6" id="高階関数"><span class="header-section-number">1.6</span> 高階関数</h2>
<p>map, fold, zip</p>
<h2 data-number="1.7" id="合成"><span class="header-section-number">1.7</span> 合成</h2>
<h2 data-number="1.8" id="値の束縛"><span class="header-section-number">1.8</span> 値の束縛</h2>
<p>Pythonなどの言語では,特定の変数に値を代入することができます.例えば,以下の最大値を求めるプログラムでは,変数<code>m</code>に最初の中身はリストの最初の要素が代入された後,次々とより大きな変数が代入されていきます. <code>変数</code>は名前の通り,次々とその値を変更していきます.</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a>xs <span class="op">=</span> [<span class="dv">3</span>,<span class="dv">5</span>,<span class="dv">2</span>,<span class="dv">4</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">1</span>]</span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a>m  <span class="op">=</span> xs[<span class="dv">0</span>]</span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> x <span class="kw">in</span> xs[<span class="dv">1</span>:]:</span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> x <span class="op">&gt;</span> m:</span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true" tabindex="-1"></a>        m <span class="op">=</span> x</span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;max value:&#39;</span>,m)</span></code></pre></div>
<p>一方でHaskellでは,変数に一度値を割り当てると,その変数の値を後から変更することができません. 変数に値を再代入するという操作が許されていないのです. この性質を<code>普遍性</code> （immutability）といいます. したがって,Haskellでは代入という言葉を使わず<code>束縛</code>といいます.
これは,通常の手続き型言語との大きな違いになります.</p>
<div class="warn">
<p>※1 値を変えられないなら｢変数じゃない｣じゃないという意見もありますが,数学において変数と呼ばれているものに近い概念だと考えましょう.</p>
<p>※2 実は後にでてくるStateやSTなどHaskellでも<code>再代入(破壊的代入)</code>を扱うことはできますが,特定の仕組みによって以下の純粋関数型言語の特徴を保っています.</p>
</div>
<p>例えば,以下のように一度値を束縛した変数に新しく変数を代入しようとすると<code>xという変数に複数の宣言をしている</code>というエラーが出ます(ghciでやる場合には,<code>:{ :}</code>を入れる必要があり余計にややこしいですね.すみません).</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>{</span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> x <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> x <span class="ot">=</span> <span class="dv">2</span></span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> <span class="op">:</span>}</span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">5</span><span class="op">:</span><span class="dv">1</span><span class="op">:</span> <span class="fu">error</span><span class="op">:</span></span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Multiple</span> declarations <span class="kw">of</span> ‘x’</span>
<span id="cb28-8"><a href="#cb28-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Declared</span> at<span class="op">:</span> <span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">4</span><span class="op">:</span><span class="dv">1</span></span>
<span id="cb28-9"><a href="#cb28-9" aria-hidden="true" tabindex="-1"></a>                 <span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">5</span><span class="op">:</span><span class="dv">1</span></span></code></pre></div>
<p>これは一見非常に不便なように感じられますが,これによって関数型プログラムでは,プログラムの安全性を高めています.</p>
<p>例えばPythonにおける以下のプログラムについて考えてみましょう.</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a>counter <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> count_plus(x):</span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">global</span> counter</span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true" tabindex="-1"></a>    counter <span class="op">+=</span> x</span>
<span id="cb29-6"><a href="#cb29-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> counter</span>
<span id="cb29-7"><a href="#cb29-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb29-8"><a href="#cb29-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(count(<span class="dv">1</span>))  <span class="co"># 出力: 1</span></span>
<span id="cb29-9"><a href="#cb29-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(count(<span class="dv">1</span>))  <span class="co"># 出力: 2</span></span></code></pre></div>
<p>このプログラムでは,<code>count()</code>関数に対して同じ引数1を与えているにもかかわらず,関数を呼び出すたびに,グローバル変数<code>counter</code>が変更されて,結果が変わります. 同じ関数を呼び出しても,結果が変わるために関数のみから,関数の挙動を把握することができません.</p>
<p>一方でHaskellでは,常に同じ関数は,同じ入力に対して,同じ返り値を返します. このような特性を<strong>参照透過性(Referential Transparency)</strong>と呼び,これによってプログラムの挙動を把握しやすくしています.</p>
<p>また,上記のPythonのプログラムは,関数を実行するたびに,関数の外にある,<code>counter</code>という変数の状態が変化しています. このような,関数が実行されることで単に値を返す以外に何らかの｢外部の状態を変化させる｣ことを関数の<strong>副作用(Side Effect)</strong>といいます. これは言い換えれば,関数の実行によるプログラム全体への影響が,関数以外の外部の状態に依存していることを意味しており,プログラムの挙動を予測することを難しくします. Haskell</p>
<p>参照透過性と副作用は相互に結びついた概念ですが,Haskellでは参照透過性を保ち,副作用を排除するようにプログラムが設計されています.
このように, <strong>｢参照透過性｣</strong> と <strong>｢副作用の排除｣</strong> の両方を持った関数型言語を <strong>純粋関数型言語</strong> と呼びHaskellの大きな特徴の一つです.</p>
<p>Haskellにおいて,変数への再代入が禁止されていることのメリットは理解していただけたかと思いますが,Haskellにも変数自体はあります.</p>
<p>トップレベル変数</p>
<p>ローカル変数
where
let</p>
]]></description>
    <pubDate>Fri, 18 Oct 2024 00:00:00 UT</pubDate>
    <guid>/lectures/iap4.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>代数プログラミング入門 Ch3 Haskellを使ってみよう</title>
    <link>/lectures/iap3.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#haskellを使ってみよう" id="toc-haskellを使ってみよう"><span class="toc-section-number">1</span> Haskellを使ってみよう</a>
<ul>
<li><a href="#ghci" id="toc-ghci"><span class="toc-section-number">1.1</span> ghci</a></li>
<li><a href="#終了" id="toc-終了"><span class="toc-section-number">1.2</span> 終了</a></li>
<li><a href="#コメントアウト" id="toc-コメントアウト"><span class="toc-section-number">1.3</span> コメントアウト</a></li>
<li><a href="#複数行モード" id="toc-複数行モード"><span class="toc-section-number">1.4</span> 複数行モード</a></li>
<li><a href="#データ型" id="toc-データ型"><span class="toc-section-number">1.5</span> データ型</a>
<ul>
<li><a href="#数値型" id="toc-数値型"><span class="toc-section-number">1.5.1</span> 数値型</a></li>
<li><a href="#リスト" id="toc-リスト"><span class="toc-section-number">1.5.2</span> リスト</a></li>
<li><a href="#タプル" id="toc-タプル"><span class="toc-section-number">1.5.3</span> タプル</a></li>
<li><a href="#文字列型" id="toc-文字列型"><span class="toc-section-number">1.5.4</span> 文字列型</a></li>
</ul></li>
<li><a href="#論理型bool" id="toc-論理型bool"><span class="toc-section-number">1.6</span> 論理型(Bool)</a></li>
</ul></li>
</ul>
</div>
<h1 data-number="1" id="haskellを使ってみよう"><span class="header-section-number">1</span> Haskellを使ってみよう</h1>
<h2 data-number="1.1" id="ghci"><span class="header-section-number">1.1</span> ghci</h2>
<p>前節では, Stackを利用した,プロジェクトの作成と実行に関して扱いましたが, Haskellにも対話環境が存在します.
<code>stack ghci</code>コマンドを打つことで, Haskellの対話環境が立ち上がります.</p>
<p>この節では,Haskellの基礎について学びますが,ghciの紹介も併せて,いくつかの基礎的な仕様については,ghci上で確認してみましょう.</p>
<h2 data-number="1.2" id="終了"><span class="header-section-number">1.2</span> 終了</h2>
<p>ghciではコマンドを<code>:</code>の後に入力します. ghciの終了コマンドは<code>:q</code>です.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> stack ghci</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span>:q</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Leaving</span> GHCi.</span></code></pre></div>
<h2 data-number="1.3" id="コメントアウト"><span class="header-section-number">1.3</span> コメントアウト</h2>
<p>Haslellではコメントアウトは <code>--</code> です. 複数行に渡る場合は <code>{- -}</code> で囲みます.</p>
<div class="warn">
<p>Haskellのプログラムを読んでいると <code>--|</code> や <code>--^</code> というタイプのコメントを良く見ますが, こちらはHaskellのドキュメント生成ライブラリにおいて, ドキュメント中に説明として記述するための記号です.
またコメント中に <code>&gt;&gt;&gt;</code> と記述することでテストが実装できるなどいろいろなものがありますが,本資料では扱いません.</p>
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="co">-- コメント</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="co">{- コメント-}</span></span></code></pre></div>
<h2 data-number="1.4" id="複数行モード"><span class="header-section-number">1.4</span> 複数行モード</h2>
<p>ghci上で複数行のプログラムを書く場合には <code>:{ :}</code> でプログラムを囲います. 例えば,先程のフィボナッチ数のプログラムをghci上で実行する場合,位置行ずつ定義すると,定義が更新されてき最後の <code>f n = f (n-1) + f (n-2)</code>のみが記憶されます. この場合,<code>n</code>は無限にマイナスに続いていくため,<code>Stack Overflow</code>エラーが表示されます.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> fib <span class="dv">0</span> <span class="ot">=</span> <span class="dv">1</span> <span class="co">-- fの定義が上書きされる</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> fib <span class="dv">1</span> <span class="ot">=</span> <span class="dv">1</span> <span class="co">-- fの定義が上書きされる</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> f n <span class="ot">=</span> f (n<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span> f (n<span class="op">-</span><span class="dv">2</span>)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> f <span class="dv">12</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="op">***</span> <span class="dt">Exception</span><span class="op">:</span> stack overflow</span></code></pre></div>
<p><code>:{ :}</code>で囲むことでひとまとまりの定義として認識されます.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>{</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span><span class="ot"> fib ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> fib <span class="dv">0</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> fib <span class="dv">1</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> fib n <span class="ot">=</span> fib (n<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span> fib (n<span class="op">-</span><span class="dv">2</span>)</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">|</span> <span class="op">:</span>}</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> fib <span class="dv">12</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="dv">233</span></span></code></pre></div>
<p>なお,スクリプトの場合は,<code>:{ :}</code>なしでそのまま改行すれば問題ありません.</p>
<h2 data-number="1.5" id="データ型"><span class="header-section-number">1.5</span> データ型</h2>
<p>型に関しては,かなり奥が深い,というよりHaskellの面白さは自分で型を作っていくことにあります. ただ,いきなりそれをすると,わけがわからなくなるのでまずは代数的データ型などには触れず以下の基礎的な型に関して説明します.</p>
<div class="note">
<ul>
<li>数値型
<ul>
<li>整数 (Int, Integer)</li>
<li>実数 (Float,Double)</li>
</ul></li>
<li>タプル</li>
<li>リスト (List)</li>
<li>文字,文字列 (Char,String,Text)</li>
<li>論理型(Bool)</li>
</ul>
</div>
<p>Haskellにおいて,値のデータ型はある程度自動推論されますが,特定のデータ型を明示したい場合には,値の後ろに<code>:: データ型</code>をつけます.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span><span class="ot"> ::</span> <span class="dt">Int</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span><span class="ot"> ::</span> <span class="dt">Double</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="fl">1.0</span></span></code></pre></div>
<p><code>ghci</code>において形の確認は<code>:t</code>あるいは<code>:type</code>コマンドの後ろに確認したいデータを入力することで行えます.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>t <span class="ch">&#39;c&#39;</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="ch">&#39;c&#39;</span><span class="ot"> ::</span> <span class="dt">Char</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> (<span class="dv">1</span><span class="ot"> ::</span> <span class="dt">Int</span>)</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>(<span class="dv">1</span><span class="ot"> ::</span> <span class="dt">Int</span>)<span class="ot"> ::</span> <span class="dt">Int</span></span></code></pre></div>
<h3 data-number="1.5.1" id="数値型"><span class="header-section-number">1.5.1</span> 数値型</h3>
<p>Haskellの基本的な数値型には以下の4つがあります.</p>
<table>
<thead>
<tr class="header">
<th>型</th>
<th>意味</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>Int</code></td>
<td>固定長整数型</td>
</tr>
<tr class="even">
<td><code>Integer</code></td>
<td>多倍長整数型</td>
</tr>
<tr class="odd">
<td><code>Float</code></td>
<td>単精度浮動小数型</td>
</tr>
<tr class="even">
<td><code>Double</code></td>
<td>倍精度浮動小数型</td>
</tr>
</tbody>
</table>
<p><code>Int</code>と<code>Integer</code>は<code>整数</code>, <code>Float</code>と<code>Double</code>は<code>実数</code>を表しています.</p>
<p><code>固定長/多倍長</code>, <code>単精度/倍精度</code> というのはどういう意味でしょうか?</p>
<p>コンピューターでは,データはすべて<code>0</code>と<code>1</code>のいずれかを表す<code>bit</code>の集まりによって表現されます. ちなみに<code>8bit</code>で<code>1byte</code>, <code>1024byte</code>で<code>1Kbyte</code>です.したがって,プログラミングで扱うデータに使用できるデータ量には制限があり,無限の長さの整数や少数を利用することはできません.</p>
<p>コンピューターの計算は主に中央演算処理装置(CPU)で行われますが,その計算過程でデータを一時的に記録するCPU内部の装置のことを汎用レジスタといい,現在では<code>64bit</code>以下の汎用レジスタを持った<code>64bit CPU</code>が良く利用されています.</p>
<p>現在一般的な<code>64bit CPU</code>においてHaskellは整数と小数を表すのに一般的に最大<code>64bit</code>の領域を確保します. したがって,整数では64bitで表せるデータ量(<code>-9223372036854775808 ~ 9223372036854775807</code>)を超えた整数を扱うことはできません.</p>
<p>ちなみにIntの最大値,最小値はghciで以下のように確認できます(
使用しているコンピューターによっては結果が変わる可能性があります).</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span><span class="ot"> minBound ::</span> <span class="dt">Int</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="op">-</span><span class="dv">9223372036854775808</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span><span class="ot"> maxBound ::</span> <span class="dt">Int</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="dv">9223372036854775807</span></span></code></pre></div>
<p>最大(小)値を超えるとオーバーフローします.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">9223372036854775807</span><span class="ot"> ::</span> <span class="dt">Int</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="dv">9223372036854775807</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> (<span class="dv">9223372036854775807</span> <span class="op">+</span> <span class="dv">1</span>)<span class="ot"> ::</span> <span class="dt">Int</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="op">-</span><span class="dv">9223372036854775808</span></span></code></pre></div>
<p>Haskellにおける数値型の基本的な演算子は以下のように定義されています. 実数と整数で挙動が異なるものがあるので注意が必要です.</p>
<p>演算子には優先順位が設定されており,数字が大きいものから順に適用されます(最小0,最大9).
また,式を<code>()</code>で囲むことで,その内部が優先的に計算されます.</p>
<p>また,<code>()</code>が式の最後に来る場合には<code>$</code>記号以下が<code>()</code>に囲まれているとみなすことができます.</p>
<table>
<thead>
<tr class="header">
<th>計算</th>
<th>記号</th>
<th>優先順</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>足し算</td>
<td><code>+</code></td>
<td>6</td>
</tr>
<tr class="even">
<td>引き算</td>
<td><code>-</code></td>
<td>6</td>
</tr>
<tr class="odd">
<td>掛け算</td>
<td><code>*</code></td>
<td>7</td>
</tr>
<tr class="even">
<td>割り算</td>
<td><code>/</code></td>
<td>7</td>
</tr>
<tr class="odd">
<td>冪乗(整数)</td>
<td><code>^</code></td>
<td>8</td>
</tr>
<tr class="even">
<td>冪乗(実数)</td>
<td><code>**</code></td>
<td>8</td>
</tr>
</tbody>
</table>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="dv">2</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">2</span> <span class="op">-</span> <span class="dv">1</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">3</span> <span class="op">*</span> <span class="dv">3</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="dv">9</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">9</span> <span class="op">/</span> <span class="dv">3</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="fl">3.0</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">3</span> <span class="op">^</span> <span class="dv">3</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="dv">27</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">3</span> <span class="op">**</span> <span class="dv">3</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a><span class="fl">27.0</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">3</span> <span class="op">^</span> (<span class="dv">1</span><span class="op">/</span><span class="dv">2</span>) <span class="co">-- エラー</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">7</span><span class="op">:</span><span class="dv">3</span><span class="op">:</span> <span class="fu">error</span><span class="op">:</span> [<span class="dt">GHC</span><span class="op">-</span><span class="dv">39999</span>]</span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">3</span> <span class="op">**</span> (<span class="dv">1</span><span class="op">/</span><span class="dv">2</span>)</span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a><span class="fl">1.7320508075688772</span></span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">2</span> <span class="op">*</span> <span class="dv">3</span> <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a><span class="dv">7</span></span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">2</span> <span class="op">*</span> (<span class="dv">3</span> <span class="op">+</span> <span class="dv">1</span>)</span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a><span class="dv">8</span></span>
<span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">2</span> <span class="op">*</span> <span class="op">$</span> <span class="dv">3</span> <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a><span class="dv">8</span></span></code></pre></div>
<p>これらは中置演算子として定義されていますが演算子を<code>()</code>で囲むことによって前置(逆ポーランド記法)で利用することができます.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> (<span class="op">+</span>) <span class="dv">3</span> <span class="dv">4</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="dv">7</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> (<span class="op">*</span>) ((<span class="op">+</span>) <span class="dv">3</span> <span class="dv">4</span>) <span class="dv">2</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="dv">14</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> (<span class="op">*</span>) <span class="dv">2</span> <span class="op">$</span> (<span class="op">+</span>) <span class="dv">3</span> <span class="dv">4</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="dv">14</span></span></code></pre></div>
<p>また, 2引数関数として定義された前置の演算子は <code>``</code> (バッククオート)で囲むことで, 中置演算子として利用できます.</p>
<table>
<thead>
<tr class="header">
<th>計算</th>
<th>記号</th>
<th>優先順</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>整数除算</td>
<td><code>div</code></td>
<td>7</td>
</tr>
<tr class="even">
<td>剰余</td>
<td><code>mod</code></td>
<td>6</td>
</tr>
</tbody>
</table>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">5</span> <span class="op">/</span><span class="dv">2</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="fl">2.5</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="fu">div</span> <span class="dv">5</span> <span class="dv">2</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="dv">2</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">5</span> <span class="ot">`div`</span> <span class="dv">2</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="dv">2</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">5</span> <span class="ot">`mod`</span> <span class="dv">2</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span></span></code></pre></div>
<div class="note">
<p>練習問題</p>
</div>
<h3 data-number="1.5.2" id="リスト"><span class="header-section-number">1.5.2</span> リスト</h3>
<p>複数のデータをまとめる方法はいくつかありますが,データを1列に並べた<code>List</code>型は代表的なデータ型です. Haskellには配列もありますが,Listの方がよく利用されます.
リストの操作にはここで扱う以外にも<code>リスト内包表記</code>や<code>高階関数</code>など様々なものがありますが,ここでは最も基本的ないくつかの機能のみに絞って,後ほど詳細を扱います.</p>
<p>Listはリストリテラル<code>[]</code>の中に要素を記入して,<code>,</code>(コンマ)で区切ることで宣言できます.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span></code></pre></div>
<p><code>[]</code>のみで空のリストが生成されます.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> []</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>[]</span></code></pre></div>
<p>注意点として,HaskellはPythonなどの言語のように<code>ダックタイピング</code>が許されていないため異なるデータを単一のリストの要素に含めることはできません.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="fl">2.0</span>,<span class="dv">3</span>]</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>[<span class="fl">1.0</span>,<span class="fl">2.0</span>,<span class="fl">3.0</span>]</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span><span class="ot">::</span><span class="dt">Int</span>,<span class="dv">2</span><span class="ot">::</span><span class="dt">Double</span>,<span class="dv">3</span><span class="ot">::</span><span class="dt">Int</span>]</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">22</span><span class="op">:</span><span class="dv">9</span><span class="op">:</span> <span class="fu">error</span><span class="op">:</span> [<span class="dt">GHC</span><span class="op">-</span><span class="dv">83865</span>]</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>    • <span class="dt">Couldn&#39;t</span> match expected <span class="kw">type</span> ‘<span class="dt">Int</span>’ with actual <span class="kw">type</span> ‘<span class="dt">Double</span>’</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>    • <span class="dt">In</span> the expression<span class="op">:</span> <span class="dv">2</span><span class="ot"> ::</span> <span class="dt">Double</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>      <span class="dt">In</span> the expression<span class="op">:</span> [<span class="dv">1</span><span class="ot"> ::</span> <span class="dt">Int</span>, <span class="dv">2</span><span class="ot"> ::</span> <span class="dt">Double</span>, <span class="dv">3</span><span class="ot"> ::</span> <span class="dt">Int</span>]</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>      <span class="dt">In</span> an equation for ‘it’<span class="op">:</span> it <span class="ot">=</span> [<span class="dv">1</span><span class="ot"> ::</span> <span class="dt">Int</span>, <span class="dv">2</span><span class="ot"> ::</span> <span class="dt">Double</span>, <span class="dv">3</span><span class="ot"> ::</span> <span class="dt">Int</span>]</span></code></pre></div>
<p>リストのデータ型は,要素のデータ型をリストリテラル<code>[]</code>で囲んだ形で表されます.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> ([<span class="dv">1</span><span class="ot">::</span><span class="dt">Int</span>,<span class="dv">2</span><span class="ot">::</span><span class="dt">Int</span>])</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>([<span class="dv">1</span><span class="ot">::</span><span class="dt">Int</span>,<span class="dv">2</span><span class="ot">::</span><span class="dt">Int</span>])<span class="ot"> ::</span> [<span class="dt">Int</span>]</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> [<span class="ch">&#39;a&#39;</span>,<span class="ch">&#39;b&#39;</span>,<span class="ch">&#39;c&#39;</span>]</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>[<span class="ch">&#39;a&#39;</span>,<span class="ch">&#39;b&#39;</span>,<span class="ch">&#39;c&#39;</span>]<span class="ot"> ::</span> [<span class="dt">Char</span>]</span></code></pre></div>
<p>また,リストは<code>先頭要素 : リスト</code> によって宣言することも可能です. <code>:</code>を<code>cons 構築子</code>といいます. 構築子の意味については後ほど<code>代数的データ型</code>の説明とともに扱います.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">:</span> []</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>]</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">:</span> [<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">:</span> <span class="dv">2</span> <span class="op">:</span> [<span class="dv">3</span>]</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span></code></pre></div>
<p>リストの要素のインデックスによる取得は <code>!!</code>演算子を用いて<code>xs !! インデックス</code>の形で行います. インデックスは0から始まります. インデックスが超過した場合はエラーとなります.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>] <span class="op">!!</span> <span class="dv">0</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>] <span class="op">!!</span> <span class="dv">1</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a><span class="dv">2</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>] <span class="op">!!</span> <span class="dv">2</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a><span class="dv">3</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>] <span class="op">!!</span> <span class="dv">3</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a><span class="op">***</span> <span class="dt">Exception</span><span class="op">:</span> <span class="op">Prelude.!!:</span> <span class="fu">index</span> too large</span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a><span class="dt">CallStack</span> (from <span class="dt">HasCallStack</span>)<span class="op">:</span></span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a>  <span class="fu">error</span>, called at libraries<span class="op">/</span>base<span class="op">/</span><span class="dt">GHC</span><span class="op">/</span>List.hs<span class="op">:</span><span class="dv">1366</span><span class="op">:</span><span class="dv">14</span> <span class="kw">in</span> base<span class="op">:</span><span class="dt">GHC.List</span></span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a>  tooLarge, called at libraries<span class="op">/</span>base<span class="op">/</span><span class="dt">GHC</span><span class="op">/</span>List.hs<span class="op">:</span><span class="dv">1376</span><span class="op">:</span><span class="dv">50</span> <span class="kw">in</span> base<span class="op">:</span><span class="dt">GHC.List</span></span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true" tabindex="-1"></a>  <span class="op">!!</span>, called at <span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">37</span><span class="op">:</span><span class="dv">9</span> <span class="kw">in</span> interactive<span class="op">:</span><span class="dt">Ghci15</span></span></code></pre></div>
<p><code>m~n</code>までの連続したリストを生成する場合には,<code>[m..n]</code>と記述します.これを<code>数列表記</code>といいます.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span> <span class="op">..</span> <span class="dv">10</span>]</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>,<span class="dv">10</span>]</span></code></pre></div>
<p>コンマと併用することで階差数列などを表現することも可能です.</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="dv">3</span><span class="op">..</span><span class="dv">10</span>]</span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>,<span class="dv">3</span>,<span class="dv">5</span>,<span class="dv">7</span>,<span class="dv">9</span>]</span></code></pre></div>
<p><code>[x..]</code>と終わりを指定しないことで,無限数列も作成できます. ghciでそのまま実行すると永遠に表示が止まりません(<code>ctrl+C</code>で止まります). ここでは,<code>[1,3,5,...]</code>の10番目と100番目の値を取り出してみます.</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="dv">3</span><span class="op">..</span>] <span class="op">!!</span> <span class="dv">10</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a><span class="dv">21</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>,<span class="dv">3</span><span class="op">..</span>] <span class="op">!!</span> <span class="dv">100</span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a><span class="dv">201</span></span></code></pre></div>
<div class="warn">
<p>Pythonなど言語では,値が宣言/生成されたタイミングでコンピュータがその値を評価する<code>正格(strict)評価</code>が一般的です. 一方HaskellはDefaultでは,実際にその値が呼び出された際に評価される<code>遅延(lazy)評価</code>を採用しており,それによりこのような無限の値を実現することができます.
正格評価で無限に値が続くリストを生成した場合, 生成した時点で永遠に計算が終わりませんが,遅延評価では無限のリストの中の具体的な値を利用するさいにその値が利用されます.</p>
<p>この機能はHaskellの大きな特徴の一つですが,一方でメモリリークや,速度の低下の原因になることがあります. したがって,ある程度大きなプログラムを書く場合には,正格評価と,遅延評価を明示的に切り替えることが推奨されています.</p>
<p>最初は気にする必要はありませんが,パッケージなどの提供するHaskellのデータ型には,strictなものとlazyなものの両方が用意されていることが多いので,違いを覚えておくと後々役に立ちます.</p>
</div>
<p>Haskellでリストを扱う際には,暗黙に<code>x</code>などの単一のアルファベットが要素,<code>xs</code>などの複数形がリストを表している場合が多く<code>x:xs</code>などと記述してリストの最初の要素と残りのリストを表します.</p>
<p>詳細は後ほど扱いますが,<code>束縛</code>されたリストから<code>パターンマッチ</code>によって値を取り出す場合によく利用されます.</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> x<span class="op">:</span>xs <span class="ot">=</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> x</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> xs</span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a>[<span class="dv">2</span>,<span class="dv">3</span>]</span></code></pre></div>
<p>リスト同士の結合は<code>++</code>演算子によって行います.</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [<span class="dv">1</span>] <span class="op">++</span> [<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span></code></pre></div>
<p>リストの長さは<code>length</code> 関数で取得できます.</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="fu">length</span> []</span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a><span class="dv">0</span></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="fu">length</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a><span class="dv">3</span></span></code></pre></div>
<h3 data-number="1.5.3" id="タプル"><span class="header-section-number">1.5.3</span> タプル</h3>
<p>Haskellではデータの組み合わせを表す方法として,後述の<code>直積型</code>がありますが,タプルも良く利用されます.タプルを利用するには要素を<code>()</code>(丸括弧)で囲い,<code>,</code>(コンマ)で区切ります. 要素数に制限はありません.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> (<span class="dv">1</span>,<span class="dv">2</span>)</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a>(<span class="dv">1</span>,<span class="dv">2</span>)</span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> (<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>)</span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a>(<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>)</span></code></pre></div>
<p>リストと同様に要素数の異なるタプルや,要素のデータ型の異なるタプルは別のデータ型として区別され,同一のリストなどに入れることはできません.</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> [(<span class="dv">1</span>,<span class="dv">2</span>),(<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>)]</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">60</span><span class="op">:</span><span class="dv">8</span><span class="op">:</span> <span class="fu">error</span><span class="op">:</span> [<span class="dt">GHC</span><span class="op">-</span><span class="dv">83865</span>]</span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a>    • <span class="dt">Couldn&#39;t</span> match expected <span class="kw">type</span><span class="op">:</span> (a, b)</span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a>                  with actual <span class="kw">type</span><span class="op">:</span> (a0, b0, c0)</span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a>    • <span class="dt">In</span> the expression<span class="op">:</span> (<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>)</span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true" tabindex="-1"></a>      <span class="dt">In</span> the expression<span class="op">:</span> [(<span class="dv">1</span>, <span class="dv">2</span>), (<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>)]</span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true" tabindex="-1"></a>      <span class="dt">In</span> an equation for ‘it’<span class="op">:</span> it <span class="ot">=</span> [(<span class="dv">1</span>, <span class="dv">2</span>), (<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>)]</span>
<span id="cb25-9"><a href="#cb25-9" aria-hidden="true" tabindex="-1"></a>    • <span class="dt">Relevant</span> bindings include</span>
<span id="cb25-10"><a href="#cb25-10" aria-hidden="true" tabindex="-1"></a><span class="ot">        it ::</span> [(a, b)] (bound at <span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">60</span><span class="op">:</span><span class="dv">1</span>)</span></code></pre></div>
<p>要素数が2つのリストに限定して,要素を取り出す関数 <code>fst</code>,<code>snd</code>が用意されていますが,値の取り出しはパターンマッチがよく利用されます.</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="fu">fst</span> (<span class="dv">1</span>,<span class="dv">2</span>)</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="fu">snd</span> (<span class="dv">1</span>,<span class="dv">2</span>)</span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a><span class="dv">2</span></span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> (x,y) <span class="ot">=</span> (<span class="dv">1</span>,<span class="dv">2</span>)</span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> x</span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span></span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> y</span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true" tabindex="-1"></a><span class="dv">2</span></span></code></pre></div>
<h3 data-number="1.5.4" id="文字列型"><span class="header-section-number">1.5.4</span> 文字列型</h3>
<p>Haskellの文字列型は歴史的に少し複雑な状況になっており,Preludeにおける<code>String</code>型の使い勝手があまり良くありません. なので, <code>text</code>パッケージの提供する<code>Text</code>型を利用するのが一般的です. なので,後ほどTextを導入しますが,一旦String型に関して見てみましょう.</p>
<p>Haskellでは1文字を表す <code>Char</code>型と文字列を表す<code>String</code>型を区別し,<code>Char</code>は<code>''</code>(シングルクォーテーション),<code>String</code>は<code>""</code>(ダブルクオーテーション)で囲みます.</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="ch">&#39;c&#39;</span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a><span class="ch">&#39;c&#39;</span></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>t <span class="ch">&#39;c&#39;</span></span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a><span class="ch">&#39;c&#39;</span><span class="ot"> ::</span> <span class="dt">Char</span></span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="st">&quot;String&quot;</span></span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>t <span class="st">&quot;String&quot;</span></span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;String&quot;</span><span class="ot"> ::</span> <span class="dt">String</span></span></code></pre></div>
<p>Haskellにおける文字型<code>Char</code>のリスト<code>[Char]</code>の別名(<code>型シノニム</code>)です. <code>型シノニム</code>は型に別の名前をつけることで,形の用途などを区別する機能です.
型シノニムは,以下のように, <code>type 型シノニム = 元のデータ型</code>という形で定義します.</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">String</span> <span class="ot">=</span> [<span class="dt">Char</span>]</span></code></pre></div>
<p>したがって,String型にはListの演算が適用できます.</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="st">&quot;String&quot;</span> <span class="op">!!</span> <span class="dv">1</span></span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a><span class="ch">&#39;t&#39;</span></span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="ch">&#39;!&#39;</span> <span class="op">:</span> <span class="st">&quot;String&quot;</span></span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;!String&quot;</span></span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="st">&quot;!!&quot;</span> <span class="op">++</span>  <span class="st">&quot;String&quot;</span></span>
<span id="cb29-6"><a href="#cb29-6" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;!!String&quot;</span></span>
<span id="cb29-7"><a href="#cb29-7" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="fu">length</span> <span class="st">&quot;String&quot;</span></span>
<span id="cb29-8"><a href="#cb29-8" aria-hidden="true" tabindex="-1"></a><span class="dv">6</span></span></code></pre></div>
<p>ただし,<code>String</code>型は非効率なため,現在ではあまり使われておらず,基本的に<code>text</code>パッケージの提供する <code>Data.Text</code>を利用することが推奨されています.</p>
<p><code>package.yaml</code>の<code>dependencies</code>に以下のように<code>text</code>を追加します.</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="fu">dependencies</span><span class="kw">:</span></span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> base &gt;= 4.7 &amp;&amp; &lt; 5</span></span>
<span id="cb30-3"><a href="#cb30-3" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> text</span></span></code></pre></div>
<p>スクリプトの最初に以下のように,記述することで文字列リテラル<code>""</code>が<code>Text</code>型に利用できるようになります.</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Text</span></span></code></pre></div>
<p><code>{-# LANGUAGE OverloadedStrings #-}</code>は言語拡張を表しており,Haskellの処理系に機能を追加する宣言です. <code>OverloadedString</code>は文字列リテラルをTextなどの他の文字列を表すデータ型に適用できるようにする拡張です.</p>
<p><code>ghci</code>で言語拡張を導入するには,<code>:set</code>に続けて <code>-X言語拡張名</code>を記述します.</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> <span class="st">&quot;Text&quot;</span></span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;Text&quot;</span><span class="ot"> ::</span> <span class="dt">String</span></span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XOverloadedStrings</span></span>
<span id="cb32-4"><a href="#cb32-4" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="kw">import</span> <span class="dt">Data.Text</span></span>
<span id="cb32-5"><a href="#cb32-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> <span class="st">&quot;Text&quot;</span></span>
<span id="cb32-6"><a href="#cb32-6" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;Text&quot;</span><span class="ot"> ::</span> <span class="dt">Data.String.IsString</span> a <span class="ot">=&gt;</span> a</span></code></pre></div>
<h2 data-number="1.6" id="論理型bool"><span class="header-section-number">1.6</span> 論理型(Bool)</h2>
<p>それが正しいか間違っているか判別できる文を<strong>命題</strong>といいます. 命題の結果を表すものとして真(正しい),偽(間違っている)という値を用います. 真と偽を併せて<strong>真偽値</strong>といいます.</p>
<p>例えば,<code>1は2より大きい</code>という命題は,間違っているので<strong>偽</strong>となります. <code>人間は必ず死ぬ</code>という命題は,今のところ不老不死の人間がいないので<strong>真</strong>です.</p>
<p>真偽値を表すデータ型として<code>Bool</code>があります. <code>Bool</code>は<code>True</code>(真),<code>False</code>(偽)のいずれかです.</p>
<p>Haskellには命題の判定を行う<code>関係演算子</code>として,以下のようなものが準備されています.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">記号</th>
<th style="text-align: center;">意味</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>&gt;</code></td>
<td style="text-align: center;">より大きい</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&gt;=</code></td>
<td style="text-align: center;">以上</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>&lt;</code></td>
<td style="text-align: center;">より小さい</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&lt;=</code></td>
<td style="text-align: center;">以下</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>==</code></td>
<td style="text-align: center;">等しい</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>/=</code></td>
<td style="text-align: center;">等しくない</td>
</tr>
</tbody>
</table>
<p>数値などの大小関係を調べるときには,比較演算子 <code>&gt;</code>,<code>&gt;=</code>.<code>&lt;</code>,<code>&lt;=</code>を利用します. 演算子の左右に数値を書くと,結果に応じて真偽値が帰ってきます.</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">&gt;</span> <span class="dv">2</span></span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a><span class="dt">False</span></span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">&lt;</span> <span class="fl">1.5</span></span>
<span id="cb33-4"><a href="#cb33-4" aria-hidden="true" tabindex="-1"></a><span class="dt">True</span></span></code></pre></div>
<p>値が等しいか/等しくないかを判定するには,<code>==</code>と<code>!=</code>を利用します.</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">4</span> <span class="op">==</span> <span class="dv">4</span></span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true" tabindex="-1"></a><span class="dt">True</span></span>
<span id="cb34-3"><a href="#cb34-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="st">&quot;cat&quot;</span> <span class="op">/=</span> <span class="st">&quot;cat&quot;</span></span>
<span id="cb34-4"><a href="#cb34-4" aria-hidden="true" tabindex="-1"></a><span class="dt">False</span></span></code></pre></div>
<p><code>True</code> や <code>False</code>などの<code>Bool</code>値は, <code>AND</code>(かつ),<code>OR</code>(または),<code>NOT</code>という演算で計算することができます(<code>XOR</code>というのもあるが省略).
HaskellではAND は <code>&amp;&amp;</code>, OR は <code>||</code>, NOT は <code>not</code> という演算子が提供されています.</p>
<p>A,Bが命題だとして,<code>A &amp;&amp; B</code>は両方<code>True</code>のときに,<code>True</code>となります. <code>A || B</code>は片方どちらかが<code>True</code>のときに<code>True</code>となります.</p>
<p>例えば,</p>
<ul>
<li><p><code>1は2より大きい かつ 2は0より大きい</code> という命題は,<code>2は0より大きい</code>は正しいですが,<code>1は2より大きい</code>が間違っているので全体として,<code>False</code>です.</p></li>
<li><p><code>ネコは哺乳類である または ネコは鳥類である</code>という命題は <code>ネコは鳥類である</code>が間違っていますが全体としては<code>True</code>です.</p></li>
</ul>
<p>演算の結果は,それぞれ以下のようになります. これを真偽値表といいます. ここでは,最低限の例だけを紹介しますが,より深く理解したい人は論理学などの講義を受講しましょう.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">命題Aの値</th>
<th style="text-align: center;">Bの値</th>
<th style="text-align: center;"><code>A &amp;&amp; B</code></th>
<th style="text-align: center;"><code>A || B</code></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">True</td>
<td style="text-align: center;">False</td>
<td style="text-align: center;">True</td>
<td style="text-align: center;">True</td>
</tr>
<tr class="even">
<td style="text-align: center;">False</td>
<td style="text-align: center;">True</td>
<td style="text-align: center;">False</td>
<td style="text-align: center;">True</td>
</tr>
<tr class="odd">
<td style="text-align: center;">True</td>
<td style="text-align: center;">False</td>
<td style="text-align: center;">False</td>
<td style="text-align: center;">True</td>
</tr>
<tr class="even">
<td style="text-align: center;">False</td>
<td style="text-align: center;">False</td>
<td style="text-align: center;">False</td>
<td style="text-align: center;">True</td>
</tr>
</tbody>
</table>
<div class="sourceCode" id="cb35"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">&gt;</span> <span class="dv">2</span></span>
<span id="cb35-2"><a href="#cb35-2" aria-hidden="true" tabindex="-1"></a><span class="dt">False</span></span>
<span id="cb35-3"><a href="#cb35-3" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">2</span> <span class="op">&gt;</span> <span class="dv">0</span></span>
<span id="cb35-4"><a href="#cb35-4" aria-hidden="true" tabindex="-1"></a><span class="dt">True</span></span>
<span id="cb35-5"><a href="#cb35-5" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">&gt;</span> <span class="dv">2</span> <span class="op">&amp;&amp;</span> <span class="dv">2</span> <span class="op">&gt;</span> <span class="dv">0</span></span>
<span id="cb35-6"><a href="#cb35-6" aria-hidden="true" tabindex="-1"></a><span class="dt">False</span></span>
<span id="cb35-7"><a href="#cb35-7" aria-hidden="true" tabindex="-1"></a>ghci<span class="op">&gt;</span> <span class="dv">1</span> <span class="op">&gt;</span> <span class="dv">2</span> <span class="op">||</span> <span class="dv">2</span> <span class="op">&gt;</span> <span class="dv">0</span></span>
<span id="cb35-8"><a href="#cb35-8" aria-hidden="true" tabindex="-1"></a><span class="dt">True</span></span></code></pre></div>
<p><code>not</code> は命題の否定を表しており <code>True</code>が<code>False</code>,<code>False</code>が<code>True</code>になります.<code>not</code>は命題の前に書きます.</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span> 1 <span class="op">&gt;</span> 2</span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true" tabindex="-1"></a><span class="ex">False</span></span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span> not <span class="er">(</span><span class="ex">1</span> <span class="op">&gt;</span> 2<span class="kw">)</span></span>
<span id="cb36-4"><a href="#cb36-4" aria-hidden="true" tabindex="-1"></a><span class="ex">True</span></span></code></pre></div>
<div class="note">
<p><strong>演習</strong></p>
<p>ある値が偶数かどうかは,2で割った余りが0かどうかを判定することで判定できます.
<code>x=101</code>,<code>y=202</code>として, 以下の命題の真偽をPythonで計算してください.</p>
<ul>
<li>xが偶数</li>
<li>yが偶数</li>
<li>xが偶数かつyが偶数</li>
<li>xが偶数またはyが偶数</li>
<li>x + y が奇数</li>
</ul>
</div>
]]></description>
    <pubDate>Fri, 18 Oct 2024 00:00:00 UT</pubDate>
    <guid>/lectures/iap3.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>代数プログラミング入門 Ch2 環境構築</title>
    <link>/lectures/iap2.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#haskellセットアップ" id="toc-haskellセットアップ"><span class="toc-section-number">1</span> Haskellセットアップ</a>
<ul>
<li><a href="#環境構築" id="toc-環境構築"><span class="toc-section-number">1.1</span> 環境構築</a></li>
</ul></li>
</ul>
</div>
<h1 data-number="1" id="haskellセットアップ"><span class="header-section-number">1</span> Haskellセットアップ</h1>
<p>言語の特徴や意味を色々と説明してきましたが,習うより慣れろということで,そろそろHaskellを利用してみましょう.Haskell Haskellの開発環境には様々なものがありますが,現在良く使われているものとして<a href="https://www.haskell.org/cabal/">Cabal</a> + <a href="https://www.haskell.org/ghcup/">GHCup</a>あるいは<a href="https://docs.haskellstack.org/en/stable/">Stack</a>の2つがあります. CabalとStackはプロジェクトのビルドを行うためのアーキテクチャであり,GHCupは周辺環境のインストーラーです. どちらで開発を行ってもいいのですが,本稿ではStackを用います.</p>
<p>Stackは現在のHaskellの標準的なコンパイラである,Glasgow Haskell Compiler（GHC）に基づいたビルド環境である.(cabalもGHCですが). 他の言語と同様にHaskellでも様々なpackage(ライブラリ)を利用するのですが,package毎に他のpackageや,GHC(Haskellのコンパイラ)との依存関係があります.それらを使用するpackage事に調整することが人間には至難の業であり, 特定のpackageの依存関係を満たせば他のpackageの依存関係が満たされなくなるという試行錯誤を永遠と繰り返すことを<code>cabal hell</code>などと呼びます.</p>
<p>Stackにはそのようなpackage間の依存関係を満たすバージョンの組み合わせ(resolver)を利用して,自動で解決してくれる機能があり,Haskellでのブロジェクトの開発を容易にしてくれます. resolverの集まりを<a href="https://www.stackage.org">Stackage</a>といい, resolverで扱われるpackageをまとめて管理するレポジトリのことを<a href="https://hackage.haskell.org">Hackage</a>といいます.</p>
<h2 data-number="1.1" id="環境構築"><span class="header-section-number">1.1</span> 環境構築</h2>
<p>Stackの環境構築の方法は基本的には,<a href="https://docs.haskellstack.org/en/stable/">公式サイト</a>に従ってください. 使用しているOS毎にインストール方法が異なるので注意しましょう特にMacユーザーはIntel Mac と Apple silliconでインストール方法が異なるので正しい方を選択するようにしてください.</p>
<p>インストールが終わったら,以下のコマンドでstackを最新版にupgradeします.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">stack</span> upgrade</span></code></pre></div>
<p>次に,開発用のディレクトリに移動して,開発用のプロジェクトを作成していきます. Stackでは,新しいプロジェクトの作成は<code>stack new [project-name]</code> コマンドで行われます. <code>stack new [project-name]</code>コマンドで新しいプロジェクトを作成すると,必要なファイルが含まれた<code>[project-name]</code>という名前のディレクトリが作成されます. 作成されたディレクトリに移動しましょう.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> ls</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> stack <span class="ex">new</span> hello-world</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> ls</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ex">hello-world</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> cd <span class="ex">hello-world</span></span></code></pre></div>
<p>作成されたディレクトリの構成は以下のようになっています.</p>
<pre><code>.
├── app
│    └── Main.hs
├── src
│    └── Lib.hs
├── test
│   └── Spec.hs
├── hello-world.cabal
├── package.yaml
└── stack.yaml
</code></pre>
<p>それぞれの用途と意味は以下のとおりです.</p>
<div class="note">
<ul>
<li><p><code>app</code>フォルダの中には,実行可能ファイル用のプログラム</p>
<ul>
<li><p>プロジェクトをbuildすると,<code>Main.hs</code>から実行可能ファイル(executable)が生成されます</p></li>
<li><p>この後,<code>Main.hs</code>の中身を編集して<code>Hello World</code>用のプログラムを作成します.</p></li>
</ul></li>
<li><p><code>src</code>フォルダ内には,実行可能ファイルで利用するライブラリが格納されます.</p>
<ul>
<li>ここに自分で開発したライブラリを含めることも可能です.</li>
</ul></li>
<li><p><code>package.yaml</code>ファイルはプロジェクトの設定を記入するファイルです.</p>
<ul>
<li><p>Hackageなどの外部のライブラリを利用する場合には,<code>package.yaml</code>内の<code>dependencies:</code>部分に,使用したいライブラリを記述します.</p></li>
<li><p>Stackは<code>stack setup</code>コマンドによって,package.yaml内に記述されたライブラリの依存関係を解決するresolverを自動で選択しますが,
自分で使いたいresolverを<code>package.yaml</code>内の<code>resolver:</code>に続けて書くことで,指定することも可能です.</p></li>
<li><p>その他実行可能ファイルの設定や,コンパイルオプションなどを指定することができます.</p></li>
<li><p><code>package.yaml</code> の設定に従って,プロジェクトの設定ファイル <code>test.cabal</code>が自動で作成されます.
基本的にstackを使っている範囲では<code>.cabal</code>ファイルを自分で編集することはありません.</p></li>
</ul></li>
<li><p><code>stack.yaml</code>ファイルは,stackの設定を記入します</p>
<ul>
<li>resolverに含まれないライブラリ(自分のGitHub上にあるライブラリなど)を指定する,あるいはあえてresolverとは異なるバージョンを利用するときなどには
<code>extra-deps:</code>に続けて,使用したいライブラリのレポジトリやバージョンを明示します.</li>
</ul></li>
</ul>
</div>
<p>これらの利用法は,今後ライブラリを使用し始めたときに改めて学習すれば大丈夫ですが,取り敢えずプログラムを作成してきましょう.</p>
<p><code>app/Main.hs</code>をテキストエディタで開いて編集していきましょう.</p>
<p><code>app/Main.hs</code>を開くと,以下のようなファイル担っているかと思います. Haskellのプログラムをコンパイルした実行可能ファイルでは,<code>main =</code> 内の記述が実行されます.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Main</span> (main) <span class="kw">where</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Lib</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> someFunc</span></code></pre></div>
<p>現在は<code>sumFunc</code>という関数が実行されます. <code>sumFunc</code>は <code>import Lib</code> の記述によって, <code>src/Lib.hs</code>からimportされています. <code>src/Lib.hs</code>を開くと,</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Lib</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    ( someFunc</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    ) <span class="kw">where</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="ot">someFunc ::</span> <span class="dt">IO</span> ()</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>someFunc <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;someFunc&quot;</span></span></code></pre></div>
<p>という風に<code>someFunc</code>が定義されています. プログラム内の <code>someFunc :: IO ()</code> は<code>someFunc</code>の型注釈です. <code>IO ()</code> というのは,標準入出力 <code>IO</code> において, アクション <code>()</code> を実行するという意味ですが,ここではそれぞれの詳細は省きます. <code>putStrLn</code> は文字列を引数にとり,標準入出力<code>IO</code>に受け取った文字列を出力するというアクション<code>()</code>を返す関数であり,ここでは,<code>"someFunc"</code>という文字列が出力されます. この<code>"someFunc"</code> 部分を <code>"Hello World"</code>に書き換えれば,Hello Worldは実行できます.関数の定義はこのあと徐々に扱いますが, someFuncは,引数を取らないので関数というよりは実際には値です.</p>
<p><code>Lib.hs</code> に<code>helloWorld</code>と出力する値<code>helloWorld</code>を追加し,全体を以下のように書き換えましょう.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Lib</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    ( someFunc</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    , helloWorld</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    ) <span class="kw">where</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="ot">someFunc ::</span> <span class="dt">IO</span> ()</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>someFunc <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;someFunc&quot;</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="ot">helloWorld ::</span> <span class="dt">IO</span> ()</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>helloWorld <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;Hello World&quot;</span></span></code></pre></div>
<p><code>module Lib () where</code> はモジュール宣言で,他のプログラムから<code>import Lib</code>で,<code>src/Lib.hs</code>内に定義された関数や値などの内 <code>()</code>内に記述されたものを読み込むことができるようにします.
作成した値<code>helloWorld</code>を<code>()</code>内に<code>helloWorld</code>を追加することを忘れないようにしましょう.</p>
<p>併せて <code>app/Main.hs</code> を書き換えて,作成した<code>helloWorld</code>を実行しましょう.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Main</span> (main) <span class="kw">where</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Lib</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> helloWorld</span></code></pre></div>
<p>このプログラムをコンパイルして得られる実行可能ファイルの名前などは,<code>package.yaml</code>内で定義されています.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="fu">ghc-options</span><span class="kw">:</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Wall</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Wcompat</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Widentities</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Wincomplete-record-updates</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Wincomplete-uni-patterns</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Wmissing-export-lists</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Wmissing-home-modules</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Wpartial-fields</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> -Wredundant-constraints</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="fu">library</span><span class="kw">:</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">source-dirs</span><span class="kw">:</span><span class="at"> src</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a><span class="fu">executables</span><span class="kw">:</span></span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">hello-world-exe</span><span class="kw">:</span></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">main</span><span class="kw">:</span><span class="at">                Main.hs</span></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">source-dirs</span><span class="kw">:</span><span class="at">         app</span></span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">ghc-options</span><span class="kw">:</span></span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -threaded</span></span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -rtsopts</span></span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -with-rtsopts=-N</span></span>
<span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">dependencies</span><span class="kw">:</span></span>
<span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> hello-world</span></span></code></pre></div>
<p><code>ghc-options:</code> 以下の項目はghcのコンパイルオプションであり,<code>W</code>で始まるいずれのオプションもコンパイル時の<code>Warning</code>を追加するものである. これらのコンパイルオプションがあると,プログラムの品質を高めることができるが, 利用していてWarningが邪魔に感じた場合は,すべて削除しても問題ありません(
その場合は以下のように,<code>ghc-options:</code>部分を<code>#</code>でコメントアウトしてください.)</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co">#ghc-options:</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="fu">library</span><span class="kw">:</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">source-dirs</span><span class="kw">:</span><span class="at"> src</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="fu">executables</span><span class="kw">:</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">hello-world-exe</span><span class="kw">:</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">main</span><span class="kw">:</span><span class="at">                Main.hs</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">source-dirs</span><span class="kw">:</span><span class="at">         app</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">ghc-options</span><span class="kw">:</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -threaded</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -rtsopts</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -with-rtsopts=-N</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">dependencies</span><span class="kw">:</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> hello-world</span></span></code></pre></div>
<p>特に,本講義資料では,品質よりも分かりやすさを優先してできるだけシンプルな実装を紹介する他,事例としてあえて間違ったコードを入力する場面も存在する. そのままサンプルを入力すると多数のWarningが表示されることになるので,以下の説明中で登場する出力結果ではこれらのオプションはすべて切った状態のものとなっている点に留意していただきたい.</p>
<p><code>library:</code>以下の記述で,利用するライブラリのPATH,<code>executables:</code>以下の記述で実行可能ファイルについて記述されています. ここでは, executableとして’app’フォルダ内にある’Main.hs’が’hello-world-exe’という名称でコンパイルされることが書かれています.<code>ghc-options:</code>以下は,コンパイル時のオプションを設定していますが,ここでは詳細は省略します.</p>
<p><code>Main.hs</code>以外のファイルをここに追加すれば,いくらでも実行可能ファイルは増やすことができます.</p>
<p><code>hello-world-exe</code>部分をもっと短い名前に変更することも可能です.なお生成される実行可能ファイルはMacでは<code>hello-world-exe</code>,Windowsでは<code>hello-world-exe.exe</code>になるので注意してください.</p>
<p>それでは,以下のコマンドでこのプロジェクトをbuildして,実行してみましょう.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ex">stack</span> build</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="ex">stack</span> exec hello-world-exe</span></code></pre></div>
<p><code>stack build</code>のあと,プログラムにミスがなければ以下のように出力されるはずです(一部省略しています).</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> stack build</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="ex">hello-world</span><span class="op">&gt;</span> build <span class="er">(</span><span class="ex">lib</span> + exe<span class="kw">)</span> <span class="ex">with</span> ghc-9.6.4</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Preprocessing</span> library for hello-world-0.1.0.0..</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="ex">Building</span> library for hello-world-0.1.0.0..</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="ex">[1</span> of 2] Compiling Lib [Source file changed]</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="ex">Preprocessing</span> executable <span class="st">&#39;hello-world-exe&#39;</span> for hello-world-0.1.0.0..</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="ex">Building</span> executable <span class="st">&#39;hello-world-exe&#39;</span> for hello-world-0.1.0.0..</span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="ex">[1</span> of 2] Compiling Main [Source file changed]</span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a><span class="ex">[3</span> of 3] Linking .stack-work/dist/x86_64-osx/ghc-9.6.4/build/hello-world-exe/hello-world-exe [Objects changed]</span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a><span class="ex">hello-world</span><span class="op">&gt;</span> copy/register</span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="ex">Registering</span> library for hello-world-0.1.0.0..</span></code></pre></div>
<p>どこかで,タイプミスなどがあると例えば以下のようなエラーが表示される可能性もあります(一部省略しています).</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ex">hello-world</span><span class="op">&gt;</span> build <span class="er">(</span><span class="ex">lib</span> + exe<span class="kw">)</span> <span class="ex">with</span> ghc-9.6.4</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="ex">Preprocessing</span> library for hello-world-0.1.0.0..</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Building</span> library for hello-world-0.1.0.0..</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="ex">Preprocessing</span> executable <span class="st">&#39;hello-world-exe&#39;</span> for hello-world-0.1.0.0..</span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="ex">Building</span> executable <span class="st">&#39;hello-world-exe&#39;</span> for hello-world-0.1.0.0..</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="ex">[1</span> of 2] Compiling Main [Source file changed]</span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a><span class="ex">/Users/akagi/Documents/Programs/Haskell/blog/hello-world/app/Main.hs:6:8:</span> error: <span class="pp">[</span><span class="ss">GHC</span><span class="pp">-</span><span class="ss">88464</span><span class="pp">]</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>    <span class="ex">Variable</span> not in scope: hellWorld :: IO <span class="er">(</span><span class="kw">)</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>    <span class="ex">Suggested</span> fix: Perhaps use ‘helloWorld’ <span class="er">(</span><span class="ex">imported</span> from Lib<span class="kw">)</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a>  <span class="kw">|</span></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span> <span class="kw">|</span> <span class="ex">main</span> = hellWorld</span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>  <span class="kw">|</span>        <span class="ex">^^^^^^^^^</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a><span class="ex">Error:</span> <span class="pp">[</span><span class="ss">S</span><span class="pp">-</span><span class="ss">7282</span><span class="pp">]</span></span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a>       <span class="ex">Stack</span> failed to execute the build plan.</span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a>       <span class="ex">While</span> executing the build plan, Stack encountered the error:</span>
<span id="cb12-19"><a href="#cb12-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-20"><a href="#cb12-20" aria-hidden="true" tabindex="-1"></a>       <span class="ex">[S-7011]</span></span>
<span id="cb12-21"><a href="#cb12-21" aria-hidden="true" tabindex="-1"></a>       <span class="ex">While</span> building package hello-world-0.1.0.0</span>
<span id="cb12-22"><a href="#cb12-22" aria-hidden="true" tabindex="-1"></a>       <span class="ex">Process</span> exited with code: ExitFailure 1</span></code></pre></div>
<p>上のエラーでは, <code>Main.hs</code>の6行目で使用されている,<code>hellWorld</code>が定義されていないという意味になります.
<code>helloWorld</code>と<code>o</code>を追加して正しい名称にしたあともう一度 <code>stack build</code>をしてみましょう.</p>
<p><code>stack exec hello-world-exe</code>の後,<code>Hello World</code>と出力されていれば成功です.</p>
<p>なお,build と exec を併せて一つのコマンド<code>stack run</code> で代替することも可能です.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> stack run hello-world-exe</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="ex">hello-world</span><span class="op">&gt;</span> build <span class="er">(</span><span class="ex">lib</span> + exe<span class="kw">)</span> <span class="ex">with</span> ghc-9.6.4</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Preprocessing</span> library for hello-world-0.1.0.0..</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="ex">Building</span> library for hello-world-0.1.0.0..</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="ex">Preprocessing</span> executable <span class="st">&#39;hello-world-exe&#39;</span> for hello-world-0.1.0.0..</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="ex">Building</span> executable <span class="st">&#39;hello-world-exe&#39;</span> for hello-world-0.1.0.0..</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="ex">hello-world</span><span class="op">&gt;</span> copy/register</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="ex">Registering</span> library for hello-world-0.1.0.0..</span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World</span></code></pre></div>
]]></description>
    <pubDate>Fri, 18 Oct 2024 00:00:00 UT</pubDate>
    <guid>/lectures/iap2.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>代数プログラミング入門 Ch1 イントロダクション</title>
    <link>/lectures/iap1.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#はじめに" id="toc-はじめに"><span class="toc-section-number">1</span> はじめに</a>
<ul>
<li><a href="#本資料の読み方" id="toc-本資料の読み方"><span class="toc-section-number">1.1</span> 本資料の読み方</a></li>
<li><a href="#haskellとは" id="toc-haskellとは"><span class="toc-section-number">1.2</span> Haskellとは</a></li>
<li><a href="#関数型言語の雰囲気" id="toc-関数型言語の雰囲気"><span class="toc-section-number">1.3</span> 関数型言語の雰囲気</a></li>
<li><a href="#関数型だと何が嬉しいのか" id="toc-関数型だと何が嬉しいのか"><span class="toc-section-number">1.4</span> 関数型だと何が嬉しいのか</a></li>
<li><a href="#設計も関数型で" id="toc-設計も関数型で"><span class="toc-section-number">1.5</span> 設計も関数型で</a>
<ul>
<li><a href="#雑談なんでhaskell" id="toc-雑談なんでhaskell"><span class="toc-section-number">1.5.1</span> 雑談:なんでHaskell?</a></li>
</ul></li>
</ul></li>
</ul>
</div>
<p>(執筆準備中)</p>
<p>代数の基礎と,代数による仕様記述,Haskellの基礎に関して書いていく予定です.
現在執筆中のため, 構成及び内容が今後変わります.</p>
<h1 data-number="1" id="はじめに"><span class="header-section-number">1</span> はじめに</h1>
<p>本資料は,正規の大学の科目ではなく, 学内での学生,教員の勉強会において使用する予定のものとなります. したがって,講義形式で作成しますが,通常の講義よりはかなり緩めの記述,内容が含まれます.</p>
<p>本講義では,関数型プログラミング言語Haskellの基礎,使用法,及び設計に関して扱います.
想定する履修者はPythonやJavaScriptなどの手続き型言語の使用経験はあるが,関数型言語を利用したことがない大学学部生です. 関数型言語の特徴を説明する際に手続き型言語の例としてPythonでの記述が出てきますが,Pythonの文法等に関しては既知のものとして扱います.(こちらはもとも官庁用の報告書として執筆したものを(大幅に)改変したものですので,もともとの資料ではVBAやJavaを事例として用いていました.)</p>
<p>また,本講義では代数学を利用したプログラミングの設計に関する方法論も扱います.集合論や代数学に関する知識は前提とせず,初歩から扱いますので,数学に関する前提知識は特に必要ありません. なお,本講義は集合論や代数学の習得を目的としているわけではないので,これらに関してはかなり簡略化した説明になります.専門的に数学を学びたい方向けの講義ではないことを理解したうえで受講してください.</p>
<p>一方で,CLIの操作やディレクトリの概念,ソフトウェアのインストール,テキストエディタの設定などの基本的なPC操作に関しては,扱いません. それらが分からない方は,それらを自分で学習するか,それらを扱っている講義を履修してから受講することをおすすめします.</p>
<h2 data-number="1.1" id="本資料の読み方"><span class="header-section-number">1.1</span> 本資料の読み方</h2>
<p>(執筆中)</p>
<h2 data-number="1.2" id="haskellとは"><span class="header-section-number">1.2</span> Haskellとは</h2>
<p><a href="https://www.haskell.org"><code>Haskell</code></a>は,1987年に生まれた<strong>静的型付けの純粋関数型言語</strong>です. Haskellには,様々な特徴がありますが,本講義では,特に代数的データ型による,代数的なプログラミングに焦点をあてて,代数的な仕様記述とHaskellの関連を中心に議論します.</p>
<p>Haskellがどんな言語で,どのようなメリットがあるのか,という話は今後本講義でも扱いますが,ここでは深入りしません. 取り敢えず,どのような言語かを細かく説明する前に,関数型言語の雰囲気を掴んでもらおうと思います.</p>
<h2 data-number="1.3" id="関数型言語の雰囲気"><span class="header-section-number">1.3</span> 関数型言語の雰囲気</h2>
<p>HaskellはLispやOCamlなどと同じ関数型言語です.関数型言語は関数によってプログラムを構築していく点にありますが,近年ではこのスタイルは関数型言語の専売特許というわけではなくなりつつあり,関数で書くことの特別さは,薄れつつあります. なので,ここでは,関数型言語の細かい機能について見る前に,関数型言語の考え方について,手続き型言語との違いという観点で見ていきましょう.</p>
<p>関数型言語でプログラミングををするとは,<strong>｢それが何か｣</strong>を分解して書いていくことです.
関数型プログラミングが宣言的であると言われる所以はそこにあります.手続き型言語が,｢何をどうするのか｣という手続きを書くのにたいして,｢欲しいものはなにか｣を宣言します.</p>
<p>こちらの(Haskell界隈では)有名な<a href="https://bartoszmilewski.com/2014/11/04/category-the-essence-of-composition/">ブログ</a>では,関数型言語の考え方について以下のように説明しています.</p>
<blockquote>
<p>Functional programmers have a peculiar way of approaching problems. They start by asking very Zen-like questions. For instance, when designing an interactive program, they would ask: What is interaction? When implementing Conway’s Game of Life, they would probably ponder about the meaning of life.</p>
</blockquote>
<ul>
<li>翻訳(DeepL大先生)</li>
</ul>
<blockquote>
<p>関数型プログラマーは問題への取り組み方が独特だ. 禅問答のような質問から始めるのだ.例えば,インタラクティブなプログラムを設計するとき,彼らは「インタラクションとは何か?コンウェイの「人生ゲーム」を実装するとき,彼らはおそらく人生の意味について熟考するだろう.</p>
</blockquote>
<p>手続き型プログラミングと関数型プログラミングの違いは色々とありますが,取り敢えずここでは,この文章に習って</p>
<ul>
<li>関数型プログラミング: <strong>｢それが何か｣</strong>を問い,<strong>｢それが何か｣</strong>をプログラムする.</li>
</ul>
<p>という観点に注目します. 例として以下の｢ウサギの問題｣について考えてみましょう.</p>
<div class="note">
<p><strong>ウサギの問題</strong></p>
<ul>
<li><p>1つがいのウサギは,生まれてから2ヶ月後から毎月1つがいずつのウサギを産む</p></li>
<li><p>ウサギが死ぬことはない</p></li>
<li><p>この条件の下で,生まれたばかりの1つがいのウサギは1年の間に何つがいのウサギになるか</p></li>
</ul>
</div>
<p>これについて,取り敢えず12ヶ月までのつがいの数をプログラムを用いて計算してみましょう.</p>
<p>まずは手続き型の考え方で数を数えてみます. 手続き型言語的には,｢ウサギのつがいの数｣を｢どのように求めるのかという手続き｣をプログラムに記述します.</p>
<div class="note">
<details>
<summary>
note
</summary>
<p>学生にプログラミングを教えているとこれくらいのプログラムは,for文,if文,代入などの概念をちらっと読んだだけで簡単にできる人もいれば,数時間教えてもできない人もいます.これが何によって異なるのかというのは,長年の謎で,教育の難しいところです.</p>
<p>しかも,プログラムを教える人間は大抵前者なので,教師も学生も何が分からないのか分からないという事態によくなってしまいますね.</p>
<p>しかし,大抵の場合後者の人に話を聞いていくと,そもそもこの手続きを日本語であっても書けないという人が多いようです. なので,本当に苦労するタイプの人は,パワーポイントでウサギの絵を並べてルールにのっとってウサギが増えていく様子を小学生に教える日本語資料を作ってというような作業を一緒にすることになります.</p>
これを書きながらこういった学生が実は関数型なら簡単だったりしないだろうか,と考えていますが,楽観的に過ぎるだろうなという予感がしています.
</details>
</div>
<p>いろいろな方法がありますが手続き型言語っぽいフィボナッチ数の数え方を一つ考えると,例えば</p>
<div class="note">
<ul>
<li><p>つがいは,新生ウサギ(0ヶ月)→子供ウサギ(1ヶ月)→大人うさぎ(2ヶ月)の順で変化する</p></li>
<li><p>大人うさぎのつがいは毎月1つの新生うさぎのつがいを産む</p></li>
<li><p>0ヶ月の新生うさぎの(こどもが産めない),子供ウサギ,大人うさぎの数を記録する</p>
<ul>
<li>新生 1</li>
<li>子供 0</li>
<li>大人 0</li>
</ul></li>
<li><p>1月たつと</p>
<ul>
<li>大人と同じ数だけ新生が生まれる</li>
<li>子供が大人になる</li>
<li>新生が子供になる</li>
</ul></li>
<li><p>これを12ヶ月繰り返す</p></li>
</ul>
</div>
<p>というように｢何がどうなる｣という｢手順｣を書いた説明になるかと思います.
授業では大抵,これをフローチャートに書き直させて,フローチャートをプログラムに直すという作業をさせますが,そこは省略します.</p>
<p>これをPythonのプログラムにすると以下のようになり,結果は<code>233</code>となります.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 初期化</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>months <span class="op">=</span> <span class="dv">12</span>  <span class="co"># シミュレートする月数</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="co">#1ヶ月目の状態</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>new_born_pairs <span class="op">=</span> <span class="dv">0</span> <span class="co">#新生のつがいの数</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>young_pairs <span class="op">=</span> <span class="dv">1</span>  <span class="co"># 子供のつがいの数</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>mature_pairs <span class="op">=</span> <span class="dv">0</span>  <span class="co"># 大人のつがいの数</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="co"># 各月におけるうさぎのつがいの数をシミュレート</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> month <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>, months <span class="op">+</span> <span class="dv">1</span>):</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 大人と同じ数だけ新生が生まれる</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    new_born_pairs <span class="op">=</span> mature_pairs</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 子供が大人になる</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>    mature_pairs <span class="op">+=</span> young_pairs</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 新生が子供になる</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    young_pairs <span class="op">=</span> new_born_pairs</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a><span class="co"># 成熟したつがいと若いつがいの合計</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>total_pairs <span class="op">=</span> mature_pairs <span class="op">+</span> young_pairs</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(total_pairs)</span></code></pre></div>
<p>こういった考え方が,いわゆる手続き型的な考え方とプログラミングの方法になります.</p>
<p>では,関数型の考え方とはどのようなものでしょうか. 先ほど引用したように,関数型では,それが何かを考えます.つまり,ここで問われている｢つがいの数｣を抽象化して,その特徴を記述するわけですね.</p>
<p>特定の数がなにかのルールに基づいて段々と増えていくというときに,それを並べてみて,法則性を探るということが一般的に行われます.これは,高校数学で扱う漸化式の考え方ですね.</p>
<p>月ごとのつがいの数を,並べてみると以下のようになります. そして,その増え方を計算してみると一定のルールに基づいていることが分かります.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">月</th>
<th style="text-align: center;">つがいの数</th>
<th style="text-align: center;">計算</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">2</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">1 + 1</td>
</tr>
<tr class="even">
<td style="text-align: center;">3</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">1 + 2</td>
</tr>
<tr class="odd">
<td style="text-align: center;">4</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">2 + 3</td>
</tr>
<tr class="even">
<td style="text-align: center;">5</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">3 + 5</td>
</tr>
<tr class="odd">
<td style="text-align: center;">6</td>
<td style="text-align: center;">13</td>
<td style="text-align: center;">5 + 8</td>
</tr>
<tr class="even">
<td style="text-align: center;">7</td>
<td style="text-align: center;">21</td>
<td style="text-align: center;">8 + 13</td>
</tr>
<tr class="odd">
<td style="text-align: center;">8</td>
<td style="text-align: center;">34</td>
<td style="text-align: center;">13 + 21</td>
</tr>
<tr class="even">
<td style="text-align: center;">9</td>
<td style="text-align: center;">55</td>
<td style="text-align: center;">21 + 34</td>
</tr>
<tr class="odd">
<td style="text-align: center;">10</td>
<td style="text-align: center;">89</td>
<td style="text-align: center;">34 + 55</td>
</tr>
<tr class="even">
<td style="text-align: center;">11</td>
<td style="text-align: center;">144</td>
<td style="text-align: center;">55 + 89</td>
</tr>
<tr class="odd">
<td style="text-align: center;">12</td>
<td style="text-align: center;">233</td>
<td style="text-align: center;">89 + 144</td>
</tr>
</tbody>
</table>
<p>実はこのウサギのつがいの合計どの月でもは,1,1,2,3,5,8という風に前々月と前月のつがいの合計になることが知られています. このような,前の数字と前の前の数字の和によって次の数字を作る数をフィボナッチ数といいます.</p>
<div class="warn">
<p>※
普通フィボナッチ数というと,0から始まりますが,ここではウサギの例で考えたいので1から始まることにします.</p>
</div>
<p>フィボナッチ数を漸化式として捉えると,第n月のフィボナッチ数の正体は以下のように得られます.</p>
<div class="note">
<p><span class="math display">\[ F_0 = 1 \]</span>
<span class="math display">\[ F_1 = 1 \]</span>
<span class="math display">\[ F_n = F_{n-1} + F_{n-2} (n &gt;= 2)  \]</span></p>
</div>
<p>したがって,上の条件での12ヶ月後のウサギの数はなにかという問題は,フィボナッチ数の第12番めの項<span class="math inline">\(F_{12}\)</span>がなにかという問題であり,フィボナッチ数とはなにかといえば上の漸化式である,という風に考えることができます.</p>
<p>実際に計算手順を,一つひとつ追っていくのではなく,このように求めたい対象がなにかということを考えて,抽象化し記述するというのが,関数型言語の基本的な考え方になります.</p>
<p>ちなみに,これをHaskellで書くと以下のようになり,上の漸化式の書き方とかなり近い対応関係があることが分かります.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>fib <span class="dv">0</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>fib <span class="dv">1</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>fib n <span class="ot">=</span> fib (n <span class="op">-</span> <span class="dv">1</span>) <span class="op">+</span> fib (n <span class="op">-</span> <span class="dv">2</span>)</span></code></pre></div>
<div class="warn">
<p>※メモ化とかそういったことは,取り敢えずここでは置いておきます.
(この辺の数学的定義そのままだと,実用には向かない問題は,後ほど扱います.)</p>
</div>
<p>これを実行してみると確かに正しい数が求められています.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span> :{</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="kw">|</span> <span class="ex">fib</span> :: Int <span class="at">-</span><span class="op">&gt;</span> Int</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="kw">|</span> <span class="ex">fib</span> 0 = 1</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="kw">|</span> <span class="ex">fib</span> 1 = 1</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="kw">|</span> <span class="ex">fib</span> n = fib <span class="er">(</span><span class="ex">n-1</span><span class="kw">)</span> <span class="ex">+</span> fib <span class="er">(</span><span class="ex">n-2</span><span class="kw">)</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="kw">|</span> <span class="ex">:}</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span> fib 12</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="ex">233</span></span></code></pre></div>
<p>当然フィボナッチ数の漸化式は広く知られていますし, むしろ最初から漸化式として学習することが多いでしょう. したがって, Pythonでの実装もフィボナッチ数が漸化式であるという前提で,以下のように書くほうが一般的です.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> Fib(n):</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> n <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">1</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> n <span class="op">==</span> <span class="dv">1</span>:</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">1</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> Fib(n<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span> Fib(n<span class="op">-</span><span class="dv">2</span>)</span></code></pre></div>
<p>また,最近では,PythonやJavaScriptなどの手続き型の言語にも,関数型の考え方が導入され,内包表記,再帰,ラムダ式などの関数型のシンタックスも一般的に使われるようになっています(これらの詳細についてはこのあとやっていきます).逆にHaskell等の関数型言語においても,手続き型のほうが便利な場合には手続き型の記法を利用します.</p>
<p>したがって,現在では関数型的な考え方と,手続き型の考え方というのは,それほど明確に分かれるものではありません.</p>
<p>ここでは,手続き型の考え方と関数型の考え方の違いを説明するために,Pythonの事例をあえてあまり用いられない方法で書きましたが,大げさに書けば手続き型と関数型の考え方の違いとはこのような考え方,問題へのアプローチの仕方にあります.</p>
<h2 data-number="1.4" id="関数型だと何が嬉しいのか"><span class="header-section-number">1.4</span> 関数型だと何が嬉しいのか</h2>
<p>前節では,関数型の考え方に関して簡単な事例をしましました. 関数型の考え方がしっくり来る人は,それが関数型を使う理由になるでしょうが,しっくり来るという抽象的な話ではなく,具体的な関数型言語のメリット/デメリットをこの節では紹介します. なお,関数型言語と一言でいっても,様々な言語がありますし,前述のように手続き型と関数型が明確に分かれる時代でもありません.</p>
<p>関数型言語の設計仕様は,関数型です. 手続き型言語の仕様定義にもいろいろな種類があります.</p>
<p>(執筆中)
例の論文のまとめ</p>
<p>厳密な仕様記述を書くとプログラムと1体1対応になる.そもそもHaskellで書けばプログラムと仕様が対応関係を持つようになりますし,数式への変換も容易です.</p>
<p>そういった意図もあり,私が内閣府で統計作成を市ていた時代には, 数式による定義,とプログラムのペアを対応付けたOSSとして基幹統計を開発することを提唱していましたが,それは色々な制約でまだ実現していません.</p>
<h2 data-number="1.5" id="設計も関数型で"><span class="header-section-number">1.5</span> 設計も関数型で</h2>
<p>(執筆中)</p>
<h3 data-number="1.5.1" id="雑談なんでhaskell"><span class="header-section-number">1.5.1</span> 雑談:なんでHaskell?</h3>
<p>(執筆中)</p>
]]></description>
    <pubDate>Fri, 18 Oct 2024 00:00:00 UT</pubDate>
    <guid>/lectures/iap1.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>特別講義DS Ch14 画像認識</title>
    <link>/lectures/slds14.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#画像認識執筆中" id="toc-画像認識執筆中"><span class="toc-section-number">1</span> 画像認識(執筆中)</a>
<ul>
<li><a href="#顔による年齢識別" id="toc-顔による年齢識別"><span class="toc-section-number">1.1</span> 顔による年齢識別</a>
<ul>
<li><a href="#画像ファイルの形式" id="toc-画像ファイルの形式"><span class="toc-section-number">1.1.1</span> 画像ファイルの形式</a></li>
<li><a href="#画像認識の実施" id="toc-画像認識の実施"><span class="toc-section-number">1.1.2</span> 画像認識の実施</a></li>
</ul></li>
</ul></li>
</ul>
</div>
<h1 data-number="1" id="画像認識執筆中"><span class="header-section-number">1</span> 画像認識(執筆中)</h1>
<p>説明</p>
<p>主な画像認識モデルの歴史は以下のようにまとめられます.</p>
<table>
<colgroup>
<col style="width: 3%" />
<col style="width: 11%" />
<col style="width: 51%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th>年代</th>
<th>モデル名</th>
<th>特徴・概要</th>
<th>主な貢献や革新点</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1998</td>
<td>LeNet</td>
<td>手書き数字認識に使われた初期のCNNモデル. 主にMNISTデータセットで使用.</td>
<td>畳み込み層とプーリング層を使用した初期の画像認識モデル.</td>
</tr>
<tr class="even">
<td>2012</td>
<td>AlexNet</td>
<td>ImageNetで初めて畳み込みニューラルネットワークを使用し,トップ5エラー率を大幅に改善.</td>
<td>ReLU活性化関数の使用や,GPUによるトレーニングの導入.</td>
</tr>
<tr class="odd">
<td>2014</td>
<td>VGGNet</td>
<td>小さな3x3のフィルタを多層に積み重ねたアーキテクチャ.VGG16とVGG19が特に有名.</td>
<td>モデルの深さが精度に大きく寄与することを示す.</td>
</tr>
<tr class="even">
<td>2014</td>
<td>GoogLeNet (Inception)</td>
<td>“Inception Module”を採用し,計算効率と精度を両立.</td>
<td>異なるサイズの畳み込みフィルタを同時に適用するInceptionモジュール.</td>
</tr>
<tr class="odd">
<td>2015</td>
<td>ResNet</td>
<td>残差ブロックを使用し,非常に深いネットワークのトレーニングを可能に.ImageNetで優勝.</td>
<td>152層の深いネットワークで,勾配消失問題を解決.</td>
</tr>
<tr class="even">
<td>2016</td>
<td>DenseNet</td>
<td>各層がすべての前層からの入力を受け取る密結合アーキテクチャ.</td>
<td>パラメータ効率が良く,勾配の流れが改善される.</td>
</tr>
<tr class="odd">
<td>2017</td>
<td>Xception</td>
<td>畳み込みの代わりに「深さ方向の畳み込み（Depthwise Separable Convolutions）」を使用.</td>
<td>計算コストの削減と精度の向上.</td>
</tr>
<tr class="even">
<td>2017</td>
<td>MobileNet</td>
<td>軽量かつ効率的なCNNアーキテクチャ.モバイルデバイス向けに最適化.</td>
<td>計算量を削減し,モバイル環境でのリアルタイム推論を可能に.</td>
</tr>
<tr class="odd">
<td>2020</td>
<td>Vision Transformer (ViT)</td>
<td>画像をパッチに分割し,トランスフォーマーアーキテクチャを使用したモデル.</td>
<td>トランスフォーマーモデルが画像認識タスクでも有効であることを示す.</td>
</tr>
<tr class="even">
<td>2021</td>
<td>Swin Transformer</td>
<td>階層的なトランスフォーマーアーキテクチャで,局所的な窓（ウィンドウ）を用いた画像認識モデル.</td>
<td>トランスフォーマーのスケーラビリティを改善し,高い精度を達成.</td>
</tr>
<tr class="odd">
<td>2022</td>
<td>ConvNeXt</td>
<td>Vision Transformerのアイデアを取り入れた畳み込みネットワークの進化版.</td>
<td>畳み込みベースのモデルが再び最先端性能を達成できることを示す.</td>
</tr>
</tbody>
</table>
<p>今回は,事例としてConvNeXtを利用した画像認識を実行してみます.</p>
<p><a href="https://github.com/facebookresearch/ConvNeXt">ConvNeXt</a>は,Meta(旧Facebook)によって発表されたモデルで,Vision Transformer (ViT) を参考にしつつResNet（Residual Network）を基盤として作られたCNNです.</p>
<p>PythonのCNNのライブラリはいくつか存在しますが,ConvNeXtは,Metaによって開発された<code>PyTorch</code>上で実装されています.</p>
<h2 data-number="1.1" id="顔による年齢識別"><span class="header-section-number">1.1</span> 顔による年齢識別</h2>
<p>事例として顔画像からの年齢識別を行ってみましょう. データとして,16歳から62歳までの2,000人の有名人の160,000以上の画像が含まれるデータセット<a href="http://bcsiriuschen.github.io/CARC/">Cross-Age Celebrity Dataset (CACD)</a>を用います.</p>
<figure>
<img src="/images/CACD.png" alt="The dataset metadata" />
<figcaption aria-hidden="true">The dataset metadata</figcaption>
</figure>
<p><code>The dataset metadata only can be downloaded</code>をクリックしてメタデータを, <code>Original face images (detected and croped by openCV face detector) can be downloaded</code>をクリックして画像データをダウンロードしてください(3Gあるので通信環境に注意).</p>
<p><code>CACD2000.tar.gz</code>は展開して,<code>celebrity2000_meta.mat</code>とともにプログラムを配置するディレクトリ内の<code>data</code>ディレクトリに保存しておきましょう.</p>
<h3 data-number="1.1.1" id="画像ファイルの形式"><span class="header-section-number">1.1.1</span> 画像ファイルの形式</h3>
<p>機械学習において利用されるラベル付き画像データの形式はいくつかあるが,CACDのような<code>.mat</code>ファイル,画像とCSVなどのラベルの組み合わせ,ラベル名フォルダ別の画像ファイルなどのパターンが存在する. いずれにも対応できるようにしておく必要があるが, この資料では最も単純な最後のラベル別に名前がつけられたフォルダに保存された画像ファイルを扱う.</p>
<p>先ほどダウンロードした<code>celebrity2000_meta.mat</code>は,メタデータのみが含まれており,画像は別になっています.メタデータに従って,年齢別に画像をフォルダに保存してみましょう.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> ls</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ex">face_image.py</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="ex">data</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> ls <span class="ex">data</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="ex">CACD2000</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="ex">celebrity2000_meta.mat</span></span></code></pre></div>
<div class="note">
<ul>
<li><h2 id="matファイル"><code>.mat</code>ファイル</h2>
<ul>
<li>MATLABのファイル</li>
<li>基本的には <code>scipy</code> を利用して読み込む.</li>
<li>フォーマット形式がMATLAB <code>v7.3</code>の場合には,<code>HDF5</code>を扱うライブラリ<code>h5py</code>を利用する.</li>
<li><code>HDF5(Hierarchical Data Froamt version 5)</code>はディレクトリ構造に似た階層型のデータフォーマット</li>
</ul></li>
</ul>
</div>
<p>まずは,<code>h5py</code>を利用して<code>celebrity2000_meta.mat</code>を読み込み,中身を確認してみましょう.</p>
<div class="warn">
<p>以下のライブラリが必要になるので <code>pip install</code>しておいてください.</p>
<ul>
<li><code>pytorch</code>
<ul>
<li>CNN用ライブラリ(PyTorch)</li>
</ul></li>
<li><code>torchvision</code>
<ul>
<li>PyTorchの画像,動画処理用ライブラリ</li>
</ul></li>
<li><code>scipy</code></li>
<li><code>h5py</code></li>
<li><code>pillow</code>
<ul>
<li>画像処理用ライブラリ</li>
</ul></li>
<li><code>shutil</code>
<ul>
<li>ファイル操作用ライブラリ</li>
</ul></li>
</ul>
</div>
<div class="sourceCode" id="cb2"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> h5py <span class="co">#HDF5を扱うライブラリ</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> PIL <span class="im">import</span> Image <span class="co">#画像の表示/保存/書き込みなどを扱うライブラリ</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> scipy.io</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="co">#画像データの保存先</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>image_dir <span class="op">=</span> <span class="st">&#39;data/CACD2000&#39;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="co"># .matファイルの読み込み（古い形式の場合）</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="co">## 辞書型として読み込まれる</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="bu">file</span> <span class="op">=</span> scipy.io.loadmat(<span class="st">&#39;data/celebrity2000_meta.mat&#39;</span>)</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="co"># 辞書のKeyを表示する</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;keys:&#39;</span>,<span class="bu">file</span>.keys())</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="co"># &gt;&gt;&gt; dict_keys([&#39;__header__&#39;, &#39;__version__&#39;, &#39;__globals__&#39;, &#39;celebrityData&#39;, &#39;celebrityImageData&#39;])</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a><span class="co">#celebrityImageDataの確認</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="bu">file</span>[<span class="st">&#39;celebrityImageData&#39;</span>])</span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a><span class="co">[[(array([[53],</span></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a><span class="co">         [53],</span></span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a><span class="co">         [53],</span></span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a><span class="co">         ...,</span></span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a><span class="co">         [23],</span></span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a><span class="co">         [23],</span></span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a><span class="co">         [23]], dtype=uint8), array([[   1],</span></span>
<span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a><span class="co">         [   1],</span></span>
<span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a><span class="co">         [   1],</span></span>
<span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a><span class="co">         ...,</span></span>
<span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a><span class="co">         [2000],</span></span>
<span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a><span class="co">         [2000],</span></span>
<span id="cb2-34"><a href="#cb2-34" aria-hidden="true" tabindex="-1"></a><span class="co">         [2000]], dtype=uint16), array([[2004],</span></span>
<span id="cb2-35"><a href="#cb2-35" aria-hidden="true" tabindex="-1"></a><span class="co">         [2004],</span></span>
<span id="cb2-36"><a href="#cb2-36" aria-hidden="true" tabindex="-1"></a><span class="co">         [2004],</span></span>
<span id="cb2-37"><a href="#cb2-37" aria-hidden="true" tabindex="-1"></a><span class="co">         ...,</span></span>
<span id="cb2-38"><a href="#cb2-38" aria-hidden="true" tabindex="-1"></a><span class="co">         [2013],</span></span>
<span id="cb2-39"><a href="#cb2-39" aria-hidden="true" tabindex="-1"></a><span class="co">         [2013],</span></span>
<span id="cb2-40"><a href="#cb2-40" aria-hidden="true" tabindex="-1"></a><span class="co">         [2013]], dtype=uint16), array([], shape=(0, 0), dtype=uint8), array([[ 1],</span></span>
<span id="cb2-41"><a href="#cb2-41" aria-hidden="true" tabindex="-1"></a><span class="co">         [ 1],</span></span>
<span id="cb2-42"><a href="#cb2-42" aria-hidden="true" tabindex="-1"></a><span class="co">         [ 1],</span></span>
<span id="cb2-43"><a href="#cb2-43" aria-hidden="true" tabindex="-1"></a><span class="co">         ...,</span></span>
<span id="cb2-44"><a href="#cb2-44" aria-hidden="true" tabindex="-1"></a><span class="co">         [50],</span></span>
<span id="cb2-45"><a href="#cb2-45" aria-hidden="true" tabindex="-1"></a><span class="co">         [50],</span></span>
<span id="cb2-46"><a href="#cb2-46" aria-hidden="true" tabindex="-1"></a><span class="co">         [50]], dtype=uint8), array([[1],</span></span>
<span id="cb2-47"><a href="#cb2-47" aria-hidden="true" tabindex="-1"></a><span class="co">         [1],</span></span>
<span id="cb2-48"><a href="#cb2-48" aria-hidden="true" tabindex="-1"></a><span class="co">         [1],</span></span>
<span id="cb2-49"><a href="#cb2-49" aria-hidden="true" tabindex="-1"></a><span class="co">         ...,</span></span>
<span id="cb2-50"><a href="#cb2-50" aria-hidden="true" tabindex="-1"></a><span class="co">         [0],</span></span>
<span id="cb2-51"><a href="#cb2-51" aria-hidden="true" tabindex="-1"></a><span class="co">         [0],</span></span>
<span id="cb2-52"><a href="#cb2-52" aria-hidden="true" tabindex="-1"></a><span class="co">         [0]], dtype=uint8), array([[1951],</span></span>
<span id="cb2-53"><a href="#cb2-53" aria-hidden="true" tabindex="-1"></a><span class="co">         [1951],</span></span>
<span id="cb2-54"><a href="#cb2-54" aria-hidden="true" tabindex="-1"></a><span class="co">         [1951],</span></span>
<span id="cb2-55"><a href="#cb2-55" aria-hidden="true" tabindex="-1"></a><span class="co">         ...,</span></span>
<span id="cb2-56"><a href="#cb2-56" aria-hidden="true" tabindex="-1"></a><span class="co">         [1990],</span></span>
<span id="cb2-57"><a href="#cb2-57" aria-hidden="true" tabindex="-1"></a><span class="co">         [1990],</span></span>
<span id="cb2-58"><a href="#cb2-58" aria-hidden="true" tabindex="-1"></a><span class="co">         [1990]], dtype=uint16), array([[array([&#39;53_Robin_Williams_0001.jpg&#39;], dtype=&#39;&lt;U26&#39;)],</span></span>
<span id="cb2-59"><a href="#cb2-59" aria-hidden="true" tabindex="-1"></a><span class="co">         [array([&#39;53_Robin_Williams_0002.jpg&#39;], dtype=&#39;&lt;U26&#39;)],</span></span>
<span id="cb2-60"><a href="#cb2-60" aria-hidden="true" tabindex="-1"></a><span class="co">         [array([&#39;53_Robin_Williams_0003.jpg&#39;], dtype=&#39;&lt;U26&#39;)],</span></span>
<span id="cb2-61"><a href="#cb2-61" aria-hidden="true" tabindex="-1"></a><span class="co">         ...,</span></span>
<span id="cb2-62"><a href="#cb2-62" aria-hidden="true" tabindex="-1"></a><span class="co">         [array([&#39;23_Katie_Findlay_0011.jpg&#39;], dtype=&#39;&lt;U25&#39;)],</span></span>
<span id="cb2-63"><a href="#cb2-63" aria-hidden="true" tabindex="-1"></a><span class="co">         [array([&#39;23_Katie_Findlay_0012.jpg&#39;], dtype=&#39;&lt;U25&#39;)],</span></span>
<span id="cb2-64"><a href="#cb2-64" aria-hidden="true" tabindex="-1"></a><span class="co">         [array([&#39;23_Katie_Findlay_0013.jpg&#39;], dtype=&#39;&lt;U25&#39;)]], dtype=object))                ]]</span></span>
<span id="cb2-65"><a href="#cb2-65" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb2-66"><a href="#cb2-66" aria-hidden="true" tabindex="-1"></a><span class="co"># 7個目に画像のファイル名が入っているので</span></span>
<span id="cb2-67"><a href="#cb2-67" aria-hidden="true" tabindex="-1"></a><span class="co"># celebrityImageDataから画像ファイル名を抽出</span></span>
<span id="cb2-68"><a href="#cb2-68" aria-hidden="true" tabindex="-1"></a>image_data <span class="op">=</span> <span class="bu">file</span>[<span class="st">&#39;celebrityImageData&#39;</span>]</span>
<span id="cb2-69"><a href="#cb2-69" aria-hidden="true" tabindex="-1"></a>jpg_files <span class="op">=</span> [<span class="bu">str</span>(image_name[<span class="dv">0</span>][<span class="dv">0</span>]) <span class="cf">for</span> image_name <span class="kw">in</span> image_data[<span class="dv">0</span>][<span class="dv">0</span>][<span class="dv">7</span>]]</span>
<span id="cb2-70"><a href="#cb2-70" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-71"><a href="#cb2-71" aria-hidden="true" tabindex="-1"></a><span class="co"># 抽出された.jpgファイル名のリストを上から10個表示</span></span>
<span id="cb2-72"><a href="#cb2-72" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(jpg_files[:<span class="dv">10</span>])</span>
<span id="cb2-73"><a href="#cb2-73" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-74"><a href="#cb2-74" aria-hidden="true" tabindex="-1"></a><span class="co"># 画像データの取得と表示</span></span>
<span id="cb2-75"><a href="#cb2-75" aria-hidden="true" tabindex="-1"></a><span class="co">## 名前データを利用して画像をいくつか開いてみます.</span></span>
<span id="cb2-76"><a href="#cb2-76" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> n <span class="kw">in</span> jpg_files[:<span class="dv">10</span>]:</span>
<span id="cb2-77"><a href="#cb2-77" aria-hidden="true" tabindex="-1"></a>    img_path <span class="op">=</span> os.path.join(image_dir, n)  <span class="co"># パスを結合し,ファイル名を取得</span></span>
<span id="cb2-78"><a href="#cb2-78" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-79"><a href="#cb2-79" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> os.path.exists(img_path):</span>
<span id="cb2-80"><a href="#cb2-80" aria-hidden="true" tabindex="-1"></a>        img <span class="op">=</span> Image.<span class="bu">open</span>(img_path)  <span class="co"># 画像ファイルを開く</span></span>
<span id="cb2-81"><a href="#cb2-81" aria-hidden="true" tabindex="-1"></a>        img.show()  <span class="co"># 画像を表示</span></span>
<span id="cb2-82"><a href="#cb2-82" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb2-83"><a href="#cb2-83" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="ss">f&quot;Image file not found: </span><span class="sc">{</span>img_path<span class="sc">}</span><span class="ss">&quot;</span>)</span>
<span id="cb2-84"><a href="#cb2-84" aria-hidden="true" tabindex="-1"></a>    <span class="co">#&gt;&gt;&gt; 画像が表示されます</span></span></code></pre></div>
<div class="warn">
<ul>
<li>HDF5の利用例</li>
</ul>
<p><code>CACD</code>データのうち一番上の<code>The dataset metadata and features used in this paper</code>からダウンロードできる<code>celebrity2000.mat</code>は,<code>HDF5</code>のデータとなっているため,<code>scipy</code>で読み込んでみるとエラーが出ます.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="bu">file</span> <span class="op">=</span> scipy.io.loadmat(<span class="st">&#39;data/celebrity2000.mat&#39;</span>)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="co">Traceback (most recent call last):</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="co">  File &quot;/Users/akagi/Desktop/face_image.py&quot;, line 86, in &lt;module&gt;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="co">    file = scipy.io.loadmat(&#39;data/celebrity2000.mat&#39;)</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="co">           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="co">  File &quot;/Users/akagi/.pyenv/versions/3.12.3/lib/python3.12/site-packages/scipy/io/matlab/_mio.py&quot;, line 226, in loadmat</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="co">    MR, _ = mat_reader_factory(f, **kwargs)</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="co">            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="co">  File &quot;/Users/akagi/.pyenv/versions/3.12.3/lib/python3.12/site-packages/scipy/io/matlab/_mio.py&quot;, line 80, in mat_reader_factory</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="co">    raise NotImplementedError(&#39;Please use HDF reader for matlab v7.3 &#39;</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="co">NotImplementedError: Please use HDF reader for matlab v7.3 files, e.g. h5py</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>今回は<code>celebrity2000_meta.mat</code>を利用するので必要ありませんが,試しに同じように画像を表示してみましょう.</p>
<details>
<summary>
詳細 開く/閉じる
</summary>
<p><code>HDF5</code>は多重の辞書型ような構造をしており,<code>key</code>によってデータにアクセスできます.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> h5py <span class="co">#HDF5を扱うライブラリ</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> PIL <span class="im">import</span> Image <span class="co">#画像の表示/保存/書き込みなどを扱うライブラリ</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="co"># .matファイル(HDF5)の読み込み</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="cf">with</span> h5py.File(<span class="st">&#39;data/celebrity2000.mat&#39;</span>, <span class="st">&#39;r&#39;</span>) <span class="im">as</span> <span class="bu">file</span>:</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    <span class="co"># List all keys in the .mat file</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;keys:&#39;</span>,<span class="bu">list</span>(<span class="bu">file</span>.keys()))</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>    <span class="co"># &gt;&gt;&gt; keys: [&#39;#refs#&#39;, &#39;celebrityData&#39;, &#39;celebrityImageData&#39;]</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>    <span class="co">## ラベルの確認</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;DataKeys:&#39;</span>,<span class="bu">file</span>[<span class="st">&#39;celebrityImageData&#39;</span>].keys())</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>    <span class="co"># &gt;&gt;&gt; DataKeys: &lt;KeysViewHDF5 [&#39;age&#39;, &#39;birth&#39;, &#39;feature&#39;, &#39;identity&#39;, &#39;lfw&#39;, &#39;name&#39;, &#39;rank&#39;, &#39;year&#39;]&gt;</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 年齢データの確認</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;age:&#39;</span>,<span class="bu">file</span>[<span class="st">&#39;celebrityImageData&#39;</span>][<span class="st">&#39;age&#39;</span>])</span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>    <span class="co"># &gt;&gt;&gt; age: &lt;HDF5 dataset &quot;age&quot;: shape (1, 163446), type &quot;&lt;f8&quot;&gt;</span></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;age:&#39;</span>,<span class="bu">file</span>[<span class="st">&#39;celebrityImageData&#39;</span>][<span class="st">&#39;age&#39;</span>][<span class="dv">0</span>])</span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>    <span class="co"># &gt;&gt;&gt; age: [53. 53. 53. ... 23. 23. 23.]</span></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 名前データの確認</span></span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;name:&#39;</span>,<span class="bu">file</span>[<span class="st">&#39;celebrityImageData&#39;</span>][<span class="st">&#39;name&#39;</span>])</span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>    <span class="co"># &gt;&gt;&gt; name: &lt;HDF5 dataset &quot;name&quot;: shape (1, 163446), type &quot;|O&quot;&gt;</span></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;name:&#39;</span>,<span class="bu">file</span>[<span class="st">&#39;celebrityImageData&#39;</span>][<span class="st">&#39;name&#39;</span>][<span class="dv">0</span>])</span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a>    <span class="co"># &gt;&gt;&gt; name: [&lt;HDF5 object reference&gt; &lt;HDF5 object reference&gt; &lt;HDF5 object reference&gt;</span></span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>    <span class="co">#... &lt;HDF5 object reference&gt; &lt;HDF5 object reference&gt;</span></span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>    <span class="co">#&lt;HDF5 object reference&gt;]</span></span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a>    <span class="co"># ↑ &lt;HDF5 object reference&gt;は他のHDF5オブジェクトへの参照 #refs#に入っている.</span></span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a>    <span class="co"># nameデータを参照して表示</span></span>
<span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a>    name_references <span class="op">=</span> <span class="bu">file</span>[<span class="st">&#39;celebrityImageData&#39;</span>][<span class="st">&#39;name&#39;</span>][<span class="dv">0</span>]</span>
<span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a>    names <span class="op">=</span> []</span>
<span id="cb4-34"><a href="#cb4-34" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> ref <span class="kw">in</span> name_references:</span>
<span id="cb4-35"><a href="#cb4-35" aria-hidden="true" tabindex="-1"></a>        name <span class="op">=</span> <span class="bu">file</span>[ref][()].tobytes().decode(<span class="st">&#39;utf-16&#39;</span>)  <span class="co"># utf-16でデコード</span></span>
<span id="cb4-36"><a href="#cb4-36" aria-hidden="true" tabindex="-1"></a>        names.append(name)</span>
<span id="cb4-37"><a href="#cb4-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-38"><a href="#cb4-38" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 最初の10件の名前を表示</span></span>
<span id="cb4-39"><a href="#cb4-39" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;names:&#39;</span>, names[:<span class="dv">10</span>])</span>
<span id="cb4-40"><a href="#cb4-40" aria-hidden="true" tabindex="-1"></a>    <span class="co"># names: [&#39;53_Robin_Williams_0001.jpg&#39;</span></span>
<span id="cb4-41"><a href="#cb4-41" aria-hidden="true" tabindex="-1"></a>    <span class="co"># , &#39;53_Robin_Williams_0002.jpg&#39;</span></span>
<span id="cb4-42"><a href="#cb4-42" aria-hidden="true" tabindex="-1"></a>    <span class="co"># , &#39;53_Robin_Williams_0003.jpg&#39;</span></span>
<span id="cb4-43"><a href="#cb4-43" aria-hidden="true" tabindex="-1"></a>    <span class="co"># , &#39;53_Robin_Williams_0004.jpg&#39;</span></span>
<span id="cb4-44"><a href="#cb4-44" aria-hidden="true" tabindex="-1"></a>    <span class="co"># , &#39;53_Robin_Williams_0005.jpg&#39;</span></span>
<span id="cb4-45"><a href="#cb4-45" aria-hidden="true" tabindex="-1"></a>    <span class="co"># , &#39;53_Robin_Williams_0006.jpg&#39;</span></span>
<span id="cb4-46"><a href="#cb4-46" aria-hidden="true" tabindex="-1"></a>    <span class="co"># , &#39;53_Robin_Williams_0007.jpg&#39;</span></span>
<span id="cb4-47"><a href="#cb4-47" aria-hidden="true" tabindex="-1"></a>    <span class="co"># , &#39;53_Robin_Williams_0009.jpg&#39;</span></span>
<span id="cb4-48"><a href="#cb4-48" aria-hidden="true" tabindex="-1"></a>    <span class="co"># , &#39;53_Robin_Williams_0010.jpg&#39;</span></span>
<span id="cb4-49"><a href="#cb4-49" aria-hidden="true" tabindex="-1"></a>    <span class="co"># , &#39;53_Robin_Williams_0011.jpg&#39;]</span></span>
<span id="cb4-50"><a href="#cb4-50" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-51"><a href="#cb4-51" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 画像データの取得と表示</span></span>
<span id="cb4-52"><a href="#cb4-52" aria-hidden="true" tabindex="-1"></a>    <span class="co">## 名前データを利用して画像をいくつか開いてみます.</span></span>
<span id="cb4-53"><a href="#cb4-53" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> n <span class="kw">in</span> names[:<span class="dv">10</span>]:</span>
<span id="cb4-54"><a href="#cb4-54" aria-hidden="true" tabindex="-1"></a>        img_path <span class="op">=</span> os.path.join(image_dir, n)  <span class="co"># パスを結合し,ファイル名を取得</span></span>
<span id="cb4-55"><a href="#cb4-55" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-56"><a href="#cb4-56" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> os.path.exists(img_path):</span>
<span id="cb4-57"><a href="#cb4-57" aria-hidden="true" tabindex="-1"></a>            img <span class="op">=</span> Image.<span class="bu">open</span>(img_path)  <span class="co"># 画像ファイルを開く</span></span>
<span id="cb4-58"><a href="#cb4-58" aria-hidden="true" tabindex="-1"></a>            img.show()  <span class="co"># 画像を表示</span></span>
<span id="cb4-59"><a href="#cb4-59" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span>
<span id="cb4-60"><a href="#cb4-60" aria-hidden="true" tabindex="-1"></a>            <span class="bu">print</span>(<span class="ss">f&quot;Image file not found: </span><span class="sc">{</span>img_path<span class="sc">}</span><span class="ss">&quot;</span>)</span>
<span id="cb4-61"><a href="#cb4-61" aria-hidden="true" tabindex="-1"></a>    <span class="co"># &gt;&gt;&gt; 画像が表示される</span></span></code></pre></div>
<p>同じ用にデータを抽出できることが確認できます.</p>
</details>
</div>
<p>それでは,<code>celebrity2000_meta.mat</code>から年齢別にフォルダを分けて画像を保存してみます.年齢区分は,<code>10</code>,<code>20</code>,…,<code>100</code>としてみましょう. 画像ファイル名の先頭の数字が年齢を表しているので,そちらを利用しても構いませんが,せっかくなのでメタデータを利用してみましょう. 年齢は<code>image_data[0][0][0]</code>に入っているようです.</p>
<p>研究であれば画像データの枚数は多いほど良いですが, 今回は一通りの流れを体験してみることが目的なので学生の環境でも利用しやすいように各年代200枚だけコピーします.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> shutil</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> scipy.io</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> collections <span class="im">import</span> defaultdict</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> random</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="co"># 画像ディレクトリの設定</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>image_dir <span class="op">=</span> <span class="st">&#39;data/CACD2000&#39;</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>output_dir <span class="op">=</span> <span class="st">&#39;data/sorted_images&#39;</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="co"># .matファイルの読み込み</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="bu">file</span> <span class="op">=</span> scipy.io.loadmat(<span class="st">&#39;data/celebrity2000_meta.mat&#39;</span>)</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a><span class="co"># celebrityImageDataから年齢と画像ファイル名を抽出</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>image_data <span class="op">=</span> <span class="bu">file</span>[<span class="st">&#39;celebrityImageData&#39;</span>]</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a><span class="co"># 年齢情報</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>ages <span class="op">=</span> image_data[<span class="dv">0</span>][<span class="dv">0</span>][<span class="dv">0</span>].flatten()</span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a><span class="co"># 画像ファイル名</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>jpg_files <span class="op">=</span> [<span class="bu">str</span>(image_name[<span class="dv">0</span>][<span class="dv">0</span>]) <span class="cf">for</span> image_name <span class="kw">in</span> image_data[<span class="dv">0</span>][<span class="dv">0</span>][<span class="dv">7</span>]]</span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a><span class="co"># 年齢と画像ファイルをペアにする</span></span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>age_image_pairs <span class="op">=</span> <span class="bu">list</span>(<span class="bu">zip</span>(ages, jpg_files))</span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a><span class="co"># 年代ごとの画像カウント</span></span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a>age_group_counts <span class="op">=</span> defaultdict(<span class="bu">int</span>)</span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a><span class="co"># 年齢別に画像をシャッフル</span></span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a>random.shuffle(age_image_pairs)</span>
<span id="cb5-29"><a href="#cb5-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-30"><a href="#cb5-30" aria-hidden="true" tabindex="-1"></a><span class="co"># 年齢別のフォルダに画像をコピー（各年代最大200枚）</span></span>
<span id="cb5-31"><a href="#cb5-31" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> age, jpg_file <span class="kw">in</span> age_image_pairs:</span>
<span id="cb5-32"><a href="#cb5-32" aria-hidden="true" tabindex="-1"></a>    age_group <span class="op">=</span> (age <span class="op">//</span> <span class="dv">10</span>) <span class="op">*</span> <span class="dv">10</span></span>
<span id="cb5-33"><a href="#cb5-33" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> age_group <span class="op">&gt;</span> <span class="dv">100</span>:</span>
<span id="cb5-34"><a href="#cb5-34" aria-hidden="true" tabindex="-1"></a>        age_group <span class="op">=</span> <span class="dv">100</span>  <span class="co"># 100代以上は100代フォルダに保存</span></span>
<span id="cb5-35"><a href="#cb5-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-36"><a href="#cb5-36" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 各年代ごとに200枚までコピー</span></span>
<span id="cb5-37"><a href="#cb5-37" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> age_group_counts[age_group] <span class="op">&lt;</span> <span class="dv">200</span>:</span>
<span id="cb5-38"><a href="#cb5-38" aria-hidden="true" tabindex="-1"></a>        folder_path <span class="op">=</span> os.path.join(output_dir, <span class="ss">f&#39;</span><span class="sc">{</span>age_group<span class="sc">}</span><span class="ss">s&#39;</span>)</span>
<span id="cb5-39"><a href="#cb5-39" aria-hidden="true" tabindex="-1"></a>        os.makedirs(folder_path, exist_ok<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb5-40"><a href="#cb5-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-41"><a href="#cb5-41" aria-hidden="true" tabindex="-1"></a>        src_path <span class="op">=</span> os.path.join(image_dir, jpg_file)</span>
<span id="cb5-42"><a href="#cb5-42" aria-hidden="true" tabindex="-1"></a>        dst_path <span class="op">=</span> os.path.join(folder_path, jpg_file)</span>
<span id="cb5-43"><a href="#cb5-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-44"><a href="#cb5-44" aria-hidden="true" tabindex="-1"></a>        shutil.copy(src_path, dst_path)</span>
<span id="cb5-45"><a href="#cb5-45" aria-hidden="true" tabindex="-1"></a>        age_group_counts[age_group] <span class="op">+=</span> <span class="dv">1</span></span></code></pre></div>
<p>結果を確認してみます.</p>
<div class="warn">
<p>Shell コマンドにおける<code>|</code> は<code>パイプ</code>といって <code>head -20</code>は先頭20個のみ
<code>|</code> の左側のコマンドによる標準出力を右側のコマンドに渡すことができます.</p>
<p>今回は<code>ls data/sorted_images/10s</code>で表示される結果の,先頭20個のみを表示しています.</p>
</div>
<div class="sourceCode" id="cb6"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> ls <span class="ex">data/sorted_images</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="ex">10s</span> 20s 30s 40s 50s 60s</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> ls <span class="ex">data/sorted_images/10s</span> <span class="kw">|</span><span class="fu">head</span> <span class="at">-20</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Alison_Pill_0001.jpg</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Alison_Pill_0002.jpg</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Alison_Pill_0003.jpg</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Alison_Pill_0005.jpg</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Alison_Pill_0006.jpg</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Alison_Pill_0007.jpg</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Alison_Pill_0009.jpg</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Alison_Pill_0011.jpg</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Amanda_Seyfried_0001.jpg</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Amanda_Seyfried_0002.jpg</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Amanda_Seyfried_0004.jpg</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Amanda_Seyfried_0005.jpg</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Amanda_Seyfried_0007.jpg</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Amanda_Seyfried_0008.jpg</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Amanda_Seyfried_0010.jpg</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Amanda_Seyfried_0011.jpg</span></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Amanda_Seyfried_0013.jpg</span></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Amanda_Seyfried_0014.jpg</span></span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Anna_Kendrick_0002.jpg</span></span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Anna_Kendrick_0008.jpg</span></span></code></pre></div>
<p>データには10代から60代までのみが含まれていたようです. 各フォルダの中身を確認してもちゃんと保存できていることがわかりますね.</p>
<p>機械学習モデルの性能を評価するためには,学習に利用する訓練用データと,学習の結果を判定するテスト用データに分ける必要があります. 続いて,学習用とテスト用でフォルダに分割してみましょう.</p>
<p>今回は200枚の画像のうち8割(160枚)を学習用,2割(40枚)をテスト用のデータとして利用します.</p>
<p>学習データの分割には, 指定した割合でデータを分割してくれる<code>sklearn</code>の<code>train_test_split</code>を用います.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> shutil</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.model_selection <span class="im">import</span> train_test_split</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>data_dir <span class="op">=</span> <span class="st">&#39;data/sorted_images&#39;</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>output_dir <span class="op">=</span> <span class="st">&#39;data/sorted_images_split&#39;</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="co"># 画像ファイルのパスを収集し,年齢別に分類</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>age_groups <span class="op">=</span> [<span class="st">&#39;10s&#39;</span>, <span class="st">&#39;20s&#39;</span>, <span class="st">&#39;30s&#39;</span>, <span class="st">&#39;40s&#39;</span>, <span class="st">&#39;50s&#39;</span>, <span class="st">&#39;60s&#39;</span>]</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> age_group <span class="kw">in</span> age_groups:</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>    images <span class="op">=</span> os.listdir(os.path.join(data_dir, age_group))</span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>    train_images, val_images <span class="op">=</span> train_test_split(images</span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>                                               ,test_size<span class="op">=</span><span class="fl">0.2</span> <span class="co">#2割をテスト用データにする</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>                                               , random_state<span class="op">=</span><span class="dv">42</span>)</span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>    train_dir <span class="op">=</span> os.path.join(output_dir, <span class="st">&#39;train&#39;</span>, age_group)</span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>    val_dir <span class="op">=</span> os.path.join(output_dir, <span class="st">&#39;val&#39;</span>, age_group)</span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>    os.makedirs(train_dir, exist_ok<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>    os.makedirs(val_dir, exist_ok<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> image <span class="kw">in</span> train_images:</span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>        shutil.copy(os.path.join(data_dir, age_group, image), os.path.join(train_dir, image))</span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> image <span class="kw">in</span> val_images:</span>
<span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a>        shutil.copy(os.path.join(data_dir, age_group, image), os.path.join(val_dir, image))</span></code></pre></div>
<p>以下のような形でデータが保存されていることを確認しましょう.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ex">data/sorted_images_split</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="ex">├──</span> train</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="ex">│</span>      ├── 10s</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="ex">│</span>      ├── 20s</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="ex">│</span>      ├── 30s</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="ex">│</span>      ├── 40s</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="ex">│</span>      ├── 50s</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="ex">│</span>      └── 60s</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="ex">└──</span> val</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>        <span class="ex">├──</span> 10s</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>        <span class="ex">├──</span> 20s</span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>        <span class="ex">├──</span> 30s</span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>        <span class="ex">├──</span> 40s</span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>        <span class="ex">├──</span> 50s</span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>        <span class="ex">└──</span> 60s</span></code></pre></div>
<h3 data-number="1.1.2" id="画像認識の実施"><span class="header-section-number">1.1.2</span> 画像認識の実施</h3>
<p>CNNを利用した学習を行うにあたって,コード内で扱われる基本的な概念を説明します.</p>
<div class="note">
<ul>
<li><h2 id="ハイパーパラメータ"><strong>ハイパーパラメータ</strong></h2>
機械学習では,プログラムが自動で学習を進めてくれますが,良い性能を達成するためには人間がいくつかのパラメータを設定する必要があります. また,様々な改善手法があるため,モデルが上手く学習できない場合には,それらを経験によって調整していく必要があります.</li>
</ul>
<p>本資料では,それらの細かな内容にはあまり踏み込みませんが,以下,基本的な処理やパラメータに関して説明します.</p>
<ul>
<li><h2 id="前処理data-augmentation"><strong>前処理(Data Augmentation)</strong></h2>
<p>学習を行うために,画像サイズや色の内容と無関係の情報を減らし,画像を統一のフォーマットに揃えます.</p>
<ul>
<li><strong>リサイズ (Resize)</strong></li>
</ul>
<p>画像のサイズを揃えます.今回は224 × 224 ピクセルに統一します.</p>
<ul>
<li><strong>画像反転 (Horizontal Flip)</strong></li>
</ul>
<p>水平方向に画像を反転させることで,データに多様性を加えます.</p>
<ul>
<li><strong>テンソル(Tensor)変換</strong></li>
</ul>
<p>データの多次元配列を<strong>Tensor</strong>と呼びます. データを,複数の行列によるテンソルに変換することで効率的に学習を行います.
例えば,画像の場合は,高さ,幅,チャンネル数(RGBカラー等の色)の3次元テンソルとして表現します.</p>
<ul>
<li><strong>正規化(Normalize)</strong></li>
</ul>
<p>画像データを特定の範囲や分布に変換してモデルが効率的に学習できるようにする手法を正規化といいます. CNNで学習される画像データは,0から255の範囲のピクセル値(色や濃淡の数値)で表現されますが,ばらつきが大きすぎると学習が不安定になるため,0から1の範囲に変換します.</p></li>
</ul>
<div class="warn">
<p>なお,正規化に利用されてい平均や標準偏差の値(<code>[0.485, 0.456, 0.406]</code>)などは,ConvNeXtの学習に用いられている,大規模画像データベース<a href="https://www.image-net.org">ImageNet</a>の平均及び標準偏差です.</p>
<p>実際には,<strong>使用するデータの</strong>平均及び標準偏差を用いる必要がありますが今回はあくまで事例の紹介であり利用する画像データ毎に変更する必要があるので,便宜的にこの値を利用しています.</p>
<p>テスト用の実装などでは,すべて<code>0.5</code>にするなどもよく行われていますが,本来は変更すべき値であることに注意しましょう.</p>
</div>
<p>該当部分(全体のインデントは省略)</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co"># データ変換（前処理）</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>data_transforms <span class="op">=</span> {</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>    <span class="st">&#39;train&#39;</span>: transforms.Compose([</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>        transforms.Resize((<span class="dv">224</span>, <span class="dv">224</span>)),     <span class="co">#画像のリサイズ</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>        transforms.RandomHorizontalFlip(), <span class="co">#画像をランダムに反転</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>        transforms.ToTensor(),             <span class="co">#テンソル(多次元配列)に変換</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>        transforms.Normalize(mean<span class="op">=</span>[<span class="fl">0.485</span>, <span class="fl">0.456</span>, <span class="fl">0.406</span>]</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>                            ,std<span class="op">=</span>[<span class="fl">0.229</span>, <span class="fl">0.224</span>, <span class="fl">0.225</span>]), <span class="co">#正規化(本来は値を変更する必要あり.</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>    ]),</span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>    <span class="st">&#39;val&#39;</span>: transforms.Compose([</span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>        transforms.Resize((<span class="dv">224</span>, <span class="dv">224</span>)),</span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>        transforms.ToTensor(),</span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>        transforms.Normalize([<span class="fl">0.485</span>, <span class="fl">0.456</span>, <span class="fl">0.406</span>]</span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>                            ,[<span class="fl">0.229</span>, <span class="fl">0.224</span>, <span class="fl">0.225</span>]),</span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>    ]),</span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>この他にも画像の彩度や光度の調整, ランダム回転,スケーリングなど,様々な前処理手法があり,状況に応じて使い分ける必要があります.</p>
<ul>
<li><h2 id="バッチbatch処理"><strong>バッチ(batch)処理</strong></h2></li>
</ul>
<p>CNNでは学習用のデータ全てを一度に学習するとメモリを大量に消費するため,データを分割して学習を行います. そのような分割処理を<strong>バッチ処理</strong>といいます.</p>
<p>分割された一つあたりのデータの数を<strong>バッチサイズ</strong>といいます. バッチサイズが32個の場合は32個の(今回の場合は画像ファイル)を同時に処理します.</p>
<p>また,バッチ処理ではバッチ毎に並列処理を行うため速度面でも,効率的な学習が行えます.</p>
<ul>
<li><h2 id="エポックepoch数"><strong>エポック(epoch)数</strong></h2></li>
</ul>
<p>CNNではモデルの性能を高めるために同じデータセットを何度も繰り返して学習することがあります.その際に,データを1巡して学習する回数を,<strong>エポック数</strong>といいます. 例えば, 10エポックの場合は,160枚の画像を10回学習することになります.</p>
<p>エポック数を増やすと一般的に性能が高まりすが,多すぎる場合には<strong>過学習</strong>が起きるので,エポック数を変更してある程度誤差がが安定する適切なエポック数を見つけることが重要です.</p>
<p>また,本資料では利用していませんが,PyTorchには自動で過学習を防ぐために途中で学習を打ち切る<code>Early Stopping</code>用の機能などもあります.</p>
<p>以下のコードでは,エポック数ごとの誤差を記録して,グラフを出力するようになっています.</p>
<ul>
<li><h2 id="損失関数loss-function"><strong>損失関数(Loss Function)</strong></h2>
学習したモデルの性能を調べるために, モデルの予測と実際のラベルとの誤差(損失)を計算するための関数を<strong>損失関数</strong>といいます.
基本的に, 損失関数で求められた誤差が大きいほど,モデルの正確性が劣っていることを示します.</li>
</ul>
<p>損失関数にはいくつかの種類がありますが,今回は<strong>クロスエントロピー損失(Coross-Entoropy Loss)</strong>を利用します. これは,予測された確率分布と実際のラベルの分布の不一致度を計測しています.</p>
<ul>
<li><h2 id="オプティマイザoptimizer"><strong>オプティマイザ(Optimizer)</strong></h2>
損失関数の値を最小化するために,どのようにモデルのパラメータを更新するかを決定するアルゴリズムを<strong>オプティマイザ</strong>といいます.</li>
</ul>
<p>基本的には,損失関数によって求められた誤差の勾配(パラメータに対する誤差の微分)を計算してエポック毎に誤差が減る方向にパラメータを調整します.</p>
<p>よく使われるアルゴリズムには,<strong>SGD(Stochastic Gradient Descent)</strong>や,<strong>Adam(Adaptive Moment Estimation)</strong>などがあります.</p>
<p>特定のオプティマイザで上手くいかない場合はパラメータや,アルゴリズムを変更します.</p>
<p>該当部分(全体のインデントは省略)</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 損失関数とオプティマイザ</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>    criterion <span class="op">=</span> nn.CrossEntropyLoss() <span class="co">#クロスエントロピー損失</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>    optimizer <span class="op">=</span> optim.Adam(model.parameters() <span class="co">#Adam</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>                          ,lr<span class="op">=</span><span class="fl">0.0001</span>) <span class="co">#Learning rate (学習率)</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">#SGDを利用する場合</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">#optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)</span></span></code></pre></div>
<ul>
<li><h2 id="学習率learning-rate"><strong>学習率(learning rate)</strong></h2>
機械学習モデルが重み（パラメータ）を更新する際に,その更新幅を決めるハイパーパラメータを<strong>学習率(learning rate)</strong>といいます. モデルの訓練時に,誤差（損失）を最小化するために重みを調整していきますが,学習率はその調整量を決定します.</li>
</ul>
<p>学習率が大きい場合には1回の更新で重みが大きく変わるため,学習が速く進むことがありますが,最適な解にたどり着く前に振動してしまったり,安定せずに解に収束しないことがあります.</p>
<p>学習率が小さい場合には,更新幅が小さいので,安定して最適解に近づく可能性が高まりますが,学習に時間がかかりすぎてしまい,訓練が遅くなることがあります.</p>
<p>一般的には<code>0.001</code>程度から初めて変更していくのが良いとされていますが,以下の事例では調整の結果<code>0.0001</code>を採用しています.</p>
<p>このような特性から<strong>SGD</strong>などのオプティマイザでは学習率の設定が非常に重要であり,オプティマイザとは別に学習率を調整するスケジューリングなどの技法が利用されることがあります. 一方で,<strong>Adam</strong>は,ある程度学習率を自動で調整するため,SGDほど,学習率の初期値が結果に影響しないという特徴があります.</p>
<ul>
<li><h2 id="ランダムシードrandom-seed"><strong>ランダムシード(Random Seed)</strong></h2>
CNNは,初期値(重みの設定),学習データのシャッフル,オプティマイザなどで乱数(ランダムな値)を利用しているので,実行毎に異なる結果が出てくることが一般的です.</li>
</ul>
<p>毎回異なる値が生成されるように乱数は,通常CPU時間(プログラムを実行したときのPC内部の時間)などの外部の情報を利用します.</p>
<p>従って, 通常この資料と同じデータを利用して,同じコードを実行しても結果は異なります.
ただし,それでは検証などにおいて不便な場合があります.
また,講義用資料としても不便なので,同じ乱数を利用してできるだけ同じ結果を再現する必要があります.</p>
<p>そこで,以下のコードでは利用する乱数を固定するために,乱数を生成するための情報<strong>ランダムシード</strong>を固定しています.</p>
<p>シード値は適当な数値で構いません. 西暦(<code>2024</code>)や,適当な連番(<code>1234</code>など),特定のミームの数字(<code>42</code>など)が用いられます.</p>
<p>(ただし,実行環境などの違いにより,ランダムシードを固定しても完全に同じ値にはなりません.)</p>
<p><code>set_seed()</code>行をコメントアウトすることで,通常の乱数が利用できるようになるので,研究に利用する場合などには適宜変更してください.</p>
<p>該当部分(全体のインデントは省略)</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 乱数シードを設定</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> set_seed(seed):</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>    torch.manual_seed(seed)</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    np.random.seed(seed)              <span class="co"># Numpy用の乱数シードを設定</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>    random.seed(seed)                 <span class="co"># Pythonの標準乱数シードを設定</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 再現性を完全に保証するために以下も設定（ただし、若干のパフォーマンス低下の可能性あり）</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>    torch.backends.cudnn.deterministic <span class="op">=</span> <span class="va">True</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>    torch.backends.cudnn.benchmark <span class="op">=</span> <span class="va">False</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main():</span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>    <span class="co"># シードを設定する</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">#(自分の研究でやる場合は以下の行は消しても問題ない.)</span></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>    set_seed(<span class="dv">42</span>)</span></code></pre></div>
<ul>
<li><h2 id="cuda-compute-unified-device-architecture"><strong>CUDA (Compute Unified Device Architecture)</strong></h2>
機械学習では, GPUを用いた計算を行うことが一般的です. 特にPyTorchなどでは,NVIDIAが開発したGPU向けの並列コンピューティングプラットフォームである<strong>CUDA (Compute Unified Device Architecture)</strong>を前提にライブラリが開発されています.
従って, <strong>CUDA</strong>が搭載されたPCでは,<strong>CUDA</strong>を利用することが望ましいです.</li>
</ul>
<p>しかし,例えば現在のMacOSは<strong>CUDA</strong>に対応しておらず, WindowsPCでもコストなどの観点から異なるGPUが搭載されている場合があります.</p>
<p>M1〜M3などのApple Siliconを搭載したMacでは,PyTorchの実行にあたり<strong>CUDA</strong>の代わりに<strong>MPS (Metal Performance Shaders)</strong>が利用可能です.</p>
<p>PyTorchでは<code>torch.device()</code>で利用するデバイスを設定できますが,以下のコードでは, CUDA, MPSが利用できる場合にはそれらを利用し,利用できない場合にはCPUを利用しています.</p>
<p>該当部分(全体のインデントは省略)</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> torch.backends.mps.is_available():</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>    device <span class="op">=</span> torch.device(<span class="st">&quot;mps&quot;</span>) <span class="co">#Mac GPU</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="cf">elif</span> torch.cuda.is_available():</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>    device <span class="op">=</span> torch.device(<span class="st">&quot;cuda:0&quot;</span>) <span class="co">#Win GPU</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="cf">else</span>:</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>    device <span class="op">=</span> torch.device(<span class="st">&quot;cpu&quot;</span>) <span class="co">#CPU</span></span></code></pre></div>
</div>
<p>これから,先程分割した画像を利用してConvNeXtによる学習を行い, PCAとt-sneで2次元へ次元削減した後,ラベルごとの特徴を可視化してみます.</p>
<div class="warn">
<p>以下のコードを実行すると,PCのスペックによっては10分以上ほぼ全てのCPU/GPUが使用されます.
他の不必要なアプリを閉じて,時間に余裕があるときに電源に繋いだ状態で実行しましょう.
このコードは学生のローカル環境でも動くようになっていますが,上手くいかない場合はGoogle Colaboratory上で試してみましょう.</p>
</div>
<div class="warn">
<p>コードを実行して以下のようなWarningが表示される場合,個別の環境によって対処が異なるので教員に
相談してください.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="ex">Found</span> Intel OpenMP <span class="er">(</span><span class="st">&#39;libiomp&#39;</span><span class="kw">)</span> <span class="ex">and</span> LLVM OpenMP <span class="er">(</span><span class="st">&#39;libomp&#39;</span><span class="kw">)</span> <span class="ex">loaded</span> at</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="ex">the</span> same time. Both libraries are known to be incompatible and this</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="ex">can</span> cause random crashes or deadlocks on Linux when loaded in the</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="ex">same</span> Python program.</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="ex">Using</span> threadpoolctl may cause crashes or deadlocks. For more</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="ex">information</span> and possible workarounds, please see</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>    <span class="ex">https://github.com/joblib/threadpoolctl/blob/master/multiple_openmp.md</span></span></code></pre></div>
</div>
<p>コードの全体像は以下のようになります.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.pyplot <span class="im">as</span> plt</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> seaborn <span class="im">as</span> sns</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> random</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="co"># 次元削減用</span></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.manifold <span class="im">import</span> TSNE</span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.decomposition <span class="im">import</span> PCA</span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a><span class="co"># CNN用</span></span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> torch</span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> torch.nn <span class="im">as</span> nn</span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> torch.optim <span class="im">as</span> optim</span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> torchvision <span class="im">import</span> datasets, transforms, models</span>
<span id="cb14-17"><a href="#cb14-17" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> torch.utils.data <span class="im">import</span> DataLoader</span>
<span id="cb14-18"><a href="#cb14-18" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> torchvision.models <span class="im">import</span> ConvNeXt_Tiny_Weights</span>
<span id="cb14-19"><a href="#cb14-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-20"><a href="#cb14-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-21"><a href="#cb14-21" aria-hidden="true" tabindex="-1"></a><span class="co">#学習した特徴量を抽出する</span></span>
<span id="cb14-22"><a href="#cb14-22" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> extract_features(model, dataloader, device):</span>
<span id="cb14-23"><a href="#cb14-23" aria-hidden="true" tabindex="-1"></a>    model.<span class="bu">eval</span>()</span>
<span id="cb14-24"><a href="#cb14-24" aria-hidden="true" tabindex="-1"></a>    features <span class="op">=</span> []</span>
<span id="cb14-25"><a href="#cb14-25" aria-hidden="true" tabindex="-1"></a>    labels_list <span class="op">=</span> []</span>
<span id="cb14-26"><a href="#cb14-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-27"><a href="#cb14-27" aria-hidden="true" tabindex="-1"></a>    <span class="cf">with</span> torch.no_grad():</span>
<span id="cb14-28"><a href="#cb14-28" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> inputs, labels <span class="kw">in</span> dataloader:</span>
<span id="cb14-29"><a href="#cb14-29" aria-hidden="true" tabindex="-1"></a>            inputs <span class="op">=</span> inputs.to(device)</span>
<span id="cb14-30"><a href="#cb14-30" aria-hidden="true" tabindex="-1"></a>            labels <span class="op">=</span> labels.to(device)</span>
<span id="cb14-31"><a href="#cb14-31" aria-hidden="true" tabindex="-1"></a>            outputs <span class="op">=</span> model(inputs)</span>
<span id="cb14-32"><a href="#cb14-32" aria-hidden="true" tabindex="-1"></a>            features.append(outputs.cpu())</span>
<span id="cb14-33"><a href="#cb14-33" aria-hidden="true" tabindex="-1"></a>            labels_list.append(labels.cpu())</span>
<span id="cb14-34"><a href="#cb14-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-35"><a href="#cb14-35" aria-hidden="true" tabindex="-1"></a>    features <span class="op">=</span> torch.cat(features, dim<span class="op">=</span><span class="dv">0</span>)</span>
<span id="cb14-36"><a href="#cb14-36" aria-hidden="true" tabindex="-1"></a>    labels <span class="op">=</span> torch.cat(labels_list, dim<span class="op">=</span><span class="dv">0</span>)</span>
<span id="cb14-37"><a href="#cb14-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-38"><a href="#cb14-38" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> features, labels</span>
<span id="cb14-39"><a href="#cb14-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-40"><a href="#cb14-40" aria-hidden="true" tabindex="-1"></a><span class="co"># t-SNEによる次元圧縮と散布図の描画</span></span>
<span id="cb14-41"><a href="#cb14-41" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> plot_tsne(train_features, train_labels, path):</span>
<span id="cb14-42"><a href="#cb14-42" aria-hidden="true" tabindex="-1"></a>    <span class="co"># train_featuresとtrain_labelsをnumpyに変換</span></span>
<span id="cb14-43"><a href="#cb14-43" aria-hidden="true" tabindex="-1"></a>    features_np <span class="op">=</span> train_features.numpy()</span>
<span id="cb14-44"><a href="#cb14-44" aria-hidden="true" tabindex="-1"></a>    labels_np <span class="op">=</span> train_labels.numpy()</span>
<span id="cb14-45"><a href="#cb14-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-46"><a href="#cb14-46" aria-hidden="true" tabindex="-1"></a>    <span class="co"># t-SNEによる次元圧縮 (2次元)</span></span>
<span id="cb14-47"><a href="#cb14-47" aria-hidden="true" tabindex="-1"></a>    tsne <span class="op">=</span> TSNE(n_components<span class="op">=</span><span class="dv">2</span>, random_state<span class="op">=</span><span class="dv">42</span>)</span>
<span id="cb14-48"><a href="#cb14-48" aria-hidden="true" tabindex="-1"></a>    features_2d <span class="op">=</span> tsne.fit_transform(features_np)</span>
<span id="cb14-49"><a href="#cb14-49" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-50"><a href="#cb14-50" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 散布図の描画</span></span>
<span id="cb14-51"><a href="#cb14-51" aria-hidden="true" tabindex="-1"></a>    plt.figure(figsize<span class="op">=</span>(<span class="dv">10</span>, <span class="dv">8</span>))</span>
<span id="cb14-52"><a href="#cb14-52" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-53"><a href="#cb14-53" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 各ラベルに基づいて色分けしてプロット</span></span>
<span id="cb14-54"><a href="#cb14-54" aria-hidden="true" tabindex="-1"></a>    num_classes <span class="op">=</span> <span class="bu">len</span>(np.unique(labels_np))  <span class="co"># クラス数を取得</span></span>
<span id="cb14-55"><a href="#cb14-55" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> label <span class="kw">in</span> np.unique(labels_np):</span>
<span id="cb14-56"><a href="#cb14-56" aria-hidden="true" tabindex="-1"></a>        indices <span class="op">=</span> np.where(labels_np <span class="op">==</span> label)</span>
<span id="cb14-57"><a href="#cb14-57" aria-hidden="true" tabindex="-1"></a>        plt.scatter(features_2d[indices, <span class="dv">0</span>]</span>
<span id="cb14-58"><a href="#cb14-58" aria-hidden="true" tabindex="-1"></a>                   ,features_2d[indices, <span class="dv">1</span>]</span>
<span id="cb14-59"><a href="#cb14-59" aria-hidden="true" tabindex="-1"></a>                   ,label<span class="op">=</span><span class="ss">f&#39;</span><span class="sc">{</span>(label <span class="op">+</span> <span class="dv">1</span>) <span class="op">*</span> <span class="dv">10</span><span class="sc">}</span><span class="ss">s&#39;</span></span>
<span id="cb14-60"><a href="#cb14-60" aria-hidden="true" tabindex="-1"></a>                   ,alpha<span class="op">=</span><span class="fl">0.6</span>)</span>
<span id="cb14-61"><a href="#cb14-61" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-62"><a href="#cb14-62" aria-hidden="true" tabindex="-1"></a>    plt.title(<span class="st">&#39;t-SNE of Train Features&#39;</span>)</span>
<span id="cb14-63"><a href="#cb14-63" aria-hidden="true" tabindex="-1"></a>    plt.xlabel(<span class="st">&#39;t-SNE Component 1&#39;</span>)</span>
<span id="cb14-64"><a href="#cb14-64" aria-hidden="true" tabindex="-1"></a>    plt.ylabel(<span class="st">&#39;t-SNE Component 2&#39;</span>)</span>
<span id="cb14-65"><a href="#cb14-65" aria-hidden="true" tabindex="-1"></a>    plt.legend(title<span class="op">=</span><span class="st">&quot;Age Group&quot;</span>)</span>
<span id="cb14-66"><a href="#cb14-66" aria-hidden="true" tabindex="-1"></a>    plt.grid(<span class="va">True</span>)</span>
<span id="cb14-67"><a href="#cb14-67" aria-hidden="true" tabindex="-1"></a>    plt.savefig(path)</span>
<span id="cb14-68"><a href="#cb14-68" aria-hidden="true" tabindex="-1"></a>    plt.close()</span>
<span id="cb14-69"><a href="#cb14-69" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-70"><a href="#cb14-70" aria-hidden="true" tabindex="-1"></a><span class="co"># PCAによる次元圧縮と散布図の描画</span></span>
<span id="cb14-71"><a href="#cb14-71" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> plot_pca(train_features, train_labels, path):</span>
<span id="cb14-72"><a href="#cb14-72" aria-hidden="true" tabindex="-1"></a>    <span class="co"># train_featuresとtrain_labelsをnumpyに変換</span></span>
<span id="cb14-73"><a href="#cb14-73" aria-hidden="true" tabindex="-1"></a>    features_np <span class="op">=</span> train_features.numpy()</span>
<span id="cb14-74"><a href="#cb14-74" aria-hidden="true" tabindex="-1"></a>    labels_np <span class="op">=</span> train_labels.numpy()</span>
<span id="cb14-75"><a href="#cb14-75" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-76"><a href="#cb14-76" aria-hidden="true" tabindex="-1"></a>    <span class="co"># PCAによる次元圧縮 (2次元)</span></span>
<span id="cb14-77"><a href="#cb14-77" aria-hidden="true" tabindex="-1"></a>    pca <span class="op">=</span> PCA(n_components<span class="op">=</span><span class="dv">2</span>)</span>
<span id="cb14-78"><a href="#cb14-78" aria-hidden="true" tabindex="-1"></a>    features_2d <span class="op">=</span> pca.fit_transform(features_np)</span>
<span id="cb14-79"><a href="#cb14-79" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-80"><a href="#cb14-80" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 散布図の描画</span></span>
<span id="cb14-81"><a href="#cb14-81" aria-hidden="true" tabindex="-1"></a>    plt.figure(figsize<span class="op">=</span>(<span class="dv">10</span>, <span class="dv">8</span>))</span>
<span id="cb14-82"><a href="#cb14-82" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-83"><a href="#cb14-83" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 各ラベルに基づいて色分けしてプロット</span></span>
<span id="cb14-84"><a href="#cb14-84" aria-hidden="true" tabindex="-1"></a>    num_classes <span class="op">=</span> <span class="bu">len</span>(np.unique(labels_np))  <span class="co"># クラス数を取得</span></span>
<span id="cb14-85"><a href="#cb14-85" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> label <span class="kw">in</span> np.unique(labels_np):</span>
<span id="cb14-86"><a href="#cb14-86" aria-hidden="true" tabindex="-1"></a>        indices <span class="op">=</span> np.where(labels_np <span class="op">==</span> label)</span>
<span id="cb14-87"><a href="#cb14-87" aria-hidden="true" tabindex="-1"></a>        plt.scatter(features_2d[indices, <span class="dv">0</span>]</span>
<span id="cb14-88"><a href="#cb14-88" aria-hidden="true" tabindex="-1"></a>                   ,features_2d[indices, <span class="dv">1</span>]</span>
<span id="cb14-89"><a href="#cb14-89" aria-hidden="true" tabindex="-1"></a>                   ,label<span class="op">=</span><span class="ss">f&#39;</span><span class="sc">{</span>(label <span class="op">+</span> <span class="dv">1</span>) <span class="op">*</span> <span class="dv">10</span><span class="sc">}</span><span class="ss">s&#39;</span></span>
<span id="cb14-90"><a href="#cb14-90" aria-hidden="true" tabindex="-1"></a>                   ,alpha<span class="op">=</span><span class="fl">0.6</span>)</span>
<span id="cb14-91"><a href="#cb14-91" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-92"><a href="#cb14-92" aria-hidden="true" tabindex="-1"></a>    plt.title(<span class="st">&#39;PCA of Train Features&#39;</span>)</span>
<span id="cb14-93"><a href="#cb14-93" aria-hidden="true" tabindex="-1"></a>    plt.xlabel(<span class="st">&#39;PCA Component 1&#39;</span>)</span>
<span id="cb14-94"><a href="#cb14-94" aria-hidden="true" tabindex="-1"></a>    plt.ylabel(<span class="st">&#39;PCA Component 2&#39;</span>)</span>
<span id="cb14-95"><a href="#cb14-95" aria-hidden="true" tabindex="-1"></a>    plt.legend(title<span class="op">=</span><span class="st">&quot;Age Group&quot;</span>)</span>
<span id="cb14-96"><a href="#cb14-96" aria-hidden="true" tabindex="-1"></a>    plt.grid(<span class="va">True</span>)</span>
<span id="cb14-97"><a href="#cb14-97" aria-hidden="true" tabindex="-1"></a>    plt.savefig(path)</span>
<span id="cb14-98"><a href="#cb14-98" aria-hidden="true" tabindex="-1"></a>    plt.close()</span>
<span id="cb14-99"><a href="#cb14-99" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-100"><a href="#cb14-100" aria-hidden="true" tabindex="-1"></a><span class="co"># 乱数シードを設定</span></span>
<span id="cb14-101"><a href="#cb14-101" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> set_seed(seed):</span>
<span id="cb14-102"><a href="#cb14-102" aria-hidden="true" tabindex="-1"></a>    torch.manual_seed(seed)</span>
<span id="cb14-103"><a href="#cb14-103" aria-hidden="true" tabindex="-1"></a>    np.random.seed(seed)              <span class="co"># Numpy用の乱数シードを設定</span></span>
<span id="cb14-104"><a href="#cb14-104" aria-hidden="true" tabindex="-1"></a>    random.seed(seed)                 <span class="co"># Pythonの標準乱数シードを設定</span></span>
<span id="cb14-105"><a href="#cb14-105" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-106"><a href="#cb14-106" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 再現性を完全に保証するために以下も設定（ただし、若干のパフォーマンス低下の可能性あり）</span></span>
<span id="cb14-107"><a href="#cb14-107" aria-hidden="true" tabindex="-1"></a>    torch.backends.cudnn.deterministic <span class="op">=</span> <span class="va">True</span></span>
<span id="cb14-108"><a href="#cb14-108" aria-hidden="true" tabindex="-1"></a>    torch.backends.cudnn.benchmark <span class="op">=</span> <span class="va">False</span></span>
<span id="cb14-109"><a href="#cb14-109" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-110"><a href="#cb14-110" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main():</span>
<span id="cb14-111"><a href="#cb14-111" aria-hidden="true" tabindex="-1"></a>    <span class="co"># シードを設定する</span></span>
<span id="cb14-112"><a href="#cb14-112" aria-hidden="true" tabindex="-1"></a>    <span class="co">#(自分の研究でやる場合は以下の行は消しても問題ない.)</span></span>
<span id="cb14-113"><a href="#cb14-113" aria-hidden="true" tabindex="-1"></a>    set_seed(<span class="dv">2024</span>)</span>
<span id="cb14-114"><a href="#cb14-114" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-115"><a href="#cb14-115" aria-hidden="true" tabindex="-1"></a>    <span class="co"># データのディレクトリ設定</span></span>
<span id="cb14-116"><a href="#cb14-116" aria-hidden="true" tabindex="-1"></a>    data_dir <span class="op">=</span> <span class="st">&#39;data/sorted_images_split&#39;</span></span>
<span id="cb14-117"><a href="#cb14-117" aria-hidden="true" tabindex="-1"></a>    batch_size <span class="op">=</span> <span class="dv">32</span></span>
<span id="cb14-118"><a href="#cb14-118" aria-hidden="true" tabindex="-1"></a>    num_epochs <span class="op">=</span> <span class="dv">5</span></span>
<span id="cb14-119"><a href="#cb14-119" aria-hidden="true" tabindex="-1"></a>    num_classes <span class="op">=</span> <span class="dv">6</span>  <span class="co"># 10代, 20代, ..., 60代</span></span>
<span id="cb14-120"><a href="#cb14-120" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-121"><a href="#cb14-121" aria-hidden="true" tabindex="-1"></a>    <span class="co"># データ変換（前処理）</span></span>
<span id="cb14-122"><a href="#cb14-122" aria-hidden="true" tabindex="-1"></a>    data_transforms <span class="op">=</span> {</span>
<span id="cb14-123"><a href="#cb14-123" aria-hidden="true" tabindex="-1"></a>        <span class="st">&#39;train&#39;</span>: transforms.Compose([</span>
<span id="cb14-124"><a href="#cb14-124" aria-hidden="true" tabindex="-1"></a>            transforms.Resize((<span class="dv">224</span>, <span class="dv">224</span>)),     <span class="co">#画像のリサイズ</span></span>
<span id="cb14-125"><a href="#cb14-125" aria-hidden="true" tabindex="-1"></a>            transforms.RandomHorizontalFlip(), <span class="co">#画像をランダムに反転</span></span>
<span id="cb14-126"><a href="#cb14-126" aria-hidden="true" tabindex="-1"></a>            transforms.ColorJitter(brightness<span class="op">=</span><span class="fl">0.2</span>, contrast<span class="op">=</span><span class="fl">0.2</span>),  <span class="co"># 色調変化</span></span>
<span id="cb14-127"><a href="#cb14-127" aria-hidden="true" tabindex="-1"></a>            transforms.ToTensor(),             <span class="co">#テンソル(多次元配列)に変換</span></span>
<span id="cb14-128"><a href="#cb14-128" aria-hidden="true" tabindex="-1"></a>            transforms.Normalize(mean<span class="op">=</span>[<span class="fl">0.485</span>, <span class="fl">0.456</span>, <span class="fl">0.406</span>]</span>
<span id="cb14-129"><a href="#cb14-129" aria-hidden="true" tabindex="-1"></a>                                ,std<span class="op">=</span>[<span class="fl">0.229</span>, <span class="fl">0.224</span>, <span class="fl">0.225</span>]), <span class="co">#正規化(本来は値を変更する必要あり.</span></span>
<span id="cb14-130"><a href="#cb14-130" aria-hidden="true" tabindex="-1"></a>        ]),</span>
<span id="cb14-131"><a href="#cb14-131" aria-hidden="true" tabindex="-1"></a>        <span class="st">&#39;val&#39;</span>: transforms.Compose([</span>
<span id="cb14-132"><a href="#cb14-132" aria-hidden="true" tabindex="-1"></a>            transforms.Resize((<span class="dv">224</span>, <span class="dv">224</span>)),</span>
<span id="cb14-133"><a href="#cb14-133" aria-hidden="true" tabindex="-1"></a>            transforms.ToTensor(),</span>
<span id="cb14-134"><a href="#cb14-134" aria-hidden="true" tabindex="-1"></a>            transforms.Normalize([<span class="fl">0.485</span>, <span class="fl">0.456</span>, <span class="fl">0.406</span>]</span>
<span id="cb14-135"><a href="#cb14-135" aria-hidden="true" tabindex="-1"></a>                                ,[<span class="fl">0.229</span>, <span class="fl">0.224</span>, <span class="fl">0.225</span>]),</span>
<span id="cb14-136"><a href="#cb14-136" aria-hidden="true" tabindex="-1"></a>        ]),</span>
<span id="cb14-137"><a href="#cb14-137" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb14-138"><a href="#cb14-138" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-139"><a href="#cb14-139" aria-hidden="true" tabindex="-1"></a>    <span class="co"># データセットの読み込み</span></span>
<span id="cb14-140"><a href="#cb14-140" aria-hidden="true" tabindex="-1"></a>    image_datasets <span class="op">=</span> {x: datasets.ImageFolder(os.path.join(data_dir, x),</span>
<span id="cb14-141"><a href="#cb14-141" aria-hidden="true" tabindex="-1"></a>                                              data_transforms[x])</span>
<span id="cb14-142"><a href="#cb14-142" aria-hidden="true" tabindex="-1"></a>                      <span class="cf">for</span> x <span class="kw">in</span> [<span class="st">&#39;train&#39;</span>, <span class="st">&#39;val&#39;</span>]}</span>
<span id="cb14-143"><a href="#cb14-143" aria-hidden="true" tabindex="-1"></a>    dataloaders <span class="op">=</span> {x: DataLoader(image_datasets[x]</span>
<span id="cb14-144"><a href="#cb14-144" aria-hidden="true" tabindex="-1"></a>                                ,batch_size<span class="op">=</span>batch_size</span>
<span id="cb14-145"><a href="#cb14-145" aria-hidden="true" tabindex="-1"></a>                                ,shuffle<span class="op">=</span><span class="va">True</span></span>
<span id="cb14-146"><a href="#cb14-146" aria-hidden="true" tabindex="-1"></a>                                ,num_workers<span class="op">=</span><span class="dv">4</span>) <span class="co">#使用するCore数</span></span>
<span id="cb14-147"><a href="#cb14-147" aria-hidden="true" tabindex="-1"></a>                   <span class="cf">for</span> x <span class="kw">in</span> [<span class="st">&#39;train&#39;</span>, <span class="st">&#39;val&#39;</span>]}</span>
<span id="cb14-148"><a href="#cb14-148" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-149"><a href="#cb14-149" aria-hidden="true" tabindex="-1"></a>    <span class="co"># デバイス設定</span></span>
<span id="cb14-150"><a href="#cb14-150" aria-hidden="true" tabindex="-1"></a>    <span class="co">#GPUが利用できる場合はGPUを使う,そうでない場合はCPUを計算に利用します.</span></span>
<span id="cb14-151"><a href="#cb14-151" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> torch.backends.mps.is_available():</span>
<span id="cb14-152"><a href="#cb14-152" aria-hidden="true" tabindex="-1"></a>        device <span class="op">=</span> torch.device(<span class="st">&quot;mps&quot;</span>) <span class="co">#Mac GPU</span></span>
<span id="cb14-153"><a href="#cb14-153" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> torch.cuda.is_available():</span>
<span id="cb14-154"><a href="#cb14-154" aria-hidden="true" tabindex="-1"></a>        device <span class="op">=</span> torch.device(<span class="st">&quot;cuda:0&quot;</span>) <span class="co">#Win GPU</span></span>
<span id="cb14-155"><a href="#cb14-155" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb14-156"><a href="#cb14-156" aria-hidden="true" tabindex="-1"></a>        device <span class="op">=</span> torch.device(<span class="st">&quot;cpu&quot;</span>) <span class="co">#CPU</span></span>
<span id="cb14-157"><a href="#cb14-157" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-158"><a href="#cb14-158" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f&#39;Using device: </span><span class="sc">{</span>device<span class="sc">}</span><span class="ss">&#39;</span>)</span>
<span id="cb14-159"><a href="#cb14-159" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-160"><a href="#cb14-160" aria-hidden="true" tabindex="-1"></a>    <span class="co"># ConvNextモデルの読み込みとカスタマイズ</span></span>
<span id="cb14-161"><a href="#cb14-161" aria-hidden="true" tabindex="-1"></a>    weights <span class="op">=</span> ConvNeXt_Tiny_Weights.IMAGENET1K_V1  <span class="co"># 最新の重みを指定</span></span>
<span id="cb14-162"><a href="#cb14-162" aria-hidden="true" tabindex="-1"></a>    model <span class="op">=</span> models.convnext_tiny(weights<span class="op">=</span>weights)  <span class="co"># ConvNextの小さいモデルを使用</span></span>
<span id="cb14-163"><a href="#cb14-163" aria-hidden="true" tabindex="-1"></a>    <span class="co">#モデル分類層の最終層(第3層(0,1,2番目))の入力特徴量を取得</span></span>
<span id="cb14-164"><a href="#cb14-164" aria-hidden="true" tabindex="-1"></a>    num_ftrs <span class="op">=</span> model.classifier[<span class="dv">2</span>].in_features</span>
<span id="cb14-165"><a href="#cb14-165" aria-hidden="true" tabindex="-1"></a>    <span class="co">#既に学習されたモデルではクラス数がことなるので ,入力特徴量の数(num_ftrs)はそのまま</span></span>
<span id="cb14-166"><a href="#cb14-166" aria-hidden="true" tabindex="-1"></a>    <span class="co">#出力をクラス数に変更</span></span>
<span id="cb14-167"><a href="#cb14-167" aria-hidden="true" tabindex="-1"></a>    model.classifier[<span class="dv">2</span>] <span class="op">=</span> nn.Linear(num_ftrs, num_classes)</span>
<span id="cb14-168"><a href="#cb14-168" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-169"><a href="#cb14-169" aria-hidden="true" tabindex="-1"></a>    model <span class="op">=</span> model.to(device)</span>
<span id="cb14-170"><a href="#cb14-170" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-171"><a href="#cb14-171" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 損失関数とオプティマイザ</span></span>
<span id="cb14-172"><a href="#cb14-172" aria-hidden="true" tabindex="-1"></a>    criterion <span class="op">=</span> nn.CrossEntropyLoss() <span class="co">#クロスエントロピー損失</span></span>
<span id="cb14-173"><a href="#cb14-173" aria-hidden="true" tabindex="-1"></a>    optimizer <span class="op">=</span> optim.Adam(model.parameters() <span class="co">#Adam</span></span>
<span id="cb14-174"><a href="#cb14-174" aria-hidden="true" tabindex="-1"></a>                          ,lr<span class="op">=</span><span class="fl">0.0001</span>) <span class="co">#Learning rate (学習率)</span></span>
<span id="cb14-175"><a href="#cb14-175" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-176"><a href="#cb14-176" aria-hidden="true" tabindex="-1"></a>    <span class="co">#SGDを利用する場合</span></span>
<span id="cb14-177"><a href="#cb14-177" aria-hidden="true" tabindex="-1"></a>    <span class="co">#optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)</span></span>
<span id="cb14-178"><a href="#cb14-178" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-179"><a href="#cb14-179" aria-hidden="true" tabindex="-1"></a>    <span class="co">#結果の記録用</span></span>
<span id="cb14-180"><a href="#cb14-180" aria-hidden="true" tabindex="-1"></a>    train_losses <span class="op">=</span> []</span>
<span id="cb14-181"><a href="#cb14-181" aria-hidden="true" tabindex="-1"></a>    train_accuracies <span class="op">=</span> []</span>
<span id="cb14-182"><a href="#cb14-182" aria-hidden="true" tabindex="-1"></a>    val_losses <span class="op">=</span> []</span>
<span id="cb14-183"><a href="#cb14-183" aria-hidden="true" tabindex="-1"></a>    val_accuracies <span class="op">=</span> []</span>
<span id="cb14-184"><a href="#cb14-184" aria-hidden="true" tabindex="-1"></a>    results <span class="op">=</span> []</span>
<span id="cb14-185"><a href="#cb14-185" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-186"><a href="#cb14-186" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 学習ループ</span></span>
<span id="cb14-187"><a href="#cb14-187" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> epoch <span class="kw">in</span> <span class="bu">range</span>(num_epochs):</span>
<span id="cb14-188"><a href="#cb14-188" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="ss">f&#39;Epoch </span><span class="sc">{</span>epoch<span class="op">+</span><span class="dv">1</span><span class="sc">}</span><span class="ss">/</span><span class="sc">{</span>num_epochs<span class="sc">}</span><span class="ss">&#39;</span>)</span>
<span id="cb14-189"><a href="#cb14-189" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&#39;-&#39;</span> <span class="op">*</span> <span class="dv">10</span>)</span>
<span id="cb14-190"><a href="#cb14-190" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-191"><a href="#cb14-191" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> phase <span class="kw">in</span> [<span class="st">&#39;train&#39;</span>, <span class="st">&#39;val&#39;</span>]:</span>
<span id="cb14-192"><a href="#cb14-192" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> phase <span class="op">==</span> <span class="st">&#39;train&#39;</span>:</span>
<span id="cb14-193"><a href="#cb14-193" aria-hidden="true" tabindex="-1"></a>                model.train()</span>
<span id="cb14-194"><a href="#cb14-194" aria-hidden="true" tabindex="-1"></a>            <span class="cf">else</span>:</span>
<span id="cb14-195"><a href="#cb14-195" aria-hidden="true" tabindex="-1"></a>                model.<span class="bu">eval</span>()</span>
<span id="cb14-196"><a href="#cb14-196" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-197"><a href="#cb14-197" aria-hidden="true" tabindex="-1"></a>            running_loss <span class="op">=</span> <span class="fl">0.0</span></span>
<span id="cb14-198"><a href="#cb14-198" aria-hidden="true" tabindex="-1"></a>            running_corrects <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb14-199"><a href="#cb14-199" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-200"><a href="#cb14-200" aria-hidden="true" tabindex="-1"></a>            <span class="cf">for</span> inputs, labels <span class="kw">in</span> dataloaders[phase]:</span>
<span id="cb14-201"><a href="#cb14-201" aria-hidden="true" tabindex="-1"></a>                inputs <span class="op">=</span> inputs.to(device)</span>
<span id="cb14-202"><a href="#cb14-202" aria-hidden="true" tabindex="-1"></a>                labels <span class="op">=</span> labels.to(device)</span>
<span id="cb14-203"><a href="#cb14-203" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-204"><a href="#cb14-204" aria-hidden="true" tabindex="-1"></a>                optimizer.zero_grad()</span>
<span id="cb14-205"><a href="#cb14-205" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-206"><a href="#cb14-206" aria-hidden="true" tabindex="-1"></a>                <span class="cf">with</span> torch.set_grad_enabled(phase <span class="op">==</span> <span class="st">&#39;train&#39;</span>):</span>
<span id="cb14-207"><a href="#cb14-207" aria-hidden="true" tabindex="-1"></a>                    outputs <span class="op">=</span> model(inputs)</span>
<span id="cb14-208"><a href="#cb14-208" aria-hidden="true" tabindex="-1"></a>                    _, preds <span class="op">=</span> torch.<span class="bu">max</span>(outputs, <span class="dv">1</span>)</span>
<span id="cb14-209"><a href="#cb14-209" aria-hidden="true" tabindex="-1"></a>                    loss <span class="op">=</span> criterion(outputs, labels)</span>
<span id="cb14-210"><a href="#cb14-210" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-211"><a href="#cb14-211" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">if</span> phase <span class="op">==</span> <span class="st">&#39;train&#39;</span>:</span>
<span id="cb14-212"><a href="#cb14-212" aria-hidden="true" tabindex="-1"></a>                        loss.backward()</span>
<span id="cb14-213"><a href="#cb14-213" aria-hidden="true" tabindex="-1"></a>                        optimizer.step()</span>
<span id="cb14-214"><a href="#cb14-214" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-215"><a href="#cb14-215" aria-hidden="true" tabindex="-1"></a>                running_loss <span class="op">+=</span> loss.item() <span class="op">*</span> inputs.size(<span class="dv">0</span>)</span>
<span id="cb14-216"><a href="#cb14-216" aria-hidden="true" tabindex="-1"></a>                running_corrects <span class="op">+=</span> torch.<span class="bu">sum</span>(preds <span class="op">==</span> labels.data)</span>
<span id="cb14-217"><a href="#cb14-217" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> phase <span class="op">==</span> <span class="st">&#39;val&#39;</span>:  <span class="co"># バリデーション時に予測と実際のラベルを保存</span></span>
<span id="cb14-218"><a href="#cb14-218" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="bu">len</span>(labels)):</span>
<span id="cb14-219"><a href="#cb14-219" aria-hidden="true" tabindex="-1"></a>                        results.append({</span>
<span id="cb14-220"><a href="#cb14-220" aria-hidden="true" tabindex="-1"></a>                            <span class="st">&#39;epoch&#39;</span>: epoch <span class="op">+</span> <span class="dv">1</span>,</span>
<span id="cb14-221"><a href="#cb14-221" aria-hidden="true" tabindex="-1"></a>                            <span class="st">&#39;pred&#39;</span>: preds[i].item(),</span>
<span id="cb14-222"><a href="#cb14-222" aria-hidden="true" tabindex="-1"></a>                            <span class="st">&#39;acctual&#39;</span>: labels[i].item()</span>
<span id="cb14-223"><a href="#cb14-223" aria-hidden="true" tabindex="-1"></a>                        })</span>
<span id="cb14-224"><a href="#cb14-224" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-225"><a href="#cb14-225" aria-hidden="true" tabindex="-1"></a>            epoch_loss <span class="op">=</span> running_loss <span class="op">/</span> <span class="bu">len</span>(image_datasets[phase])</span>
<span id="cb14-226"><a href="#cb14-226" aria-hidden="true" tabindex="-1"></a>            epoch_acc <span class="op">=</span> running_corrects.<span class="bu">float</span>() <span class="op">/</span> <span class="bu">len</span>(image_datasets[phase])</span>
<span id="cb14-227"><a href="#cb14-227" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-228"><a href="#cb14-228" aria-hidden="true" tabindex="-1"></a>            <span class="bu">print</span>(<span class="ss">f&#39;</span><span class="sc">{</span>phase<span class="sc">}</span><span class="ss"> Loss: </span><span class="sc">{</span>epoch_loss<span class="sc">:.4f}</span><span class="ss"> Acc: </span><span class="sc">{</span>epoch_acc<span class="sc">:.4f}</span><span class="ss">&#39;</span>)</span>
<span id="cb14-229"><a href="#cb14-229" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> phase <span class="op">==</span> <span class="st">&#39;train&#39;</span>:</span>
<span id="cb14-230"><a href="#cb14-230" aria-hidden="true" tabindex="-1"></a>                train_losses.append(epoch_loss)</span>
<span id="cb14-231"><a href="#cb14-231" aria-hidden="true" tabindex="-1"></a>                train_accuracies.append(epoch_acc.item())</span>
<span id="cb14-232"><a href="#cb14-232" aria-hidden="true" tabindex="-1"></a>            <span class="cf">else</span>:</span>
<span id="cb14-233"><a href="#cb14-233" aria-hidden="true" tabindex="-1"></a>                val_losses.append(epoch_loss)</span>
<span id="cb14-234"><a href="#cb14-234" aria-hidden="true" tabindex="-1"></a>                val_accuracies.append(epoch_acc.item())</span>
<span id="cb14-235"><a href="#cb14-235" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-236"><a href="#cb14-236" aria-hidden="true" tabindex="-1"></a>    <span class="co">#結果の表示</span></span>
<span id="cb14-237"><a href="#cb14-237" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-238"><a href="#cb14-238" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;Training complete&#39;</span>)</span>
<span id="cb14-239"><a href="#cb14-239" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&quot;Training Losses: &quot;</span>, train_losses)</span>
<span id="cb14-240"><a href="#cb14-240" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&quot;Training Accuracies: &quot;</span>, train_accuracies)</span>
<span id="cb14-241"><a href="#cb14-241" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&quot;Validation Losses: &quot;</span>, val_losses)</span>
<span id="cb14-242"><a href="#cb14-242" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&quot;Validation Accuracies: &quot;</span>, val_accuracies)</span>
<span id="cb14-243"><a href="#cb14-243" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-244"><a href="#cb14-244" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 結果を可視化してCSVファイルに保存</span></span>
<span id="cb14-245"><a href="#cb14-245" aria-hidden="true" tabindex="-1"></a>    loss_acc <span class="op">=</span> pd.DataFrame({<span class="st">&#39;train_losses&#39;</span>:train_losses</span>
<span id="cb14-246"><a href="#cb14-246" aria-hidden="true" tabindex="-1"></a>                            ,<span class="st">&#39;train_accuracies&#39;</span>:train_accuracies</span>
<span id="cb14-247"><a href="#cb14-247" aria-hidden="true" tabindex="-1"></a>                            ,<span class="st">&#39;val_losses&#39;</span>:val_losses</span>
<span id="cb14-248"><a href="#cb14-248" aria-hidden="true" tabindex="-1"></a>                            ,<span class="st">&#39;val_accuracies&#39;</span>:val_accuracies})</span>
<span id="cb14-249"><a href="#cb14-249" aria-hidden="true" tabindex="-1"></a>    plt.title(<span class="st">&#39;Losses&#39;</span>)</span>
<span id="cb14-250"><a href="#cb14-250" aria-hidden="true" tabindex="-1"></a>    plt.xlabel(<span class="st">&#39;Epoch&#39;</span>)</span>
<span id="cb14-251"><a href="#cb14-251" aria-hidden="true" tabindex="-1"></a>    plt.ylabel(<span class="st">&#39;Losses&#39;</span>)</span>
<span id="cb14-252"><a href="#cb14-252" aria-hidden="true" tabindex="-1"></a>    plt.plot(np.arange(num_epochs),loss_acc[<span class="st">&#39;train_losses&#39;</span>],c<span class="op">=</span><span class="st">&#39;r&#39;</span>,label<span class="op">=</span><span class="st">&#39;train_losses&#39;</span>)</span>
<span id="cb14-253"><a href="#cb14-253" aria-hidden="true" tabindex="-1"></a>    plt.plot(np.arange(num_epochs),loss_acc[<span class="st">&#39;val_losses&#39;</span>],c<span class="op">=</span><span class="st">&#39;b&#39;</span>,label<span class="op">=</span><span class="st">&#39;val_losses&#39;</span>)</span>
<span id="cb14-254"><a href="#cb14-254" aria-hidden="true" tabindex="-1"></a>    plt.grid(<span class="va">True</span>)</span>
<span id="cb14-255"><a href="#cb14-255" aria-hidden="true" tabindex="-1"></a>    plt.legend()</span>
<span id="cb14-256"><a href="#cb14-256" aria-hidden="true" tabindex="-1"></a>    plt.savefig(<span class="st">&#39;data/result/convnext_loss.png&#39;</span>)</span>
<span id="cb14-257"><a href="#cb14-257" aria-hidden="true" tabindex="-1"></a>    plt.close()</span>
<span id="cb14-258"><a href="#cb14-258" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-259"><a href="#cb14-259" aria-hidden="true" tabindex="-1"></a>    plt.title(<span class="st">&#39;Accuracies&#39;</span>)</span>
<span id="cb14-260"><a href="#cb14-260" aria-hidden="true" tabindex="-1"></a>    plt.xlabel(<span class="st">&#39;Epoch&#39;</span>)</span>
<span id="cb14-261"><a href="#cb14-261" aria-hidden="true" tabindex="-1"></a>    plt.ylabel(<span class="st">&#39;Accuracies&#39;</span>)</span>
<span id="cb14-262"><a href="#cb14-262" aria-hidden="true" tabindex="-1"></a>    plt.plot(np.arange(num_epochs),loss_acc[<span class="st">&#39;train_accuracies&#39;</span>],c<span class="op">=</span><span class="st">&#39;r&#39;</span>,label<span class="op">=</span><span class="st">&#39;train_accuracies&#39;</span>)</span>
<span id="cb14-263"><a href="#cb14-263" aria-hidden="true" tabindex="-1"></a>    plt.plot(np.arange(num_epochs),loss_acc[<span class="st">&#39;val_accuracies&#39;</span>],c<span class="op">=</span><span class="st">&#39;b&#39;</span>,label<span class="op">=</span><span class="st">&#39;val_accuracies&#39;</span>)</span>
<span id="cb14-264"><a href="#cb14-264" aria-hidden="true" tabindex="-1"></a>    plt.grid(<span class="va">True</span>)</span>
<span id="cb14-265"><a href="#cb14-265" aria-hidden="true" tabindex="-1"></a>    plt.legend()</span>
<span id="cb14-266"><a href="#cb14-266" aria-hidden="true" tabindex="-1"></a>    plt.savefig(<span class="st">&#39;data/result/convnext_acc.png&#39;</span>)</span>
<span id="cb14-267"><a href="#cb14-267" aria-hidden="true" tabindex="-1"></a>    plt.close()</span>
<span id="cb14-268"><a href="#cb14-268" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-269"><a href="#cb14-269" aria-hidden="true" tabindex="-1"></a>    loss_acc.to_csv(<span class="st">&#39;data/result/convnext_loss_acc.csv&#39;</span></span>
<span id="cb14-270"><a href="#cb14-270" aria-hidden="true" tabindex="-1"></a>                   ,encoding<span class="op">=</span><span class="st">&#39;utf_8_sig&#39;</span>)</span>
<span id="cb14-271"><a href="#cb14-271" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-272"><a href="#cb14-272" aria-hidden="true" tabindex="-1"></a>    results_df <span class="op">=</span> pd.DataFrame(results)</span>
<span id="cb14-273"><a href="#cb14-273" aria-hidden="true" tabindex="-1"></a>    result_max_epochs <span class="op">=</span> results_df[results_df[<span class="st">&#39;epoch&#39;</span>] <span class="op">==</span> num_epochs]</span>
<span id="cb14-274"><a href="#cb14-274" aria-hidden="true" tabindex="-1"></a>    result_heatmap <span class="op">=</span> pd.DataFrame(index<span class="op">=</span>np.arange(<span class="dv">6</span>)</span>
<span id="cb14-275"><a href="#cb14-275" aria-hidden="true" tabindex="-1"></a>                                 ,columns<span class="op">=</span>np.arange(<span class="dv">6</span>)</span>
<span id="cb14-276"><a href="#cb14-276" aria-hidden="true" tabindex="-1"></a>                                 ,data<span class="op">=</span><span class="dv">0</span>)</span>
<span id="cb14-277"><a href="#cb14-277" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-278"><a href="#cb14-278" aria-hidden="true" tabindex="-1"></a>    <span class="co">#実際のラベルに対する予測された回数をカウント</span></span>
<span id="cb14-279"><a href="#cb14-279" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> i <span class="kw">in</span> result_max_epochs.index:</span>
<span id="cb14-280"><a href="#cb14-280" aria-hidden="true" tabindex="-1"></a>        p <span class="op">=</span> result_max_epochs.at[i,<span class="st">&#39;pred&#39;</span>]</span>
<span id="cb14-281"><a href="#cb14-281" aria-hidden="true" tabindex="-1"></a>        a <span class="op">=</span> result_max_epochs.at[i,<span class="st">&#39;acctual&#39;</span>]</span>
<span id="cb14-282"><a href="#cb14-282" aria-hidden="true" tabindex="-1"></a>        result_heatmap.at[p,a] <span class="op">+=</span><span class="dv">1</span></span>
<span id="cb14-283"><a href="#cb14-283" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-284"><a href="#cb14-284" aria-hidden="true" tabindex="-1"></a>    <span class="co">#列相対度数に変換</span></span>
<span id="cb14-285"><a href="#cb14-285" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> c <span class="kw">in</span> result_heatmap:</span>
<span id="cb14-286"><a href="#cb14-286" aria-hidden="true" tabindex="-1"></a>        result_heatmap[c] <span class="op">=</span> result_heatmap[c] <span class="op">/</span> result_heatmap[c].<span class="bu">sum</span>()</span>
<span id="cb14-287"><a href="#cb14-287" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-288"><a href="#cb14-288" aria-hidden="true" tabindex="-1"></a>    <span class="co">#ヒートマップとして表現</span></span>
<span id="cb14-289"><a href="#cb14-289" aria-hidden="true" tabindex="-1"></a>    sns.heatmap(result_heatmap</span>
<span id="cb14-290"><a href="#cb14-290" aria-hidden="true" tabindex="-1"></a>               ,annot<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb14-291"><a href="#cb14-291" aria-hidden="true" tabindex="-1"></a>    plt.ylabel(<span class="st">&#39;pred&#39;</span>)</span>
<span id="cb14-292"><a href="#cb14-292" aria-hidden="true" tabindex="-1"></a>    plt.xlabel(<span class="st">&#39;acctual&#39;</span>)</span>
<span id="cb14-293"><a href="#cb14-293" aria-hidden="true" tabindex="-1"></a>    plt.savefig(<span class="st">&#39;data/result/pred_acctual_heatmap.png&#39;</span>)</span>
<span id="cb14-294"><a href="#cb14-294" aria-hidden="true" tabindex="-1"></a>    plt.close()</span>
<span id="cb14-295"><a href="#cb14-295" aria-hidden="true" tabindex="-1"></a>    results_df.to_csv(<span class="st">&#39;data/result/pred_acctual.csv&#39;</span></span>
<span id="cb14-296"><a href="#cb14-296" aria-hidden="true" tabindex="-1"></a>                     ,encoding<span class="op">=</span><span class="st">&#39;utf_8_sig&#39;</span>)</span>
<span id="cb14-297"><a href="#cb14-297" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-298"><a href="#cb14-298" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 特徴量を取得する</span></span>
<span id="cb14-299"><a href="#cb14-299" aria-hidden="true" tabindex="-1"></a>    train_features, train_labels <span class="op">=</span> extract_features(model, dataloaders[<span class="st">&#39;train&#39;</span>], device)</span>
<span id="cb14-300"><a href="#cb14-300" aria-hidden="true" tabindex="-1"></a>    val_features, val_labels <span class="op">=</span> extract_features(model, dataloaders[<span class="st">&#39;val&#39;</span>], device)</span>
<span id="cb14-301"><a href="#cb14-301" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-302"><a href="#cb14-302" aria-hidden="true" tabindex="-1"></a>    <span class="co"># (毎回学習するのは大変なので)特徴量を表示または保存しておく</span></span>
<span id="cb14-303"><a href="#cb14-303" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 読み込む場合は</span></span>
<span id="cb14-304"><a href="#cb14-304" aria-hidden="true" tabindex="-1"></a>    <span class="co"># train_features, train_labels = torch.load(&#39;train_features.pth&#39;)</span></span>
<span id="cb14-305"><a href="#cb14-305" aria-hidden="true" tabindex="-1"></a>    torch.save((train_features, train_labels), <span class="st">&#39;data/result/convnext_train_features.pth&#39;</span>)</span>
<span id="cb14-306"><a href="#cb14-306" aria-hidden="true" tabindex="-1"></a>    torch.save((val_features, val_labels), <span class="st">&#39;data/result/convnext_val_features.pth&#39;</span>)</span>
<span id="cb14-307"><a href="#cb14-307" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-308"><a href="#cb14-308" aria-hidden="true" tabindex="-1"></a>    <span class="co">#散布図の描画</span></span>
<span id="cb14-309"><a href="#cb14-309" aria-hidden="true" tabindex="-1"></a>    plot_tsne(train_features, train_labels,<span class="st">&#39;data/result/convnext_tsne.png&#39;</span>)</span>
<span id="cb14-310"><a href="#cb14-310" aria-hidden="true" tabindex="-1"></a>    plot_pca(train_features, train_labels,<span class="st">&#39;data/result/convnext_pca.png&#39;</span>)</span>
<span id="cb14-311"><a href="#cb14-311" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-312"><a href="#cb14-312" aria-hidden="true" tabindex="-1"></a><span class="co">#スクリプトとして実行された場合(python convnext.py)で実行された場合に,</span></span>
<span id="cb14-313"><a href="#cb14-313" aria-hidden="true" tabindex="-1"></a><span class="co"># if __name__ == &#39;__main__&#39;: 以下のみが実行される.</span></span>
<span id="cb14-314"><a href="#cb14-314" aria-hidden="true" tabindex="-1"></a><span class="co"># 並列処理(multiprocessing)を行う場合にこのようにしないと,</span></span>
<span id="cb14-315"><a href="#cb14-315" aria-hidden="true" tabindex="-1"></a><span class="co"># 各処理ですべて同じコードが実行されるため,無限ループなどが起きる.</span></span>
<span id="cb14-316"><a href="#cb14-316" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">&#39;__main__&#39;</span>:</span>
<span id="cb14-317"><a href="#cb14-317" aria-hidden="true" tabindex="-1"></a>    main()</span></code></pre></div>
<p>出力されている<code>convnext_loss.png</code>と<code>convnext_acc.png</code>は<code>epoch</code>ごとの<code>loss</code>と<code>acc</code>の推移を表しています. <code>acc</code>は,モデルが予測したラベルの実際のラベルに対する正答率であり,<code>1</code>であれば予測が完全にラベルと一致していることを示しています. 今回は10代から60代までの6ラベルなので,完全にランダムにラベルを予測しても<code>0.16</code>程度はラベルと予測が一致します.</p>
<figure>
<img src="/images/convnext_loss_epoch20.png" alt="lossの推移" />
<figcaption aria-hidden="true">lossの推移</figcaption>
</figure>
<figure>
<img src="/images/convnext_acc_epoch20.png" alt="accの推移" />
<figcaption aria-hidden="true">accの推移</figcaption>
</figure>
<p>グラフを確認してみると<code>epoch</code>が<code>5</code>をピークとして<code>loss</code>も<code>acc</code>も低下していることがわかります. そこで, もう一度,<code>num_epochs</code>を<code>5</code>に変更して,学習してみましょう. <code>random_seed</code>が固定されているので,基本的には同じ値が出力されるはずです.</p>
<figure>
<img src="/images/convnext_acc_epoch5.png" alt="accの推移(epoch 5)" />
<figcaption aria-hidden="true">accの推移(epoch 5)</figcaption>
</figure>
<p>最終的に今回は, テストデータでの正答率が,<code>0.4</code>程度になりました. それほど高い値ではありませんが,ランダムに選択するよりはかなり良い値になったので,今回はこのくらいで良しとします. 実際の研究などでは,データ数を増やす,ハイパーパラメータやアルゴリズムを変更するなどして,もう少し良い値を目指したほうが良いでしょう.</p>
<p>出力されている<code>pred_acctual_heatmap.png</code>は, テストデータにおける実際のラベルに対する予測値を予測値のラベル毎にカウントしたものを相対度数として表現したヒートマップです.すべて正確に予測されていた場合,度数は対角線上に集中します.
このように可視化することで,モデルが何をどのように予測しているのかを確認できます.</p>
<figure>
<img src="/images/pred_acctual_heatmap.png" alt="accの推移(epoch 5)" />
<figcaption aria-hidden="true">accの推移(epoch 5)</figcaption>
</figure>
<p>ヒートマップを確認すると概ね対角線上に度数が集中していることがわかります. 特に10,20代(y軸の0,1)を50,60代と予測した数は0であり,年齢が離れるほど正確に識別されていることがわかります.</p>
<p>一方で,実際のラベルが10,20,40代であるときに,30代であると誤って予測する確率が高く,30代以前はあまり上手く識別できないことがわかります.</p>
<p>続いて,<code>PCA</code>と<code>t-sne</code>の結果を確認してみましょう.</p>
<figure>
<img src="/images/convnext_pca.png" alt="PCA" />
<figcaption aria-hidden="true">PCA</figcaption>
</figure>
<figure>
<img src="/images/convnext_tsne.png" alt="t-sne" />
<figcaption aria-hidden="true">t-sne</figcaption>
</figure>
<p>いずれも左から右に行くにつれて,年齢が高くなっており,ある程度識別できていることがわかります.一方で,30代の緑色が広い範囲に分布しているために識別が困難であること,50代と60代が左右とは別の特徴量で識別されていることなどがわかります.</p>
<p>このように,学習されたモデルの特徴量を分析することで,それぞれのクラスの特徴がある程度見えてきます.</p>
<p>それぞれの横軸,縦軸の特徴量が実際には何であるかは,各学習層でどのような特徴を抽出しているかを<strong>特徴マップ</strong>などによって可視化することが可能ですが,今回は扱いません. 興味がある方は,教員に聞いてみましょう.</p>
<p>yakagika</p>
]]></description>
    <pubDate>Sat, 28 Sep 2024 00:00:00 UT</pubDate>
    <guid>/lectures/slds14.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>ベイズ統計学</title>
    <link>/lectures/2024-07-12-bayesian-statistics.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#ベイズの基礎" id="toc-ベイズの基礎"><span class="toc-section-number">1</span> ベイズの基礎</a></li>
<li><a href="#一般化線形モデル" id="toc-一般化線形モデル"><span class="toc-section-number">2</span> 一般化線形モデル</a></li>
<li><a href="#pymc環境構築" id="toc-pymc環境構築"><span class="toc-section-number">3</span> pymc環境構築</a>
<ul>
<li><a href="#pyenv" id="toc-pyenv"><span class="toc-section-number">3.1</span> pyenv</a></li>
<li><a href="#anaconoda" id="toc-anaconoda"><span class="toc-section-number">3.2</span> anaconoda</a></li>
</ul></li>
<li><a href="#bambiについて" id="toc-bambiについて"><span class="toc-section-number">4</span> Bambiについて</a></li>
</ul>
</div>
<h1 data-number="1" id="ベイズの基礎"><span class="header-section-number">1</span> ベイズの基礎</h1>
<h1 data-number="2" id="一般化線形モデル"><span class="header-section-number">2</span> 一般化線形モデル</h1>
<h1 data-number="3" id="pymc環境構築"><span class="header-section-number">3</span> pymc環境構築</h1>
<h2 data-number="3.1" id="pyenv"><span class="header-section-number">3.1</span> pyenv</h2>
<h2 data-number="3.2" id="anaconoda"><span class="header-section-number">3.2</span> anaconoda</h2>
<h1 data-number="4" id="bambiについて"><span class="header-section-number">4</span> Bambiについて</h1>
]]></description>
    <pubDate>Fri, 12 Jul 2024 00:00:00 UT</pubDate>
    <guid>/lectures/2024-07-12-bayesian-statistics.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>特別講義DS Ch9 データの数値化</title>
    <link>/lectures/slds9.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#データの数値化" id="toc-データの数値化"><span class="toc-section-number">1</span> データの数値化</a>
<ul>
<li><a href="#基本統計量" id="toc-基本統計量"><span class="toc-section-number">1.1</span> 基本統計量</a></li>
<li><a href="#中心を表す基本統計量" id="toc-中心を表す基本統計量"><span class="toc-section-number">1.2</span> 中心を表す基本統計量</a></li>
<li><a href="#データの広がりを表す統計量" id="toc-データの広がりを表す統計量"><span class="toc-section-number">1.3</span> データの広がりを表す統計量</a></li>
<li><a href="#相関" id="toc-相関"><span class="toc-section-number">1.4</span> 相関</a>
<ul>
<li><a href="#ピアソンの積率相関係数" id="toc-ピアソンの積率相関係数"><span class="toc-section-number">1.4.1</span> ピアソンの積率相関係数</a></li>
<li><a href="#スピアマンの順位相関係数" id="toc-スピアマンの順位相関係数"><span class="toc-section-number">1.4.2</span> スピアマンの順位相関係数</a></li>
<li><a href="#相関係数のヒートマップ" id="toc-相関係数のヒートマップ"><span class="toc-section-number">1.4.3</span> 相関係数のヒートマップ</a></li>
<li><a href="#chi2統計量" id="toc-chi2統計量"><span class="toc-section-number">1.4.4</span> <span class="math inline">\(\Chi^2\)</span>統計量</a></li>
<li><a href="#因果関係と相関" id="toc-因果関係と相関"><span class="toc-section-number">1.4.5</span> 因果関係と相関</a></li>
<li><a href="#発展偏相関係数" id="toc-発展偏相関係数"><span class="toc-section-number">1.4.6</span> 発展:偏相関係数</a></li>
</ul></li>
<li><a href="#距離と類似度" id="toc-距離と類似度"><span class="toc-section-number">1.5</span> 距離と類似度</a></li>
</ul></li>
</ul>
</div>
<h1 data-number="1" id="データの数値化"><span class="header-section-number">1</span> データの数値化</h1>
<p>データを可視化することで,データの大まかな傾向はつかめます. しかし,グラフではデータの特徴を大まかにしか捉えることが出来ません.
実際に,データの特徴に関して言及するためにはそれを数値にする必要があります.</p>
<p>例えば,以下のヒストグラム(<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/histogram_A_B_data.csv">データ</a>)を見てみましょう.</p>
<figure>
<img src="/images/histogram_compare.png" alt="ヒストグラムの比較" />
<figcaption aria-hidden="true">ヒストグラムの比較</figcaption>
</figure>
<p>ヒストグラムAと比較して,Bはデータの<strong>中心が右</strong>にあり,データの<strong>散らばりが大きい</strong>ように見えます. しかし,それらが具体的にどの程度右にあり,どの程度散らばりが大きいのでしょうか.
このように,グラフによる比較では,抽象的な印象しか語ることができないため,データの中心や,散らばりを数値で表すことが必要です.</p>
<p>数値化の対象となる量は,データの種類や分析の目的によって様々ですが,大まかに以下のような分類が可能です.</p>
<div class="note">
<ul>
<li><h2 id="データの数値化-1">データの数値化</h2></li>
</ul>
<table>
<colgroup>
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">データの数</th>
<th style="text-align: center;">データの種類</th>
<th style="text-align: center;">求める数値</th>
<th style="text-align: center;">目的</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">量的変数</td>
<td style="text-align: center;">基本統計量</td>
<td style="text-align: center;">データの特徴を知る</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">量的変数</td>
<td style="text-align: center;">ピアソンの積率相関係数</td>
<td style="text-align: center;">データの関係を知る</td>
</tr>
<tr class="odd">
<td style="text-align: center;">2</td>
<td style="text-align: center;">質的変数</td>
<td style="text-align: center;">ピアソンのΧ二乗統計量 <br> スピアマンの順位相関係数</td>
<td style="text-align: center;">データの関係を知る</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">混在</td>
<td style="text-align: center;">寄与率,相関比</td>
<td style="text-align: center;">データの関係を知る</td>
</tr>
<tr class="odd">
<td style="text-align: center;">3以上</td>
<td style="text-align: center;"></td>
<td style="text-align: center;">次元削減,多変量解析など多数</td>
<td style="text-align: center;"></td>
</tr>
</tbody>
</table>
</div>
<h2 data-number="1.1" id="基本統計量"><span class="header-section-number">1.1</span> 基本統計量</h2>
<p>量的データを客観的に評価するために,分布の特徴を数値で表したものを<strong>基本統計量(代表値)</strong>といいます.</p>
<div class="note">
<ul>
<li>基本統計量</li>
</ul>
<table>
<colgroup>
<col style="width: 55%" />
<col style="width: 44%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">名称</th>
<th style="text-align: left;">概要</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">平均 (Mean)</td>
<td style="text-align: left;">データの平均値.量的データの分布の中心傾向を示す</td>
</tr>
<tr class="even">
<td style="text-align: center;">中央値 (Median)</td>
<td style="text-align: left;">データの順位における中央.量的データの分布の中心傾向を示す</td>
</tr>
<tr class="odd">
<td style="text-align: center;">最頻値 (Mode)</td>
<td style="text-align: left;">最も度数の多い値.量的データの分布の中心傾向を示す</td>
</tr>
<tr class="even">
<td style="text-align: center;">標準偏差 (Standard Deviation)</td>
<td style="text-align: left;">データのばらつき具合を示す.</td>
</tr>
<tr class="odd">
<td style="text-align: center;">分散 (Variance)</td>
<td style="text-align: left;">データのばらつき具合を示す.</td>
</tr>
<tr class="even">
<td style="text-align: center;">尖度 (Kurtosis)</td>
<td style="text-align: left;">外れ値の度合い</td>
</tr>
<tr class="odd">
<td style="text-align: center;">歪度 (Skewness)</td>
<td style="text-align: left;">分布の歪み</td>
</tr>
</tbody>
</table>
</div>
<p>Pythonでは, pandasのDataFrameに対して, <code>.describe()</code>メソッドを適用すると, データ数(<code>count</code>),平均値(<code>mean</code>),中央値(<code>50%</code>),四分位数(<code>24%,75%</code>),標準偏差(<code>std</code>),最大値(<code>max</code>),最小値(<code>min</code>)などが求まります.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/histogram_A_B_data.csv&#39;</span>)</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.describe())</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="co">python quantify.py</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="co">       Histogram_A  Histogram_B</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="co">count  1000.000000  1000.000000</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="co">mean     60.289981    50.708362</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="co">std      14.688239     9.974544</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="co">min      11.380990    20.596114</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="co">25%      50.286145    43.937583</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="co">50%      60.379509    50.630771</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="co">75%      69.719158    57.288822</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="co">max     117.790972    81.931076</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>それぞれの統計量の意味を順番に見ていきましょう.</p>
<h2 data-number="1.2" id="中心を表す基本統計量"><span class="header-section-number">1.2</span> 中心を表す基本統計量</h2>
<p>ヒストグラムにおける峰のある位置,分布の中心がどこにあるかを表す統計量には,<strong>平均値</strong>,<strong>中央値</strong>,<strong>最頻値</strong>などがあります. この3つは,いずれも分布の中心を表す統計量ですが,分布の歪みによって意味が異なり,使い分けが必要となります.</p>
<ul>
<li><h2 id="算術平均-mean"><strong>算術平均 (mean)</strong></h2>
分布の中心を表す統計量としてもっとも一般的なものに,平均値があります. しかし, 一言に平均といっても,いくつかの種類があるので注意しましょう. 分布の中心を表す場合に用いられる平均は基本的に算術平均ですが, ここでは異なる定義の平均として, <strong>幾何平均</strong>と<strong>調和平均</strong>も紹介します.</li>
</ul>
<p>一般に「平均」といった時にイメージされる,すべてのデータの和をデータの個数で割った値を<strong>算術平均</strong>といいます.</p>
<p>算術平均は対象とするデータを足し合わせることによって基準となる値が算出される場合に使用します.</p>
<div class="note">
<p>n個の観測値 $ x_1, x_2, …, x_n $ の時,平均値 $ {x} $ は</p>
<p><span class="math display">\[ \bar{x} = \frac{1}{n} (x_1 + ... + x_n) = \frac{1}{n} \sum_{i=1}^{n} x_i \]</span></p>
</div>
<p>例： 165,171,189の算術平均は</p>
<p><span class="math display">\[ \bar{x} = \frac{1}{3} (165 + 171 + 189) = 175 \]</span></p>
<p>となります.</p>
<p><code>pandas</code>で平均を求めるには, <code>.mean()</code>を利用します.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame({<span class="st">&#39;x&#39;</span>:[<span class="dv">165</span>,<span class="dv">171</span>,<span class="dv">189</span>]})</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;x&#39;</span>].mean()) <span class="co">#&gt;&gt;&gt;175</span></span></code></pre></div>
<ul>
<li><h2 id="幾何平均geometric-mean"><strong>幾何平均(geometric mean)</strong></h2></li>
</ul>
<p>すべてのデータを乗じて,データの数で根を取った値を<strong>幾何平均</strong>といいます. 増加率,減少率など対象とするデータを相互に乗じることによって基準となる値が算出される場合に使用します.</p>
<div class="note">
<p><span class="math inline">\(n\)</span>個の観測値 <span class="math inline">\(x_1, x_2, ..., x_n\)</span> の時,幾何平均 <span class="math inline">\(x_G\)</span> は
<span class="math display">\[ x_G = \sqrt[n]{x_1 \cdot x_2 \cdot ... \cdot x_n} = (\prod_{i}^{n} x_i)^{\frac{1}{n}} \]</span></p>
</div>
<p>例：各年の売上と,その増加率が以下のように表されるとき,平均何%売上が伸びているかを考える.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">年度</th>
<th style="text-align: center;">売上</th>
<th style="text-align: center;">増加率</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">300</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">350</td>
<td style="text-align: center;">117%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">3</td>
<td style="text-align: center;">600</td>
<td style="text-align: center;">171%</td>
</tr>
<tr class="even">
<td style="text-align: center;">4</td>
<td style="text-align: center;">1000</td>
<td style="text-align: center;">167%</td>
</tr>
</tbody>
</table>
<p>このとき算術平均を用いると,
<span class="math display">\[ 算術平均 = \frac{1.17 + 1.71 + 1.67}{3} \approx 1.52 \]</span> となり,</p>
<p><span class="math display">\[ 300 \cdot 1.52^3 \approx 1045 \]</span></p>
<p>平均的な伸び率を3回乗じても4年目の売上の値になりません. これは,毎年度の値に増加率を<strong>掛ける</strong>ことで次の年度の値が求まるのに対して,算術平均は毎年度足す操作をしたばあいの平均値を求めているからです.</p>
<p>そこで,幾何平均を求めてみると.</p>
<p><span class="math display">\[ 幾何平均 = \sqrt[3]{1.17 \cdot 1.71 \cdot 1.67} \approx 1.49, \\
300 \cdot 1.49^3 \approx 1000 \]</span>
となり, 正確に4年目の値が計算できていることが分かります.</p>
<ul>
<li><h2 id="調和平均harmonic-mean"><strong>調和平均(harmonic mean)</strong></h2>
先程の幾何平均が掛け算の平均値だったのに対して,割り算の平均値を<strong>調和平均</strong>といい,速度などの定義に割り算が含まれている計算で用います.</li>
</ul>
<p>調和平均は対象とするデータに別の値を除して足し合わせることによって基準となる値が算出される場合に使用します.</p>
<div class="note">
<p><span class="math inline">\(n\)</span>個の観測値 <span class="math inline">\(x_1, x_2, ..., x_n\)</span> の時,調和平均 <span class="math inline">\(x_H\)</span> は
<span class="math display">\[ \frac{1}{x_H} = \frac{1}{n} \left( \frac{1}{x_1} + ... + \frac{1}{x_n} \right) \\
\iff \\
x_H = \frac{n}{\frac{1}{x_1} + ... + \frac{1}{x_n}}  = \frac{n}{\sum_{i=1}^{n} \frac{1}{x_i}}\]</span></p>
</div>
<p>例：平均速度</p>
<p>100kmの道のりを行きは車 (60km/h),帰りは自転車 (30km/h) で移動した場合,算術平均は 45km/hとなります. しかし,</p>
<p>かかった時間は <span class="math inline">\(\frac{距離}{速度}\)</span>で求まるので,
車は <span class="math inline">\(\frac{100}{60}\)</span>, 自転車 は <span class="math inline">\(\frac{100}{30}\)</span> となり,速度は <span class="math inline">\(\frac{距離}{時間}\)</span> で求まるので</p>
<p>平均速度は,
<span class="math display">\[ \frac{200}{\frac{200}{60} + \frac{200}{30}} = \frac{2}{\frac{1}{30} + \frac{1}{60}} = 40 \]</span></p>
<p>となります. 算術平均では正確に計算できていないことが分かります.</p>
<p>この <span class="math display">\[\frac{200}{\frac{200}{60} + \frac{200}{30}} \]</span>
が調和平均です.</p>
<ul>
<li><h2 id="中央値median"><strong>中央値(median)</strong></h2></li>
</ul>
<p>中心を表す統計量として,データを昇順に並び替えて,そのちょうど真ん中の数を表す<strong>中央値</strong>も良く利用されます.</p>
<div class="note">
<p><span class="math inline">\(n\)</span>個の観測値を大きさの順に並べ替えて <span class="math inline">\(x_1, x_2, ..., x_n\)</span> とした時,
中央値 <span class="math inline">\(\tilde{x}\)</span> は</p>
<p><span class="math display">\[ \tilde{x} =
\begin{cases}
x_{\frac{n+1}{2}}, ~~&amp; if ~~ n \mod 2 \neq 0 \\
\frac{x_{ \frac{n}{2}} + x_{\frac{n}{2} + 1 }}{2}, ~~ &amp; if~~ n \mod 2 = 0
\end{cases}
\]</span></p>
</div>
<p>例：観測値が <span class="math inline">\(3, 4, 7, 9, 11, 12, 15\)</span> の時 中央値は
<span class="math display">\[ \tilde{x} = x_{\frac{n+1}{2}} = x_{\frac{8}{2}} = x_4 = 9 \]</span></p>
<p>となります.</p>
<p>また,観測値が <span class="math inline">\(4, 5, 6, 10, 14, 17\)</span> のように偶数個の場合は
<span class="math display">\[ \tilde{x} = \frac{x_{ \frac{n}{2}} + x_{\frac{n}{2} + 1 }}{2} = \frac{6 + 10}{2} = 8 \]</span></p>
<p>となります.</p>
<p><code>pandas</code>では,中央値は<code>.median()</code>で求めることができます.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame({<span class="st">&#39;x&#39;</span>:[<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">7</span>,<span class="dv">9</span>,<span class="dv">11</span>,<span class="dv">12</span>,<span class="dv">15</span>]})</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;x&#39;</span>].median()) <span class="co">#9.0</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame({<span class="st">&#39;x&#39;</span>:[<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">10</span>,<span class="dv">14</span>,<span class="dv">17</span>]})</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;x&#39;</span>].median()) <span class="co">#8.0</span></span></code></pre></div>
<ul>
<li><h2 id="四分位数-quartiles">四分位数 (quartiles)</h2></li>
</ul>
<p><strong>中央値:</strong> データを小さい順に並べた時に観測数が50%となる点</p>
<p><strong>四分位数:</strong>
データを小さい順に並べた時に,観測数が25%, 50%, 75%となる点.
第一四分位数 (25%),第二四分位数 (50%),第三四分位数 (75%)</p>
<p><strong>四分位範囲:</strong>
四分位範囲 = 第一四分位数から第三四分位数の範囲</p>
<figure>
<img src="/images/quartiles.png" alt="四分位数" />
<figcaption aria-hidden="true">四分位数</figcaption>
</figure>
<p><code>pandas</code>で四分位数を用いるには, <code>.quantile(q=%点の数値,interpolation='nearest')</code>で求めることができます.
<code>interpolation</code> (補間) は,値がインデックス<code>i</code>と<code>j</code>の間にある場合に補間する方法を指定する引数で以下のような設定が可能です.</p>
<p><code>.quantile()</code>では, データの最大インデックス掛ける<code>q</code>で必要な値を求めます. なので例えば<code>xs=[2,5,8,9,11,13,15,16,19,22,24]</code>の25%点は,<code>10*0.25=2.5</code>となり<code>xs[2.5]</code>となるような点を求めます.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">引数</th>
<th style="text-align: left;">効果</th>
<th style="text-align: left;">25%点の場合の計算</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>'linear'</code></td>
<td style="text-align: left;">線形補間</td>
<td style="text-align: left;"><code>xs[2] + (xs[2] - xs[3]) * 0.5 = 8.5</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>'lower'</code></td>
<td style="text-align: left;">小さい方</td>
<td style="text-align: left;"><code>xs[2] = 8</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>'higher'</code></td>
<td style="text-align: left;">大きい方</td>
<td style="text-align: left;"><code>xs[3] = 9</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>'midpoint'</code></td>
<td style="text-align: left;">中間</td>
<td style="text-align: left;"><code>(xs[2] + xs[3])/2 = 8.5</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>'nearest'</code></td>
<td style="text-align: left;">近い方</td>
<td style="text-align: left;"><code>xs[2] = 8</code></td>
</tr>
</tbody>
</table>
<div class="sourceCode" id="cb4"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>xs <span class="op">=</span> [<span class="dv">2</span>,<span class="dv">5</span>,<span class="dv">8</span>,<span class="dv">9</span>,<span class="dv">11</span>,<span class="dv">13</span>,<span class="dv">15</span>,<span class="dv">16</span>,<span class="dv">19</span>,<span class="dv">22</span>,<span class="dv">24</span>]</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame({<span class="st">&#39;x&#39;</span>:xs})</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;25%点:&#39;</span>,df[<span class="st">&#39;x&#39;</span>].quantile(q<span class="op">=</span><span class="fl">0.25</span>, interpolation<span class="op">=</span><span class="st">&#39;linear&#39;</span>))</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;25%点:&#39;</span>,df[<span class="st">&#39;x&#39;</span>].quantile(q<span class="op">=</span><span class="fl">0.25</span>, interpolation<span class="op">=</span><span class="st">&#39;nearest&#39;</span>))</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;50%点:&#39;</span>,df[<span class="st">&#39;x&#39;</span>].quantile(q<span class="op">=</span><span class="fl">0.5</span>, interpolation<span class="op">=</span><span class="st">&#39;nearest&#39;</span>))</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;75%点:&#39;</span>,df[<span class="st">&#39;x&#39;</span>].quantile(q<span class="op">=</span><span class="fl">0.75</span>, interpolation<span class="op">=</span><span class="st">&#39;nearest&#39;</span>))</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="co">25%点: 8.5</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="co">25%点: 8</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="co">50%点: 13</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="co">75%点: 19</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<ul>
<li><h2 id="最頻値-mode">最頻値 (mode)</h2></li>
</ul>
<p>中心を表す統計量の最後は,最も頻繁にあらわれる値,すなわち度数分布表において最も度数の高い階級を表す<strong>最頻値</strong>です.</p>
<div class="note">
<p>最頻値はデータの種類に応じて,意味が異なるので注意が必要です.
(※ 質的データの平均値などは定義できません)</p>
<ul>
<li><p>質的データの場合</p>
<ul>
<li>最大度数のカテゴリー</li>
</ul></li>
<li><p>量的データの場合</p>
<ul>
<li><p>最大度数の階級 = 最頻階級 (modal class)</p></li>
<li><p>長さや気温など同じ間隔で値が存在するもの</p></li>
</ul></li>
</ul>
</div>
<p><code>pandas</code>で最頻値を求める方法は色々ありますが, 単純に同じデータが最も多い値を探す場合には<code>.mode()</code>が利用できます. <code>.mode()</code>は最頻値が複数ある場合に対応するために<code>DataSeries</code>Objectを返すので,<code>[0]</code>で最初の値を取っています.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame({<span class="st">&#39;x&#39;</span>:[<span class="st">&#39;A&#39;</span>,<span class="st">&#39;A&#39;</span>,<span class="st">&#39;B&#39;</span>,<span class="st">&#39;C&#39;</span>]})</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;x&#39;</span>].mode()[<span class="dv">0</span>]) <span class="co"># A</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame({<span class="st">&#39;x&#39;</span>:[<span class="dv">1</span>,<span class="dv">3</span>,<span class="dv">2</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">3</span>]})</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;x&#39;</span>].mode()[<span class="dv">0</span>]) <span class="co"># 3</span></span></code></pre></div>
<p>しかし,この方法では連続値の数値などにおける定義での最頻値は求められません. 特定の区間の最頻値を求めたい場合は<code>value_count()</code>などを利用して求めましょう.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co"># ランダムな1から100までのデータの生成</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>np.random.seed(<span class="dv">0</span>)  <span class="co"># 再現性のためにシードを設定</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame({<span class="st">&#39;x&#39;</span>:np.random.randint(<span class="dv">0</span>, <span class="dv">101</span>, size<span class="op">=</span><span class="dv">1000</span>)})</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="co">#10区切りで度数を求める</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>bins <span class="op">=</span> [<span class="dv">0</span>,<span class="dv">10</span>,<span class="dv">20</span>,<span class="dv">30</span>,<span class="dv">40</span>,<span class="dv">50</span>,<span class="dv">60</span>,<span class="dv">70</span>,<span class="dv">80</span>,<span class="dv">90</span>,<span class="dv">100</span>]</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>freq <span class="op">=</span> df[<span class="st">&#39;x&#39;</span>].value_counts(bins <span class="op">=</span>bins, sort<span class="op">=</span><span class="va">False</span>)</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(freq)</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="co">#最大の度数のindexを取得</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(freq.idxmax())</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a><span class="co">      x</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a><span class="co">0    44</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a><span class="co">1    47</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a><span class="co">2    64</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a><span class="co">3    67</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a><span class="co">4    67</span></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a><span class="co">..   ..</span></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a><span class="co">995  79</span></span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a><span class="co">996  41</span></span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a><span class="co">997  17</span></span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a><span class="co">998  80</span></span>
<span id="cb6-25"><a href="#cb6-25" aria-hidden="true" tabindex="-1"></a><span class="co">999  43</span></span>
<span id="cb6-26"><a href="#cb6-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-27"><a href="#cb6-27" aria-hidden="true" tabindex="-1"></a><span class="co">[1000 rows x 1 columns]</span></span>
<span id="cb6-28"><a href="#cb6-28" aria-hidden="true" tabindex="-1"></a><span class="co">(-0.001, 10.0]    121</span></span>
<span id="cb6-29"><a href="#cb6-29" aria-hidden="true" tabindex="-1"></a><span class="co">(10.0, 20.0]       87</span></span>
<span id="cb6-30"><a href="#cb6-30" aria-hidden="true" tabindex="-1"></a><span class="co">(20.0, 30.0]       96</span></span>
<span id="cb6-31"><a href="#cb6-31" aria-hidden="true" tabindex="-1"></a><span class="co">(30.0, 40.0]      107</span></span>
<span id="cb6-32"><a href="#cb6-32" aria-hidden="true" tabindex="-1"></a><span class="co">(40.0, 50.0]       94</span></span>
<span id="cb6-33"><a href="#cb6-33" aria-hidden="true" tabindex="-1"></a><span class="co">(50.0, 60.0]       92</span></span>
<span id="cb6-34"><a href="#cb6-34" aria-hidden="true" tabindex="-1"></a><span class="co">(60.0, 70.0]       97</span></span>
<span id="cb6-35"><a href="#cb6-35" aria-hidden="true" tabindex="-1"></a><span class="co">(70.0, 80.0]      103</span></span>
<span id="cb6-36"><a href="#cb6-36" aria-hidden="true" tabindex="-1"></a><span class="co">(80.0, 90.0]      103</span></span>
<span id="cb6-37"><a href="#cb6-37" aria-hidden="true" tabindex="-1"></a><span class="co">(90.0, 100.0]     100</span></span>
<span id="cb6-38"><a href="#cb6-38" aria-hidden="true" tabindex="-1"></a><span class="co">Name: count, dtype: int64</span></span>
<span id="cb6-39"><a href="#cb6-39" aria-hidden="true" tabindex="-1"></a><span class="co">(-0.001, 10.0]</span></span>
<span id="cb6-40"><a href="#cb6-40" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<div class="note">
<ul>
<li><h2 id="中心を表す代表値の使い分け">中心を表す代表値の使い分け</h2></li>
</ul>
<p>中心を表す基本統計量である,<strong>算術平均</strong>,<strong>中央値</strong>,<strong>最頻値</strong>は,ヒストグラムが<strong>単峰で左右対称</strong>である場合一致します. したがってヒストグラムを作成して単峰で左右対称である場合には,どの値を利用しても大きな違いは生まれません.</p>
<p>一方で,分布が歪んでいる場合には,それぞれの統計量の値が変わります. 中心を表す統計量として,何も考えずに算術平均を利用する人がいますが,分布が歪んでいる場合には目的に応じて最頻値や中央値の方が適当である場合があります.</p>
<figure>
<img src="/images/mean_median_mode.png" alt="分布の歪みと中心" />
<figcaption aria-hidden="true">分布の歪みと中心</figcaption>
</figure>
<p>例えば,以下の図は,日本人の平均所得を表したヒストグラムです.</p>
<figure>
<img src="/images/mean_median_mode2.png" alt="https://www.mhlw.go.jp/toukei/saikin/hw/k-tyosa/k-tyosa09/2-2.html" />
<figcaption aria-hidden="true"><a href="https://www.mhlw.go.jp/toukei/saikin/hw/k-tyosa/k-tyosa09/2-2.html">https://www.mhlw.go.jp/toukei/saikin/hw/k-tyosa/k-tyosa09/2-2.html</a></figcaption>
</figure>
<p>この図では,分布が大きく右に歪んでいるため平均値,中央値,最頻値の値が異なっています.それぞれの値が何を意味するのかを考えてみましょう.</p>
<ul>
<li>平均値: 547万円
<ul>
<li>全員の所得を足して一人あたりで割る(仮に全員平等にもらえるならこの金額)</li>
</ul></li>
<li>中央値: 427万円
<ul>
<li>下から所得の低い順に並んだときに真ん中の人(これ以上なら真ん中より上の所得)</li>
</ul></li>
<li>最頻値: 250万円
<ul>
<li>一番多い(街で適当に声をかけるとコレくらいである可能性が高い)</li>
</ul></li>
</ul>
<p>このようなときに, 世間一般の人の感覚を表す値として平均値を利用することは適当ではないでしょう. 平均値は,分布が歪んでいる場合には少数のデータに大きく引っ張られるため全体の傾向を表せない場合があります.</p>
<p>例えば,年収300万円の人が100人いる村に年収50億円の野球選手が引っ越してくると,平均年収は5000万円,中央値,最頻値は300万円になります.</p>
<p>統計量はそれぞれの意味を把握したうえで, 目的に応じて使い分けるようにしましょう.</p>
</div>
<h2 data-number="1.3" id="データの広がりを表す統計量"><span class="header-section-number">1.3</span> データの広がりを表す統計量</h2>
<p>分布の中心がどこかという点の他に,データがどのように広がっているかもデータの特徴を記述するうえでは重要です.</p>
<figure>
<img src="/images/histogram_compare.png" alt="ヒストグラムの比較" />
<figcaption aria-hidden="true">ヒストグラムの比較</figcaption>
</figure>
<p>データの広がり具合を<strong>散布度</strong>といいますが,散布度を表す統計量として代表的なものに<strong>分散</strong>と<strong>標準偏差</strong>があります.</p>
<p>データの散らばり具合を数値化するために,どのように考えるかを順におって見ましょう.
データがどの程度散らばっているかを考える際の基準の一つが算術平均 <span class="math inline">\(\bar{x}\)</span> です.
各データ <span class="math inline">\(x_i\)</span> が,データの算術平均からどの程度離れているのかを考えてみましょう.</p>
<figure>
<img src="/images/deviation.png" alt="偏差" />
<figcaption aria-hidden="true">偏差</figcaption>
</figure>
<div class="note">
<ul>
<li><strong>偏差(deviation)</strong></li>
</ul>
<p><span class="math display">\[ \text{観測値} x_i  \text{と平均} \bar{x} \text{の差} = x_i - \bar{x} \]</span></p>
</div>
<p>この偏差がデータ全体でどのくらい大きいのかを考えるために<strong>偏差の平均</strong>を取ります.
ただし,平均からの差は,すべて足し合わせると0になるため,絶対値を取ります.これを<strong>平均偏差</strong>と呼びます.</p>
<div class="note">
<ul>
<li><strong>平均偏差(mean deviation)</strong></li>
</ul>
<p>各観測値が平均からどれだけ離れているかの絶対値平均</p>
<p><span class="math display">\[ d = \frac{1}{n} \sum_{i=1}^{n} |x_i - \bar{x}| \]</span></p>
</div>
<p>絶対値の計算は面倒なので,値が大きくはなるけれど2乗してみることにします. これが<strong>分散</strong>です.</p>
<div class="note">
<ul>
<li><strong>分散(variance)</strong></li>
</ul>
<p>各観測値の偏差の2乗の平均</p>
<p><span class="math display">\[ S^2 = \frac{1}{n} \sum_{i=1}^{n} (x_i - \bar{x})^2 \]</span></p>
</div>
<p>2乗すると値が大きくなるので,単位をもとのデータに合わせるために分散の平方根をとります(例えば, <span class="math inline">\(x_i\)</span> の単位がKgのとき, <span class="math inline">\(S^2\)</span> の単位は <span class="math inline">\(Kg^2\)</span> となってしまう).これを標準偏差といいます.</p>
<div class="note">
<ul>
<li><strong>標準偏差(standard deviation)</strong></li>
</ul>
<p><span class="math display">\[ S = \sqrt{S^2} \]</span></p>
</div>
<p>例えば, データが<code>[9,6,12,18,10]</code>の場合を考えてみましょう. 何を計算しているのか,イメージしながら順番に計算していきましょう.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>data <span class="op">=</span> [<span class="dv">9</span>,<span class="dv">6</span>,<span class="dv">12</span>,<span class="dv">18</span>,<span class="dv">10</span>]</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame({<span class="st">&#39;data&#39;</span>:data})</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="co">  data</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="co">0     9</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="co">1     6</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="co">2    12</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="co">3    18</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="co">4    10</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>まずは平均からの差(偏差)を求めてみます.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co">#平均</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>barx <span class="op">=</span> df[<span class="st">&#39;data&#39;</span>].mean()</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(barx) <span class="co">#11.0</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="co"># 偏差</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;dev&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;data&#39;</span>] <span class="op">-</span> barx</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="co">   data  dev</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="co">0     9 -2.0</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="co">1     6 -5.0</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="co">2    12  1.0</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a><span class="co">3    18  7.0</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a><span class="co">4    10 -1.0</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>次に偏差の2乗とその平均(分散)を求めます.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co">#偏差の2乗</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;dev2&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;dev&#39;</span>] <span class="op">*</span> df[<span class="st">&#39;dev&#39;</span>]</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="co">   data  dev  dev2</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="co">0     9 -2.0   4.0</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="co">1     6 -5.0  25.0</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="co">2    12  1.0   1.0</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a><span class="co">3    18  7.0  49.0</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="co">4    10 -1.0   1.0</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a><span class="co">#偏差の2乗の平均(分散)</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;dev2&#39;</span>].mean()) <span class="co">#16.0</span></span></code></pre></div>
<p>最後に分散の累乗根をとって,標準偏差を求めます.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">#偏差の2乗の平均の累乗根(標準偏差)</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(np.sqrt(df[<span class="st">&#39;dev2&#39;</span>].mean())) <span class="co">#4.0</span></span></code></pre></div>
<p>計算から,このデータの分散は<code>16</code>,標準偏差は<code>4</code>であることが分かりました.</p>
<p><code>pandas</code>では,分散は<code>.var(ddof=0)</code>,標準偏差は<code>.std(ddof=0)</code>で求めることができます.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;分散:&#39;</span>,df[<span class="st">&#39;data&#39;</span>].var(ddof<span class="op">=</span><span class="dv">0</span>)) <span class="co">#16.0</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;標準偏差:&#39;</span>,df[<span class="st">&#39;data&#39;</span>].std(ddof<span class="op">=</span><span class="dv">0</span>)) <span class="co">#4.0</span></span></code></pre></div>
<div class="warn">
<ul>
<li>不偏分散,不偏標準偏差</li>
</ul>
<p><code>.var()</code>と<code>.std()</code>における引数<code>ddof=0</code>とはなんでしょうか.これは,分散を求める際の分母の値から引く数を表しています(引いた後の値を自由度といいます).</p>
<p>デフォルトの値は,<code>ddof=1</code>となっており,</p>
<p><span class="math display">\[\frac{1}{n-1} \sum_{i=1}^{n} (x_i - \bar{x})^2\]</span> を求めています.</p>
<p>このような分母が <span class="math inline">\(n-1\)</span>となっている分散を<strong>不偏分散</strong>といいます. 一方で,これまで計算してきた値を<strong>標本分散</strong>といいます.</p>
<p>不偏分散の意味に関しては, 統計学入門で学習していただくとして,ここでは一言に分散や標準偏差といっても,
細かくは<strong>標本分散</strong>,<strong>不偏分散</strong>,<strong>母分散</strong>などの異なる概念があることに注意しましょう.
特にプログラムにおいて, 分散や標準偏差を求める際には,それがなんの値なのかに注意が必要です.
ネット上の記事などにおいても混同していることが多いので, 実際に自分で計算して確かめることをおすすめします.</p>
<p>例えば,<code>pandas</code>における<code>describe()</code>で表示される<code>std</code>は不偏標準偏差であり,<code>std(ddof=0)</code>の値とは異なります.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;data&#39;</span>].describe())</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="co">count     5.000000</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="co">mean     11.000000</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="co">std       4.472136</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="co">min       6.000000</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a><span class="co">25%       9.000000</span></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a><span class="co">50%      10.000000</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a><span class="co">75%      12.000000</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a><span class="co">max      18.000000</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a><span class="co">Name: data, dtype: float64</span></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
</div>
<div class="note">
<ul>
<li><p>演習</p></li>
<li><p>算術平均,幾何平均, 調和平均,標本標準偏差を計算する関数をそれぞれ作成してください.</p></li>
<li><p><a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/histogram_A_B_data.csv">こちら</a>のデータの列ごとの算術平均,中央値,最頻値,標本分散,標本標準偏差を求めよ</p></li>
</ul>
</div>
<h2 data-number="1.4" id="相関"><span class="header-section-number">1.4</span> 相関</h2>
<p>基本統計量は,一つの観測項目に対する数値化の手法でしたが,可視化における散布図のように,2つの観測項目間の関係を数値で表すことが可能です.</p>
<p>散布図の節で扱った<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/scatter.csv">事例</a>についてもう一度考えてみましょう.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>     <span class="ex">AI</span>  Python</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>    34      27</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>    40      26</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>    59      28</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>    46      29</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>    36      29</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="ex">..</span>   ..     ...</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="ex">255</span>  58      83</span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="ex">256</span>  69      87</span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="ex">257</span>  59      82</span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a><span class="ex">258</span>  62      84</span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a><span class="ex">259</span>  59      87</span></code></pre></div>
<div class="sourceCode" id="cb14"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/scatter.csv&#39;</span>)</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="co">#散布図のx軸を指定</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>x_column <span class="op">=</span> <span class="st">&#39;AI&#39;</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="co">#散布図のy軸を指定</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>y_column <span class="op">=</span> <span class="st">&#39;Python&#39;</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>x_value <span class="op">=</span> df[x_column]</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>y_value <span class="op">=</span> df[y_column]</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>plt.scatter(x_value, y_value)</span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>plt.ylabel(y_column)</span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>plt.xlabel(x_column)</span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/scatter.png" alt="散布図" />
<figcaption aria-hidden="true">散布図</figcaption>
</figure>
<p>Google Trendの <code>AI</code>と<code>Python</code>の検索数から散布図を作成すると, AIの検索数が増えるにつれて<code>Python</code>の検索数が増えていることが分かります.</p>
<div class="note">
<ul>
<li><h2 id="相関関係">相関関係</h2></li>
</ul>
<p>このような関係を<strong>相関関係(correlation)</strong>といい,2つの変数の間に直線関係に近い傾向が見られるときに｢<strong>相関関係がある</strong>｣といいます.</p>
<p>直線的であるほど<strong>強い相関</strong>,逆を<strong>弱い相関</strong>といいます.</p>
<p>また,</p>
<ul>
<li>一方が増加したとき,他方が増加する関係を <strong>正の相関関係</strong></li>
<li>一方が増加したとき,他方が減少する関係を <strong>負の相関関係</strong></li>
</ul>
<p>といいます.</p>
<p>このような相関関係があるかないかは,散布図を見ただけである程度判断が可能ですが, 相関が<strong>ある/ない</strong>,<strong>強い/弱い</strong>というのは抽象的な表現なので, 厳密に判断する場合にはそれらを数値として表す必要があります.</p>
<figure>
<img src="/images/corre1.png" alt="相関関係" />
<figcaption aria-hidden="true">相関関係</figcaption>
</figure>
<p>相関関係を数値化したものを<strong>相関係数(correlation coefficient)</strong>といい,データの尺度に応じて,以下のような種類が存在します.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">尺度</th>
<th style="text-align: center;">係数</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">量的変数 <span class="math inline">\(\times\)</span> 量的変数</td>
<td style="text-align: center;">ピアソンの積率相関係数</td>
</tr>
<tr class="even">
<td style="text-align: center;">順位尺度 <span class="math inline">\(\times\)</span> 順位尺度</td>
<td style="text-align: center;">スピアマンの順位相関係数</td>
</tr>
<tr class="odd">
<td style="text-align: center;">名義尺度 <span class="math inline">\(\times\)</span> 質的変数</td>
<td style="text-align: center;">ピアソンの <span class="math inline">\(\Chi^2\)</span> 統計量</td>
</tr>
</tbody>
</table>
</div>
<h3 data-number="1.4.1" id="ピアソンの積率相関係数"><span class="header-section-number">1.4.1</span> ピアソンの積率相関係数</h3>
<p>2つの量的変数に利用される相関係数を<strong>ピアソンの積率相関係数(product moment correlation coefficient)</strong>といいます.</p>
<p>データが <span class="math inline">\((x_1, y_1), (x_2, y_2), ..., (x_n, y_n)\)</span> の時,</p>
<p><span class="math display">\[
\begin{align*}
r_{xy} &amp;= \frac{\sum (x_i - \bar{x})(y_i - \bar{y}) / n}{\sqrt{\sum (x_i - \bar{x})^2 / n} \sqrt{\sum (y_i - \bar{y})^2 / n}} \\
&amp; = \frac{\sum (x_i - \bar{x})(y_i - \bar{y})}{\sqrt{\sum (x_i - \bar{x})^2} \sqrt{\sum (y_i - \bar{y})^2}} \\
&amp;= \frac{s_{xy}}{s_x s_y}
\end{align*}
\]</span></p>
<p>なお,
<span class="math display">\[
\quad s_{xy} = \frac{1}{n} \sum (x_i - \bar{x})(y_i - \bar{y})
\]</span>
を <span class="math inline">\(x\)</span> と <span class="math inline">\(y\)</span> の共分散といい,相関係数は <span class="math inline">\(\frac{xとyの共分散}{xの標準偏差 \times yの標準偏差}\)</span>の形で表されます.</p>
<p><img src="/images/corre2.png" alt="ピアソンの積率相関係数のイメージ" />
<img src="/images/corre3.png" alt="ピアソンの積率相関係数のイメージ" />
<img src="/images/corre4.png" alt="ピアソンの積率相関係数のイメージ" /></p>
<p><span class="math inline">\(x_i, y_i\)</span> を標準化し <span class="math inline">\(z_i = \frac{x_i - \bar{x}}{s_x}, w_i = \frac{y_i - \bar{y}}{s_y}\)</span> とすると,</p>
<p><span class="math display">\[
\begin{align*}
r_{zw} &amp;= \frac{1}{n} \sum z_i w_i \\
&amp;= \frac{1}{n S_z S_w} \sum (x_i - \bar{x})(y_i - \bar{y}) \\
&amp;= \frac{1}{n} \sum \left( \frac{x_i - \bar{x}}{S_x} \right) \left( \frac{y_i - \bar{y}}{S_y} \right) \\
&amp;= \frac{\sum (x_i - \bar{x})(y_i - \bar{y})}{n S_x S_y} \\
&amp;= r_{xy}
\end{align*}
\]</span></p>
<p>このとき,証明の為に <span class="math inline">\(\frac{1}{n} \sum (z_i \pm w_i)^2\)</span> を考える.</p>
<p><span class="math display">\[
\begin{align*}
\frac{1}{n} \sum (z_i \pm w_i)^2 &amp;\geq 0 \\
\frac{1}{n} \sum (z_i^2 \pm 2z_i w_i + w_i^2) &amp;\geq 0 \\
\frac{1}{n} \sum z_i^2 \pm \frac{2}{n} \sum z_i w_i + \frac{1}{n} \sum w_i^2 &amp;\geq 0 \\
\frac{1}{n S_x^2} \sum (x_i - \bar{x})^2 \pm \frac{2}{n} \sum z_i w_i + \frac{1}{n S_y^2} \sum (y_i - \bar{y})^2 &amp;\geq 0  \\
\frac{S_x^2}{S_x^2} + \frac{2}{n} \sum z_i w_i + \frac{S_y^2}{S_y^2}  &amp;\geq 0 \\
1 \pm \frac{2}{n} \sum z_i w_i + 1 &amp;\geq 0 \\
2 (1 \pm r_{xy}) &amp;\geq 0 \\
-1 \leq r_{xy} \leq 1
\end{align*}
\]</span></p>
<p>このように相関係数は常に <span class="math inline">\(-1 \leq r_{xy} \leq 1\)</span> を取ります.</p>
<p>また, <span class="math inline">\(c\)</span>を<span class="math inline">\(c &gt; 0\)</span>の定数として$すべての点で <span class="math inline">\(x_i = c y_i\)</span> が成り立つとき, <span class="math inline">\(\bar{x} = c \bar{y_i}\)</span> が成り立ち,</p>
<p><span class="math display">\[
\begin{align*}
S_y &amp;= \sqrt{\frac{1}{n} \sum (y_i - \bar{y})^2} \\
    &amp;= \sqrt{\frac{1}{n} \sum (c x_i  - c \bar{y})^2} \\
    &amp;= \sqrt{\frac{c^2}{n} \sum (x_i - \bar{x})}
\end{align*}
\]</span></p>
<p>となります.
したがって,</p>
<p><span class="math display">\[
\begin{align*}
r &amp;= \frac{\frac{1}{n} \sum (x_i - \bar{x})(y_i - \bar{y})}{S_x \times S_y} \\
  &amp;= \frac{\frac{c}{n} \sum (x_i - \bar{x})(x_i - \bar{x})}{S_x \times S_x} \\
  &amp;= \frac{c S_x^2}{c S_x^2} = 1
\end{align*}
\]</span></p>
<p>となり,<code>1</code>となります. また, <span class="math inline">\(c &lt; 0\)</span> の場合は, <span class="math inline">\(S_x \times S_y = -c S_x^2\)</span>となるので,<code>-1</code>になります.</p>
<p>このように<span class="math inline">\(x_i\)</span>と<span class="math inline">\(y_i\)</span>が同じ比率で増減するとき,</p>
<ul>
<li><span class="math inline">\(r_{xy} = 1\)</span> となり,正の完全相関</li>
<li><span class="math inline">\(r_{xy} = -1\)</span> となり,負の完全相関</li>
</ul>
<p>といいます.</p>
<p>なお, 相関が「ある/ない」の目安は以下のようになっています.</p>
<table>
<thead>
<tr class="header">
<th>相関係数</th>
<th>関連性の程度</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0.0～0.4 ,0.0～-0.4</td>
<td>ほとんど相関がない</td>
</tr>
<tr class="even">
<td>0.4～0.7 ,-0.4～-0.7</td>
<td>弱い相関がある</td>
</tr>
<tr class="odd">
<td>0.7～0.9 ,-0.7～-0.9</td>
<td>強い相関がある</td>
</tr>
<tr class="even">
<td>0.9～1.0 ,-0.9～-1.0</td>
<td>きわめて強い相関がある</td>
</tr>
</tbody>
</table>
<p>Pythonで積率相関係数を求めるには <code>numpy</code>の<code>np.corrcoef(xのデータ,yのデータ)</code>あるいは,<code>scipy.stats.pearsonr(xのデータ,yのデータ)</code>を利用します. <code>scipy</code>がインストールされていない人は <code>pip install scipy</code>をしておきましょう.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas               <span class="im">as</span> pd</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.pyplot    <span class="im">as</span> plt</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> japanize_matplotlib</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> scipy.stats <span class="im">as</span> st</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a><span class="co">#データの読み込み</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a><span class="co">#データの位置を指定しよう</span></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;Data/scatter.csv&#39;</span>)</span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a><span class="co">#散布図のx軸を指定</span></span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a>x_column <span class="op">=</span> <span class="st">&#39;AI&#39;</span></span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true" tabindex="-1"></a><span class="co">#散布図のy軸を指定</span></span>
<span id="cb15-15"><a href="#cb15-15" aria-hidden="true" tabindex="-1"></a>y_column <span class="op">=</span> <span class="st">&#39;Python&#39;</span></span>
<span id="cb15-16"><a href="#cb15-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-17"><a href="#cb15-17" aria-hidden="true" tabindex="-1"></a>x_value <span class="op">=</span> df[x_column]</span>
<span id="cb15-18"><a href="#cb15-18" aria-hidden="true" tabindex="-1"></a>y_value <span class="op">=</span> df[y_column]</span>
<span id="cb15-19"><a href="#cb15-19" aria-hidden="true" tabindex="-1"></a>plt.scatter(x_value, y_value)</span>
<span id="cb15-20"><a href="#cb15-20" aria-hidden="true" tabindex="-1"></a>plt.ylabel(y_column)</span>
<span id="cb15-21"><a href="#cb15-21" aria-hidden="true" tabindex="-1"></a>plt.xlabel(x_column)</span>
<span id="cb15-22"><a href="#cb15-22" aria-hidden="true" tabindex="-1"></a>plt.show()</span>
<span id="cb15-23"><a href="#cb15-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-24"><a href="#cb15-24" aria-hidden="true" tabindex="-1"></a><span class="co"># numpyで相関係数を求める</span></span>
<span id="cb15-25"><a href="#cb15-25" aria-hidden="true" tabindex="-1"></a><span class="co"># 返り値が [[xとxの相関係数=1, xとyの相関係数]</span></span>
<span id="cb15-26"><a href="#cb15-26" aria-hidden="true" tabindex="-1"></a><span class="co"># ,[yとxの相関係数, yとyの相関係数=1]]</span></span>
<span id="cb15-27"><a href="#cb15-27" aria-hidden="true" tabindex="-1"></a><span class="co"># となっている</span></span>
<span id="cb15-28"><a href="#cb15-28" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(np.corrcoef(df[x_column],df[y_column]))</span>
<span id="cb15-29"><a href="#cb15-29" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb15-30"><a href="#cb15-30" aria-hidden="true" tabindex="-1"></a><span class="co">[[1.         0.83281294]</span></span>
<span id="cb15-31"><a href="#cb15-31" aria-hidden="true" tabindex="-1"></a><span class="co"> [0.83281294 1.        ]]</span></span>
<span id="cb15-32"><a href="#cb15-32" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb15-33"><a href="#cb15-33" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(np.corrcoef(df[x_column],df[y_column])[<span class="dv">0</span>][<span class="dv">1</span>])</span>
<span id="cb15-34"><a href="#cb15-34" aria-hidden="true" tabindex="-1"></a><span class="co"># 0.83281294</span></span>
<span id="cb15-35"><a href="#cb15-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-36"><a href="#cb15-36" aria-hidden="true" tabindex="-1"></a><span class="co">#scipy.stats.pearsonr でも計算可能</span></span>
<span id="cb15-37"><a href="#cb15-37" aria-hidden="true" tabindex="-1"></a><span class="co"># 返り値が (相関係数, p値)の形に成っている</span></span>
<span id="cb15-38"><a href="#cb15-38" aria-hidden="true" tabindex="-1"></a><span class="co"># p値に関しては, 検定の章で扱います.</span></span>
<span id="cb15-39"><a href="#cb15-39" aria-hidden="true" tabindex="-1"></a>r, p <span class="op">=</span> st.pearsonr(df[x_column],df[y_column])</span>
<span id="cb15-40"><a href="#cb15-40" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(r) <span class="co">#0.8328129378961621</span></span></code></pre></div>
<h3 data-number="1.4.2" id="スピアマンの順位相関係数"><span class="header-section-number">1.4.2</span> スピアマンの順位相関係数</h3>
<p>積率相関係数は量的変数にしか利用できませんが,質的変数のうち順序尺度データに関しては,<strong>スピアマンの順位相関係数(rank correlation coefficient)</strong>が利用できます.</p>
<p>スピアマンの順位相関係数は, 順序尺度データを順位に変換して,順位の間の相関係数を求めたものになります.</p>
<figure>
<img src="/images/corre5.png" alt="ピアソンの積率相関係数のイメージ" />
<figcaption aria-hidden="true">ピアソンの積率相関係数のイメージ</figcaption>
</figure>
<p>データを小さい順に並べ替えた順位 <span class="math inline">\(x_i, ..., x_n\)</span> がある時,</p>
<p><span class="math display">\[
r_{xy} = \frac{\frac{1}{n} \sum (x_i - \bar{x})(y_i - \bar{y})}{\sqrt{\frac{1}{n} \sum (x_i - \bar{x})^2} \sqrt{\frac{1}{n} \sum (y_i - \bar{y})^2}}
\]</span>
がどの様になるかを考える.</p>
<p>順位相関係数は,</p>
<p><span class="math display">\[
\sum x_i = \sum y_i = \frac{n(n+1)}{2}
\]</span></p>
<p><span class="math display">\[
\sum x_i^2 = \sum y_i^2 = \frac{1}{6} n(n+1)(2n+1)
\]</span></p>
<p><span class="math display">\[
\bar{x} = \bar{y} = \frac{\sum x_i}{n} = \frac{n(n+1)}{2n} = \frac{n+1}{2}
\]</span></p>
<p>なので, 分子に関して,</p>
<p><span class="math display">\[
\begin{align*}
&amp; \frac{1}{n}\sum(x_i - \bar{x})(y_i - \bar{y}) \\
&amp;= \frac{1}{n}\sum \{x_iy_i - x_i \bar{y} - \bar{x}y_i + \bar{x}\bar{y}\} \\
&amp;= \frac{1}{n}\sum x_i y_i - \frac{1}{n}\sum x_i\bar{y} - \frac{1}{n}\sum \bar{x}y_i + \frac{1}{n}\sum  \bar{x}\bar{y} \\
&amp;= \frac{1}{n}\sum x_i y_i - \frac{\bar{y}}{n}\sum x_i - \frac{\bar{x}}{n}\sum y_i + \bar{x}\bar{y} \\
&amp;= \frac{1}{n}\sum x_i y_i - \bar{x}\bar{y} \\
&amp;= \frac{1}{2n}\sum \{x_i^2 + y_i^2 - (x_i - y_i)^2\} - \bar{x}\bar{y} \\
\end{align*}
\]</span></p>
<p><span class="math display">\[
\begin{align*}
\because (x_i - y_i)^2 = x_i^2 -2x_i y_i + y_i^2  \\
x_i y_i = \frac{1}{2} \{ x_i^2 + y_i^2 - (x_i - y_i)^2 \}
\end{align*}
\]</span></p>
<p><span class="math display">\[
\begin{align*}
&amp; \frac{1}{2n}\sum \{x_i^2 + y_i^2 - (x_i - y_i)^2\} - \bar{x}\bar{y} \\
&amp;= \frac{1}{2n}\sum x_i^2 + \frac{1}{2n}\sum y_i^2 - \frac{1}{2n}\sum (x_i - y_i)^2 - \bar{x}\bar{y} \\
&amp; = \frac{1}{6} (n+1)(2n+1) - \frac{(n+1)^2}{4} - \frac{1}{2n}\sum (x_i - y_i)^2 \\
&amp; = \frac{1}{12}(n+1)(n-1) - \frac{1}{2n}\sum (x_i - y_i)^2
\end{align*}
\]</span></p>
<p>また, 分母に関して,
<span class="math display">\[
\begin{align*}
&amp; \frac{1}{n}\sum (x_i - \bar{x})^2 \\
&amp;= \frac{1}{n}\sum x_i^2 - n \bar{x}^2 \\
&amp;= \frac{1}{n} \{ \sum x_i^2 -2n \bar{x}^2 + \bar{x}^2 \} \\
&amp;= \frac{1}{n} \{\sum x_i^2 - n\bar{x}^2\} \\
&amp;= \frac{1}{6}(n+1)(2n+1) - \frac{1}{4}(n+1)^2 \\
&amp;= \frac{1}{12}(n+1)(n-1)
\end{align*}
\]</span></p>
<p>なので</p>
<p><span class="math display">\[
r_{xy} = \frac{\frac{1}{n} \sum (x_i - \bar{x})(y_i - \bar{y})}{\sqrt{\frac{1}{n} \sum (x_i - \bar{x})^2} \sqrt{\frac{1}{n} \sum (y_i - \bar{y})^2}}
\]</span></p>
<p>に代入して,
<span class="math display">\[
\begin{align*}
r_{xy} = \frac{\frac{1}{n} \sum (x_i - \bar{x})(y_i - \bar{y})}{\sqrt{\frac{1}{n} \sum (x_i - \bar{x})^2} \sqrt{\frac{1}{n} \sum (y_i - \bar{y})^2}} &amp;= \frac{\frac{1}{12}(n+1)(n-1) - \frac{1}{2} \sum (x_i - y_i)^2}{\frac{1}{12}(n+1)(n-1)}\\
&amp;=  1 - \frac{6}{n^3 - n} \sum (x_i - y_i)^2
\end{align*}
\]</span></p>
<p>となる.</p>
<p>スピアマンの順位相関係数は,Pythonでは, <code>scipy.stats.spearmanr(xのデータ,yのデータ)</code>で求めることができます.</p>
<p><a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/spearman.csv">こちら</a>のデータは,国別(A~J)のサッカー(FIFA)と野球(WBSC)のランキングのダミーデータです.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>    <span class="ex">rank</span> FIFA WBSC</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>     1    A    A</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>     2    B    E</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>     3    C    G</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>     4    D    I</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>     5    E    D</span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>     6    F    C</span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>     7    G    B</span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>     8    H    F</span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>     9    I    H</span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>    10    J    J</span></code></pre></div>
<p>こちらの順位の相関係数を求めてみましょう.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;Data/spearman.csv&#39;</span>)</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="co"># sciypyで相関係数を求める</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>correlation, pvalue <span class="op">=</span> st.spearmanr(df[<span class="st">&quot;FIFA&quot;</span>], df[<span class="st">&quot;WBSC&quot;</span>])</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;相関係数:&quot;</span>,correlation) <span class="co">#0.4545</span></span></code></pre></div>
<p><code>0.45</code>なので弱い正の相関があることが分かります.</p>
<h3 data-number="1.4.3" id="相関係数のヒートマップ"><span class="header-section-number">1.4.3</span> 相関係数のヒートマップ</h3>
<p>相関係数はデータの関係を探るために非常に便利な数値であり, 複数の観測項目からなるデータを扱う場合には,最初に相関係数をとってそれぞれにどのような関係があるのかを確認するようにしましょう.</p>
<p><a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/coeff_multi.csv">こちら</a>のデータは,e-statから取得した,県別の身長,体重,食費,睡眠の平均時間,スポーツの平均時間に関するデータです.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="ex">python</span> coeff.py</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>    <span class="ex">pref</span>  height  weight   food  sleep  sports</span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>    北海道   170.4    63.7  65739    477      15</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>    青森県   169.8    62.8  64889    490      13</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>    岩手県   170.6    63.7  70156    489      13</span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>    宮城県   169.8    63.4  73337    482      15</span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>    秋田県   170.6    66.1  74560    493      14</span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>    山形県   170.9    63.9  76000    497      12</span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>    福島県   170.2    63.9  71074    480      13</span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>    茨城県   169.7    62.4  74341    467      17</span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>    栃木県   169.8    63.3  74387    472      16</span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>    群馬県   170.5    62.7  71701    475      15</span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>   埼玉県   170.4    61.1  76663    463      15</span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>   千葉県   170.3    62.4  77639    458      15</span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>   東京都   170.5    61.3  83506    461      16</span>
<span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>  神奈川県   170.9    62.5  77510    456      17</span>
<span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a><span class="ex">14</span>   新潟県   170.9    62.0  75937    479      13</span>
<span id="cb18-18"><a href="#cb18-18" aria-hidden="true" tabindex="-1"></a><span class="ex">15</span>   富山県   170.8    63.5  73589    471      15</span>
<span id="cb18-19"><a href="#cb18-19" aria-hidden="true" tabindex="-1"></a><span class="ex">16</span>   石川県   170.8    62.9  76256    470      16</span>
<span id="cb18-20"><a href="#cb18-20" aria-hidden="true" tabindex="-1"></a><span class="ex">17</span>   福井県   170.4    62.5  79478    476      14</span>
<span id="cb18-21"><a href="#cb18-21" aria-hidden="true" tabindex="-1"></a><span class="ex">18</span>   山梨県   170.1    61.7  71294    481      16</span>
<span id="cb18-22"><a href="#cb18-22" aria-hidden="true" tabindex="-1"></a><span class="ex">19</span>   長野県   169.5    61.0  72228    474      17</span>
<span id="cb18-23"><a href="#cb18-23" aria-hidden="true" tabindex="-1"></a><span class="ex">20</span>   岐阜県   169.9    60.6  69527    469      13</span>
<span id="cb18-24"><a href="#cb18-24" aria-hidden="true" tabindex="-1"></a><span class="ex">21</span>   静岡県   170.1    61.9  75833    474      19</span>
<span id="cb18-25"><a href="#cb18-25" aria-hidden="true" tabindex="-1"></a><span class="ex">22</span>   愛知県   169.6    60.9  74694    463      14</span>
<span id="cb18-26"><a href="#cb18-26" aria-hidden="true" tabindex="-1"></a><span class="ex">23</span>   三重県   170.4    62.1  75721    473      16</span>
<span id="cb18-27"><a href="#cb18-27" aria-hidden="true" tabindex="-1"></a><span class="ex">24</span>   滋賀県   170.6    62.9  77978    470      18</span>
<span id="cb18-28"><a href="#cb18-28" aria-hidden="true" tabindex="-1"></a><span class="ex">25</span>   京都府   170.5    62.0  76904    464      16</span>
<span id="cb18-29"><a href="#cb18-29" aria-hidden="true" tabindex="-1"></a><span class="ex">26</span>   大阪府   170.2    62.2  74015    469      18</span>
<span id="cb18-30"><a href="#cb18-30" aria-hidden="true" tabindex="-1"></a><span class="ex">27</span>   兵庫県   169.6    60.6  72847    466      15</span>
<span id="cb18-31"><a href="#cb18-31" aria-hidden="true" tabindex="-1"></a><span class="ex">28</span>   奈良県   169.9    61.8  74888    461      18</span>
<span id="cb18-32"><a href="#cb18-32" aria-hidden="true" tabindex="-1"></a><span class="ex">29</span>  和歌山県   170.0    62.6  69858    479      15</span>
<span id="cb18-33"><a href="#cb18-33" aria-hidden="true" tabindex="-1"></a><span class="ex">30</span>   鳥取県   170.4    62.7  73321    475      14</span>
<span id="cb18-34"><a href="#cb18-34" aria-hidden="true" tabindex="-1"></a><span class="ex">31</span>   島根県   169.7    60.7  72160    483      16</span>
<span id="cb18-35"><a href="#cb18-35" aria-hidden="true" tabindex="-1"></a><span class="ex">32</span>   岡山県   169.6    61.7  69060    475      17</span>
<span id="cb18-36"><a href="#cb18-36" aria-hidden="true" tabindex="-1"></a><span class="ex">33</span>   広島県   168.8    60.8  69061    473      15</span>
<span id="cb18-37"><a href="#cb18-37" aria-hidden="true" tabindex="-1"></a><span class="ex">34</span>   山口県   169.2    60.2  69882    472      17</span>
<span id="cb18-38"><a href="#cb18-38" aria-hidden="true" tabindex="-1"></a><span class="ex">35</span>   徳島県   169.9    64.4  67102    472      18</span>
<span id="cb18-39"><a href="#cb18-39" aria-hidden="true" tabindex="-1"></a><span class="ex">36</span>   香川県   169.9    62.7  68400    469      18</span>
<span id="cb18-40"><a href="#cb18-40" aria-hidden="true" tabindex="-1"></a><span class="ex">37</span>   愛媛県   168.8    61.8  67274    474      16</span>
<span id="cb18-41"><a href="#cb18-41" aria-hidden="true" tabindex="-1"></a><span class="ex">38</span>   高知県   169.1    61.8  70188    484      16</span>
<span id="cb18-42"><a href="#cb18-42" aria-hidden="true" tabindex="-1"></a><span class="ex">39</span>   福岡県   169.7    60.9  70135    471      14</span>
<span id="cb18-43"><a href="#cb18-43" aria-hidden="true" tabindex="-1"></a><span class="ex">40</span>   佐賀県   169.2    62.2  68749    473      16</span>
<span id="cb18-44"><a href="#cb18-44" aria-hidden="true" tabindex="-1"></a><span class="ex">41</span>   長崎県   170.1    63.3  66641    473      18</span>
<span id="cb18-45"><a href="#cb18-45" aria-hidden="true" tabindex="-1"></a><span class="ex">42</span>   熊本県   169.5    61.8  66184    482      20</span>
<span id="cb18-46"><a href="#cb18-46" aria-hidden="true" tabindex="-1"></a><span class="ex">43</span>   大分県   169.3    62.5  69255    479      18</span>
<span id="cb18-47"><a href="#cb18-47" aria-hidden="true" tabindex="-1"></a><span class="ex">44</span>   宮崎県   168.7    61.8  65165    477      19</span>
<span id="cb18-48"><a href="#cb18-48" aria-hidden="true" tabindex="-1"></a><span class="ex">45</span>  鹿児島県   169.7    61.4  65377    479      18</span>
<span id="cb18-49"><a href="#cb18-49" aria-hidden="true" tabindex="-1"></a><span class="ex">46</span>   沖縄県   168.7    60.6  56298    482      20</span></code></pre></div>
<p>データの取得過程に興味がある人は,以下の手順を自分で行い,データを作ってみましょう.</p>
<details>
<summary>
e-statのデータ表示機能を使ってデータを自分で作る (開く/閉じる)
</summary>
<div class="note">
<p>e-statで県別の身長,体重,睡眠時間等のデータを集めます.
地域別のデータは｢地域｣から選択できます.</p>
<figure>
<img src="/images/coeff_multi1.png" alt="e-stat 地域" />
<figcaption aria-hidden="true">e-stat 地域</figcaption>
</figure>
<p>｢都道府県データ｣を選択し,｢データ表示｣をクリックします.</p>
<figure>
<img src="/images/coeff_multi2.png" alt="e-stat 地域" />
<figcaption aria-hidden="true">e-stat 地域</figcaption>
</figure>
<p>データを集める,地域,表示項目,表示方法の順に選択します.
今回はすべての県を利用するので,｢全て選択｣をクリックしたあと｢確定｣をクリックします.</p>
<figure>
<img src="/images/coeff_multi3.png" alt="e-stat 地域" />
<figcaption aria-hidden="true">e-stat 地域</figcaption>
</figure>
<p>次に項目をきめます.
分野をクリックして｢I健康･医療｣を選ぶと,項目候補に健康・医療に関わる項目が表示されます.
そこから,</p>
<pre><code>- I411301_身長（高校2年）（男）【ｃｍ】
- I412301_体重（高校2年）（男）【ｋｇ】</code></pre>
<p>を順番に選んで,｢項目を選択｣をクリックします.</p>
<figure>
<img src="/images/coeff_multi4.png" alt="e-stat 地域" />
<figcaption aria-hidden="true">e-stat 地域</figcaption>
</figure>
<p>同様に
｢L 家計｣から</p>
<pre><code>- L421101_食料費（二人以上の世帯のうち勤労者世帯）（全国消費実態調査結果）【円】</code></pre>
<p>｢M 生活時間｣から</p>
<pre><code>- M1101_睡眠の平均時間（10歳以上）（男）【分】
- M360100_スポーツの平均時間（15歳以上）（男）【分】</code></pre>
<p>を順番に選んで,｢項目を選択｣をクリックします.</p>
<figure>
<img src="/images/coeff_multi5.png" alt="e-stat 地域" />
<figcaption aria-hidden="true">e-stat 地域</figcaption>
</figure>
<p>最後にどのデータを表示するかレイアウトを決めます.</p>
<pre><code>- 調査年を列に配置
- 表示年度を2000から2010まで
- 設定して表示を更新</code></pre>
<figure>
<img src="/images/coeff_multi6.png" alt="e-stat 地域" />
<figcaption aria-hidden="true">e-stat 地域</figcaption>
</figure>
<p>データをダウンロードします.</p>
<figure>
<img src="/images/coeff_multi7.png" alt="e-stat 地域" />
<figcaption aria-hidden="true">e-stat 地域</figcaption>
</figure>
<p>ダウンロードしたデータを読み込めるcsvに編集します.</p>
<pre><code>- 2006年以外の列を削除
- 数値として新しいシートにコピー
- ヘッダー名をつける
    - 県名 pref (prefectureの略)
    - 身長 height
    - 体重 weight
    - 食費 food
    - 睡眠 sleep
    - スポーツ sports
- utf-8のcsvで保存
- ファイル名: coeff_multi.csv
- 作業ディレクトリのDataフォルダに保存</code></pre>
<figure>
<img src="/images/coeff_multi8.png" alt="e-stat 地域" />
<figcaption aria-hidden="true">e-stat 地域</figcaption>
</figure>
</div>
</details>
<p>データのどの観測項目間に関連があるのかを確かめるために,作成したデータのすべての組み合わせの相関係数を見てみましょう. 今までのように一つ一つ散布図を作成して,相関係数を求めていると,<span class="math inline">\(\text{観測項目数} \times \text{観測項目数}\)</span> のグラフを作成することになります.
そこで, 与えられた観測項目すべての組み合わせで図示する<strong>ペアプロット</strong>と<strong>ヒートマップ</strong>を活用してみます.</p>
<p><code>DataFrame</code>に含まれるデータのペアプロットには, <code>pandas</code>の<code>.plotting</code>メソッドを利用します. <code>pd.plotting.scatter_matrix(ペアプロットを求めるDataFrame)</code>で,散布図のペアプロットが作成できます.</p>
<p>また, 各項目の相関係数も<code>pandas</code>の<code>.corr()</code>メソッドで取得することが出来ます.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="co"># CSVファイルを読み込んでデータフレームに格納</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="co"># Dataフォルダを作成し,そこにデータを入れておきましょう</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;Data/coeff.csv&#39;</span>)</span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a><span class="co"># データの表示</span></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true" tabindex="-1"></a><span class="co">#分析するデータの選択</span></span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true" tabindex="-1"></a>labels <span class="op">=</span> [<span class="st">&#39;height&#39;</span>, <span class="st">&#39;weight&#39;</span>, <span class="st">&#39;food&#39;</span>, <span class="st">&#39;sports&#39;</span>, <span class="st">&#39;sleep&#39;</span>]</span>
<span id="cb24-10"><a href="#cb24-10" aria-hidden="true" tabindex="-1"></a>X <span class="op">=</span> df[labels]</span>
<span id="cb24-11"><a href="#cb24-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-12"><a href="#cb24-12" aria-hidden="true" tabindex="-1"></a><span class="co">#散布図行列を作成してみる</span></span>
<span id="cb24-13"><a href="#cb24-13" aria-hidden="true" tabindex="-1"></a>pd.plotting.scatter_matrix(X, range_padding<span class="op">=</span><span class="fl">0.2</span>)</span>
<span id="cb24-14"><a href="#cb24-14" aria-hidden="true" tabindex="-1"></a>plt.show()</span>
<span id="cb24-15"><a href="#cb24-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-16"><a href="#cb24-16" aria-hidden="true" tabindex="-1"></a><span class="co">#相関係数の組み合わせを確認</span></span>
<span id="cb24-17"><a href="#cb24-17" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(X.corr())</span>
<span id="cb24-18"><a href="#cb24-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-19"><a href="#cb24-19" aria-hidden="true" tabindex="-1"></a><span class="co">#ヒートマップで確認</span></span>
<span id="cb24-20"><a href="#cb24-20" aria-hidden="true" tabindex="-1"></a><span class="co">#ヒートマップで確認</span></span>
<span id="cb24-21"><a href="#cb24-21" aria-hidden="true" tabindex="-1"></a>sns.heatmap(X.corr()</span>
<span id="cb24-22"><a href="#cb24-22" aria-hidden="true" tabindex="-1"></a>           ,vmax<span class="op">=</span><span class="dv">1</span>     <span class="co">#ヒートマップの最大値</span></span>
<span id="cb24-23"><a href="#cb24-23" aria-hidden="true" tabindex="-1"></a>           ,vmin<span class="op">=-</span><span class="dv">1</span>    <span class="co">#最小値</span></span>
<span id="cb24-24"><a href="#cb24-24" aria-hidden="true" tabindex="-1"></a>           ,center <span class="op">=</span><span class="dv">0</span>  <span class="co">#中心</span></span>
<span id="cb24-25"><a href="#cb24-25" aria-hidden="true" tabindex="-1"></a>           ,annot<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb24-26"><a href="#cb24-26" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<p><img src="/images/pair_plot.png" alt="散布図のペアプロット" />
各項目の組み合わせごとに,散布図が作成されています. 自交点にはヒストグラムが作成されます.</p>
<figure>
<img src="/images/coeff_multi9.png" alt="相関係数のヒートマップ" />
<figcaption aria-hidden="true">相関係数のヒートマップ</figcaption>
</figure>
<p>食費と体重,体重と身長などに正の相関があることが分かります.
このように複数の観測項目から関係があるデータを探したい場合には,ペアプロットや,相関係数のヒートマップを作成することで,関係性がわかりやすくなります.</p>
<h3 data-number="1.4.4" id="chi2統計量"><span class="header-section-number">1.4.4</span> <span class="math inline">\(\Chi^2\)</span>統計量</h3>
<p>量的データには積率相関係数, 順位尺度データに対しては,順位相関係数を求めることで2つのデータの関連性を確かめることができました. では,名義尺度データの場合はどのようにすれば良いのでしょうか.</p>
<p>名義尺度を含めた質的変数の関係性を可視化するには,同時度数分布表が利用できました. 数値化においても,同時度数分布表を用いることができます.</p>
<figure>
<img src="/images/cross_table2.png" alt="同時度数分布表" />
<figcaption aria-hidden="true">同時度数分布表</figcaption>
</figure>
<p>質的変数間の関連度合いは,同時度数分布表の数値を利用した <strong>ピアソンの<span class="math inline">\(\Chi^2\)</span>統計量(かいじじょうとうけいりょう)</strong>で表すことができます. 可視化の節では, 同時度数分布表から列相対度数を求めましたが,ここでは相対度数ではなく,度数なので注意してください.</p>
<p><span class="math display">\[
\Chi_o^2 = \sum_{i=0}^{r} \sum_{j=0}^{c} \frac{(n_{ij} - E_ij)^2}{E_{ij}} (r:行数,c:列数)
\]</span></p>
<p>このとき,<span class="math inline">\(E_{ij}\)</span>を期待度数といい, <span class="math inline">\(\frac{行の合計 \times 列の合計}{総数}\)</span></p>
<p><span class="math display">\[
E_{ij} = \frac{\sum_{i}^r n_{ij} \times \sum_{j}^c n_{ij}}{\sum_{i}^{r}\sum_{j}^c n_{ij}}
\]</span></p>
<p>で求められます.</p>
<p>この<span class="math inline">\(\Chi_o^2\)</span>が大きいほど,2つの変数の間の関連が強いと言え,この値を利用して行と列のデータが独立であるかを検定する <strong><span class="math inline">\(\Chi^2\)</span>検定(独立性の検定)</strong> を行うことができます. ** <span class="math inline">\(\Chi^2\)</span> 検定** に関しては後ほど扱うとして,ここではこの値を利用して2つのデータの関連の度合いを判断する方法に関して見ていきましょう.</p>
<p><span class="math inline">\(\Chi_o^2\)</span>の値は, 同時度数分布表の行数や列数に依存して値が変わるため,相関係数のように,｢特定の値から関連があるといえる｣といった利用方には適しません.</p>
<p>そこで, 異なるデータを比較するためには, <span class="math inline">\(0 \leq V \leq 1\)</span>の値を取る,<strong>クラメールの連関係数V</strong>に変換します.</p>
<p><span class="math display">\[
V = \sqrt{\frac{\Chi_o^2}{n \times min(r - 1,c - 1)}}
\]</span></p>
<p>クラメールの連関係数は,相関係数よりも高い値が出にくいので,以下のような基準で判断します.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">V</th>
<th style="text-align: left;">判断</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">0 ~ 0.1</td>
<td style="text-align: left;">関連なし</td>
</tr>
<tr class="even">
<td style="text-align: left;">0.1 ~ 0.25</td>
<td style="text-align: left;">弱い関連がある</td>
</tr>
<tr class="odd">
<td style="text-align: left;">0.25 ~ 0.5</td>
<td style="text-align: left;">関連がある</td>
</tr>
<tr class="even">
<td style="text-align: left;">0.5 ~ 1.0</td>
<td style="text-align: left;">強い関連がある</td>
</tr>
</tbody>
</table>
<p><span class="math inline">\(\Chi_o^2\)</span>は <code>scipy.stats</code>の<code>chi2_contingency(度数分布表,correction=False)</code>で求めることが出来ます.
返り値が, <span class="math inline">\(\Chi_o^2\)</span>,p値,自由度,期待度数の4つあるので,注意しましょう.</p>
<p>同時度数分布表の節で扱った時限と成績の関係を記録した<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/cross_table_data.csv">データ</a>を利用して,クラメールの連関係数Vを求めてみましょう.</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a>     <span class="ex">Period</span> Grade</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>         2     B</span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>         5     A</span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>         4     A</span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>         3     C</span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>         1     C</span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true" tabindex="-1"></a><span class="ex">..</span>      ...   ...</span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true" tabindex="-1"></a><span class="ex">195</span>       2     C</span>
<span id="cb25-9"><a href="#cb25-9" aria-hidden="true" tabindex="-1"></a><span class="ex">196</span>       4     C</span>
<span id="cb25-10"><a href="#cb25-10" aria-hidden="true" tabindex="-1"></a><span class="ex">197</span>       5     C</span>
<span id="cb25-11"><a href="#cb25-11" aria-hidden="true" tabindex="-1"></a><span class="ex">198</span>       5     F</span>
<span id="cb25-12"><a href="#cb25-12" aria-hidden="true" tabindex="-1"></a><span class="ex">199</span>       4     C</span></code></pre></div>
<figure>
<img src="/images/heatmap.png" alt="ヒートマップ" />
<figcaption aria-hidden="true">ヒートマップ</figcaption>
</figure>
<div class="sourceCode" id="cb26"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.pyplot <span class="im">as</span> plt</span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> seaborn <span class="im">as</span> sns</span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> scipy.stats <span class="im">as</span> st</span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/cross_table_data.csv&#39;</span>)</span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true" tabindex="-1"></a><span class="co">#クロス表の作成</span></span>
<span id="cb26-10"><a href="#cb26-10" aria-hidden="true" tabindex="-1"></a>cross <span class="op">=</span> pd.crosstab(df[<span class="st">&#39;Grade&#39;</span>],df[<span class="st">&#39;Period&#39;</span>])</span>
<span id="cb26-11"><a href="#cb26-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-12"><a href="#cb26-12" aria-hidden="true" tabindex="-1"></a><span class="co">#表示順の設定</span></span>
<span id="cb26-13"><a href="#cb26-13" aria-hidden="true" tabindex="-1"></a>cross <span class="op">=</span> cross.reindex([<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>],axis<span class="op">=</span><span class="st">&#39;columns&#39;</span>)</span>
<span id="cb26-14"><a href="#cb26-14" aria-hidden="true" tabindex="-1"></a>cross <span class="op">=</span> cross.reindex([<span class="st">&#39;S&#39;</span>,<span class="st">&#39;A&#39;</span>,<span class="st">&#39;B&#39;</span>,<span class="st">&#39;C&#39;</span>,<span class="st">&#39;F&#39;</span>],axis<span class="op">=</span><span class="st">&#39;index&#39;</span>)</span>
<span id="cb26-15"><a href="#cb26-15" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(cross)</span>
<span id="cb26-16"><a href="#cb26-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-17"><a href="#cb26-17" aria-hidden="true" tabindex="-1"></a><span class="co">#列相対度数に変更する</span></span>
<span id="cb26-18"><a href="#cb26-18" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> c <span class="kw">in</span> cross.columns:</span>
<span id="cb26-19"><a href="#cb26-19" aria-hidden="true" tabindex="-1"></a>    cross[c] <span class="op">=</span> cross[c] <span class="op">/</span> cross[c].<span class="bu">sum</span>()</span>
<span id="cb26-20"><a href="#cb26-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-21"><a href="#cb26-21" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(cross)</span>
<span id="cb26-22"><a href="#cb26-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-23"><a href="#cb26-23" aria-hidden="true" tabindex="-1"></a>sns.heatmap( cross  <span class="co">#ヒートマップを作成したいテーブル</span></span>
<span id="cb26-24"><a href="#cb26-24" aria-hidden="true" tabindex="-1"></a>           , cmap<span class="op">=</span>plt.get_cmap(<span class="st">&#39;Reds&#39;</span>) <span class="co">#カラーマップ(省略可)</span></span>
<span id="cb26-25"><a href="#cb26-25" aria-hidden="true" tabindex="-1"></a>           , linewidths<span class="op">=</span><span class="fl">.5</span> <span class="co">#線の太さを指定することでセルを囲う線を表示</span></span>
<span id="cb26-26"><a href="#cb26-26" aria-hidden="true" tabindex="-1"></a>           , annot<span class="op">=</span><span class="va">True</span>  <span class="co">#セルに数値を表示</span></span>
<span id="cb26-27"><a href="#cb26-27" aria-hidden="true" tabindex="-1"></a>           )</span>
<span id="cb26-28"><a href="#cb26-28" aria-hidden="true" tabindex="-1"></a>plt.show()</span>
<span id="cb26-29"><a href="#cb26-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-30"><a href="#cb26-30" aria-hidden="true" tabindex="-1"></a><span class="co">#χ二乗統計量を求める</span></span>
<span id="cb26-31"><a href="#cb26-31" aria-hidden="true" tabindex="-1"></a>x2, p, dof, e <span class="op">=</span> st.chi2_contingency(cross,correction<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb26-32"><a href="#cb26-32" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(x2) <span class="co">#1.1342960955202308</span></span>
<span id="cb26-33"><a href="#cb26-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-34"><a href="#cb26-34" aria-hidden="true" tabindex="-1"></a><span class="co">#クラメールの連関係数Vを求める</span></span>
<span id="cb26-35"><a href="#cb26-35" aria-hidden="true" tabindex="-1"></a>v <span class="op">=</span> np.sqrt(x2<span class="op">/</span>(cross.<span class="bu">sum</span>().<span class="bu">sum</span>() <span class="op">*</span> <span class="bu">min</span>(cross.shape[<span class="dv">0</span>]<span class="op">-</span><span class="dv">1</span>,cross.shape[<span class="dv">1</span>] <span class="op">-</span><span class="dv">1</span>)))</span>
<span id="cb26-36"><a href="#cb26-36" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(v) <span class="co">#0.2381487030743849</span></span></code></pre></div>
<p>クラメールの連関係数Vの値は,0.28となり,弱い関連があることが分かりました.</p>
<h3 data-number="1.4.5" id="因果関係と相関"><span class="header-section-number">1.4.5</span> 因果関係と相関</h3>
<p>相関関係は, 2つの観測項目間の関係を表していますが, 観測項目Aの変化によって,観測項目Bの変化が起きているという<strong>因果関係(causality)</strong>を示しているものではありません.</p>
<p>論理学における因果関係は, <strong>AならばB <span class="math inline">\((A \Rightarrow B)\)</span></strong> という関係として示されます.</p>
<pre><code>- 例: 人間ならば死ぬ</code></pre>
<p>このとき,Aを<strong>十分条件</strong>, Bを<strong>必要条件</strong> といいます.</p>
<p>しかし,統計学における因果関係は,このような関係では表せません.
例えば, <strong>喫煙をすると肺がんになる</strong>という関係は, 喫煙をしても肺がんにならない場合があるので,倫理学における因果関係ではありません. 統計学における因果関係は, <strong>Aが,Bの一部を説明するための,あるいはBが起きる確率を高めるための十分条件となっている</strong>ことを表します.</p>
<p>したがって,統計学における因果関係は, ** AによってBの一部が説明できる** あるいは, ** AによってBが起きる確率が高まる** という形で示され,これを<strong>統計的因果関係</strong>といいます.</p>
<div class="note">
<p>統計的因果関係が認められる条件は,簡単には以下のように示されます.</p>
<ol type="1">
<li><p>AとBの間に明瞭な関係が認められる</p></li>
<li><p>Aが時間的に,あるいは意味的にBより選考している</p></li>
<li><p>AとBの共通要因となりうる要因を統制して(影響を取り除いて)も,両者に関係が見出される.</p></li>
</ol>
</div>
<p>これらの因果関係を示すには, 特に3.に関して, A以外の条件を揃えてBの発生確率を確かめる<strong>対照実験</strong>などの手法によって明らかにされますが,本資料では実験に関しては扱いません. AによってBを説明する,という関係に関しては,後の回帰の章で少し扱います.</p>
<p>このように, 相関関係と因果関係は異なる概念として理解する必要があります.</p>
<p>例えば, 因果関係があっても相関関係がない有名な例として, <strong>チーズの消費量と,ベッドシーツに絡まって死ぬ人の数</strong>や,<strong>プールで溺れた人の数と,ニコラス･ケイジの映画出演数</strong>などがあります(こちらのサイト(<a href="https://www.tylervigen.com/spurious-correlations">https://www.tylervigen.com/spurious-correlations</a>)にこういった例が沢山まとめられているので興味のある人は見てみましょう.)</p>
<figure>
<img src="/images/cheese_cinsumption.png" alt="spurious correlations" />
<figcaption aria-hidden="true"><a href="https://www.tylervigen.com/spurious-correlations">spurious correlations</a></figcaption>
</figure>
<figure>
<img src="/images/nicolas_cage.png" alt="spurious correlations" />
<figcaption aria-hidden="true"><a href="https://www.tylervigen.com/spurious-correlations">spurious correlations</a></figcaption>
</figure>
<p>このように,全く因果関係のないものでも現れる相関関係を<strong>偽相関(Spurious Correlation)</strong>といいます.</p>
<p>また,反対に$ y = (x-8)^2 $ という関係においては, yの値は完全にxによって決まるため,xとyの間に因果関係は認められますが,相関係数は0となります.</p>
<figure>
<img src="/images/y_x_8.png" alt="因果があっても相関がない例" />
<figcaption aria-hidden="true">因果があっても相関がない例</figcaption>
</figure>
<h3 data-number="1.4.6" id="発展偏相関係数"><span class="header-section-number">1.4.6</span> 発展:偏相関係数</h3>
<p>因果関係を検証する方法に関しては後の章に譲るとして, ここでは,相関における類似概念である<strong>偏相関</strong>について見てみましょう.</p>
<p><strong>偏相関係数(partial correlation coefficient)</strong> とは, 3つの変数がある場合に, <strong>1つの変数の影響を除いた</strong>残り2つの変数間の相関係数となります.</p>
<p>変数,<span class="math inline">\(x,y,z\)</span>があるとき,<span class="math inline">\(z\)</span>の影響を除いた, <span class="math inline">\(x,y\)</span>の間の偏相関係数は以下のように求められます.</p>
<p><span class="math display">\[
r_{xy \dot z} = \frac{r_{xy} - r_{xz}r_yz}{\sqrt{1 - r_{xz}^2}\sqrt{1 - r_{yz}^2}}
\]</span></p>
<p>式を見てみると,分子では, xとyの相関係数から,zに関する相関係数を引いていることが分かります.</p>
<p>偏相関係数の具体例を見てみましょう. <a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/partial_coeff.csv">こちら</a>のデータは米国における<code>x:小麦の1日あたりの消費量</code>,<code>y:米の一日あたりの消費量</code>,<code>z:肥満度</code>を表しています.なお, いずれの列も最大を1,最小を0に変換してあります.</p>
<p>この3変数の相関係数を取ってみます.</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/partial_coeff.csv&#39;</span>)</span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> df[<span class="st">&#39;x&#39;</span>]</span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> df[<span class="st">&#39;y&#39;</span>]</span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a>z <span class="op">=</span> df[<span class="st">&#39;z&#39;</span>]</span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true" tabindex="-1"></a><span class="co">#散布図行列を作成してみる</span></span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true" tabindex="-1"></a>pd.plotting.scatter_matrix(df, range_padding<span class="op">=</span><span class="fl">0.2</span>)</span>
<span id="cb28-8"><a href="#cb28-8" aria-hidden="true" tabindex="-1"></a>plt.savefig(<span class="st">&#39;partial_coeff_scatter_matrix.png&#39;</span>)</span>
<span id="cb28-9"><a href="#cb28-9" aria-hidden="true" tabindex="-1"></a>plt.close()</span>
<span id="cb28-10"><a href="#cb28-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-11"><a href="#cb28-11" aria-hidden="true" tabindex="-1"></a><span class="co">#ヒートマップで確認</span></span>
<span id="cb28-12"><a href="#cb28-12" aria-hidden="true" tabindex="-1"></a>sns.heatmap(df.corr()</span>
<span id="cb28-13"><a href="#cb28-13" aria-hidden="true" tabindex="-1"></a>           ,vmax<span class="op">=</span><span class="dv">1</span>     <span class="co">#ヒートマップの最大値</span></span>
<span id="cb28-14"><a href="#cb28-14" aria-hidden="true" tabindex="-1"></a>           ,vmin<span class="op">=-</span><span class="dv">1</span>    <span class="co">#最小値</span></span>
<span id="cb28-15"><a href="#cb28-15" aria-hidden="true" tabindex="-1"></a>           ,center <span class="op">=</span><span class="dv">0</span>  <span class="co">#中心</span></span>
<span id="cb28-16"><a href="#cb28-16" aria-hidden="true" tabindex="-1"></a>           ,annot<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb28-17"><a href="#cb28-17" aria-hidden="true" tabindex="-1"></a>plt.savefig(<span class="st">&#39;partial_coeff_heatmap.png&#39;</span>)</span>
<span id="cb28-18"><a href="#cb28-18" aria-hidden="true" tabindex="-1"></a>plt.close()</span>
<span id="cb28-19"><a href="#cb28-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-20"><a href="#cb28-20" aria-hidden="true" tabindex="-1"></a>rxy <span class="op">=</span> np.corrcoef(x, y)[<span class="dv">0</span>, <span class="dv">1</span>]</span>
<span id="cb28-21"><a href="#cb28-21" aria-hidden="true" tabindex="-1"></a>rxz <span class="op">=</span> np.corrcoef(x,z)[<span class="dv">0</span>, <span class="dv">1</span>]</span>
<span id="cb28-22"><a href="#cb28-22" aria-hidden="true" tabindex="-1"></a>ryz <span class="op">=</span> np.corrcoef(y,z)[<span class="dv">0</span>, <span class="dv">1</span>]</span>
<span id="cb28-23"><a href="#cb28-23" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;x-y:&#39;</span>,rxy) <span class="co">#x-y: -0.6001681728315631</span></span>
<span id="cb28-24"><a href="#cb28-24" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;x-z:&#39;</span>,rxz) <span class="co">#x-z: 0.8000777549807391</span></span>
<span id="cb28-25"><a href="#cb28-25" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;y-z:&#39;</span>,ryz) <span class="co">#y-z: -0.4740072261555343</span></span>
<span id="cb28-26"><a href="#cb28-26" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;ryzx:&#39;</span>,ryzx)</span></code></pre></div>
<figure>
<img src="/images/partial_coeff_scatter_matrix.png" alt="partial_coeff_scatter_matrix.png" />
<figcaption aria-hidden="true">partial_coeff_scatter_matrix.png</figcaption>
</figure>
<figure>
<img src="/images/partial_coeff_heatmap.png" alt="partial_coeff_heatmap.png" />
<figcaption aria-hidden="true">partial_coeff_heatmap.png</figcaption>
</figure>
<p>相関係数を見ると,</p>
<ul>
<li><p><span class="math inline">\(r_{xy}\approx-0.60\)</span>: 小麦を食べる量が多いと米を食べる量が少ない</p></li>
<li><p><span class="math inline">\(r_{xz}\approx0.80\)</span>:小麦を食べる量が多いほど太っている</p></li>
<li><p><span class="math inline">\(r_{yz}\approx-0.47\)</span>:米を食べる量が多いほど痩せている</p></li>
</ul>
<p>となっています.</p>
<p>小麦を食べるほど,米を食べる量が少ないというのは米国において,米を主食とする人が少ないことから,普段小麦粉を利用した食事をしているほど,米を食べる機会が少ないということで理解ができます. また,小麦を食べる量が多いほど太っているというのも,炭水化物をたくさん食べるほど太っているということで理解できます. 一方で, 米を食べる量が多いほど痩せているという関係は, あまり自然ではありません.</p>
<p>これは, 一般的に小麦を食べる文化圏の人のほうが,アジア系よりも太っていることに影響されていそうです. yとzの散布図に,xで色をつけることで,xの影響を確認してみましょう.</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a>plt.scatter(y,z,c<span class="op">=</span>x)</span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a>plt.xlabel(<span class="st">&#39;米の消費量&#39;</span>)</span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&#39;肥満度&#39;</span>)</span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true" tabindex="-1"></a>plt.xlim(<span class="op">-</span><span class="fl">0.1</span>,<span class="fl">1.1</span>)</span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true" tabindex="-1"></a>plt.ylim(<span class="op">-</span><span class="fl">0.1</span>,<span class="fl">1.1</span>)</span>
<span id="cb29-6"><a href="#cb29-6" aria-hidden="true" tabindex="-1"></a>plt.grid()</span>
<span id="cb29-7"><a href="#cb29-7" aria-hidden="true" tabindex="-1"></a>plt.colorbar()</span>
<span id="cb29-8"><a href="#cb29-8" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;ryz=&#39;</span><span class="op">+</span><span class="bu">str</span>(ryz)[:<span class="dv">5</span>])</span>
<span id="cb29-9"><a href="#cb29-9" aria-hidden="true" tabindex="-1"></a>plt.savefig(<span class="st">&#39;partial_coeff1.png&#39;</span>)</span>
<span id="cb29-10"><a href="#cb29-10" aria-hidden="true" tabindex="-1"></a>plt.close()</span></code></pre></div>
<figure>
<img src="/images/partial_coeff1.png" alt="r_{yz}に対するxの影響" />
<figcaption aria-hidden="true"><span class="math inline">\(r_{yz}\)</span>に対するxの影響</figcaption>
</figure>
<p>左上に行くほど,xの値を表す色が明るくなっており, xの影響で<span class="math inline">\(r_{yz}\)</span>が負の相関となっていることが分かります.</p>
<p>それでは, 小麦の影響を除いた米の肥満への影響 <span class="math inline">\(r_{yz \dor x}\)</span> を計算してみましょう.</p>
<p><span class="math display">\[
\begin{align*}
r_{yz \dot x} &amp;= \frac{r_{yz} - r_{xy}r_xz}{\sqrt{1 - r_{xz}^2}\sqrt{1 - r_{xy}^2}}
&amp;\approx \frac{-0.47 + 0.8 \times 0.6}{\sqrt{1 - 0.8^2}\sqrt{1 - 0.6^2}}
&amp;\approx 0.02
\end{align*}
\]</span></p>
<p>Pythonでも計算してみます.</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a>ryzx <span class="op">=</span> (ryz <span class="op">-</span> (rxy <span class="op">*</span> rxz)) <span class="op">/</span> (np.sqrt(<span class="dv">1</span><span class="op">-</span>rxy<span class="op">**</span><span class="dv">2</span>)<span class="op">*</span>np.sqrt(<span class="dv">1</span><span class="op">-</span>rxz<span class="op">**</span><span class="dv">2</span>))</span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;ryzx:&#39;</span>,ryzx) <span class="co">#0.012866706738387962</span></span></code></pre></div>
<p>実際にはほとんど,米の消費量と,肥満度に相関はないことが分かります.</p>
<p>最後に,xの影響を打ち消した,yとzの関係をプロットしてみましょう. これは,この後扱う回帰を利用していますので, コードは理解できなくても問題ありません.</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="co">#の影響を除いたyとzの散布図</span></span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.linear_model <span class="im">import</span> LinearRegression</span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true" tabindex="-1"></a><span class="co">#yとzのxによる回帰式をたてて,その残渣をプロットすることで,</span></span>
<span id="cb31-4"><a href="#cb31-4" aria-hidden="true" tabindex="-1"></a><span class="co">#xの効果を打ち消したyとzの関係を表現</span></span>
<span id="cb31-5"><a href="#cb31-5" aria-hidden="true" tabindex="-1"></a>model_y <span class="op">=</span> LinearRegression().fit(df[[<span class="st">&#39;x&#39;</span>]], y)</span>
<span id="cb31-6"><a href="#cb31-6" aria-hidden="true" tabindex="-1"></a>residual_y <span class="op">=</span> y <span class="op">-</span> model_y.predict(df[[<span class="st">&#39;x&#39;</span>]])</span>
<span id="cb31-7"><a href="#cb31-7" aria-hidden="true" tabindex="-1"></a>model_z <span class="op">=</span> LinearRegression().fit(df[[<span class="st">&#39;x&#39;</span>]], z)</span>
<span id="cb31-8"><a href="#cb31-8" aria-hidden="true" tabindex="-1"></a>residual_z <span class="op">=</span> z <span class="op">-</span> model_z.predict(df[[<span class="st">&#39;x&#39;</span>]])</span>
<span id="cb31-9"><a href="#cb31-9" aria-hidden="true" tabindex="-1"></a>(<span class="op">-</span><span class="fl">0.47</span> <span class="op">+</span> <span class="fl">0.8</span> <span class="op">*</span> <span class="fl">0.6</span>) <span class="op">/</span> (np.sqrt(<span class="dv">1</span> <span class="op">-</span> <span class="fl">0.8</span><span class="op">**</span><span class="dv">2</span>) <span class="op">*</span> np.sqrt(<span class="dv">1</span> <span class="op">-</span> <span class="fl">0.6</span><span class="op">**</span><span class="dv">2</span>))</span>
<span id="cb31-10"><a href="#cb31-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-11"><a href="#cb31-11" aria-hidden="true" tabindex="-1"></a>plt.scatter(residual_z,residual_y,c<span class="op">=</span>x)</span>
<span id="cb31-12"><a href="#cb31-12" aria-hidden="true" tabindex="-1"></a>plt.xlabel(<span class="st">&#39;米の消費量&#39;</span>)</span>
<span id="cb31-13"><a href="#cb31-13" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&#39;肥満度&#39;</span>)</span>
<span id="cb31-14"><a href="#cb31-14" aria-hidden="true" tabindex="-1"></a>plt.grid()</span>
<span id="cb31-15"><a href="#cb31-15" aria-hidden="true" tabindex="-1"></a>plt.colorbar()</span>
<span id="cb31-16"><a href="#cb31-16" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;ryz=&#39;</span><span class="op">+</span><span class="bu">str</span>(ryzx)[:<span class="dv">5</span>])</span>
<span id="cb31-17"><a href="#cb31-17" aria-hidden="true" tabindex="-1"></a>plt.savefig(<span class="st">&#39;partial_coeff2.png&#39;</span>)</span>
<span id="cb31-18"><a href="#cb31-18" aria-hidden="true" tabindex="-1"></a>plt.close()</span></code></pre></div>
<figure>
<img src="/images/partial_coeff2.png" alt="partial_coeff2.png" />
<figcaption aria-hidden="true">partial_coeff2.png</figcaption>
</figure>
<p>もとのyとzの散布図における,xの広がりの影響が打ち消されて,ほとんど相関がなくなっていることが分かります.</p>
<h2 data-number="1.5" id="距離と類似度"><span class="header-section-number">1.5</span> 距離と類似度</h2>
<p>ユークリッド距離,コサイン距離</p>
]]></description>
    <pubDate>Fri, 29 Mar 2024 00:00:00 UT</pubDate>
    <guid>/lectures/slds9.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>特別講義DS Ch8 データの可視化</title>
    <link>/lectures/slds8.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#データの可視化" id="toc-データの可視化"><span class="toc-section-number">1</span> データの可視化</a>
<ul>
<li><a href="#基礎的なグラフ棒グラフ円グラフ折れ線グラフ" id="toc-基礎的なグラフ棒グラフ円グラフ折れ線グラフ"><span class="toc-section-number">1.1</span> 基礎的なグラフ(棒グラフ,円グラフ,折れ線グラフ)</a>
<ul>
<li><a href="#棒グラフの作成" id="toc-棒グラフの作成"><span class="toc-section-number">1.1.1</span> 棒グラフの作成</a></li>
<li><a href="#色の変更" id="toc-色の変更"><span class="toc-section-number">1.1.2</span> 色の変更</a></li>
<li><a href="#スタイルの変更" id="toc-スタイルの変更"><span class="toc-section-number">1.1.3</span> スタイルの変更</a></li>
<li><a href="#要素の追加" id="toc-要素の追加"><span class="toc-section-number">1.1.4</span> 要素の追加</a></li>
</ul></li>
<li><a href="#円グラフ" id="toc-円グラフ"><span class="toc-section-number">1.2</span> 円グラフ</a></li>
<li><a href="#for文を利用したグラフ" id="toc-for文を利用したグラフ"><span class="toc-section-number">1.3</span> for文を利用したグラフ</a></li>
<li><a href="#グラフの分割" id="toc-グラフの分割"><span class="toc-section-number">1.4</span> グラフの分割</a></li>
<li><a href="#度数分布表とヒストグラム" id="toc-度数分布表とヒストグラム"><span class="toc-section-number">1.5</span> 度数分布表とヒストグラム</a>
<ul>
<li><a href="#度数分布表" id="toc-度数分布表"><span class="toc-section-number">1.5.1</span> 度数分布表</a></li>
<li><a href="#度数分布表の可視化ヒストグラム" id="toc-度数分布表の可視化ヒストグラム"><span class="toc-section-number">1.5.2</span> 度数分布表の可視化:<strong>ヒストグラム</strong></a></li>
</ul></li>
<li><a href="#箱ひげ図" id="toc-箱ひげ図"><span class="toc-section-number">1.6</span> 箱ひげ図</a></li>
<li><a href="#発展密度プロット" id="toc-発展密度プロット"><span class="toc-section-number">1.7</span> 発展:密度プロット</a></li>
<li><a href="#発展sinaplot" id="toc-発展sinaplot"><span class="toc-section-number">1.8</span> 発展:sinaplot</a></li>
<li><a href="#発展バイオリンプロット" id="toc-発展バイオリンプロット"><span class="toc-section-number">1.9</span> 発展:バイオリンプロット</a></li>
<li><a href="#散布図" id="toc-散布図"><span class="toc-section-number">1.10</span> 散布図</a>
<ul>
<li><a href="#観測項目が複数ある場合の散布図" id="toc-観測項目が複数ある場合の散布図"><span class="toc-section-number">1.10.1</span> 観測項目が複数ある場合の散布図</a></li>
<li><a href="#クラスタリングにおける散布図" id="toc-クラスタリングにおける散布図"><span class="toc-section-number">1.10.2</span> クラスタリングにおける散布図</a></li>
</ul></li>
<li><a href="#同時度数分布表" id="toc-同時度数分布表"><span class="toc-section-number">1.11</span> 同時度数分布表</a></li>
<li><a href="#ヒートマップ" id="toc-ヒートマップ"><span class="toc-section-number">1.12</span> ヒートマップ</a></li>
</ul></li>
</ul>
</div>
<h1 data-number="1" id="データの可視化"><span class="header-section-number">1</span> データの可視化</h1>
<p>ここまでで,プログラミングを利用してデータを読み込み,編集ができるようになりました. これから,データを分析する手法を学習しましょう. データ分析の第一歩は,データの<strong>可視化</strong>です.</p>
<p>統計データはテーブル形式のまま,眺めても理解できません. データを可視化することで,データの特徴や意味を理解する助けになります. ここでは,データを可視化するいくつかの方法を学びましょう.</p>
<div class="note">
<ul>
<li><h2 id="ライブラリのインストール">ライブラリのインストール</h2></li>
</ul>
<p>Pythonにおけるグラフ作成の,代表的なライブラリには,<a href="https://matplotlib.org"><code>matplotlib</code></a>や<a href="https://seaborn.pydata.org"><code>seaborn</code></a>があります.
それぞれ, <code>pip install</code>しておきましょう.</p>
<p><code>matplotlib</code>,<code>seaborn</code>はそれぞれ以下のようにインポートするのが一般的です.</p>
<ul>
<li><p><code>import matplotlib.pyplot as plt</code></p></li>
<li><p><code>import searborn as sns</code></p></li>
</ul>
</div>
<div class="warn">
<ul>
<li><h2 id="matplotlibにおける日本語表示"><code>matplotlib</code>における日本語表示</h2>
<code>matplotlib</code>は日本語などのマルチバイト文字に対応しておらず,日本語を使用すると日本語部分が日本語部分が, □(通称豆腐)に変わります.</li>
</ul>
<p>例: ｢Hello こんにちは｣ → ｢Hello □ □ □ □ □ ｣</p>
<p><code>matplotlib</code>で日本語を利用する方法として一番簡単なものに, <code>japanize-matplotlib</code>の利用があります.
<code>pip install</code> したあとに, <code>import japanize_matplotlib</code> をしましょう(<code>pip</code> では <code>'-'</code>(ハイフン)ですが,<code>import</code>文では,<code>'_'</code>(アンダーバー)なので注意してください.)</p>
</div>
<div class="warn">
<ul>
<li>Python 3.12 における<code>japanize_matplotlib</code></li>
</ul>
<p>Python3.12では,<code>japanize_matplotlib</code>を読み込もうとすると,<code>ModuleNotFoundError: No module named 'distutils'</code> と表示されます.</p>
<p>これは,<code>japanize_matplotlib</code>内で利用されている<code>distutils</code>というモジュールが廃止されたことによります. こちらのエラーは, <code>distutils</code>の代替である<code>setuptools</code>を <code>pip install</code>することで消えます.</p>
<p>参考: <a href="https://qiita.com/pitao/items/1740a62ddee797aed807">【inshellisense】ModuleNotFoundError: No module named ’distutils’の対処法</a></p>
</div>
<p>本章におけるコードは以下, 先頭に以下のような記述があることが前提となります.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.pyplot <span class="im">as</span> plt</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> japanize_matplotlib</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> seaborn <span class="im">as</span> sns</span></code></pre></div>
<h2 data-number="1.1" id="基礎的なグラフ棒グラフ円グラフ折れ線グラフ"><span class="header-section-number">1.1</span> 基礎的なグラフ(棒グラフ,円グラフ,折れ線グラフ)</h2>
<p><code>matplotlib</code>を利用して,グラフを作成する大まかな手順は以下のようになります.</p>
<div class="note">
<ol type="1">
<li><p>データを準備する.
BOMなしのCSVを作りましょう</p></li>
<li><p><code>pandas</code>でプログラムでCSVを読み込みましょう</p></li>
<li><p>グラフにしたい部分を抽出します.</p>
<p>グラフを作るために何が必要かはグラフの種類によります.</p></li>
<li><p><code>matplotlib</code>のメソッドを利用してグラフを生成します.</p>
<p>基本的なメソッドは以下のとおりです.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">グラフの種類</th>
<th style="text-align: center;">メソッド</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">棒グラフ</td>
<td style="text-align: center;"><code>plt.bar(x軸のリスト,y軸のリスト)</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">円グラフ</td>
<td style="text-align: center;"><code>plt.pie(カテゴリー別のデータのリスト,label=ラベル)</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">折れ線グラフ</td>
<td style="text-align: center;"><code>plt.plot(x軸のリスト,y軸のリスト)</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">散布図</td>
<td style="text-align: center;"><code>plt.scatter(x軸のリスト,y軸のリスト)</code></td>
</tr>
</tbody>
</table>
<p>これら以外の,グラフに関しては個別に扱います.</p></li>
<li><p>グラフの見た目を整えます.</p>
<p>ある程度自動で設定されますが,色,メモリ,形,軸などを個別に設定できます.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">グラフの要素</th>
<th style="text-align: center;">メソッド</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">タイトル</td>
<td style="text-align: center;"><code>plt.title('タイトル')</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">判例</td>
<td style="text-align: center;"><code>plt.legend()</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">y軸</td>
<td style="text-align: center;"><code>plt.yticks(軸の目盛のリスト)</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">x軸</td>
<td style="text-align: center;"><code>plt.xticks(軸の目盛のリスト)</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">y軸ラベル</td>
<td style="text-align: center;"><code>plt.ylabel('ラベル')</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">x軸ラベル</td>
<td style="text-align: center;"><code>plt.xlabel('ラベル')</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">補助線の追加</td>
<td style="text-align: center;"><code>plt.minorticks_on()</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"><code>plt.grid(which='both')</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">表示領域</td>
<td style="text-align: center;"><code>plt.ylim(min,max)</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"><code>plt.xlim(min,max)</code></td>
</tr>
</tbody>
</table></li>
<li><p><code>plt.show()</code>でグラフを出力.</p></li>
</ol>
<p>ポップアップウィンドウでグラフが表示されます.</p>
<ol start="8" type="1">
<li>グラフの保存</li>
</ol>
<p>ポップアップウィンドウの保存ボタンを押すことで画像に名前をつけて保存することが可能です.</p>
<figure>
<img src="/images/graph_size_setting.png" alt="画像の表示" />
<figcaption aria-hidden="true">画像の表示</figcaption>
</figure>
</div>
<p>例えば,以下のコードで次のグラフが表示されます.
<code>np.arange(0,100,1)</code>は,<code>0</code>から<code>100</code>までの数値を<code>1</code>ずつ増える<code>numpy</code>の配列を生成しています.
<code>[x for x in range(0,101,1)]</code> でも同様の結果となります.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>plt.plot(np.arange(<span class="dv">0</span>,<span class="dv">100</span>,<span class="dv">1</span>)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>        ,np.arange(<span class="dv">0</span>,<span class="dv">100</span>,<span class="dv">1</span>)</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>        ,color<span class="op">=</span><span class="st">&#39;red&#39;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        ,label<span class="op">=</span><span class="st">&#39;sample&#39;</span>)</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;title&#39;</span>)</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>plt.ylim(<span class="dv">0</span>,<span class="dv">100</span>)</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>plt.xlim(<span class="dv">0</span>,<span class="dv">100</span>)</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>plt.xticks(np.arange(<span class="dv">0</span>,<span class="dv">100</span>,<span class="dv">10</span>))</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>plt.yticks(np.arange(<span class="dv">0</span>,<span class="dv">100</span>,<span class="dv">10</span>))</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>plt.minorticks_on()</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>plt.grid(which<span class="op">=</span><span class="st">&#39;both&#39;</span>)</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>plt.xlabel(<span class="st">&#39;x_label&#39;</span>)</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&#39;y_label&#39;</span>)</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>plt.legend()</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/python_graph_elem.png" alt="グラフの要素" />
<figcaption aria-hidden="true">グラフの要素</figcaption>
</figure>
<div class="warn">
<p>画像は<code>plt.show()</code>で表示されるポップアップウィンドウを立ち上げなくても,<code>plt.savefig('figure.png')</code>と記述することで保存することができます.</p>
<p>ただし,<code>plt.show()</code>をして自分でポップアップウィンドウを閉じないと,<code>plt.</code>による設定がメモリに保存されたままになります.</p>
<p><code>plt.show()</code>を実行しない場合は必ず最後に<code>plt.close()</code>を追加してメモリを開放しましょう.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>plt.plot(np.arange(<span class="dv">0</span>,<span class="dv">100</span>,<span class="dv">1</span>)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>        ,np.arange(<span class="dv">0</span>,<span class="dv">100</span>,<span class="dv">1</span>)</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>        ,color<span class="op">=</span><span class="st">&#39;red&#39;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>        ,label<span class="op">=</span><span class="st">&#39;sample&#39;</span>)</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>plt.savefig(<span class="st">&#39;figure.png&#39;</span>)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>plt.close()</span></code></pre></div>
</div>
<h3 data-number="1.1.1" id="棒グラフの作成"><span class="header-section-number">1.1.1</span> 棒グラフの作成</h3>
<p><a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/bar_pie.csv">こちら</a>からデータをダウンロードし,棒グラフを作成してみましょう.</p>
<p>まずはデータを確認します.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co"># import 部分は省略されています</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="co"># dataフォルダにあるbar_pie.csvというファイルを読み込みます.</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&quot;data/bar_pie.csv&quot;</span>)</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="co"># 読み込んだファイルの中身を見てみます.</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="co">    cat dog bird</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="co">0    10  12   20</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>プログラムは読み込むデータと,作りたいグラフの形によって変化します.
どのようなデータが必要かを意識して,データを抽出しましょう.</p>
<div class="note">
<p>棒グラフの作成に必要なデータは,</p>
<ul>
<li><code>棒毎のラベル</code></li>
</ul>
<p>それぞれの棒の名前です.文字列で指定します.
今回は<code>'cat'</code>,<code>'dog'</code>,<code>'bird'</code>とします.</p>
<ul>
<li><code>棒毎のx軸の位置</code></li>
</ul>
<p>棒グラフの位置は,<code>0</code>から始まる整数の列として指定します.
今回は,<code>0</code>,<code>1</code>,<code>2</code>を指定します.</p>
<ul>
<li><code>棒毎の高さ</code>になります.</li>
</ul>
<p>高さに<code>10</code>,<code>12</code>,<code>20</code>を指定します.</p>
</div>
<div class="sourceCode" id="cb5"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 棒グラフのラベルを抽出します</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="co"># df.columns でDataFrameからHeaderを抽出し,</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="co"># list()関数でDataFrameからlist型に変換しています</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>labels <span class="op">=</span> <span class="bu">list</span>(df.columns)</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="co"># 棒グラフのx軸のどこに置くのかを指定しています.</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="co"># np.arange(x) は [0,1,..,x]というarrayを作ります.</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>x_position <span class="op">=</span> np.arange(<span class="bu">len</span>(labels))</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="co">#棒グラフの高さを抽出します</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="co"># メソッド icloc[x]はDataFrameのx行目を抽出します.</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>values <span class="op">=</span> <span class="bu">list</span>(df.iloc[<span class="dv">0</span>])</span></code></pre></div>
<p>抽出した情報を元に,棒グラフを作成します.
<code>plt.bar(X軸のリスト,Y軸のリスト)</code>の形で,データを指定します.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 棒グラフを作成します.</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="co"># x 軸 にx_position</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="co"># それぞれの棒グラフの高さにvaluesを与えています.</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="co"># その他にも沢山の引数があります.</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>plt.bar(x<span class="op">=</span>x_position, height<span class="op">=</span>values)</span></code></pre></div>
<p>このままだと,X軸のラベルに何も記述されないので,
<code>plt.xticks(ラベルの位置のリスト,ラベルのリスト)</code>で,ラベルを指定します.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">#ラベルの位置を指定します.</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>plt.xticks(ticks<span class="op">=</span>x_position,labels<span class="op">=</span>labels)</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="co"># Y軸ラベルを指定します</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&quot;number&quot;</span>)</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="co"># タイトルを指名します</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&quot;kind&quot;</span>)</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="co"># グラフの表示</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/bar_graph.png" alt="棒グラフの表示" />
<figcaption aria-hidden="true">棒グラフの表示</figcaption>
</figure>
<p>表示されたグラフは, 保存ボタンで画像として保存できます.</p>
<p>グラフ作成の基本は,これで終わりです.あとは,それぞれのグラフ毎に<code>plt.bar()</code>の部分を使い分け,グラフのデザインを変更することで,様々なグラフが作成できます.</p>
<p>グラフのデザインに関する要素は,無数にあるためこの講義ですべてを扱うことはできませんが,いくつかの要素を実際に変更してみましょう.</p>
<h3 data-number="1.1.2" id="色の変更"><span class="header-section-number">1.1.2</span> 色の変更</h3>
<p>matplotlibではグラフの各部に以下の色を指定できます.
これ以外の指定の仕方もあります.色の変え方は,それぞれのグラフで異なります.</p>
<figure>
<img src="/images/graph_color.png" alt="グラフの色" />
<figcaption aria-hidden="true">グラフの色</figcaption>
</figure>
<p>棒グラフは<code>plt.bar(color=棒毎の色のリスト)</code>の形で棒ごとに色を指定することができます.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 棒グラフの色を指定します.</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="co"># 1つ目 red</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="co"># 2つ目 blue</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="co"># 3つ目 yellow</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>color_list <span class="op">=</span> [<span class="st">&quot;red&quot;</span>, <span class="st">&quot;blue&quot;</span>, <span class="st">&quot;yellow&quot;</span>]</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="co"># 引数に色の指定をします</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>plt.bar(color<span class="op">=</span>color_list, x<span class="op">=</span>x_position, height<span class="op">=</span>values)</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="co">#ラベルの位置を指定します.</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>plt.xticks(ticks<span class="op">=</span>x_position,labels<span class="op">=</span>labels)</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="co"># yラベルを指定します</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&quot;number&quot;</span>)</span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="co"># タイトルを指名します</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&quot;kind&quot;</span>)</span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a><span class="co"># グラフの表示</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/bar_graph_color.png" alt="棒グラフの色の変更" />
<figcaption aria-hidden="true">棒グラフの色の変更</figcaption>
</figure>
<h3 data-number="1.1.3" id="スタイルの変更"><span class="header-section-number">1.1.3</span> スタイルの変更</h3>
<p>毎回細かなデザインを自分で調整すると手間なので,デフォルトで準備されているスタイルを利用すると楽です.</p>
<p>matplotlibではいくつかのデフォルトのスタイルが準備されています. 使用可能なスタイルは,plt.style.available で確認できます.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> python</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="ex">Python</span> 3.12.3 <span class="er">(</span><span class="ex">main,</span> Jun  3 2024, 08:31:31<span class="kw">)</span> <span class="ex">[Clang</span> 15.0.0 <span class="er">(</span><span class="ex">clang-1500.3.9.4</span><span class="kw">)</span><span class="ex">]</span> on darwin</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Type</span> <span class="st">&quot;help&quot;</span>, <span class="st">&quot;copyright&quot;</span>, <span class="st">&quot;credits&quot;</span> or <span class="st">&quot;license&quot;</span> for more information.</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> import <span class="ex">matplotlib.pyplot</span> as plt</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> plt.style.available</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="ex">[</span><span class="st">&#39;Solarize_Light2&#39;</span><span class="ex">,</span> <span class="st">&#39;_classic_test_patch&#39;</span>, <span class="st">&#39;_mpl-gallery&#39;</span>, <span class="st">&#39;_mpl-gallery-nogrid&#39;</span>, <span class="st">&#39;bmh&#39;</span>, <span class="st">&#39;classic&#39;</span>, <span class="st">&#39;dark_background&#39;</span>, <span class="st">&#39;fast&#39;</span>, <span class="st">&#39;fivethirtyeight&#39;</span>, <span class="st">&#39;ggplot&#39;</span>, <span class="st">&#39;grayscale&#39;</span>, <span class="st">&#39;seaborn-v0_8&#39;</span>, <span class="st">&#39;seaborn-v0_8-bright&#39;</span>, <span class="st">&#39;seaborn-v0_8-colorblind&#39;</span>, <span class="st">&#39;seaborn-v0_8-dark&#39;</span>, <span class="st">&#39;seaborn-v0_8-dark-palette&#39;</span>, <span class="st">&#39;seaborn-v0_8-darkgrid&#39;</span>, <span class="st">&#39;seaborn-v0_8-deep&#39;</span>, <span class="st">&#39;seaborn-v0_8-muted&#39;</span>, <span class="st">&#39;seaborn-v0_8-notebook&#39;</span>, <span class="st">&#39;seaborn-v0_8-paper&#39;</span>, <span class="st">&#39;seaborn-v0_8-pastel&#39;</span>, <span class="st">&#39;seaborn-v0_8-poster&#39;</span>, <span class="st">&#39;seaborn-v0_8-talk&#39;</span>, <span class="st">&#39;seaborn-v0_8-ticks&#39;</span>, <span class="st">&#39;seaborn-v0_8-white&#39;</span>, <span class="st">&#39;seaborn-v0_8-whitegrid&#39;</span>, <span class="st">&#39;tableau-colorblind10&#39;</span>]</span></code></pre></div>
<p>それぞれのスタイルのイメージは<a href="https://matplotlib.org/stable/gallery/style_sheets/style_sheets_reference.html">こちら</a>で確認できます.</p>
<p>スタイルは<code>plt.style.use('スタイル名')</code>で指定し,以降のコード全てに適用されます.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co"># スタイル &#39;ggplot&#39; を使ってみます</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>plt.style.use(<span class="st">&#39;ggplot&#39;</span>)</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="co"># 引数に色の指定をします</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>plt.bar(x<span class="op">=</span>x_position, height<span class="op">=</span>values)</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="co">#ラベルの位置を指定します.</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>plt.xticks(ticks<span class="op">=</span>x_position,labels<span class="op">=</span>labels)</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="co"># yラベルを指定します</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&quot;number&quot;</span>)</span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="co"># タイトルを指名します</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&quot;kind&quot;</span>)</span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a><span class="co"># グラフの表示</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/bar_graph_style.png" alt="スタイルの適用" />
<figcaption aria-hidden="true">スタイルの適用</figcaption>
</figure>
<h3 data-number="1.1.4" id="要素の追加"><span class="header-section-number">1.1.4</span> 要素の追加</h3>
<p>グラフに新しい要素を付け加えるのも簡単です.</p>
<p><code>plt.show()</code>までの間に,グラフを宣言することで,複数のグラフを重ねることが可能です.
ここでは, 異なる色の棒グラフを追加しています.</p>
<p>また, <code>plt.legend()</code>によって凡例を追加しています.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co"># スタイル seaborn を使ってみます</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>plt.style.use(<span class="st">&#39;seaborn&#39;</span>)</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="co"># 棒グラフを2つ並べます</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>plt.bar(color<span class="op">=</span><span class="st">&#39;red&#39;</span>, x<span class="op">=</span>x_position, width<span class="op">=</span><span class="fl">0.3</span>,height<span class="op">=</span>values)</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>plt.bar(color<span class="op">=</span><span class="st">&#39;blue&#39;</span>,x<span class="op">=</span>x_position<span class="op">+</span><span class="fl">0.3</span>, width<span class="op">=</span><span class="fl">0.3</span>,height<span class="op">=</span>[<span class="dv">11</span>,<span class="dv">15</span>,<span class="dv">14</span>])</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="co">#凡例を追加します</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="co"># loc で位置を指定します</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="co"># 上下 upper center lower</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a><span class="co"># 左右 left center right</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>plt.legend([<span class="st">&#39;2020&#39;</span>,<span class="st">&#39;2000&#39;</span>], loc<span class="op">=</span><span class="st">&#39;upper left&#39;</span>)</span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="co">#ラベルの位置を指定します.</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>plt.xticks(ticks<span class="op">=</span>x_position<span class="op">+</span><span class="fl">0.15</span>,labels<span class="op">=</span>labels)</span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a><span class="co"># yラベルを指定します</span></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&quot;number&quot;</span>)</span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a><span class="co"># タイトルを指名します</span></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&quot;kind&quot;</span>)</span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a><span class="co"># グラフの表示</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/bar_graph_style2.png" alt="凡例の追加" />
<figcaption aria-hidden="true">凡例の追加</figcaption>
</figure>
<p>デザインのすべてのパターンをここで扱うことは出来ないので,
やりたいことに応じて,
<a href="https://matplotlib.org/stable/users/index">matplotlubの公式ドキュメント</a>を確認しましょう.</p>
<h2 data-number="1.2" id="円グラフ"><span class="header-section-number">1.2</span> 円グラフ</h2>
<p>先ほどと同じデータ<code>bar_pie.csv</code>を利用して円グラフを作成してみます.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="co">header1 header2 header3 ...</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="co">value1  value2  value3  ...</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="co">の形のcsvから棒グラフを作成する</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a><span class="co"># dataフォルダにあるbar_pie.csvというファイルを読み込みます.</span></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&quot;data/bar_pie.csv&quot;</span>)</span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a><span class="co"># 読み込んだファイルの中身を見てみます.</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a><span class="co"># 棒グラフのラベルを抽出します</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a><span class="co"># df.columns でDataFrameからHeaderを抽出し,</span></span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a><span class="co"># list()関数でDataFrameからlist型に変換しています</span></span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a>labels <span class="op">=</span> <span class="bu">list</span>(df.columns)</span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a><span class="co"># メソッド icloc[x]はDataFrameのx行目を抽出します.</span></span>
<span id="cb12-19"><a href="#cb12-19" aria-hidden="true" tabindex="-1"></a>values <span class="op">=</span> <span class="bu">list</span>(df.iloc[<span class="dv">0</span>])</span>
<span id="cb12-20"><a href="#cb12-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-21"><a href="#cb12-21" aria-hidden="true" tabindex="-1"></a><span class="co"># 円グラフの作成</span></span>
<span id="cb12-22"><a href="#cb12-22" aria-hidden="true" tabindex="-1"></a>plt.pie(values, labels<span class="op">=</span>labels, autopct<span class="op">=</span><span class="st">&#39;</span><span class="sc">%1.1f%%</span><span class="st">&#39;</span>)</span>
<span id="cb12-23"><a href="#cb12-23" aria-hidden="true" tabindex="-1"></a><span class="co"># タイトルを指名します</span></span>
<span id="cb12-24"><a href="#cb12-24" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&quot;kind&quot;</span>)</span>
<span id="cb12-25"><a href="#cb12-25" aria-hidden="true" tabindex="-1"></a><span class="co"># グラフの表示</span></span>
<span id="cb12-26"><a href="#cb12-26" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<p>円グラフは, <code>plt.pie()</code>にそれぞれの領域の割合と,ラベルを与えることで,作成できます.
グラフに数字を表示するには,<code>autopct=</code>に<code>フォーマット文字列</code>で表示内容を指定します.
上記の例では<code>'%1.1f%%'</code>と書くことで,小数点1桁まで数値を表示しています.</p>
<figure>
<img src="/images/pie_graph1.png" alt="円グラフ" />
<figcaption aria-hidden="true">円グラフ</figcaption>
</figure>
<div class="note">
<ul>
<li>演習</li>
</ul>
<p><a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/pie_chart_practice.csv">円グラフデータ</a>,<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/line_chart_practice.csv">折れ線グラフデータ2</a>,<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/bar_chart_practice.csv">棒グラフデータ3</a>を利用し,それぞれのグラフを作成してください.
表示が必要だと思われるデザインを設定してください.</p>
</div>
<h2 data-number="1.3" id="for文を利用したグラフ"><span class="header-section-number">1.3</span> for文を利用したグラフ</h2>
<p>これまでのように単純な一つのグラフを作成するだけであれば,恐らくExcelなどのほうが手軽ですが,多数のグラフを作成したり, 複数のデータを組み合わせた複雑なグラフを作成する場合にはプログラミングの方が便利になります.</p>
<p>例えば<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/temperature_10location.csv">こちら</a>のデータを利用して棒グラフを作成することを考えてみましょう.このデータは10箇所の気温が記録された時系列データです.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>          <span class="ex">Date</span>  Location_1  Location_2  ...  Location_8  Location_9  Location_10</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>   2023-01-01   18.211700   21.553371  ...   18.665620   29.108637    21.634069</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>   2023-01-02   15.108630   16.172744  ...   20.135756    9.212193    24.209877</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>   2023-01-03   14.938279   24.593193  ...   16.778431   22.291269    19.815977</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>   2023-01-04   20.640249   18.862405  ...   13.282269   16.040627    15.993132</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>   2023-01-05   14.218562   16.281882  ...   15.729466   24.951213    18.053277</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="ex">..</span>         ...         ...         ...  ...         ...         ...          ...</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="ex">95</span>  2023-04-06   21.312739   19.613363  ...   16.497553   20.446656    13.644605</span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="ex">96</span>  2023-04-07   26.388210   31.533854  ...   18.999736   15.603714    19.215097</span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="ex">97</span>  2023-04-08   16.914329   20.479892  ...   21.698464   17.705697    16.867517</span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a><span class="ex">98</span>  2023-04-09   14.316258   17.841650  ...   31.885071   20.816917    16.895196</span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a><span class="ex">99</span>  2023-04-10   23.595042   19.896247  ...   17.534881   15.180066    15.104460</span></code></pre></div>
<p>このデータの<code>Location_1</code>から<code>Location_10</code>までの折れ線グラフを一つのグラフに表示することを考えてみます.</p>
<p><code>matplotlib</code>では, <code>plt.show()</code>までに要素を重ねることで複数のグラフを重ねることができます.</p>
<p>例えば,10本の折れ線グラフを表示する場合,一つ一つ手書きすると以下のようになります.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/temperature_10location.csv&#39;</span>)</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="co">#&#39;Date&#39;列を日付型に変更しています.</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;Date&#39;</span>] <span class="op">=</span> pd.to_datetime(df[<span class="st">&#39;Date&#39;</span>])</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a><span class="co">#一つ一つ手書きする方法</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>plt.plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_1&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_1&#39;</span>)</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>plt.plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_2&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_2&#39;</span>)</span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>plt.plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_3&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_3&#39;</span>)</span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>plt.plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_4&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_4&#39;</span>)</span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>plt.plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_5&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_5&#39;</span>)</span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a>plt.plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_6&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_6&#39;</span>)</span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a>plt.plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_7&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_7&#39;</span>)</span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a>plt.plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_8&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_8&#39;</span>)</span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a>plt.plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_9&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_9&#39;</span>)</span>
<span id="cb14-17"><a href="#cb14-17" aria-hidden="true" tabindex="-1"></a>plt.plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_10&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_10&#39;</span>)</span>
<span id="cb14-18"><a href="#cb14-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-19"><a href="#cb14-19" aria-hidden="true" tabindex="-1"></a>plt.legend()</span>
<span id="cb14-20"><a href="#cb14-20" aria-hidden="true" tabindex="-1"></a>plt.xticks(rotation<span class="op">=</span><span class="dv">15</span>) <span class="co">#x軸を15度傾かせています</span></span>
<span id="cb14-21"><a href="#cb14-21" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/temperature_10location.png" alt="10本の折れ線グラフ" />
<figcaption aria-hidden="true">10本の折れ線グラフ</figcaption>
</figure>
<p>10本程度であれば,まだ書けなくもありませんが,それでも手間がかかります.こういった繰り返しの作業は<code>for文</code>を利用しましょう.</p>
<p><code>for文</code>を利用した場合には以下のようになります.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> x <span class="kw">in</span> df.columns[<span class="dv">1</span>:]:</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>    plt.plot(df[<span class="st">&#39;Date&#39;</span>],df[x],label<span class="op">=</span>x)</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>plt.legend()</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>plt.xticks(rotation<span class="op">=</span><span class="dv">15</span>)</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<p>グラフの内容は同じですが,こちらのほうが労力が少なく,コードもスッキリしており,何か修正を加える場合でも修正箇所が少なくて済みます.
繰り返し作業は積極的に<code>for文</code>や<code>while文</code>を利用するようにしましょう.</p>
<h2 data-number="1.4" id="グラフの分割"><span class="header-section-number">1.4</span> グラフの分割</h2>
<p>先程は一つのグラフ内に複数の折れ線グラフを表示しましたが,個別に表示する場合にはどのようになるでしょうか.
一つの方法として,以下の用に複数のグラフを個別に作成することも可能です.
(先に保存先のディレクトリ <code>result/multi_plot</code> を作成しておきましょう.)</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> x <span class="kw">in</span> df.columns[<span class="dv">1</span>:]:</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>    plt.plot(df[<span class="st">&#39;Date&#39;</span>],df[x])</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>    plt.title(x)</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>    plt.xticks(rotation<span class="op">=</span><span class="dv">15</span>)</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>    plt.savefig(<span class="st">&#39;result/multi_plot/&#39;</span> <span class="op">+</span> x <span class="op">+</span> <span class="st">&#39;.png&#39;</span>)</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>    plt.close()</span></code></pre></div>
<figure>
<img src="/images/temperature_10location2.png" alt="保存された10個のグラフ" />
<figcaption aria-hidden="true">保存された10個のグラフ</figcaption>
</figure>
<p>しかし,レポートなどに10枚の画像を貼り付けるのは手間がかかりますし,余白など無駄も多いです.</p>
<ul>
<li>subplots()</li>
</ul>
<p><code>matplotlib</code>には1枚の画像を分割して複数のグラフを載せるためのメソッド<code>.subplots()</code>があるので,関連するグラフや比較のためのグラフなどはできるだけ1枚の画像に集約しましょう.</p>
<p><code>.subplots()</code>は1枚の画像を<code>n行</code>,<code>n列</code>に分割し,それぞれの領域にグラフを描画します.</p>
<p>各領域は <code>axes</code>などと呼ばれ,画像全体を<code>figure</code>などと呼びます.
利用するためには,まず <code>fig, axes = plt.subplot()</code>の形で宣言します. 引数として,行数は<code>nrows=</code>,列数は<code>ncols=</code>にそれぞれ<code>int</code>で指定します.</p>
<figure>
<img src="/images/figure_axes.png" alt="FigureとAxes" />
<figcaption aria-hidden="true">FigureとAxes</figcaption>
</figure>
<div class="sourceCode" id="cb17"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>fig, axes <span class="op">=</span> plt.subplot(nrows<span class="op">=</span> <span class="dv">5</span> <span class="co">#行数の指定</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>                       ,ncols<span class="op">=</span> <span class="dv">2</span> <span class="co">#列数の指定</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>                        )</span></code></pre></div>
<p>宣言のあと,各領域のグラフを <code>axes[行,列]</code>の形で指定していきます.行や列は<code>0</code>から始まるので注意してください.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a>axes[<span class="dv">0</span>,<span class="dv">0</span>].plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_1&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_1&#39;</span>)</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>axes[<span class="dv">0</span>,<span class="dv">1</span>].plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_2&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_2&#39;</span>)</span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>axes[<span class="dv">1</span>,<span class="dv">0</span>].plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_3&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_3&#39;</span>)</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>axes[<span class="dv">1</span>,<span class="dv">1</span>].plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_4&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_4&#39;</span>)</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>axes[<span class="dv">2</span>,<span class="dv">0</span>].plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_5&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_5&#39;</span>)</span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>axes[<span class="dv">2</span>,<span class="dv">1</span>].plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_6&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_6&#39;</span>)</span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>axes[<span class="dv">3</span>,<span class="dv">0</span>].plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_7&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_7&#39;</span>)</span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a>axes[<span class="dv">3</span>,<span class="dv">1</span>].plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_8&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_8&#39;</span>)</span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a>axes[<span class="dv">4</span>,<span class="dv">0</span>].plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_9&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_9&#39;</span>)</span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a>axes[<span class="dv">4</span>,<span class="dv">1</span>].plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_10&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_10&#39;</span>)</span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<p>以下のようなグラフが作成されます. しかし, 少し見にくいですね.</p>
<figure>
<img src="/images/subplot1.png" alt="subplots" />
<figcaption aria-hidden="true">subplots</figcaption>
</figure>
<p><code>.subplots(sharex=True)</code>とすると,x軸を共有することができます.今回のグラフはx軸がすべて同じなので,共有してみましょう.
また,それぞれのグラフにタイトルを付けてみます.
更に,一つ一つ手で入力するのは手間なので<code>for文</code>を利用してみましょう.</p>
<p>タイトルを付けるには今までの<code>plt.title()</code>ではなく<code>axes[r,c].set_title()</code>になります. <code>axes</code>毎の要素に関しては<a href="https://matplotlib.org/stable/users/explain/axes/axes_intro.html">公式サイト</a>を参考にしてください.</p>
<figure>
<img src="https://matplotlib.org/stable/_images/anatomy.png" alt="axesの要素(https://matplotlib.orgより)" />
<figcaption aria-hidden="true">axesの要素(https://matplotlib.orgより)</figcaption>
</figure>
<div class="sourceCode" id="cb19"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a>fig, axes <span class="op">=</span> plt.subplots(nrows<span class="op">=</span> <span class="dv">5</span> <span class="co">#行数の指定</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>                        ,ncols<span class="op">=</span> <span class="dv">2</span> <span class="co">#列数の指定</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>                        ,sharex<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a>count <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">5</span>):</span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> j <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">2</span>):</span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a>        col <span class="op">=</span> df.columns[<span class="dv">1</span>:]</span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a>        axes[i,j].plot(df[<span class="st">&#39;Date&#39;</span>],df[col[count]])</span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a>        axes[i,j].set_title(col[count])</span>
<span id="cb19-11"><a href="#cb19-11" aria-hidden="true" tabindex="-1"></a>        axes[i,j].tick_params(axis<span class="op">=</span><span class="st">&#39;x&#39;</span>, rotation<span class="op">=</span><span class="dv">15</span>)</span>
<span id="cb19-12"><a href="#cb19-12" aria-hidden="true" tabindex="-1"></a>        count <span class="op">+=</span><span class="dv">1</span></span>
<span id="cb19-13"><a href="#cb19-13" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/subplot2.png" alt="subplots" />
<figcaption aria-hidden="true">subplots</figcaption>
</figure>
<p>グラフ全体の要素は<code>fig.</code>の形で指定します.
タイトルを付ける場合は<code>fig.suptitle('title')</code>となります.</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a>fig, axes <span class="op">=</span> plt.subplots(nrows<span class="op">=</span> <span class="dv">5</span> <span class="co">#行数の指定</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>                        ,ncols<span class="op">=</span> <span class="dv">2</span> <span class="co">#列数の指定</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>                        ,sharex<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a>count <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">5</span>):</span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> j <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">2</span>):</span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a>        col <span class="op">=</span> df.columns[<span class="dv">1</span>:]</span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a>        axes[i,j].plot(df[<span class="st">&#39;Date&#39;</span>],df[col[count]])</span>
<span id="cb20-10"><a href="#cb20-10" aria-hidden="true" tabindex="-1"></a>        axes[i,j].set_title(col[count])</span>
<span id="cb20-11"><a href="#cb20-11" aria-hidden="true" tabindex="-1"></a>        axes[i,j].tick_params(axis<span class="op">=</span><span class="st">&#39;x&#39;</span>, rotation<span class="op">=</span><span class="dv">15</span>)</span>
<span id="cb20-12"><a href="#cb20-12" aria-hidden="true" tabindex="-1"></a>        count <span class="op">+=</span><span class="dv">1</span></span>
<span id="cb20-13"><a href="#cb20-13" aria-hidden="true" tabindex="-1"></a>fig.suptitle(<span class="st">&#39;subplots title&#39;</span>)</span>
<span id="cb20-14"><a href="#cb20-14" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/subplot3.png" alt="subplots" />
<figcaption aria-hidden="true">subplots</figcaption>
</figure>
<div class="note">
<ul>
<li>flatten()</li>
</ul>
<p><code>for文</code>を二重ループで記述するのは大変なので,しばしば<code>axes.flatten()</code>を利用して,連番に変換すると便利です.</p>
<figure>
<img src="/images/figure_axes_flatten.png" alt="flatten" />
<figcaption aria-hidden="true">flatten</figcaption>
</figure>
<div class="sourceCode" id="cb21"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a>fig, axes <span class="op">=</span> plt.subplots(nrows<span class="op">=</span> <span class="dv">5</span> <span class="co">#行数の指定</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>                        ,ncols<span class="op">=</span> <span class="dv">2</span> <span class="co">#列数の指定</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>                        ,sharex<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a><span class="co">#連番に変換</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a>axes <span class="op">=</span> axes.flatten()</span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">10</span>):</span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a>    col <span class="op">=</span> df.columns[<span class="dv">1</span>:][i] <span class="co">#countをiで共通化</span></span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true" tabindex="-1"></a>    axes[i].plot(df[<span class="st">&#39;Date&#39;</span>],df[col])</span>
<span id="cb21-10"><a href="#cb21-10" aria-hidden="true" tabindex="-1"></a>    axes[i].set_title(col)</span>
<span id="cb21-11"><a href="#cb21-11" aria-hidden="true" tabindex="-1"></a>    axes[i].tick_params(axis<span class="op">=</span><span class="st">&#39;x&#39;</span>, rotation<span class="op">=</span><span class="dv">15</span>)</span>
<span id="cb21-12"><a href="#cb21-12" aria-hidden="true" tabindex="-1"></a>fig.suptitle(<span class="st">&#39;subplots title&#39;</span>)</span>
<span id="cb21-13"><a href="#cb21-13" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
</div>
<h2 data-number="1.5" id="度数分布表とヒストグラム"><span class="header-section-number">1.5</span> 度数分布表とヒストグラム</h2>
<p>データを手に入れたら最初にデータを可視化してデータの特徴を掴む必要があります. データの特徴として重要なものに,データの<strong>分布</strong>があります.</p>
<div class="warn">
<ul>
<li><h2 id="分布の意味">分布の意味</h2></li>
</ul>
<p><strong>分布</strong>という語の詳細な意味に関しては,後ほど検定や回帰の章でも簡単に扱いますが,統計学入門において数理的に詳しく扱っています.</p>
<p>統計学入門を履修していない人はここでは,単に<strong>データの散らばり具合</strong>という意味として捉えておきましょう.</p>
</div>
<p>分布を可視化する手法として代表的なものに,<strong>度数分布表</strong>と,<strong>ヒストグラム</strong>があります. 1次元のデータの可視化において,度数分布表とヒストグラムは,<strong>データ分析のファーストステップ</strong>とも称される,重要な手法です. データを手に入れたらまずは度数分布表と,ヒストグラムを作成してみましょう.</p>
<h3 data-number="1.5.1" id="度数分布表"><span class="header-section-number">1.5.1</span> 度数分布表</h3>
<div class="note">
<p><strong>度数分布表</strong>とは,データの数を区切られた範囲ごとに数え上げた表のことです. 質的データの場合は,データのカテゴリー毎に,量的データの場合は分析者が定めた区間毎にデータがいくつかるのかを数え上げます.</p>
<p>普通ヒストグラムというと,量的データを対象としたものをいいますが,ここではわかりやすさのために,質的データから見ていきましょう.</p>
<p>以下の表は,何かしらの商品の美味しさに関するアンケート結果です. 商品を食べて,｢とても美味しい｣と回答した人の人数が9人,｢不味い｣と回答した人の人数が5人であることなどがわかります.</p>
<p>このように<strong>データのカテゴリー別にその値が生じたケースの数</strong>を<strong>度数</strong>といい,<strong>度数を数え上げ表に整理したもの</strong>を<strong>度数分布表</strong>といいます.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">アンケート区分</th>
<th style="text-align: center;">度数</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">とても美味しい</td>
<td style="text-align: center;">9</td>
</tr>
<tr class="even">
<td style="text-align: center;">どちらかといえば美味しい</td>
<td style="text-align: center;">11</td>
</tr>
<tr class="odd">
<td style="text-align: center;">普通</td>
<td style="text-align: center;">34</td>
</tr>
<tr class="even">
<td style="text-align: center;">どちらかといえば不味い</td>
<td style="text-align: center;">5</td>
</tr>
<tr class="odd">
<td style="text-align: center;">不味い</td>
<td style="text-align: center;">5</td>
</tr>
</tbody>
</table>
<p>度数の亜種には,以下のようなものがあり,それぞれによってデータの分布が把握できます.</p>
<ul>
<li><p>累積度数:</p>
<p>順序尺度データの度数を少ない方から足し上げた値</p></li>
<li><p>相対度数(構成比率):</p>
<p>度数の総和を100%としたときの構成比率</p></li>
<li><p>累積相対度数(累積比率):</p>
<p>相対度数を上から足し上げた値</p></li>
</ul>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">アンケート区分</th>
<th style="text-align: center;">度数</th>
<th style="text-align: center;">累積度数</th>
<th style="text-align: center;">相対度数</th>
<th style="text-align: center;">累積相対度数</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">とても美味しい</td>
<td style="text-align: center;">9</td>
<td style="text-align: center;">9</td>
<td style="text-align: center;">14%</td>
<td style="text-align: center;">14%</td>
</tr>
<tr class="even">
<td style="text-align: center;">どちらかといえば美味しい</td>
<td style="text-align: center;">11</td>
<td style="text-align: center;">20</td>
<td style="text-align: center;">17%</td>
<td style="text-align: center;">31%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">普通</td>
<td style="text-align: center;">34</td>
<td style="text-align: center;">54</td>
<td style="text-align: center;">53%</td>
<td style="text-align: center;">84%</td>
</tr>
<tr class="even">
<td style="text-align: center;">どちらかといえば不味い</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">59</td>
<td style="text-align: center;">8%</td>
<td style="text-align: center;">92%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">不味い</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">64</td>
<td style="text-align: center;">8%</td>
<td style="text-align: center;">100%</td>
</tr>
<tr class="even">
<td style="text-align: center;">計</td>
<td style="text-align: center;">64</td>
<td style="text-align: center;"></td>
<td style="text-align: center;">100%</td>
<td style="text-align: center;"></td>
</tr>
</tbody>
</table>
<p>度数分布表を作成することで,データがどの分類に偏っているのかなど,データの分布の傾向がつかめます. 度数分布表を見る場合には,相対度数や累積度数から<strong>データが一番多いカテゴリー</strong>,<strong>度数データの過半数が属するカテゴリー</strong>,<strong>データのほとんど(90%程度)が属するカテゴリー</strong>などに注目してみましょう.
上のデータでは,最も回答が多いのは｢普通｣であること, ｢とても美味しい｣｢どちらかといえば美味しい｣の回答が,31%であるのに対して,｢どちらかといえば不味い｣｢不味い｣の回答が18%であり,全体的にこの商品の味は高評価側に集中していることなどがわかります.</p>
</div>
<p>Pythonで度数分布表を作成するにはどのようにしたら良いのでしょうか. 質的データの場合は,ただそれぞれの値を数えればいいので,<code>for文</code>などを利用することも可能ですが,<code>pandas</code>の<code>value_counts()</code>メソッドを利用することで簡単に作成できます.</p>
<p><a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/diff_class.csv">こちら</a>のとある授業の難易度に関する質的データをダウンロードして度数分布表を作成してみましょう.</p>
<p>データは以下のように,｢難しすぎてついていけない｣,｢難しいが許容できる｣,｢ちょうどよい｣,｢簡単だが許容できる｣｢簡単すぎて退屈｣の5段階のカテゴリーが記述されています.</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a>         <span class="ex">Diff</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>   難しいが許容できる</span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>   簡単すぎて退屈</span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>   難しいが許容できる</span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>   簡単だが許容できる</span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>      ちょうどよい</span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a><span class="ex">..</span>        ...</span></code></pre></div>
<div class="sourceCode" id="cb23"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> matplotlib <span class="im">import</span> pyplot <span class="im">as</span> plt</span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> japanize_matplotlib</span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> math</span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> module.sturges <span class="im">as</span> st</span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-9"><a href="#cb23-9" aria-hidden="true" tabindex="-1"></a><span class="co">#データの読み込み</span></span>
<span id="cb23-10"><a href="#cb23-10" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;Data/diff.csv&#39;</span>)</span>
<span id="cb23-11"><a href="#cb23-11" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb23-12"><a href="#cb23-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-13"><a href="#cb23-13" aria-hidden="true" tabindex="-1"></a><span class="co">#ヒストグラムを作りたいデータの列名を指定</span></span>
<span id="cb23-14"><a href="#cb23-14" aria-hidden="true" tabindex="-1"></a>target_column <span class="op">=</span> <span class="st">&#39;Diff&#39;</span></span>
<span id="cb23-15"><a href="#cb23-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-16"><a href="#cb23-16" aria-hidden="true" tabindex="-1"></a><span class="co">#度数</span></span>
<span id="cb23-17"><a href="#cb23-17" aria-hidden="true" tabindex="-1"></a>freq <span class="op">=</span> df[target_column].value_counts(sort<span class="op">=</span><span class="va">False</span>)</span>
<span id="cb23-18"><a href="#cb23-18" aria-hidden="true" tabindex="-1"></a><span class="co">#順番の入れ替え</span></span>
<span id="cb23-19"><a href="#cb23-19" aria-hidden="true" tabindex="-1"></a>freq <span class="op">=</span> freq.reindex([<span class="st">&#39;難しすぎてついていけない&#39;</span></span>
<span id="cb23-20"><a href="#cb23-20" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;難しいが許容できる&#39;</span></span>
<span id="cb23-21"><a href="#cb23-21" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;ちょうどよい&#39;</span></span>
<span id="cb23-22"><a href="#cb23-22" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;簡単だが許容できる&#39;</span></span>
<span id="cb23-23"><a href="#cb23-23" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;簡単すぎて退屈&#39;</span>],axis<span class="op">=</span><span class="st">&#39;index&#39;</span>)</span>
<span id="cb23-24"><a href="#cb23-24" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;度数&#39;</span>,freq)</span>
<span id="cb23-25"><a href="#cb23-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-26"><a href="#cb23-26" aria-hidden="true" tabindex="-1"></a>rel_freq <span class="op">=</span> freq <span class="op">/</span> df[target_column].count()  <span class="co"># 相対度数</span></span>
<span id="cb23-27"><a href="#cb23-27" aria-hidden="true" tabindex="-1"></a>cum_freq <span class="op">=</span> freq.cumsum()  <span class="co"># 累積度数</span></span>
<span id="cb23-28"><a href="#cb23-28" aria-hidden="true" tabindex="-1"></a>rel_cum_freq <span class="op">=</span> rel_freq.cumsum()  <span class="co"># 相対累積度数</span></span>
<span id="cb23-29"><a href="#cb23-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-30"><a href="#cb23-30" aria-hidden="true" tabindex="-1"></a>dist <span class="op">=</span> pd.DataFrame(</span>
<span id="cb23-31"><a href="#cb23-31" aria-hidden="true" tabindex="-1"></a>    {   <span class="st">&quot;Value&quot;</span>: freq.index,        <span class="co">#階級値</span></span>
<span id="cb23-32"><a href="#cb23-32" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Freq&quot;</span>: freq,               <span class="co">#度数</span></span>
<span id="cb23-33"><a href="#cb23-33" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Rel&quot;</span>: rel_freq,            <span class="co">#相対度数</span></span>
<span id="cb23-34"><a href="#cb23-34" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Cum&quot;</span>: cum_freq,            <span class="co">#累積度数</span></span>
<span id="cb23-35"><a href="#cb23-35" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;RelCum&quot;</span>: rel_cum_freq,     <span class="co">#相対累積度数</span></span>
<span id="cb23-36"><a href="#cb23-36" aria-hidden="true" tabindex="-1"></a>    },</span>
<span id="cb23-37"><a href="#cb23-37" aria-hidden="true" tabindex="-1"></a>    index<span class="op">=</span>freq.index</span>
<span id="cb23-38"><a href="#cb23-38" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb23-39"><a href="#cb23-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-40"><a href="#cb23-40" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(dist)</span>
<span id="cb23-41"><a href="#cb23-41" aria-hidden="true" tabindex="-1"></a>dist.to_csv(<span class="st">&#39;frequency_table.csv&#39;</span>,)</span></code></pre></div>
<p>保存されたcsv(<code>frequency_table.csv</code>)を確認してみると,度数分布表が作成されていることが確認できます.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">Value</th>
<th style="text-align: center;">Freq</th>
<th style="text-align: center;">Rel</th>
<th style="text-align: center;">Cum</th>
<th style="text-align: center;">RelCum</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">難しすぎてついていけない</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">0.02247191</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">0.02247191</td>
</tr>
<tr class="even">
<td style="text-align: center;">難しいが許容できる</td>
<td style="text-align: center;">44</td>
<td style="text-align: center;">0.494382022</td>
<td style="text-align: center;">46</td>
<td style="text-align: center;">0.516853933</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ちょうどよい</td>
<td style="text-align: center;">38</td>
<td style="text-align: center;">0.426966292</td>
<td style="text-align: center;">84</td>
<td style="text-align: center;">0.943820225</td>
</tr>
<tr class="even">
<td style="text-align: center;">簡単だが許容できる</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">0.04494382</td>
<td style="text-align: center;">88</td>
<td style="text-align: center;">0.988764045</td>
</tr>
<tr class="odd">
<td style="text-align: center;">簡単すぎて退屈</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">0.011235955</td>
<td style="text-align: center;">89</td>
<td style="text-align: center;">1</td>
</tr>
</tbody>
</table>
<p>質的データはあらかじめデータのカテゴリーが定められているのでその数を数えるだけで,度数分布表が作成できました.
それでは,カテゴリーが存在しない量的データではどのようにして度数分布表を作成するのでしょうか.</p>
<div class="note">
<ul>
<li><strong>量的データと度数分布表</strong></li>
</ul>
<p>量的データには当てはまるデータを数えるためのカテゴリーが存在しません. 年収のデータを考えた場合,年収1万円ごとに表を作ると1から数億まで,非常に細かくなります.
そこで,量的データで度数分布表を作成するには,100万円ごと,300万円ごとなどデータをいくつかの区間に分けて,区間別の度数を数える必要があります. ここで, 作られた区間を<strong>階級</strong>,階級の幅を<strong>階級幅</strong>,階級を代表する値を<strong>階級値</strong>といいます. 階級値は大抵の場合,区間の中間の値が用いられます(100万円~200万円の区間だとすると,150万円など).</p>
<p>以下の度数分布表は,ある情報クラスの成績(0-100点)を10点毎に区分したものです. それぞれの点数に当てはまる人数を数えて度数とします.</p>
<figure>
<img src="/images/histogram1.png" alt="度数分布表の例" />
<figcaption aria-hidden="true">度数分布表の例</figcaption>
</figure>
<p>量的データの階級数や階級幅は,100万円ごとなどある程度人間の判断によって作成しても構いませんが,数理的に決定する方法もあります.</p>
<p>階級幅は階級数が決まることで自動的に決まるため,階級数を決める一般的な目安として,<strong>スタージェスの公式</strong>が利用されます.</p>
<p>観測数を<span class="math inline">\(n\)</span>,階級数を<span class="math inline">\(k\)</span>とすると.</p>
<p><span class="math display">\[ k = 1 + log_2 n = \frac{log_{10} n}{log_{10} 2}\]</span></p>
<p>程度の<span class="math inline">\(k\)</span>が望ましいとされています.</p>
<p>計算結果はおおよそ以下のようになります.</p>
<figure>
<img src="/images/sturges_number.png" alt="スタージェス数" />
<figcaption aria-hidden="true">スタージェス数</figcaption>
</figure>
</div>
<p>Pythonではスタージェス数は対数計算をするためのモジュール<code>math</code>を利用して以下のように求めることができます.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 2進対数を返す math.log2() 関数などを利用するために必要なモジュール</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> math</span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a><span class="co"># 関数名を sturgesNumber として引数をnとします</span></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> sturgesNumber(n):</span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 公式の通り k = 1 + log2 n</span></span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 階級数は整数が良いので,math.floor()で小数点以下を切り捨てます</span></span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> (math.floor (<span class="dv">1</span> <span class="op">+</span> math.log2(n)))</span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-10"><a href="#cb24-10" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(sturges(<span class="dv">2048</span>)) <span class="co">#&gt;&gt;&gt; 12</span></span></code></pre></div>
<p>階級数が決まることで階級幅が
<span class="math display">\[\frac{(データの最大値 - データの最小値)}{階級数}\]</span></p>
<p>として決まります.</p>
<p>それでは,<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/histogram_quantitative.csv">こちら</a>のデータを利用して,度数分布表を作成してみます. 量的データの度数分布表を作成するには,<code>value-counts()</code>の引数<code>bins=</code>に各階級の終点を表すリストを指定します.</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="co">#ヒストグラムを作りたいデータの列名を指定</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>target_column <span class="op">=</span> <span class="st">&#39;Values&#39;</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a><span class="co"># 関数名を sturgesNumber として引数をnとします</span></span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> sturgesNumber(n):</span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 公式の通り k = 1 + log2 n</span></span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 階級数は整数が良いので,math.floor()で小数点以下を切り捨てます</span></span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> (math.floor (<span class="dv">1</span> <span class="op">+</span> math.log2(n)))</span>
<span id="cb25-9"><a href="#cb25-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-10"><a href="#cb25-10" aria-hidden="true" tabindex="-1"></a><span class="co"># dataフォルダにあるhistogram_quantitative.csvというファイルを読み込みます.</span></span>
<span id="cb25-11"><a href="#cb25-11" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&quot;data/histogram_quantitative.csv&quot;</span>)</span>
<span id="cb25-12"><a href="#cb25-12" aria-hidden="true" tabindex="-1"></a><span class="co"># 読み込んだファイルの中身を見てみます.</span></span>
<span id="cb25-13"><a href="#cb25-13" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb25-14"><a href="#cb25-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-15"><a href="#cb25-15" aria-hidden="true" tabindex="-1"></a><span class="co">#階級数を決定</span></span>
<span id="cb25-16"><a href="#cb25-16" aria-hidden="true" tabindex="-1"></a>stnum <span class="op">=</span> sturgesNumber(<span class="bu">len</span>(df[target_column]))</span>
<span id="cb25-17"><a href="#cb25-17" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;sturges number:&#39;</span>,stnum)</span>
<span id="cb25-18"><a href="#cb25-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-19"><a href="#cb25-19" aria-hidden="true" tabindex="-1"></a><span class="co">#階級幅を決定</span></span>
<span id="cb25-20"><a href="#cb25-20" aria-hidden="true" tabindex="-1"></a>space <span class="op">=</span> <span class="bu">int</span>((df[target_column].<span class="bu">max</span>() <span class="op">-</span> df[target_column].<span class="bu">min</span>()) <span class="op">/</span> stnum)</span>
<span id="cb25-21"><a href="#cb25-21" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;space:&#39;</span>,space)</span>
<span id="cb25-22"><a href="#cb25-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-23"><a href="#cb25-23" aria-hidden="true" tabindex="-1"></a><span class="co">#階級幅の終端を指定</span></span>
<span id="cb25-24"><a href="#cb25-24" aria-hidden="true" tabindex="-1"></a>bins <span class="op">=</span> np.arange(start <span class="op">=</span> <span class="bu">int</span>(df[target_column].<span class="bu">min</span>()) <span class="op">-</span> <span class="dv">1</span> <span class="co">#最小値</span></span>
<span id="cb25-25"><a href="#cb25-25" aria-hidden="true" tabindex="-1"></a>                ,stop  <span class="op">=</span> <span class="bu">int</span>(df[target_column].<span class="bu">max</span>()) <span class="op">+</span> <span class="dv">1</span> <span class="co">#最大値</span></span>
<span id="cb25-26"><a href="#cb25-26" aria-hidden="true" tabindex="-1"></a>                ,step  <span class="op">=</span> space <span class="co">#階級幅</span></span>
<span id="cb25-27"><a href="#cb25-27" aria-hidden="true" tabindex="-1"></a>                )</span>
<span id="cb25-28"><a href="#cb25-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-29"><a href="#cb25-29" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;bins:&#39;</span>,bins)</span>
<span id="cb25-30"><a href="#cb25-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-31"><a href="#cb25-31" aria-hidden="true" tabindex="-1"></a><span class="co">#度数</span></span>
<span id="cb25-32"><a href="#cb25-32" aria-hidden="true" tabindex="-1"></a>freq <span class="op">=</span> df[target_column].value_counts(bins <span class="op">=</span>bins, sort<span class="op">=</span><span class="va">False</span>)</span>
<span id="cb25-33"><a href="#cb25-33" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;度数&#39;</span>,freq)</span>
<span id="cb25-34"><a href="#cb25-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-35"><a href="#cb25-35" aria-hidden="true" tabindex="-1"></a>rel_freq <span class="op">=</span> freq <span class="op">/</span> df[target_column].count()  <span class="co"># 相対度数</span></span>
<span id="cb25-36"><a href="#cb25-36" aria-hidden="true" tabindex="-1"></a>cum_freq <span class="op">=</span> freq.cumsum()  <span class="co"># 累積度数</span></span>
<span id="cb25-37"><a href="#cb25-37" aria-hidden="true" tabindex="-1"></a>rel_cum_freq <span class="op">=</span> rel_freq.cumsum()  <span class="co"># 相対累積度数</span></span>
<span id="cb25-38"><a href="#cb25-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-39"><a href="#cb25-39" aria-hidden="true" tabindex="-1"></a>dist <span class="op">=</span> pd.DataFrame(</span>
<span id="cb25-40"><a href="#cb25-40" aria-hidden="true" tabindex="-1"></a>    {   <span class="st">&quot;Value&quot;</span>: freq.index,        <span class="co">#階級値</span></span>
<span id="cb25-41"><a href="#cb25-41" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Freq&quot;</span>: freq,               <span class="co">#度数</span></span>
<span id="cb25-42"><a href="#cb25-42" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Rel&quot;</span>: rel_freq,            <span class="co">#相対度数</span></span>
<span id="cb25-43"><a href="#cb25-43" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Cum&quot;</span>: cum_freq,            <span class="co">#累積度数</span></span>
<span id="cb25-44"><a href="#cb25-44" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;RelCum&quot;</span>: rel_cum_freq,     <span class="co">#相対累積度数</span></span>
<span id="cb25-45"><a href="#cb25-45" aria-hidden="true" tabindex="-1"></a>    },</span>
<span id="cb25-46"><a href="#cb25-46" aria-hidden="true" tabindex="-1"></a>    index<span class="op">=</span>freq.index</span>
<span id="cb25-47"><a href="#cb25-47" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb25-48"><a href="#cb25-48" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-49"><a href="#cb25-49" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(dist)</span>
<span id="cb25-50"><a href="#cb25-50" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-51"><a href="#cb25-51" aria-hidden="true" tabindex="-1"></a>dist.to_csv(<span class="st">&#39;frequency_table_qualitative.csv&#39;</span></span>
<span id="cb25-52"><a href="#cb25-52" aria-hidden="true" tabindex="-1"></a>           ,encoding<span class="op">=</span><span class="st">&#39;utf-8-sig&#39;</span></span>
<span id="cb25-53"><a href="#cb25-53" aria-hidden="true" tabindex="-1"></a>           ,index<span class="op">=</span><span class="va">False</span>)</span></code></pre></div>
<p>結果作成された,<code>frequency_table_qualitative.csv</code>を開いてみると,以下のような度数分布表が作成されたことが確認できます.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">Value</th>
<th style="text-align: center;">Freq</th>
<th style="text-align: center;">Rel</th>
<th style="text-align: center;">Cum</th>
<th style="text-align: center;">RelCum</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">(8.999, 18.0]</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">0.01</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">0.01</td>
</tr>
<tr class="even">
<td style="text-align: center;">(18.0, 27.0]</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">0.05</td>
<td style="text-align: center;">6</td>
<td style="text-align: center;">0.06</td>
</tr>
<tr class="odd">
<td style="text-align: center;">(27.0, 36.0]</td>
<td style="text-align: center;">11</td>
<td style="text-align: center;">0.11</td>
<td style="text-align: center;">17</td>
<td style="text-align: center;">0.17</td>
</tr>
<tr class="even">
<td style="text-align: center;">(36.0, 45.0]</td>
<td style="text-align: center;">21</td>
<td style="text-align: center;">0.21</td>
<td style="text-align: center;">38</td>
<td style="text-align: center;">0.38</td>
</tr>
<tr class="odd">
<td style="text-align: center;">(45.0, 54.0]</td>
<td style="text-align: center;">27</td>
<td style="text-align: center;">0.27</td>
<td style="text-align: center;">65</td>
<td style="text-align: center;">0.65</td>
</tr>
<tr class="even">
<td style="text-align: center;">(54.0, 63.0]</td>
<td style="text-align: center;">20</td>
<td style="text-align: center;">0.2</td>
<td style="text-align: center;">85</td>
<td style="text-align: center;">0.85</td>
</tr>
<tr class="odd">
<td style="text-align: center;">(63.0, 72.0]</td>
<td style="text-align: center;">9</td>
<td style="text-align: center;">0.09</td>
<td style="text-align: center;">94</td>
<td style="text-align: center;">0.94</td>
</tr>
</tbody>
</table>
<h3 data-number="1.5.2" id="度数分布表の可視化ヒストグラム"><span class="header-section-number">1.5.2</span> 度数分布表の可視化:<strong>ヒストグラム</strong></h3>
<p>ここまでで,データの分布,偏りを把握する手段としての度数分布表を学びました. 度数分布表を眺めることである程度データの形は分かりますが,よりわかりやすく可視化する方法として<strong>ヒストグラム</strong>があります.</p>
<p><strong>ヒストグラム(Histogram)/柱状図</strong>とは,量的データの度数分布を棒グラフで表現したものです.ただし,通常の棒グラフと異なり値が連続しているので,棒と棒の間にスペースを置きません. 統計における最も基本的なグラフです.</p>
<p>ヒストグラムはいくつかの代表的なパターンがあり,それぞれ注意するべきポイントがありますので,順に見ていきましょう.</p>
<div class="note">
<ul>
<li><h2 id="単峰型unimodalで左右対称">単峰型(unimodal)で左右対称</h2></li>
</ul>
<p>ヒストグラムの盛り上がっている部分を<strong>峰</strong>といいます. 峰の数が一つのヒストグラムを<strong>単峰(unimodal)</strong>なヒストグラムといいます.</p>
<p>ヒストグラムの基本となる形は,単峰で左右対称な分布です. この分布は,<strong>データが同質な集団から発生していること</strong>を表しています.</p>
<pre><code>- 例:同じ人種の,同じ年代の,男性の集団の身長

- 例:同じ種類,同じ時期,同じ地域のうさぎの集団のサイズ</code></pre>
<p>峰からの左右のデータのばらつきは集団の個体差を表しています. 異なる,質を持つ集団が混じっている場合は峰が複数になることが多いです.</p>
<figure>
<img src="/images/histogram_unimodal.png" alt="単峰で左右対称なヒストグラム" />
<figcaption aria-hidden="true">単峰で左右対称なヒストグラム</figcaption>
</figure>
<ul>
<li><h2 id="多峰型bimodalなヒストグラム">多峰型(bimodal)なヒストグラム</h2></li>
</ul>
<p>峰が2つ以上あるヒストグラムを<strong>多峰(bimodal)</strong>なヒストグラムといいます.
異質な集団が混ざっているデータでは,ヒストグラムが多峰になることがあります.</p>
<pre><code>- 例:男女の混ざった集団の身長や体重
男性の峰と女性の峰が現れます.

- 例:小学生と中学生に同じテストを受けた点数
小学生の点数の峰と,中学生の点数の峰が現れます.</code></pre>
<p>ヒストグラムを作成し,多峰性が現れたらデータを集団別・要因別に分割して分析するのが良いとされています.データを特定の属性で分割することを<strong>層別</strong>といいます.</p>
<figure>
<img src="/images/histogram_bimodal.png" alt="多峰なヒスグラム" />
<figcaption aria-hidden="true">多峰なヒスグラム</figcaption>
</figure>
<ul>
<li><h2 id="左右非対称なヒストグラム">左右非対称なヒストグラム</h2></li>
</ul>
<p>ヒストグラムは峰を中心として左右対称な場合もありますが,どちらかの方向に歪んでいるものも良く見られます.</p>
<pre><code>- 例:社会人の年収,企業の売上など</code></pre>
<p>ヒストグラムの細くなっている部分をヒストグラムの<strong>尾</strong>といいます.</p>
<pre><code>- **尾が**左に伸びている場合に **左に歪んだ分布**

- **尾が**右に伸びている場合に **右に歪んだ分布**</code></pre>
<p>といいます.</p>
<figure>
<img src="/images/histogram_right_left.png" alt="左右に歪んだヒストグラム" />
<figcaption aria-hidden="true">左右に歪んだヒストグラム</figcaption>
</figure>
<p>左右に歪んだ分布では,後に扱う<strong>中心を表す代表値</strong>(平均値や中央値)が適切に集団を代表しない場合があるので,代表値の使い分けが必要になります.</p>
<p>また, 後に扱う<strong>検定</strong>手法のうち,<strong>正規分布</strong>を仮定する検定が利用できないなど,手法の選択において,分布の歪みは重要なポイントです.</p>
<ul>
<li><h2 id="外れ値outlierのあるヒストグラム"><strong>外れ値(Outlier)</strong>のあるヒストグラム</h2></li>
</ul>
<p>大多数のデータとは離れた位置にある少数のデータを<strong>外れ値(Outlier)</strong>といいます.</p>
<p>外れ値は,データ分析において非常に重要な意味を持ち,外れ値が現れた場合にはその原因を探ることが必要となります.
外れ値が発生する原因としては以下のようなものがあり,いずれも注目する必要があります.</p>
<pre><code>- データの取得におけるミス
    単純な入力ミスや計算ミスなど
    発見した場合は修正,除外する必要がある.

- 異質な存在の発見
    新種や新しい現象の発見などにつながる可能性があります.</code></pre>
<p>また,代表値の計算においては歪みが生じる可能性があるので,外れ値を除外する必要があります.</p>
<figure>
<img src="/images/histogram_outlier.png" alt="外れ値のあるヒストグラム" />
<figcaption aria-hidden="true">外れ値のあるヒストグラム</figcaption>
</figure>
</div>
<p>それでは,Pythonでヒストグラムを作成してみましょう. 度数分布表を作成している場合は,棒グラフを作成し,棒の幅を<code>0</code>にすることで,ヒストグラムが作成できます.</p>
<p><code>plt.bar()</code>では,引数<code>width=1</code>を与えることで,棒の太さを<code>1</code>(棒の間を0)にすることができます.</p>
<p>まずは,以前扱った<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/diff_class.csv">質的データ</a>の例におけるヒストグラムを作成してみましょう.</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="co">#データの読み込み</span></span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;Data/diff_class.csv&#39;</span>)</span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb31-4"><a href="#cb31-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-5"><a href="#cb31-5" aria-hidden="true" tabindex="-1"></a><span class="co">#ヒストグラムを作りたいデータの列名を指定</span></span>
<span id="cb31-6"><a href="#cb31-6" aria-hidden="true" tabindex="-1"></a>target_column <span class="op">=</span> <span class="st">&#39;Diff&#39;</span></span>
<span id="cb31-7"><a href="#cb31-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-8"><a href="#cb31-8" aria-hidden="true" tabindex="-1"></a><span class="co">#度数</span></span>
<span id="cb31-9"><a href="#cb31-9" aria-hidden="true" tabindex="-1"></a>freq <span class="op">=</span> df[target_column].value_counts(sort<span class="op">=</span><span class="va">False</span>)</span>
<span id="cb31-10"><a href="#cb31-10" aria-hidden="true" tabindex="-1"></a><span class="co">#順番の入れ替え</span></span>
<span id="cb31-11"><a href="#cb31-11" aria-hidden="true" tabindex="-1"></a>freq <span class="op">=</span> freq.reindex([<span class="st">&#39;難しすぎてついていけない&#39;</span></span>
<span id="cb31-12"><a href="#cb31-12" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;難しいが許容できる&#39;</span></span>
<span id="cb31-13"><a href="#cb31-13" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;ちょうどよい&#39;</span></span>
<span id="cb31-14"><a href="#cb31-14" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;簡単だが許容できる&#39;</span></span>
<span id="cb31-15"><a href="#cb31-15" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;簡単すぎて退屈&#39;</span>],axis<span class="op">=</span><span class="st">&#39;index&#39;</span>)</span>
<span id="cb31-16"><a href="#cb31-16" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;度数&#39;</span>,freq)</span>
<span id="cb31-17"><a href="#cb31-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-18"><a href="#cb31-18" aria-hidden="true" tabindex="-1"></a>rel_freq <span class="op">=</span> freq <span class="op">/</span> df[target_column].count()  <span class="co"># 相対度数</span></span>
<span id="cb31-19"><a href="#cb31-19" aria-hidden="true" tabindex="-1"></a>cum_freq <span class="op">=</span> freq.cumsum()  <span class="co"># 累積度数</span></span>
<span id="cb31-20"><a href="#cb31-20" aria-hidden="true" tabindex="-1"></a>rel_cum_freq <span class="op">=</span> rel_freq.cumsum()  <span class="co"># 相対累積度数</span></span>
<span id="cb31-21"><a href="#cb31-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-22"><a href="#cb31-22" aria-hidden="true" tabindex="-1"></a>dist <span class="op">=</span> pd.DataFrame(</span>
<span id="cb31-23"><a href="#cb31-23" aria-hidden="true" tabindex="-1"></a>    {   <span class="st">&quot;Value&quot;</span>: freq.index,        <span class="co">#階級値</span></span>
<span id="cb31-24"><a href="#cb31-24" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Freq&quot;</span>: freq,               <span class="co">#度数</span></span>
<span id="cb31-25"><a href="#cb31-25" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Rel&quot;</span>: rel_freq,            <span class="co">#相対度数</span></span>
<span id="cb31-26"><a href="#cb31-26" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Cum&quot;</span>: cum_freq,            <span class="co">#累積度数</span></span>
<span id="cb31-27"><a href="#cb31-27" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;RelCum&quot;</span>: rel_cum_freq,     <span class="co">#相対累積度数</span></span>
<span id="cb31-28"><a href="#cb31-28" aria-hidden="true" tabindex="-1"></a>    },</span>
<span id="cb31-29"><a href="#cb31-29" aria-hidden="true" tabindex="-1"></a>    index<span class="op">=</span>freq.index</span>
<span id="cb31-30"><a href="#cb31-30" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb31-31"><a href="#cb31-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-32"><a href="#cb31-32" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(dist)</span>
<span id="cb31-33"><a href="#cb31-33" aria-hidden="true" tabindex="-1"></a>dist.to_csv(<span class="st">&#39;frequency_table.csv&#39;</span>,encoding<span class="op">=</span><span class="st">&#39;utf-8-sig&#39;</span>,index<span class="op">=</span><span class="va">False</span>)</span>
<span id="cb31-34"><a href="#cb31-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-35"><a href="#cb31-35" aria-hidden="true" tabindex="-1"></a><span class="co"># ヒストグラム</span></span>
<span id="cb31-36"><a href="#cb31-36" aria-hidden="true" tabindex="-1"></a>plt.bar(x<span class="op">=</span>dist[<span class="st">&#39;Value&#39;</span>], height<span class="op">=</span>dist[<span class="st">&quot;Freq&quot;</span>],width<span class="op">=</span><span class="dv">1</span>)</span>
<span id="cb31-37"><a href="#cb31-37" aria-hidden="true" tabindex="-1"></a>plt.xticks(np.arange(<span class="bu">len</span>(dist)),<span class="bu">list</span>(dist.index),rotation<span class="op">=</span><span class="dv">15</span>)</span>
<span id="cb31-38"><a href="#cb31-38" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<p>以下のように,単峰で右に歪んだグラフが作成されるはずです.</p>
<figure>
<img src="/images/histogram_qualitative.png" alt="質的データのヒストグラム" />
<figcaption aria-hidden="true">質的データのヒストグラム</figcaption>
</figure>
<p>同様に<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/histogram_quantitative.csv">量的データ</a>についても作成してみます.</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="co">#ヒストグラムを作りたいデータの列名を指定</span></span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a>target_column <span class="op">=</span> <span class="st">&#39;Values&#39;</span></span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-4"><a href="#cb32-4" aria-hidden="true" tabindex="-1"></a><span class="co"># 関数名を sturgesNumber として引数をnとします</span></span>
<span id="cb32-5"><a href="#cb32-5" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> sturgesNumber(n):</span>
<span id="cb32-6"><a href="#cb32-6" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 公式の通り k = 1 + log2 n</span></span>
<span id="cb32-7"><a href="#cb32-7" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 階級数は整数が良いので,math.floor()で小数点以下を切り捨てます</span></span>
<span id="cb32-8"><a href="#cb32-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> (math.floor (<span class="dv">1</span> <span class="op">+</span> math.log2(n)))</span>
<span id="cb32-9"><a href="#cb32-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-10"><a href="#cb32-10" aria-hidden="true" tabindex="-1"></a><span class="co"># dataフォルダにあるhistogram_quantitative.csvというファイルを読み込みます.</span></span>
<span id="cb32-11"><a href="#cb32-11" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&quot;data/histogram_quantitative.csv&quot;</span>)</span>
<span id="cb32-12"><a href="#cb32-12" aria-hidden="true" tabindex="-1"></a><span class="co"># 読み込んだファイルの中身を見てみます.</span></span>
<span id="cb32-13"><a href="#cb32-13" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb32-14"><a href="#cb32-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-15"><a href="#cb32-15" aria-hidden="true" tabindex="-1"></a><span class="co">#階級数を決定</span></span>
<span id="cb32-16"><a href="#cb32-16" aria-hidden="true" tabindex="-1"></a>stnum <span class="op">=</span> sturgesNumber(<span class="bu">len</span>(df[target_column]))</span>
<span id="cb32-17"><a href="#cb32-17" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;sturges number:&#39;</span>,stnum)</span>
<span id="cb32-18"><a href="#cb32-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-19"><a href="#cb32-19" aria-hidden="true" tabindex="-1"></a><span class="co">#階級幅を決定</span></span>
<span id="cb32-20"><a href="#cb32-20" aria-hidden="true" tabindex="-1"></a>space <span class="op">=</span> <span class="bu">int</span>((df[target_column].<span class="bu">max</span>() <span class="op">-</span> df[target_column].<span class="bu">min</span>()) <span class="op">/</span> stnum)</span>
<span id="cb32-21"><a href="#cb32-21" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;space:&#39;</span>,space)</span>
<span id="cb32-22"><a href="#cb32-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-23"><a href="#cb32-23" aria-hidden="true" tabindex="-1"></a><span class="co">#階級幅の終端を指定</span></span>
<span id="cb32-24"><a href="#cb32-24" aria-hidden="true" tabindex="-1"></a>bins <span class="op">=</span> np.arange(start <span class="op">=</span> <span class="bu">int</span>(df[target_column].<span class="bu">min</span>()) <span class="op">-</span> <span class="dv">1</span> <span class="co">#最小値</span></span>
<span id="cb32-25"><a href="#cb32-25" aria-hidden="true" tabindex="-1"></a>                ,stop  <span class="op">=</span> <span class="bu">int</span>(df[target_column].<span class="bu">max</span>()) <span class="op">+</span> <span class="dv">1</span> <span class="co">#最大値</span></span>
<span id="cb32-26"><a href="#cb32-26" aria-hidden="true" tabindex="-1"></a>                ,step  <span class="op">=</span> space <span class="co">#階級幅</span></span>
<span id="cb32-27"><a href="#cb32-27" aria-hidden="true" tabindex="-1"></a>                )</span>
<span id="cb32-28"><a href="#cb32-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-29"><a href="#cb32-29" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;bins:&#39;</span>,bins)</span>
<span id="cb32-30"><a href="#cb32-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-31"><a href="#cb32-31" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb32-32"><a href="#cb32-32" aria-hidden="true" tabindex="-1"></a><span class="co">階級が整数では大きすぎる場合は,</span></span>
<span id="cb32-33"><a href="#cb32-33" aria-hidden="true" tabindex="-1"></a><span class="co">np.arrange()では上手く出来ません.</span></span>
<span id="cb32-34"><a href="#cb32-34" aria-hidden="true" tabindex="-1"></a><span class="co">while文などで,以下のように自作しましょう.</span></span>
<span id="cb32-35"><a href="#cb32-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-36"><a href="#cb32-36" aria-hidden="true" tabindex="-1"></a><span class="co">space = (data.max() - data.min()) / step</span></span>
<span id="cb32-37"><a href="#cb32-37" aria-hidden="true" tabindex="-1"></a><span class="co">current = data.min() -1</span></span>
<span id="cb32-38"><a href="#cb32-38" aria-hidden="true" tabindex="-1"></a><span class="co">bins = [current]</span></span>
<span id="cb32-39"><a href="#cb32-39" aria-hidden="true" tabindex="-1"></a><span class="co">while current &lt;= data.max() +1:</span></span>
<span id="cb32-40"><a href="#cb32-40" aria-hidden="true" tabindex="-1"></a><span class="co">    current += space</span></span>
<span id="cb32-41"><a href="#cb32-41" aria-hidden="true" tabindex="-1"></a><span class="co">    bins.append(current)</span></span>
<span id="cb32-42"><a href="#cb32-42" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb32-43"><a href="#cb32-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-44"><a href="#cb32-44" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-45"><a href="#cb32-45" aria-hidden="true" tabindex="-1"></a><span class="co">#度数</span></span>
<span id="cb32-46"><a href="#cb32-46" aria-hidden="true" tabindex="-1"></a>freq <span class="op">=</span> df[target_column].value_counts(bins <span class="op">=</span>bins, sort<span class="op">=</span><span class="va">False</span>)</span>
<span id="cb32-47"><a href="#cb32-47" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;度数&#39;</span>,freq)</span>
<span id="cb32-48"><a href="#cb32-48" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-49"><a href="#cb32-49" aria-hidden="true" tabindex="-1"></a>rel_freq <span class="op">=</span> freq <span class="op">/</span> df[target_column].count()  <span class="co"># 相対度数</span></span>
<span id="cb32-50"><a href="#cb32-50" aria-hidden="true" tabindex="-1"></a>cum_freq <span class="op">=</span> freq.cumsum()  <span class="co"># 累積度数</span></span>
<span id="cb32-51"><a href="#cb32-51" aria-hidden="true" tabindex="-1"></a>rel_cum_freq <span class="op">=</span> rel_freq.cumsum()  <span class="co"># 相対累積度数</span></span>
<span id="cb32-52"><a href="#cb32-52" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-53"><a href="#cb32-53" aria-hidden="true" tabindex="-1"></a>dist <span class="op">=</span> pd.DataFrame(</span>
<span id="cb32-54"><a href="#cb32-54" aria-hidden="true" tabindex="-1"></a>    {   <span class="st">&quot;Value&quot;</span>: freq.index,        <span class="co">#階級値</span></span>
<span id="cb32-55"><a href="#cb32-55" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Freq&quot;</span>: freq,               <span class="co">#度数</span></span>
<span id="cb32-56"><a href="#cb32-56" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Rel&quot;</span>: rel_freq,            <span class="co">#相対度数</span></span>
<span id="cb32-57"><a href="#cb32-57" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Cum&quot;</span>: cum_freq,            <span class="co">#累積度数</span></span>
<span id="cb32-58"><a href="#cb32-58" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;RelCum&quot;</span>: rel_cum_freq,     <span class="co">#相対累積度数</span></span>
<span id="cb32-59"><a href="#cb32-59" aria-hidden="true" tabindex="-1"></a>    },</span>
<span id="cb32-60"><a href="#cb32-60" aria-hidden="true" tabindex="-1"></a>    index<span class="op">=</span>freq.index</span>
<span id="cb32-61"><a href="#cb32-61" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb32-62"><a href="#cb32-62" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-63"><a href="#cb32-63" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(dist)</span>
<span id="cb32-64"><a href="#cb32-64" aria-hidden="true" tabindex="-1"></a>dist.to_csv(<span class="st">&#39;frequency_table_qualitative.csv&#39;</span></span>
<span id="cb32-65"><a href="#cb32-65" aria-hidden="true" tabindex="-1"></a>           ,encoding<span class="op">=</span><span class="st">&#39;utf-8-sig&#39;</span>,index<span class="op">=</span><span class="va">False</span>)</span>
<span id="cb32-66"><a href="#cb32-66" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-67"><a href="#cb32-67" aria-hidden="true" tabindex="-1"></a><span class="co"># ヒストグラム</span></span>
<span id="cb32-68"><a href="#cb32-68" aria-hidden="true" tabindex="-1"></a><span class="co">## dist[&#39;Value&#39;]は文字列でないので,</span></span>
<span id="cb32-69"><a href="#cb32-69" aria-hidden="true" tabindex="-1"></a><span class="co">## .astype(str) で文字列に変換しています.</span></span>
<span id="cb32-70"><a href="#cb32-70" aria-hidden="true" tabindex="-1"></a>plt.bar(x<span class="op">=</span>dist[<span class="st">&#39;Value&#39;</span>].astype(<span class="bu">str</span>)</span>
<span id="cb32-71"><a href="#cb32-71" aria-hidden="true" tabindex="-1"></a>       ,height<span class="op">=</span>dist[<span class="st">&quot;Freq&quot;</span>],width<span class="op">=</span><span class="dv">1</span>)</span>
<span id="cb32-72"><a href="#cb32-72" aria-hidden="true" tabindex="-1"></a>plt.xticks(np.arange(<span class="bu">len</span>(dist)),<span class="bu">list</span>(dist.index),rotation<span class="op">=</span><span class="dv">15</span>)</span>
<span id="cb32-73"><a href="#cb32-73" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<p>以下のように単峰で左に歪んだヒストグラムが作成されます.</p>
<figure>
<img src="/images/histogram_quantitative.png" alt="量的データのヒストグラム" />
<figcaption aria-hidden="true">量的データのヒストグラム</figcaption>
</figure>
<p>一方で,量的データに関しては,度数分布表を作成せずとも<code>matplotlib</code>の<code>plt.hist()</code>を利用して直接作成することも可能です.</p>
<p><code>plt.hist()</code>では<code>bins=</code>に階級数を指定することで,その階級数で自然に分割したヒストグラムを作成してくれます.</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="co"># ヒストグラムの作成</span></span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a>label  <span class="op">=</span> df.columns[<span class="dv">0</span>]</span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true" tabindex="-1"></a>values <span class="op">=</span> df[label]</span>
<span id="cb33-4"><a href="#cb33-4" aria-hidden="true" tabindex="-1"></a>plt.hist(values, bins<span class="op">=</span>stnum)</span>
<span id="cb33-5"><a href="#cb33-5" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/histogram_quantitative2.png" alt="量的データのヒストグラム" />
<figcaption aria-hidden="true">量的データのヒストグラム</figcaption>
</figure>
<p>階級幅の設定によって,見た目が変わることが分かります. 作成手法や階級の設定は目的に応じて,使い分けるようにしましょう.</p>
<div class="note">
<ul>
<li>演習</li>
</ul>
<p><a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/qualitative_histogram_practice.csv">データ1</a>,<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/quantitative_histogram_practice.csv">データ2</a>の度数分布表とヒストグラムを作成し,pptなどでグラフとその解釈をまとめてください.</p>
</div>
<h2 data-number="1.6" id="箱ひげ図"><span class="header-section-number">1.6</span> 箱ひげ図</h2>
<p>データの観測対象が複数のグループに層別可能な場合には, それぞれのヒストグラムを作成して比較することなどが必要です. グループの数が多い場合には, 何個もヒストグラムを作成することになりますし,比較には剥いていない場合があります.
そのような複数のグループの分布を比較する際に良く用いられるグラフが,箱ひげ図です.</p>
<p><a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/boxplot_data_300.csv">こちら</a>のデータは, 複数の種類の馬鈴薯のサイズがまとまっています.</p>
<p>試しに,ヒストグラム馬鈴薯の種類毎のヒストグラムを作成してみます.</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/boxplot_data_300.csv&#39;</span>)</span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-3"><a href="#cb34-3" aria-hidden="true" tabindex="-1"></a><span class="co">#馬鈴薯の種類を抜き出す</span></span>
<span id="cb34-4"><a href="#cb34-4" aria-hidden="true" tabindex="-1"></a>types <span class="op">=</span> <span class="bu">list</span>(<span class="bu">set</span>(df[<span class="st">&#39;Type&#39;</span>]))</span>
<span id="cb34-5"><a href="#cb34-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(types)</span>
<span id="cb34-6"><a href="#cb34-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-7"><a href="#cb34-7" aria-hidden="true" tabindex="-1"></a><span class="co">#馬鈴薯の種類別にヒストグラムを作成してみる</span></span>
<span id="cb34-8"><a href="#cb34-8" aria-hidden="true" tabindex="-1"></a>fig, ax <span class="op">=</span> plt.subplots(ncols<span class="op">=</span><span class="dv">2</span></span>
<span id="cb34-9"><a href="#cb34-9" aria-hidden="true" tabindex="-1"></a>                      ,nrows<span class="op">=</span><span class="bu">int</span>(<span class="bu">len</span>(types) <span class="op">/</span> <span class="dv">2</span>) <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb34-10"><a href="#cb34-10" aria-hidden="true" tabindex="-1"></a>                      ,sharex <span class="op">=</span> <span class="va">True</span>)</span>
<span id="cb34-11"><a href="#cb34-11" aria-hidden="true" tabindex="-1"></a>axes <span class="op">=</span> ax.flatten()</span>
<span id="cb34-12"><a href="#cb34-12" aria-hidden="true" tabindex="-1"></a>fig.suptitle(<span class="st">&#39;Potato Weight&#39;</span>)</span>
<span id="cb34-13"><a href="#cb34-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-14"><a href="#cb34-14" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="bu">len</span>(types)):</span>
<span id="cb34-15"><a href="#cb34-15" aria-hidden="true" tabindex="-1"></a>    t <span class="op">=</span> types[i]</span>
<span id="cb34-16"><a href="#cb34-16" aria-hidden="true" tabindex="-1"></a>    df_temp <span class="op">=</span> df[df[<span class="st">&#39;Type&#39;</span>] <span class="op">==</span> t]</span>
<span id="cb34-17"><a href="#cb34-17" aria-hidden="true" tabindex="-1"></a>    axes[i].hist(df_temp[<span class="st">&#39;Weight&#39;</span>])</span>
<span id="cb34-18"><a href="#cb34-18" aria-hidden="true" tabindex="-1"></a>    axes[i].set_title(t)</span>
<span id="cb34-19"><a href="#cb34-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-20"><a href="#cb34-20" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/box_plot1.png" alt="馬鈴薯の重さのヒストグラム" />
<figcaption aria-hidden="true">馬鈴薯の重さのヒストグラム</figcaption>
</figure>
<p>これでも比較はできますが1枚の画像にまとめる手段として,箱ひげ図が利用できます.
箱ひげ図は<code>plt.boxplot(データのリスト,labels=ラベルのリスト)</code>で生成できます.</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true" tabindex="-1"></a>data <span class="op">=</span> [df[df[<span class="st">&#39;Type&#39;</span>]<span class="op">==</span>x][<span class="st">&#39;Weight&#39;</span>] <span class="cf">for</span> x <span class="kw">in</span> types]</span>
<span id="cb35-2"><a href="#cb35-2" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb35-3"><a href="#cb35-3" aria-hidden="true" tabindex="-1"></a><span class="co">#内包表記を利用しない場合は</span></span>
<span id="cb35-4"><a href="#cb35-4" aria-hidden="true" tabindex="-1"></a><span class="co">data = []</span></span>
<span id="cb35-5"><a href="#cb35-5" aria-hidden="true" tabindex="-1"></a><span class="co">for x in types:</span></span>
<span id="cb35-6"><a href="#cb35-6" aria-hidden="true" tabindex="-1"></a><span class="co">    data.append(df[df[&#39;Type&#39;]==x][&#39;Weight&#39;])</span></span>
<span id="cb35-7"><a href="#cb35-7" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb35-8"><a href="#cb35-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(data)</span>
<span id="cb35-9"><a href="#cb35-9" aria-hidden="true" tabindex="-1"></a>plt.boxplot(data,labels<span class="op">=</span>types)</span>
<span id="cb35-10"><a href="#cb35-10" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/box_plot2.png" alt="馬鈴薯の重さの箱ひげ図" />
<figcaption aria-hidden="true">馬鈴薯の重さの箱ひげ図</figcaption>
</figure>
<p>箱ひげ図は,線がそれぞれ四分位数を表しており,それぞれ上から<strong>最大値</strong>,<strong>75%点</strong>,<strong>中央値</strong>,<strong>25%点</strong>,<strong>最小値</strong>となります.また,外れ値は丸で表されます.</p>
<p>ヒストグラムと比較して情報量は減りますが, 一覧性と比較においては優れています.それぞれ一長一短なので,用途に応じて使い分けるようにしましょう.</p>
<h2 data-number="1.7" id="発展密度プロット"><span class="header-section-number">1.7</span> 発展:密度プロット</h2>
<p>データの分布を表現する手法としてヒストグラムは非常に便利ですが,階級数や階級幅を自分で定める必要があり,その設定によって見た目が変わってしまいます. また, データ数が少ないときには正確なデータの分布をつかめないという問題点もあります.</p>
<p>そこで, データを階級で区分せずに,度数ではなく確率分布を直接推定する手法に<strong>カーネル密度推定(Karnel Density Estimation)</strong>があります.</p>
<h2 data-number="1.8" id="発展sinaplot"><span class="header-section-number">1.8</span> 発展:sinaplot</h2>
<h2 data-number="1.9" id="発展バイオリンプロット"><span class="header-section-number">1.9</span> 発展:バイオリンプロット</h2>
<h2 data-number="1.10" id="散布図"><span class="header-section-number">1.10</span> 散布図</h2>
<p>これまではデータの各観測項目を独立に可視化してきました. 複数の観測項目の関係性を可視化する代表的な手法に散布図があります.</p>
<p><a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/scatter.csv">こちら</a>のデータはGoogle Trendにおける同時期の<code>AI</code>というワードのの検索量と,<code>Python</code>というワードの検索量を表しています.</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a>     <span class="ex">AI</span>  Python</span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>    34      27</span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>    40      26</span>
<span id="cb36-4"><a href="#cb36-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>    59      28</span>
<span id="cb36-5"><a href="#cb36-5" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>    46      29</span>
<span id="cb36-6"><a href="#cb36-6" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>    36      29</span>
<span id="cb36-7"><a href="#cb36-7" aria-hidden="true" tabindex="-1"></a><span class="ex">..</span>   ..     ...</span>
<span id="cb36-8"><a href="#cb36-8" aria-hidden="true" tabindex="-1"></a><span class="ex">255</span>  58      83</span>
<span id="cb36-9"><a href="#cb36-9" aria-hidden="true" tabindex="-1"></a><span class="ex">256</span>  69      87</span>
<span id="cb36-10"><a href="#cb36-10" aria-hidden="true" tabindex="-1"></a><span class="ex">257</span>  59      82</span>
<span id="cb36-11"><a href="#cb36-11" aria-hidden="true" tabindex="-1"></a><span class="ex">258</span>  62      84</span>
<span id="cb36-12"><a href="#cb36-12" aria-hidden="true" tabindex="-1"></a><span class="ex">259</span>  59      87</span></code></pre></div>
<p>この2つの検索量がどのような関係にあるのかを散布図を用いて確認してみましょう.
散布図は<code>plt.scatter(x軸の値のリスト,y軸の値のリスト)</code>の形で作成できます.</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/scatter.csv&#39;</span>)</span>
<span id="cb37-2"><a href="#cb37-2" aria-hidden="true" tabindex="-1"></a><span class="co">#散布図のx軸を指定</span></span>
<span id="cb37-3"><a href="#cb37-3" aria-hidden="true" tabindex="-1"></a>x_column <span class="op">=</span> <span class="st">&#39;AI&#39;</span></span>
<span id="cb37-4"><a href="#cb37-4" aria-hidden="true" tabindex="-1"></a><span class="co">#散布図のy軸を指定</span></span>
<span id="cb37-5"><a href="#cb37-5" aria-hidden="true" tabindex="-1"></a>y_column <span class="op">=</span> <span class="st">&#39;Python&#39;</span></span>
<span id="cb37-6"><a href="#cb37-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb37-7"><a href="#cb37-7" aria-hidden="true" tabindex="-1"></a>x_value <span class="op">=</span> df[x_column]</span>
<span id="cb37-8"><a href="#cb37-8" aria-hidden="true" tabindex="-1"></a>y_value <span class="op">=</span> df[y_column]</span>
<span id="cb37-9"><a href="#cb37-9" aria-hidden="true" tabindex="-1"></a>plt.scatter(x_value, y_value)</span>
<span id="cb37-10"><a href="#cb37-10" aria-hidden="true" tabindex="-1"></a>plt.ylabel(y_column)</span>
<span id="cb37-11"><a href="#cb37-11" aria-hidden="true" tabindex="-1"></a>plt.xlabel(x_column)</span>
<span id="cb37-12"><a href="#cb37-12" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/scatter.png" alt="散布図" />
<figcaption aria-hidden="true">散布図</figcaption>
</figure>
<p>散布図を見ると,<code>AI</code>に関する検索量が増えるにつれて,<code>Python</code>の検索量が増えるという関係が見えてきます.</p>
<p>この関係の度合いを数値化する<strong>相関係数</strong>や,関係の仕方を説明する<strong>回帰分析</strong>に関しては後ほど扱います.</p>
<h3 data-number="1.10.1" id="観測項目が複数ある場合の散布図"><span class="header-section-number">1.10.1</span> 観測項目が複数ある場合の散布図</h3>
<p>データが3つある場合には,以下のように3Dで表現することも可能ですがこの講義では,3次元のグラフに関しては深く扱いません.興味のある方は調べてみましょう.</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb38-1"><a href="#cb38-1" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> np.random.rand(<span class="dv">100</span>)</span>
<span id="cb38-2"><a href="#cb38-2" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> np.random.rand(<span class="dv">100</span>)</span>
<span id="cb38-3"><a href="#cb38-3" aria-hidden="true" tabindex="-1"></a>z <span class="op">=</span> np.random.rand(<span class="dv">100</span>)</span>
<span id="cb38-4"><a href="#cb38-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-5"><a href="#cb38-5" aria-hidden="true" tabindex="-1"></a>fig <span class="op">=</span> plt.figure()</span>
<span id="cb38-6"><a href="#cb38-6" aria-hidden="true" tabindex="-1"></a>ax <span class="op">=</span> fig.add_subplot(projection<span class="op">=</span><span class="st">&#39;3d&#39;</span>)</span>
<span id="cb38-7"><a href="#cb38-7" aria-hidden="true" tabindex="-1"></a>ax.scatter(x, y, z, color<span class="op">=</span><span class="st">&#39;blue&#39;</span>)</span>
<span id="cb38-8"><a href="#cb38-8" aria-hidden="true" tabindex="-1"></a>plt.show()</span>
<span id="cb38-9"><a href="#cb38-9" aria-hidden="true" tabindex="-1"></a>plt.close()</span></code></pre></div>
<figure>
<img src="/images/3dscatter.png" alt="3次元の散布図" />
<figcaption aria-hidden="true">3次元の散布図</figcaption>
</figure>
<p>観測項目が4つ以上ある場合に散布図のように関係を表す手法としては,複数の観測項目の値を合成して3次元以下にする<strong>次元削減</strong>が良く利用されます. <strong>次元削減</strong>に関しては後ほど扱うとして,ここではいくつかの観測項目を<strong>色</strong>や<strong>大きさ</strong>などの要素の変換して関係を見る方法を紹介します.</p>
<p><code>plt.scatter()</code>では<code>s=</code>に数値を与えることでサイズ,<code>c=</code>に数値を与えることで色を指定できます.
また,色と数値の関係は<code>plt.colorbar()</code>で表示可能です.</p>
<p>複数の点が重なると見にくくなるために <code>alpha=</code>に<code>0-1</code>の間の数値を指定して透明度を指定することができます.</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb39-1"><a href="#cb39-1" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> np.random.rand(<span class="dv">100</span>)</span>
<span id="cb39-2"><a href="#cb39-2" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> np.random.rand(<span class="dv">100</span>)</span>
<span id="cb39-3"><a href="#cb39-3" aria-hidden="true" tabindex="-1"></a>z <span class="op">=</span> np.random.rand(<span class="dv">100</span>)</span>
<span id="cb39-4"><a href="#cb39-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-5"><a href="#cb39-5" aria-hidden="true" tabindex="-1"></a><span class="co">#色とサイズをzで指定する</span></span>
<span id="cb39-6"><a href="#cb39-6" aria-hidden="true" tabindex="-1"></a><span class="co">#そのままだとサイズが小さすぎるので,100倍している</span></span>
<span id="cb39-7"><a href="#cb39-7" aria-hidden="true" tabindex="-1"></a>plt.scatter(x,y,alpha<span class="op">=</span><span class="fl">0.5</span>,s<span class="op">=</span>z<span class="op">*</span><span class="dv">100</span>,c<span class="op">=</span>z)</span>
<span id="cb39-8"><a href="#cb39-8" aria-hidden="true" tabindex="-1"></a>plt.colorbar() <span class="co">#カラーバーの表示</span></span>
<span id="cb39-9"><a href="#cb39-9" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/scatter_color_size.png" alt="色とサイズによる表現" />
<figcaption aria-hidden="true">色とサイズによる表現</figcaption>
</figure>
<h3 data-number="1.10.2" id="クラスタリングにおける散布図"><span class="header-section-number">1.10.2</span> クラスタリングにおける散布図</h3>
<p>散布図は複数の観測項目間の関係性を可視化するための手法ですが,データから特定の観測対象の集まり(<strong>クラスター</strong>)を発見する<strong>クラスタリング</strong>とも深い関わりがあります.
クラスタリングの手法は後ほど扱いますが,ここでは可視化手法としての散布図とクラスタ表現の関係に関して確認してみましょう.</p>
<p><a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/scatter_class.csv">こちら</a>のデータはクラスタリングによって得られたクラスタ毎のラベルがなされています.</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb40-1"><a href="#cb40-1" aria-hidden="true" tabindex="-1"></a>           <span class="ex">x</span>          y  Cluster</span>
<span id="cb40-2"><a href="#cb40-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>  <span class="at">-8.149818</span>  <span class="at">-9.152380</span>        2</span>
<span id="cb40-3"><a href="#cb40-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>   5.860155   0.126873        1</span>
<span id="cb40-4"><a href="#cb40-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>  <span class="at">-3.213409</span>   9.828126        0</span>
<span id="cb40-5"><a href="#cb40-5" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>   6.744070  <span class="at">-0.129607</span>        1</span>
<span id="cb40-6"><a href="#cb40-6" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>  <span class="at">-6.342946</span>  <span class="at">-6.038933</span>        2</span>
<span id="cb40-7"><a href="#cb40-7" aria-hidden="true" tabindex="-1"></a><span class="ex">..</span>       ...        ...      ...</span>
<span id="cb40-8"><a href="#cb40-8" aria-hidden="true" tabindex="-1"></a><span class="ex">95</span> <span class="at">-3.524581</span>   9.931801        0</span>
<span id="cb40-9"><a href="#cb40-9" aria-hidden="true" tabindex="-1"></a><span class="ex">96</span> <span class="at">-0.962698</span>  10.411206        0</span>
<span id="cb40-10"><a href="#cb40-10" aria-hidden="true" tabindex="-1"></a><span class="ex">97</span>  4.397950   2.579246        1</span>
<span id="cb40-11"><a href="#cb40-11" aria-hidden="true" tabindex="-1"></a><span class="ex">98</span> <span class="at">-5.255050</span>  <span class="at">-5.299407</span>        2</span>
<span id="cb40-12"><a href="#cb40-12" aria-hidden="true" tabindex="-1"></a><span class="ex">99</span> <span class="at">-3.768024</span>   8.550468        0</span></code></pre></div>
<p>クラスタを表現は<code>.scatter(color=)</code>で色を指定することが一般的です.</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb41-1"><a href="#cb41-1" aria-hidden="true" tabindex="-1"></a><span class="co">#散布図をクラスタごとに色を変えて表示</span></span>
<span id="cb41-2"><a href="#cb41-2" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">3</span>):</span>
<span id="cb41-3"><a href="#cb41-3" aria-hidden="true" tabindex="-1"></a>    df_temp<span class="op">=</span> df[df[<span class="st">&#39;Cluster&#39;</span>] <span class="op">==</span> i]</span>
<span id="cb41-4"><a href="#cb41-4" aria-hidden="true" tabindex="-1"></a>    plt.scatter(df_temp[<span class="st">&#39;x&#39;</span>]</span>
<span id="cb41-5"><a href="#cb41-5" aria-hidden="true" tabindex="-1"></a>               ,df_temp[<span class="st">&#39;y&#39;</span>]</span>
<span id="cb41-6"><a href="#cb41-6" aria-hidden="true" tabindex="-1"></a>               ,c<span class="op">=</span>color_list[i]</span>
<span id="cb41-7"><a href="#cb41-7" aria-hidden="true" tabindex="-1"></a>               ,label<span class="op">=</span><span class="st">&#39;Cluster:&#39;</span> <span class="op">+</span> <span class="bu">str</span>(i))</span>
<span id="cb41-8"><a href="#cb41-8" aria-hidden="true" tabindex="-1"></a>plt.legend()</span>
<span id="cb41-9"><a href="#cb41-9" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/scatter_class.png" alt="クラスタリング" />
<figcaption aria-hidden="true">クラスタリング</figcaption>
</figure>
<h2 data-number="1.11" id="同時度数分布表"><span class="header-section-number">1.11</span> 同時度数分布表</h2>
<p>2つの観測項目の関係を調べる手法として散布図を学びましたが,散布図は量的データにしか使えません. 質的変数同士の関係性を調べるにはどのようにしたらいいのでしょうか.</p>
<p>質的変数同士の関係性を調べる手法として代表的なものに<strong>同時度数分布表(クロス表)</strong>があります.
例えば<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/cross_table_data.csv">こちら</a>のデータはある講義の成績情報ですが,観測項目として成績以外に1時限から5時限までの時限が記録されています. 時限が早い講義と遅い講義で成績が変わるのかという関係性を調べてみます.</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb42-1"><a href="#cb42-1" aria-hidden="true" tabindex="-1"></a>     <span class="ex">Period</span> Grade</span>
<span id="cb42-2"><a href="#cb42-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>         2     B</span>
<span id="cb42-3"><a href="#cb42-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>         5     A</span>
<span id="cb42-4"><a href="#cb42-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>         4     A</span>
<span id="cb42-5"><a href="#cb42-5" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>         3     C</span>
<span id="cb42-6"><a href="#cb42-6" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>         1     C</span>
<span id="cb42-7"><a href="#cb42-7" aria-hidden="true" tabindex="-1"></a><span class="ex">..</span>      ...   ...</span>
<span id="cb42-8"><a href="#cb42-8" aria-hidden="true" tabindex="-1"></a><span class="ex">195</span>       2     C</span>
<span id="cb42-9"><a href="#cb42-9" aria-hidden="true" tabindex="-1"></a><span class="ex">196</span>       4     C</span>
<span id="cb42-10"><a href="#cb42-10" aria-hidden="true" tabindex="-1"></a><span class="ex">197</span>       5     C</span>
<span id="cb42-11"><a href="#cb42-11" aria-hidden="true" tabindex="-1"></a><span class="ex">198</span>       5     F</span>
<span id="cb42-12"><a href="#cb42-12" aria-hidden="true" tabindex="-1"></a><span class="ex">199</span>       4     C</span></code></pre></div>
<p>試しに,散布図で<code>Period</code>と<code>Grade</code>の関係を表してみましょう.
成績をそのままでは,散布図の軸上に配置できないので数値に変換します.</p>
<div class="sourceCode" id="cb43"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb43-1"><a href="#cb43-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/cross_table_data.csv&#39;</span>)</span>
<span id="cb43-2"><a href="#cb43-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb43-3"><a href="#cb43-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-4"><a href="#cb43-4" aria-hidden="true" tabindex="-1"></a><span class="co">#あえて散布図を作ってみる</span></span>
<span id="cb43-5"><a href="#cb43-5" aria-hidden="true" tabindex="-1"></a>grade_num_map <span class="op">=</span> {<span class="st">&#39;S&#39;</span>:<span class="dv">1</span></span>
<span id="cb43-6"><a href="#cb43-6" aria-hidden="true" tabindex="-1"></a>                ,<span class="st">&#39;A&#39;</span>:<span class="dv">2</span></span>
<span id="cb43-7"><a href="#cb43-7" aria-hidden="true" tabindex="-1"></a>                ,<span class="st">&#39;B&#39;</span>:<span class="dv">3</span></span>
<span id="cb43-8"><a href="#cb43-8" aria-hidden="true" tabindex="-1"></a>                ,<span class="st">&#39;C&#39;</span>:<span class="dv">4</span></span>
<span id="cb43-9"><a href="#cb43-9" aria-hidden="true" tabindex="-1"></a>                ,<span class="st">&#39;F&#39;</span>:<span class="dv">5</span>}</span>
<span id="cb43-10"><a href="#cb43-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-11"><a href="#cb43-11" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;Grade_num&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;Grade&#39;</span>].<span class="bu">map</span>(<span class="kw">lambda</span> x: grade_num_map[x])</span>
<span id="cb43-12"><a href="#cb43-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-13"><a href="#cb43-13" aria-hidden="true" tabindex="-1"></a>plt.scatter(df[<span class="st">&#39;Period&#39;</span>],df[<span class="st">&#39;Grade&#39;</span>])</span>
<span id="cb43-14"><a href="#cb43-14" aria-hidden="true" tabindex="-1"></a>plt.xlabel(<span class="st">&#39;Period&#39;</span>)</span>
<span id="cb43-15"><a href="#cb43-15" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&#39;Grade&#39;</span>)</span>
<span id="cb43-16"><a href="#cb43-16" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/cross_table1.png" alt="質的データの散布図" />
<figcaption aria-hidden="true">質的データの散布図</figcaption>
</figure>
<p>質的データを数値に変換したとしても,離散値となるため,散布図はこのように基本的にはすべての交点に点があるだけのなんの情報も得られないグラフとなります.</p>
<p>散布図としてプロットすると, 点がありうる場所が少なすぎるため情報がとれません. 元々知りたいことは,講義の時限と成績にどのような関係があるのかということでした.
そこで, 講義の時間ごとの成績の偏りが分かるように可視化することを考えてみます.</p>
<p>講義の時限ごとの成績の分布がわかり,それぞれに違いがあれば時限によって成績に偏りが出ていると言えそうです.
そこで,以下のように講義の時限毎の成績の度数分布表を作ってみましょう.</p>
<figure>
<img src="/images/cross_table2.png" alt="同時度数分布表" />
<figcaption aria-hidden="true">同時度数分布表</figcaption>
</figure>
<p>この度数分布表では,時限毎にその成績を取った学生の度数が数えられています(<span class="math inline">\(n_{11}\)</span>は1時限にSを取った学生の度数,<span class="math inline">\(n_{ij}\)</span>は<code>j時限</code>に上から<code>i番目</code>の成績をとった学生の度数.)</p>
<p>このような2観測項目の度数分布表を<strong>同時度数分布表</strong>あるいは,<strong>クロス表(cross table)</strong>といいます.</p>
<p>それでは,Pythonで同時度数分布表を作成してみましょう.
<code>pandas</code> では,<code>.crosstab(行,列)</code>メソッドを利用することで,クロス表が作成できます.</p>
<div class="sourceCode" id="cb44"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb44-1"><a href="#cb44-1" aria-hidden="true" tabindex="-1"></a><span class="co">#クロス表の作成</span></span>
<span id="cb44-2"><a href="#cb44-2" aria-hidden="true" tabindex="-1"></a>cross <span class="op">=</span> pd.crosstab(df[<span class="st">&#39;Grade&#39;</span>],df[<span class="st">&#39;Period&#39;</span>])</span>
<span id="cb44-3"><a href="#cb44-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb44-4"><a href="#cb44-4" aria-hidden="true" tabindex="-1"></a><span class="co">#表示順の設定</span></span>
<span id="cb44-5"><a href="#cb44-5" aria-hidden="true" tabindex="-1"></a>cross <span class="op">=</span> cross.reindex([<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>],axis<span class="op">=</span><span class="st">&#39;columns&#39;</span>)</span>
<span id="cb44-6"><a href="#cb44-6" aria-hidden="true" tabindex="-1"></a>cross <span class="op">=</span> cross.reindex([<span class="st">&#39;S&#39;</span>,<span class="st">&#39;A&#39;</span>,<span class="st">&#39;B&#39;</span>,<span class="st">&#39;C&#39;</span>,<span class="st">&#39;F&#39;</span>],axis<span class="op">=</span><span class="st">&#39;index&#39;</span>)</span>
<span id="cb44-7"><a href="#cb44-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(cross)</span></code></pre></div>
<div class="sourceCode" id="cb45"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb45-1"><a href="#cb45-1" aria-hidden="true" tabindex="-1"></a><span class="ex">Period</span>   1   2   3   4   5</span>
<span id="cb45-2"><a href="#cb45-2" aria-hidden="true" tabindex="-1"></a><span class="ex">Grade</span></span>
<span id="cb45-3"><a href="#cb45-3" aria-hidden="true" tabindex="-1"></a><span class="ex">S</span>        9  10  12   4   2</span>
<span id="cb45-4"><a href="#cb45-4" aria-hidden="true" tabindex="-1"></a><span class="ex">A</span>        7  14   7   5   4</span>
<span id="cb45-5"><a href="#cb45-5" aria-hidden="true" tabindex="-1"></a><span class="ex">B</span>        9  10   7  11   7</span>
<span id="cb45-6"><a href="#cb45-6" aria-hidden="true" tabindex="-1"></a><span class="ex">C</span>       14   6   3  15  18</span>
<span id="cb45-7"><a href="#cb45-7" aria-hidden="true" tabindex="-1"></a><span class="ex">F</span>        7   4   3   1  11</span></code></pre></div>
<p>このようにしてみることで,それぞれの時限毎にそれぞれの成績がどのような分布なのかが分かります.
しかし,各時限の人数が同じとは限らないため,各列の値をその列の和で割って,列相対度数に変更してみましょう.</p>
<div class="sourceCode" id="cb46"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb46-1"><a href="#cb46-1" aria-hidden="true" tabindex="-1"></a><span class="co">#列相対度数に変更する</span></span>
<span id="cb46-2"><a href="#cb46-2" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> c <span class="kw">in</span> cross.columns:</span>
<span id="cb46-3"><a href="#cb46-3" aria-hidden="true" tabindex="-1"></a>    cross[c] <span class="op">=</span> cross[c] <span class="op">/</span> cross[c].<span class="bu">sum</span>()</span>
<span id="cb46-4"><a href="#cb46-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb46-5"><a href="#cb46-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(cross)</span></code></pre></div>
<div class="sourceCode" id="cb47"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb47-1"><a href="#cb47-1" aria-hidden="true" tabindex="-1"></a><span class="ex">Period</span>         1         2        3         4         5</span>
<span id="cb47-2"><a href="#cb47-2" aria-hidden="true" tabindex="-1"></a><span class="ex">Grade</span></span>
<span id="cb47-3"><a href="#cb47-3" aria-hidden="true" tabindex="-1"></a><span class="ex">S</span>       0.195652  0.227273  0.37500  0.111111  0.047619</span>
<span id="cb47-4"><a href="#cb47-4" aria-hidden="true" tabindex="-1"></a><span class="ex">A</span>       0.152174  0.318182  0.21875  0.138889  0.095238</span>
<span id="cb47-5"><a href="#cb47-5" aria-hidden="true" tabindex="-1"></a><span class="ex">B</span>       0.195652  0.227273  0.21875  0.305556  0.166667</span>
<span id="cb47-6"><a href="#cb47-6" aria-hidden="true" tabindex="-1"></a><span class="ex">C</span>       0.304348  0.136364  0.09375  0.416667  0.428571</span>
<span id="cb47-7"><a href="#cb47-7" aria-hidden="true" tabindex="-1"></a><span class="ex">F</span>       0.152174  0.090909  0.09375  0.027778  0.261905</span></code></pre></div>
<p>このようにすると,時限毎にどの程度の割合がSやAなどの良い成績をとっているのかが分かります.
通常度数分布表を作成したあとには,<strong>χ二乗検定</strong>や,<strong>標準化残渣</strong>を利用した<strong>残渣分析</strong>によって,<strong>偏り</strong>が統計的に存在するかを判定します. しかし,それらは後の検定の章に譲るとして,次の節では更に,これを一目で判断しやすいように可視化することを考えてみます.</p>
<h2 data-number="1.12" id="ヒートマップ"><span class="header-section-number">1.12</span> ヒートマップ</h2>
<p>一つ前の節では,同時度数分布表を利用して2つの質的変数からなる観測項目の関係性を見てみました. しかし, 同時度数分布表のままでは,可視化とは言えません. 同時度数分布表のような表形式の数値を可視化する方法として,ヒートマップがあります.</p>
<p>ヒートマップとは,表形式の数値を各セルの色によって表現する可視化手法です.</p>
<p>先ほど作成した,列相対度数をヒートマップを利用して可視化してみましょう.</p>
<p>ヒートマップは<code>seaborn</code>の<code>.heatmap()</code>を利用することで簡単に作成できます.</p>
<div class="sourceCode" id="cb48"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb48-1"><a href="#cb48-1" aria-hidden="true" tabindex="-1"></a>sns.heatmap( cross  <span class="co">#ヒートマップを作成したいテーブル</span></span>
<span id="cb48-2"><a href="#cb48-2" aria-hidden="true" tabindex="-1"></a>           , cmap<span class="op">=</span>plt.get_cmap(<span class="st">&#39;Reds&#39;</span>) <span class="co">#カラーマップ(省略可)</span></span>
<span id="cb48-3"><a href="#cb48-3" aria-hidden="true" tabindex="-1"></a>           , linewidths<span class="op">=</span><span class="fl">.5</span> <span class="co">#線の太さを指定することでセルを囲う線を表示</span></span>
<span id="cb48-4"><a href="#cb48-4" aria-hidden="true" tabindex="-1"></a>           , annot<span class="op">=</span><span class="va">True</span>  <span class="co">#セルに数値を表示</span></span>
<span id="cb48-5"><a href="#cb48-5" aria-hidden="true" tabindex="-1"></a>           )</span>
<span id="cb48-6"><a href="#cb48-6" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/heatmap.png" alt="ヒートマップ" />
<figcaption aria-hidden="true">ヒートマップ</figcaption>
</figure>
<p>このヒートマップでは,数値が大きいほど,色が濃くなっており2,3時限においてB以上の成績を取る学生の割合が大きいこと,4,5時限においてCやFなどの成績を取る人の割合が大きいことが視覚的に分かります.</p>
<p>ヒートマップは複数の数値間の相関係数や距離を可視化する際にも良く用いられるので,覚えておきましょう.</p>
<div class="note">
<ul>
<li>演習</li>
</ul>
<ol type="1">
<li><p>GoogleTrendで4つのワードに関して同じ期間の推移を調べ以下の2通りの方法でCSVを作成してください.</p>
<ul>
<li><p>1つのグラフに表示
for文を利用して1つのグラフに4つの折れ線グラフを色を変えて表示する.
凡例も表示する.</p></li>
<li><p>グラフの分割
グラフを分割して,それぞれのワードに関して4象限の折れ線グラフを作成する.</p></li>
</ul></li>
<li><p><a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/beetle_datal.csv">こちら</a>のカブトムシの種類別の体長と体重のデータを利用して散布図を作成してください.カブトムシの種類別に散布図の色や点の図形を変更してください.</p></li>
<li><p><a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/forest_beetle_data.csv">こちら</a>の森の地点別に採取できたカブトムシの種類を記録したデータを可視化しどの森でどのカブトムシが取れやすいのかを分析してください.</p></li>
</ol>
</div>
]]></description>
    <pubDate>Fri, 29 Mar 2024 00:00:00 UT</pubDate>
    <guid>/lectures/slds8.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>特別講義DS Ch7 データサイエンスを始めよう</title>
    <link>/lectures/slds7.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#データサイエンスを始めよう-研究計画の建て方" id="toc-データサイエンスを始めよう-研究計画の建て方"><span class="toc-section-number">1</span> データサイエンスを始めよう 研究計画の建て方</a></li>
<li><a href="#モデルとデータ執筆中" id="toc-モデルとデータ執筆中"><span class="toc-section-number">2</span> モデルとデータ(執筆中)</a>
<ul>
<li><a href="#手法の決め方" id="toc-手法の決め方"><span class="toc-section-number">2.1</span> 手法の決め方</a></li>
<li><a href="#研究計画を建てよう" id="toc-研究計画を建てよう"><span class="toc-section-number">2.2</span> 研究計画を建てよう</a></li>
</ul></li>
</ul>
</div>
<h1 data-number="1" id="データサイエンスを始めよう-研究計画の建て方"><span class="header-section-number">1</span> データサイエンスを始めよう 研究計画の建て方</h1>
<p>ライブラリの章で説明したように,データサイエンスの作業は基本的に以下の順序で進みます.</p>
<figure>
<img src="/images/data-science-flow.png" alt="データ分析の流れ" />
<figcaption aria-hidden="true">データ分析の流れ</figcaption>
</figure>
<p>皆さんは, ここまでの講義において, データを取得し,前処理を実施する方法を学びました. データサイエンスは, 文字通りデータを利用する学問ですが,データが使える,編集できる状態にやっとなったわけです.</p>
<p>ここから,順に可視化, 数値化, 分析に進みますが,それと並行して,皆さんの研究計画を立てていきましょう. できれば,研究計画に沿ったデータを取得し, その可視化,数値化,分析を学習しながら自分のデータに適用していくことを目指します.</p>
<h1 data-number="2" id="モデルとデータ執筆中"><span class="header-section-number">2</span> モデルとデータ(執筆中)</h1>
<p>統計学やデータサイエンスはいずれもデータを利用しますが,データを利用して得たいものは何でしょうか. 統計学や,データサイエンスは,世界に何かしらの<strong>構造(モデル)</strong>が存在するという<strong>仮定</strong>をおいて,情報を利用してその構造を明らかにすることを目的としています.</p>
<ul>
<li><p>星の動きは特定のルールに従っている</p></li>
<li><p>コインを投げて表が出るか,裏が出るかは,コインの構造や投げ方で決まる</p></li>
</ul>
<p>社会科学では,そのような構造がない,あるいは変化する,作るなどの立場もありますが,ここでは深くは扱いません.</p>
<p>しかし, 世の中の何かしらの対象の動きや現象を決める構造はどのようにすれば明らかになるのでしょうか. 私達は,情報を解釈することでお野中の何かしらの現象の背景にモデルを見出します. 単純な法則であれば,目で見て,耳で聞いて,触ってという五感によってモデルを発見しますが, そのようなものも,視覚,聴覚,触覚などの情報といえます. 自然の情報は複雑すぎるためにそのような情報全ては利用できません, 私達は<strong>データ</strong>と言う形で情報を抽出し,利用可能な形態にまとめます. 情報をそのまま眺めていても,まだ人間には複雑過ぎます,そこで,統計やデータサイエンスの技法を用いてそれらの情報を何らかの基準でまとめて,理解可能な形,すなわち<strong>モデル</strong>に変形します.</p>
<figure>
<img src="/images/info-to-model.png" alt="情報の抽出" />
<figcaption aria-hidden="true">情報の抽出</figcaption>
</figure>
<div class="warn">
<p>統計におけるモデルの話(あとで載せる予定)</p>
</div>
<p>この講義はデータサイエンスを扱うので, <strong>データからデータを生み出した世界の背景にある構造を明らかにする</strong>ことを目指します. なので, これから皆さんに立ててもらう研究テーマを決めるには,<strong>自分が明らかにしたい構造</strong>を決めて貰う必要があります.</p>
<div class="note">
<p>過去のこの講義における研究テーマでは,</p>
<ul>
<li><h2 id="大学の学生の成績が決定する構造とは"><strong>大学の学生の成績が決定する構造とは?</strong></h2>
<p>大学の学習データを用いたカテゴリーデータ解析によって, 授業形態別に良い成績を取る学生とそうでない学生の特徴を明らかにしました.</p></li>
<li><h2 id="ヒット曲を生み出す構造は"><strong>ヒット曲を生み出す構造は?</strong></h2>
<p>過去のヒット曲データや歌詞を利用したクラスタリングによって, 時代ごとのヒット曲の変遷と,ヒット曲になりやすい曲の特徴を明らかにしました.</p></li>
<li><h2 id="大学の電力消費を決めている構造は"><strong>大学の電力消費を決めている構造は?</strong></h2>
<p>大学の棟別の電力データを利用した時系列解析によって,大学の電力消費に影響の大きい要素を明らかにしました.</p></li>
<li><h2 id="国ごとのlgbtqに関する言説を決める要因は"><strong>国ごとのLGBTQに関する言説を決める要因は?</strong></h2>
<p>言語毎のLGBTQに関するWikipediaの記事の自然言語解析結果と,世界LGBTQ需要度ランキングの関係性を明らかにしました.</p></li>
<li><h2 id="大学生のメンタルヘルスを決める構造は"><strong>大学生のメンタルヘルスを決める構造は?</strong></h2>
<p>アンケート調査を利用した共分散構造分析によって,大学生の大学生活の様子とメンタルヘルスの関係を明らかにしました.</p></li>
</ul>
<p>などなど,それぞれが知りたい,何かの現象を生み出す構造を明らかにする研究を実施しました.</p>
<p>皆さんが研究テーマを決めるにあたって,必要となる第一歩は,<strong>何の</strong>,<strong>何を決める</strong>構造が知りたいのかを決めることです.</p>
</div>
<p>ところで,<strong>構造を明らかにする</strong>と言ってもどのようにするのでしょうか.</p>
<p>これから学ぶ様々な統計,データサイエンスの手法によって,明らかにすることができる構造は異なります.</p>
<div class="note">
<p>例えば,</p>
<ul>
<li><h2 id="関係がある-相関"><strong>関係がある → 相関</strong></h2>
<p>SDGsに取り組む企業は, 生産性が高い傾向がある
成績が良い学生は, 勉強時間が長い傾向がある
ただし, 傾向があるだけで, 勉強を沢山すれば,成績が伸びるという説明(因果関係)はできない</p></li>
<li><h2 id="違いがある-検定"><strong>違いがある → 検定</strong></h2>
<p>オンデマンド授業の方が, 対面授業よりも学生の成績が高い</p></li>
<li><h2 id="モデルで説明できる予測できる-多変量解析-統計モデリング回帰など"><strong>モデルで説明できる(予測できる) → 多変量解析, 統計モデリング(回帰など)</strong></h2>
<p>生産性がX高まると,SDGsへの取り組みの量がY増える</p></li>
<li><h2 id="区別要約できる-クラスタリング次元削減"><strong>区別/要約できる → クラスタリング,次元削減</strong></h2>
<p>流行りの音楽は,5つのグループに区別できる
流行りの音楽の特徴をまとめると,XやYである.</p></li>
</ul>
<p>といった手法があります. 自分が,対象の何を知りたいのかを明らかにすることで,使用する手法は異なります.</p>
</div>
<p>この講義では, 分析手法を扱う章でこれらの手法を扱います. 時間の都合上すべてを詳細に扱うことはできませんが,自分の知りたい対象に使える手法1つか2つだけを選んで,それを利用できるようにしていきましょう.</p>
<h2 data-number="2.1" id="手法の決め方"><span class="header-section-number">2.1</span> 手法の決め方</h2>
<p>統計やデータサイエンスは非常に広い学問なので,その学習では様々な手法を断片的に学習し, その後必要となる特定の手法を深く学ぶというのが一般的です. では,必要となる手法はどのように決めるのでしょうか.</p>
<p>手法は,目的とデータによって決まります. まず,目的(何が知りたいか)が決まり,利用できるデータが決まったあとに,使える手法(何が言えるか)が決まります. これは目的が先にあるパターンですが,データが先,使いたい手法が先などで研究計画が決まる場合もあります.</p>
<figure>
<img src="/images/purpose_method_data.png" alt="目的,手法,データ" />
<figcaption aria-hidden="true">目的,手法,データ</figcaption>
</figure>
<div class="warn">
<ul>
<li><h2 id="harkingについて"><strong>HARKing</strong>について</h2></li>
</ul>
<p>この講義はあくまで,研究を通じてデータサイエンスの手法を学習することを目指しているため, 以下の様に,手法やデータ優先で研究計画を立てることも認めていますが,研究の世界では, データが有り,何かしらの手法で分析した後に,その結果を元々知りたかったかのように報告することは<a href="http://journals.sagepub.com/doi/10.1207/s15327957pspr0203_4"><strong>HARKing</strong></a>と呼ばれる研究不正の一種とみなされる場合があります.</p>
<p>データ優位の分析は,データサイエンス分野や,観察研究と呼ばれる分野でしばしば行われていますし,特定の手法が利用可能な分野やデータを選択することは特定の手法の学習のためには有用です.</p>
<p>しかし,<strong>統計的仮説検定</strong>などの統計的な仮説を前提とする分野では,望ましい態度ではないとされています.</p>
<p>卒業研究などで,研究をする場合には,指導教官の指導方針に従って,研究計画を立てるようにしましょう.</p>
</div>
<div class="note">
<ul>
<li><h2 id="目的から"><strong>目的から</strong></h2>
<ul>
<li><p>この構造を明らかにしたい.</p></li>
<li><p>→ この構造から生じたデータを集める → このデータを使って構造を表す手法を選ぶ</p></li>
<li><p>→ この手法で明らかになる →この手法が使えるデータを集める</p></li>
</ul></li>
<li><h2 id="データから"><strong>データから</strong></h2>
<ul>
<li><p>このデータを分析したい</p></li>
<li><p>→ このデータを分析できる手法を選ぶ → この手法とデータから明らかになることを考える</p></li>
<li><p>→ このデータから明らかにしたい構造を考える → データから構造を明らかにする手法を考える</p></li>
</ul></li>
<li><h2 id="手法から"><strong>手法から</strong></h2>
<ul>
<li><p>この手法を使いたい,作りたい</p></li>
<li><p>→ この手法で何が明らかになるのかを決める → この手法が使えるデータを集める</p></li>
<li><p>→この手法が使えるデータを集める → この手法とデータから明らかになることを考える</p></li>
</ul></li>
</ul>
</div>
<h2 data-number="2.2" id="研究計画を建てよう"><span class="header-section-number">2.2</span> 研究計画を建てよう</h2>
<p><strong>目的,データ,手法</strong>いずれかを決めましょう.</p>
<div class="note">
<ul>
<li><h2 id="目的の決め方"><strong>目的の決め方</strong></h2>
<ul>
<li><p>自分の知りたい構造を沢山挙げる</p></li>
<li><p>その構造の仮説を立てる</p>
<p>例: Twitterでバズる方法には規則があるかもしれない?, 少子高齢化には背景に構造があるかもしれない?</p></li>
<li><p>→ すでに明らかになっていないか,本,論文を探す(先行研究).</p>
<p>何が分かっていて何が分かっていないのか?</p></li>
<li><p>大変なところ: アイデア勝負(創造性), 先行研究を調べるのが大変</p></li>
</ul></li>
<li><h2 id="手法の決め方-1"><strong>手法の決め方</strong></h2>
<ul>
<li><p>沢山の手法の原理/使い方を学ぶ</p></li>
<li><p>興味のある,自分で使えるようになりたい手法を選ぶ</p>
<p>例:兎に角テキスト解析してみたいぜ!, 取り敢えず統計モデルっていうものを作ってみたいぜ!</p></li>
<li><p>→ その手法について学習して, 使えるようにする.</p>
<p>どんな原理で,何が明らかになるもので,どのように使うのか?</p></li>
<li><p>大変なところ: 手法は難しい,沢山ありすぎる,数学とかプログラミングが必要</p></li>
</ul></li>
<li><h2 id="データの決め方"><strong>データの決め方</strong></h2>
<ul>
<li><p>様々なデータを探す/自分でデータを作ってみる(実験,調査)</p></li>
<li><p>→ データの特徴を分析(記述統計学),設計する(実験計画)</p>
<p>例: 取り敢えずYoutubeの視聴データが面白そう!, 大学の教育のデータから何が言えるかな?, アンケート調査とかしてみたい!</p></li>
<li><p>大変なところ: 実験や調査は手間がかかる. データの特徴を調べないといけない.</p></li>
</ul></li>
</ul>
<p>この3つをそれぞれ,自分の興味のあるものを考えて見よう.
最低3アイデアを考えてみましょう.(目的1つで3つでも, それぞれ1つずつでもOK)</p>
</div>
<p>どれか1つ(目的/手法/データ)が決まったら,残り2つを順番に探してみましょう.
しかし, 実際に行ってみると,途中でうまくいかないことが大半です.</p>
<div class="note">
<ul>
<li><h2 id="目的も手法も決まったけどデータがない"><strong>目的も手法も決まったけどデータがない!</strong></h2>
<ul>
<li>千葉商科大学生の親の所得と成績について,回帰分析したい!</li>
</ul>
<p>→ けどそんなデータはない</p>
<p>→ アンケート調査する?/変更する</p></li>
<li><h2 id="データも手法も決まったけど出てくる構造がすでに知られているつまらない"><strong>データも手法も決まったけど,出てくる構造がすでに知られている/つまらない</strong></h2>
<p>天気と気温のデータがあるので検定をすれば,晴れの日は雨の日より気温が高いことが分かる</p>
<p>→ そんな当たり前のことが分かっても…..</p></li>
<li><h2 id="目的もデータもあるけど手法が難しすぎる存在しない"><strong>目的もデータもあるけど,手法が難しすぎる/存在しない</strong></h2>
<p>企業の会計データと取引経路のデータがあるので,これで経済構造を明らかにできる!</p>
<p>→ エージェントベースモデリングをやるには,数百万円の計算機と,数万行のコードを書く必要があるし,モデル作成も複雑すぎる….</p></li>
</ul>
<p>ので行ったり来たりするのが通常です.</p>
</div>
<p>卒業研究などではこの過程に,1年以上かけますが,この講義では数ヶ月しか時間がとれません. そこで,<strong>少し妥協する必要があります</strong>.</p>
<p>本当に知りたいこと,本当にやりたいこと,本当に分析したいデータなどが,上手く使えればそれに越したことはありませんが,なかなか上手くは行きません.
一生物の仕事になる場合もあります(その場合は是非,大学院に進んで研究者になりましょう.)</p>
<p>この講義では,1年で0から行うので,</p>
<div class="note">
<ul>
<li><h2 id="すぐに結果が出そうな目的"><strong>すぐに結果が出そうな目的</strong></h2>
<ul>
<li><p>おおよそ明らかになっていることを少し変える</p></li>
<li><p>既に知られていることでも取り敢えずやってみる</p></li>
<li><p>本当に知りたいことのほんの一部だけに限定する</p></li>
</ul></li>
<li><h2 id="手頃なデータ"><strong>手頃なデータ</strong></h2>
<ul>
<li><p>昨年の講義で利用されているデータ</p></li>
<li><p>簡単に手に入るデータ</p></li>
</ul></li>
<li><h2 id="簡単な手法"><strong>簡単な手法</strong></h2>
<ul>
<li><p>授業で扱っている基礎的な手法に限定する</p></li>
<li><p>やりたいことの簡単なバージョンを利用する</p></li>
</ul></li>
</ul>
</div>
<p>くらいに,妥協する必要があります(それでも半年で行うのはかなり大変です.)</p>
<p>これから,具体的な統計やデータサイエンスの手法を学習するので, 並行してできるだけ早くに,自分がこの講義で何をやるのかを決めていきましょう.</p>
<div class="note">
<ul>
<li><p><strong>演習</strong></p></li>
<li><p>目的,手法,データ,どれでも良いので,3つ思いついたものをスライドにまとめてください.</p>
<ul>
<li><p>デザインを入れるなど,きれいにまとめる必要はありません.議論のためのメモ帳として作成してください.</p></li>
<li><p>あとで補足,追加できるように1つのテーマにつき,1ページ使用してください.</p></li>
<li><p>何かを調べた,読んだ,参考にした場合はその出典を書いておいてください.</p>
<p>URL直張りでも構わないので,必ずあとで参照できる形でメモを残しておいてください.</p></li>
<li><p>途中経過で構わないのでグループウェアの自分のチャネルにアップロードしてください.</p></li>
</ul>
<p>現時点では,実現が困難なものでも,不可能なものでも,つまらないものでも構いません,取り敢えず沢山やってみたいこと,興味のあることをまとめましょう.後ほど,その資料を元に,説明してもらい,ディスカッションします.</p></li>
</ul>
</div>
]]></description>
    <pubDate>Fri, 29 Mar 2024 00:00:00 UT</pubDate>
    <guid>/lectures/slds7.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>

    </channel>
</rss>
