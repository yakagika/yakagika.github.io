<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>yakagika - Posts tagged python</title>
        <link></link>
        <description><![CDATA[Personal blog of yakagika]]></description>
        <atom:link href="/tags/python.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Mon, 24 Mar 2025 00:00:00 UT</lastBuildDate>
        <item>
    <title>特別講義DS Ch3 Pythonと環境構築</title>
    <link>/lectures/slds3.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#イントロダクション" id="toc-イントロダクション"><span class="toc-section-number">1</span> イントロダクション</a>
<ul>
<li><a href="#プログラミング言語の種類" id="toc-プログラミング言語の種類"><span class="toc-section-number">1.1</span> プログラミング言語の種類</a></li>
<li><a href="#授業準備" id="toc-授業準備"><span class="toc-section-number">1.2</span> 授業準備</a>
<ul>
<li><a href="#テキストエディタ" id="toc-テキストエディタ"><span class="toc-section-number">1.2.1</span> テキストエディタ</a></li>
</ul></li>
<li><a href="#imeの設定" id="toc-imeの設定"><span class="toc-section-number">1.3</span> IMEの設定</a></li>
<li><a href="#cliの基本操作" id="toc-cliの基本操作"><span class="toc-section-number">1.4</span> CLIの基本操作</a>
<ul>
<li><a href="#エンコーディング" id="toc-エンコーディング"><span class="toc-section-number">1.4.1</span> エンコーディング</a></li>
<li><a href="#日本語表示" id="toc-日本語表示"><span class="toc-section-number">1.4.2</span> 日本語表示</a></li>
<li><a href="#ディレクトリ" id="toc-ディレクトリ"><span class="toc-section-number">1.4.3</span> ディレクトリ</a></li>
</ul></li>
<li><a href="#基礎的なコマンド" id="toc-基礎的なコマンド"><span class="toc-section-number">1.5</span> 基礎的なコマンド</a></li>
<li><a href="#環境構築" id="toc-環境構築"><span class="toc-section-number">1.6</span> 環境構築</a>
<ul>
<li><a href="#現状の開発環境の削除" id="toc-現状の開発環境の削除"><span class="toc-section-number">1.6.1</span> 現状の開発環境の削除</a></li>
<li><a href="#pyenvのインストール" id="toc-pyenvのインストール"><span class="toc-section-number">1.6.2</span> pyenvのインストール</a></li>
<li><a href="#pythonのインストール" id="toc-pythonのインストール"><span class="toc-section-number">1.6.3</span> Pythonのインストール</a></li>
</ul></li>
<li><a href="#hello-world" id="toc-hello-world"><span class="toc-section-number">1.7</span> Hello World</a></li>
<li><a href="#プログラミングの勉強の仕方" id="toc-プログラミングの勉強の仕方"><span class="toc-section-number">1.8</span> プログラミングの勉強の仕方</a></li>
</ul></li>
</ul>
</div>
<h1 data-number="1" id="イントロダクション"><span class="header-section-number">1</span> イントロダクション</h1>
<p>データサイエンスは,データを利用して現象を発見したり,予測をする科学の総称です. データの作成やデータを分析する前の処理,利用するコンピュータ関連の技術なども対象となります.</p>
<p>データサイエンスと関連の深い分野/用語として統計や機械学習,AIがありますが,それらもデータサイエンスの一部とみなすことができます.</p>
<p>統計は,データ自体の取得・作成・集計から,データの構造を分かりやすく分析・可視化する学問です.機械学習は,データから予測モデルを作り,意思決定などに応用する学問です. 統計や機械学習・AIは明確に分割することができるものではなく,かなりの部分が共通しています. 特に皆さんがこの講義の先修科目である統計学入門で学んだ,初歩的な統計は,機械学習やAI,データサイエンス全般を学ぶ上で,前提知識となります.この他,どちらかに分類できるわけではない,モデリング,AI,シミュレーション,最適化,次元削減,など様々なトピックが含まれています.</p>
<figure>
<img src="/images/data-science-and-components.png" alt="データサイエンス" />
<figcaption aria-hidden="true">データサイエンス</figcaption>
</figure>
<p>この講義では,統計学入門で学んだ,可視化,数値化,検定,回帰などの統計学の手法をPCを使って行う他,統計学入門の範囲を超えたより発展的な手法に関しても学習します.</p>
<p>しかし,このようにデータサイエンスは非常に広範な学問なので,統計学入門のように個別の手法に関して,細かく理解することはせず,それぞれの概要と利用方に関してのみを扱います.</p>
<h2 data-number="1.1" id="プログラミング言語の種類"><span class="header-section-number">1.1</span> プログラミング言語の種類</h2>
<p>データサイエンスは言葉の通り,データを扱います. 現在ではデータは基本的に,電子データとして収集,処理されるため,それらの編集,処理にはコンピュータを利用し,操作は基本的にはプログラムによってなされます. したがってプログラミングは,データサイエンスのための前提知識となります.</p>
<p>この講義では最終的には,学生それぞれに研究のためのプログラムを組んでもらいます.
データサイエンスや統計でよく使われる言語は, Python, Julia, R, SPSS, matlab などいくつかありますが, この授業では, 現在世界的に広く使われており,習得も容易なPythonを利用します.</p>
<p>プログラミング言語には沢山の種類がありますが,言語によって機能や得意なことが異なります.</p>
<figure>
<img src="/images/2024-04-08-lecture-DS-languages.png" alt="Langage icons" />
<figcaption aria-hidden="true">Langage icons</figcaption>
</figure>
<p>プログラミング言語は <strong>実行方式</strong>, <strong>書き方</strong>,<strong>検査の仕方</strong>などの特徴がそれぞれ異なり,大まかにはそれぞれ以下のような意味になります.</p>
<hr />
<p><strong>実行方式</strong></p>
<p>プログラミング言語は,人間にとって理解しやすくデータ構造やアルゴリズムを記述するための手段です.しかし,コンピュータはプログラミング言語を直接理解することはできません.そのため,書かれたプログラムはコンピュータが解釈できる形式,すなわち0と1のビット列である機械語に翻訳される必要があります.この翻訳プロセスは,プログラムの実行方式を以下の二つに分ける要因となります.</p>
<div class="note">
<ul>
<li>インタプリタ方式</li>
</ul>
<p>インタプリタ方式では,プログラムは逐次的に機械語に翻訳されながら実行されます.この方式の特徴は,コンパイルする必要がないため,翻訳と実行が同時に行われる点です.これにより,プログラムの変更がすぐに反映されるため,開発中のテストやデバッグが容易になります.しかし,実行のたびに翻訳を行う必要があるため,実行速度が遅くなることが欠点です.</p>
</div>
<div class="note">
<ul>
<li>コンパイラ方式</li>
</ul>
<p>コンパイラ方式では,プログラム全体が事前に機械語に翻訳され,その結果として得られる実行可能なプログラムが生成されます.コンパイラ方式の利点は,一度コンパイルされたプログラムは,何度も実行される際に追加の翻訳が不要であるため,実行速度が速いことです.また,コンパイル時にプログラム全体を分析できるため,エラーやバグの発見が早期に行え,より安全性が高まるという利点があります.</p>
</div>
<p>この二つの実行方式は,プログラムの性質や用途に応じて選択されます.インタプリタ方式は開発の柔軟性が求められる場合に適しており,コンパイラ方式は性能が重視される場合に好まれます.プログラマはこれらの特性を理解し,それぞれの場面で最適な選択をすることが求められます.</p>
<hr />
<p><strong>書き方</strong></p>
<p>プログラミングとは,基本的にコンピュータに対して実行してほしい命令を記述する作業です.現在主流のプログラミング言語には,大まかに<strong>手続き型言語</strong>と<strong>関数型言語</strong>の二つの記述方法が存在します.</p>
<div class="note">
<ul>
<li>手続き型言語</li>
</ul>
<p>この言語タイプでは,プログラムが｢何を,どうするか｣を順番に記述していきます. Python,Java,VBAなど多くの広く使われている言語がこの方法を採用しています. これにより,処理の流れが直観的に理解しやすくなります.</p>
</div>
<div class="note">
<ul>
<li>関数型言語</li>
</ul>
<p>関数型言語では,プログラムを実行によってユーザーが得たい結果を抽象化し,関数の組み合わせで記述します.このアプローチは,安全性の向上やデバッグのしやすさといったメリットを提供しますが. 概念の抽象化により理解が難しくなることがあります.</p>
</div>
<p>近年では,手続き型言語にも関数型の構文が取り入れられるようになり,手続き型言語内で関数型風に記述することや,その逆も可能になっています.</p>
<p>これらの違いについて更に詳しく知りたい方は,別の<a href="/lectures/2024-03-29-introduction-to-algebraic-programing.html">講義資料</a>で更に詳しく説明しています.</p>
<hr />
<p><strong>検査の仕方</strong></p>
<p>プログラミングは,データ構造とアルゴリズムを使用して命令を記述する作業です.ここではデータ型の詳細に深くは触れませんが,あらゆるプログラミング言語において,データはコンピュータのメモリ上に数値の羅列として存在します.それらの数値に意味を与えることでデータ型が形成されます.</p>
<p>プログラムは実行時に,これらのデータ型が適切に使用されているかを検査します.主な検査方法には<strong>動的型付け</strong>と<strong>静的型付け</strong>があります.動的型付けでは,プログラムの実行時にデータ型が決定され,静的型付けではコンパイル時にデータ型が固定されます.さらに,型付けには「弱い型付け」と「強い型付け」という区別も存在しますが,この講義ではその詳細には触れません.興味のある方は,このトピックについてさらに調査してみてください.</p>
<div class="note">
<ul>
<li>動的型付け
動的型付けのシステムでは,プログラマが変数の型を明示的に宣言する必要がありません.代わりに,コンピュータはプログラムの実行時に型を推論し,適切な型を自動で割り当てます.この柔軟性により,プログラマはより迅速に開発を進めることが可能になります.一方で,このシステムではコンパイル時の型チェックが行われないため,実行時に型関連のエラーが発生するリスクが高まります.そのため,安全性を確保するためには,プログラマ自身が型の整合性に注意を払い,エラー処理やテストにより問題を検出する必要があります.</li>
</ul>
</div>
<div class="note">
<ul>
<li>静的型付け</li>
</ul>
<p>静的型付けでは,プログラマが変数や関数の型をコード内で明示的に宣言し,これらはコンパイル時にチェックされます.この事前の型チェックにより,プログラムの安全性が向上し,実行時のエラーが減少します.また,コンパイラが型情報を利用して効率的なコード生成を行い,パフォーマンスが向上することがあります.静的型付けは特に,大規模プロジェクトや高い信頼性が求められる場合に適しています.</p>
</div>
<hr />
<p>プログラミング言語は,このような区分や,それ以外の様々な機能によって,用途の向き不向きが決まります(大雑把な目安です).</p>
<figure>
<img src="/images/2024-04-08-language-and-purpose.png" alt="Languages and usages" />
<figcaption aria-hidden="true">Languages and usages</figcaption>
</figure>
<p>ではこれらの特徴を踏まえて,Pythonとはどのような言語なのかを見てみましょう.</p>
<div class="note">
<p>Pythonは</p>
<ul>
<li>インタプリタ型言語で
<ul>
<li>機械語に翻訳しながら動く</li>
<li>手軽に書けて手軽に試せる</li>
<li>でも少し安全性が低く,遅い</li>
</ul></li>
<li>手続き型言語で
<ul>
<li>次に何をするかを順番に書く</li>
<li>(ただし関数型っぽい書き方もできる)</li>
</ul></li>
<li>動的型付け言語で
<ul>
<li>型検査を動かしながら実施</li>
<li>動かしてから型が違うと失敗する</li>
</ul></li>
</ul>
</div>
<p>これらは,プログラミング言語の大きな分類からみたPythonですが, Python固有の特徴として以下のようなものがあります.</p>
<div class="note">
<ul>
<li>とにかく読みやすく書きやすく覚えやすい
<ul>
<li>ABC言語という教育用言語が元になっている
<ul>
<li>予約語が少ない, → 覚えることが少ない</li>
<li>インデントでかき分け → 間違いが少ない</li>
<li>だれが書いても同じになる(と言われてはいる)</li>
</ul></li>
</ul></li>
<li>ライブラリが豊富
<ul>
<li>統計処理を全部0から自分で書くのは大変</li>
<li>他の人が作ったものを使えるようにするのがライブラリ</li>
<li>様々な大学や企業,研究者が膨大な量の統計処理,機械学習ライブラリを開発している</li>
</ul></li>
<li>遅いけど,Cなどと連携しやすい.
<ul>
<li>プログラミング言語ごとに速度は異なる.</li>
<li>Pythonは結構遅いので大きな計算に時間がかかる.
<ul>
<li>とても早い言語で遅い部分を書き換えやすい</li>
<li>ライブラリは基本的に早くなっている</li>
</ul></li>
</ul></li>
</ul>
</div>
<p>Pythonが教育用に良く使われるのは, インタプリタ方式の動的型付け言語であることから手軽に書けるだけではなく,もともと言語として簡単に書けるように作られていることが大きいです.</p>
<p>また, 統計,データサイエンス分野のライブラリが充実しており, これによって誰でも簡単に複雑な統計処理やデータサイエンスの技法が利用できることで,Pythonが広く普及しています.</p>
<p>簡単 → 教育用に → 多くの人が使う → ライブラリが充実 → もっと多くの人が使う</p>
<p>という流れがPythonの最大の強みと言えるでしょう.</p>
<p>実際にPythonはユーザー数が増え続けており,プログラムの共有サイトGitHubにおける2023年のすべての言語のなかで2番目にユーザ数が多い言語となっています.
<a href="https://github.blog/2023-11-08-the-state-of-open-source-and-ai/">Top 10 Programming languages on GitHub</a></p>
<figure>
<img src="/images/top-programming-languages-2023.png" alt="Top 10 Programming languages on GitHub" />
<figcaption aria-hidden="true">Top 10 Programming languages on GitHub</figcaption>
</figure>
<h2 data-number="1.2" id="授業準備"><span class="header-section-number">1.2</span> 授業準備</h2>
<p>この講義では,プログラムを自分で作成し,様々な演習をこなしてもらいますが,その前段階として,いくつかの準備が必要となります. このあたりはこの科目の先修科目の統計学入門でも扱っていますが,履修していない人もいますので,順番にやっていきましょう. 非常に基礎的な内容なので, 問題のない人は飛ばしましょう.</p>
<h3 data-number="1.2.1" id="テキストエディタ"><span class="header-section-number">1.2.1</span> テキストエディタ</h3>
<p>テキストエディタとは,プログラムを書くためのソフトウェアです.
プログラムを書くことをコーディング(Coding)といいます.</p>
<p>テキストエディタには沢山の種類があり,それぞれ独自の機能を持っています.
Windwosに最初から入っている｢メモ帳｣もテキストエディタですが,プログラムを書くために様々な機能が追加された高機能なテキストエディタも沢山あります.</p>
<p>例えば,シンタックスハイライト機能は,以下のプログラムのように,プログラムの記述を役割や意味に応じて色付けして見やすくしてくれます.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">## シンタックスハイライト</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> datetime <span class="im">import</span> datetime</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> greet_based_on_time():</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    now <span class="op">=</span> datetime.now()</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    current_hour <span class="op">=</span> now.hour</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="dv">5</span> <span class="op">&lt;=</span> current_hour <span class="op">&lt;</span> <span class="dv">12</span>:</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>        greeting <span class="op">=</span> <span class="st">&quot;Good morning, world!&quot;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> <span class="dv">12</span> <span class="op">&lt;=</span> current_hour <span class="op">&lt;</span> <span class="dv">18</span>:</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>        greeting <span class="op">=</span> <span class="st">&quot;Good afternoon, world!&quot;</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>        greeting <span class="op">=</span> <span class="st">&quot;Good night, world!&quot;</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> greeting</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="co"># 関数を呼び出して結果を表示</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(greet_based_on_time())</span></code></pre></div>
<p>また,スペースをタブに変換するなどの機能も非常に便利です. 最近では生成AIを利用した自動補完機能がついたエディタなどもありますが,本講義における生成AIの利用に関しては第2回でコードを書き始めた際に説明します.</p>
<p>今までメモ帳以外のテキストエディタを利用したことが無い方には,シンプルなSublime Text 3をおすすめします(今世界的に人気があるのは VSCodeです.非常に便利ですが機能が多すぎて皆さんが混乱する可能性があるので,こちらを選びました).</p>
<p>既に何かしらのテキストエディタを利用している方は,現在使用しているエディタをそのまま利用して頂いても構いません.</p>
<p><a href="https://www.sublimetext.com/3">このURL</a>をクリックして,ページ上部にあるDownloadをクリックします. 自分のPCに合わせたインストール方法を選択しましょう.</p>
<figure>
<img src="/images/2024-04-08-lecture-DS-sublime-install.png" alt="Screenshot Sublime Text" />
<figcaption aria-hidden="true">Screenshot Sublime Text</figcaption>
</figure>
<div class="warn">
<p>SublimeTextもいろいろな機能を追加することができます.
｢SublimeText 設定｣などで調べて,好きなようにカスタマイズして構い舞いません.
カスタマイズをしなくても基本的な機能には問題ありません.</p>
</div>
<h2 data-number="1.3" id="imeの設定"><span class="header-section-number">1.3</span> IMEの設定</h2>
<p>プログラムは基本的に <strong>｢半角英数字｣</strong> で記述されます. プログラム中に全角の空白や記号が交じるとエラーの原因となる場合があります. そのため,プログラムを書く前に,そういったミスが起きないようにIMEの設定をしましょう.</p>
<p>タスクトレーからIMEの設定ができます．基本的に記号をすべて半角に設定しましょう（スペースは必ず半角にしましょう）．特に，句読点をコンマとピリオドに変更しましょう．</p>
<figure>
<img src="/images/2024-04-08-lecture-DS-IME.png" alt="IME" />
<figcaption aria-hidden="true">IME</figcaption>
</figure>
<h2 data-number="1.4" id="cliの基本操作"><span class="header-section-number">1.4</span> CLIの基本操作</h2>
<p>プログラムの開発環境にはマウスなどでクリックして操作するGUI(Graphical User Interface)をもったIDE(Integrated Development Environment)などもありますが,基本的には文字によってコンピュータに命令を送るCLI(Command Line Interface)を利用します. 映画やマンガなどで,ハッカーが黒い画面に文字を打っているあれのことです.</p>
<p>コンピュータのオペレーティングシステムとユーザー間のCLIを提供するプログラムをShellといい,Windowsでは,Command PromptやPowerShellなどがあります. MacなどのUnix系では,Bashやzshがあります. いずれも (Windows) Terminalというソフトウェアを介して利用します.</p>
<p>本講義では環境や好みによって好きな環境で開発して構いませんが,ここでは,PowerShellの利用法を解説します.</p>
<p>Windows11の検索バーで <code>Terminal</code>と検索して,出てきた <code>Terminal</code>をクリックしましょう.</p>
<figure>
<img src="/images/Terminal-launch.png" alt="Screenshot Terminal" />
<figcaption aria-hidden="true">Screenshot Terminal</figcaption>
</figure>
<p>自動的に<code>Windows PowerShell</code>が起動します. 立ち上がった,黒色の画面に文字でコマンド(命令)を入力して,コンピュータを操作します.</p>
<figure>
<img src="/images/Terminal-window.png" alt="Screenshot Terminal" />
<figcaption aria-hidden="true">Screenshot Terminal</figcaption>
</figure>
<h3 data-number="1.4.1" id="エンコーディング"><span class="header-section-number">1.4.1</span> エンコーディング</h3>
<p>実際にコマンドを入力する前に, 初心者がつまづきやすいポイントとして,Windowsのエンコーディングについて解説します.</p>
<p>PCは人間の使う文字（日本語，英語など）が理解できません.PCは機械語と呼ばれる言語で命令を受け付けます.一方で,人間は機械語を読むのが困難です.そこで,人間の使う文字と,機械語の間に変換ルールを設けて人間の文字でされた命令をPCにわかる文字に変換します.この変換ルールを文字エンコーディングと呼びます.</p>
<p>エンコーディングには複数の種類があります(日本語設定のWindowsはShift-JIS,Unix系はUnicodeが一般的です).
PythonはUTF-8という文字エンコーディングがデフォルトなので,Windowsにおいても可能な限りUTF-8を用いた方が良いです.</p>
<p>そこで,ターミナル上で利用するエンコーディングを変更します.
PowerShellを起動して, <code>chcp 65001</code> と打ち込み, PowerShell上で利用する文字エンコーディングをUTF-8に変更しましょう. <code>chcp</code>が利用する文字コードを変更するコマンド(change code page)で,その後に変更したい文字コードを入力します. <code>65001</code>は<code>UTF-8</code>のコードページ(Windows独自の文字エンコーディング)です. これはPowerShellを起動する度に行ってください．</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">chcp</span> 65001</span></code></pre></div>
<p>と入力すると,</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">Active</span> code page: 65001</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="ex">PS</span> C:<span class="dt">\U</span>sers<span class="dt">\u</span>ser<span class="op">&gt;</span></span></code></pre></div>
<p>のように表示されるはずです.</p>
<h3 data-number="1.4.2" id="日本語表示"><span class="header-section-number">1.4.2</span> 日本語表示</h3>
<p>Power Shellの設定によっては日本語が表示されず,日本語部分が <code>□</code> で置き換えられて表示されます.これは,使用しているフォントに日本語が含まれていないために発生します.</p>
<figure>
<img src="/images/powershell-tofu.png" alt="Screenshot PowerShell" />
<figcaption aria-hidden="true">Screenshot PowerShell</figcaption>
</figure>
<p>設定を変更してて日本語を表示可能にしましょう(
適当な日本語を入力してみて,問題なく表示されるようであれば,変更は必要ありません).</p>
<p>左上の<code>下向きの矢印 &gt; 既定値 &gt; 外観 &gt; フォントフェイス</code>の部分を日本語フォントに変更し<code>保存</code>をクリックすることで,日本語が表示されるようになります.</p>
<figure>
<img src="/images/Terminal-setting1.png" alt="Screenshot Terminal" />
<figcaption aria-hidden="true">Screenshot Terminal</figcaption>
</figure>
<figure>
<img src="/images/Terminal-setting2.png" alt="Screenshot Terminal" />
<figcaption aria-hidden="true">Screenshot Terminal</figcaption>
</figure>
<figure>
<img src="/images/Terminal-setting3.png" alt="Screenshot Terminal" />
<figcaption aria-hidden="true">Screenshot Terminal</figcaption>
</figure>
<p>その他色やサイズなど,好きな設定に変更できます. あとで,好みにカスタマイズしましょう.</p>
<h3 data-number="1.4.3" id="ディレクトリ"><span class="header-section-number">1.4.3</span> ディレクトリ</h3>
<p>基礎的なコマンドを学ぶ前に,ディレクトリに関して理解しておきましょう.
コンピュータの中のデータは,以下のような木構造になっています. このような木構造によるファイルの構造をディレクトリといいます.</p>
<pre><code>C: -- Users -- hoge
          |
            -- hoge2 -- Desktop
                   |
                     -- Downloads
                   |
                     -- Documents -- huga
                                |
                                  -- huga2</code></pre>
<p>CLIにおいて,ユーザはこの木構造のどこかに存在しており,この木構造を移動しながら様々な作業を行います. 現在いるディレクトリのことを <code>working directory</code>(以下wd)や<code>current directory</code>といいます.</p>
<h2 data-number="1.5" id="基礎的なコマンド"><span class="header-section-number">1.5</span> 基礎的なコマンド</h2>
<p>ここでは, この講義で必要となる最低限のコマンド,特にディレクトリの移動に関するコマンドを学習します.</p>
<p>wdは, CLIの左側に表示されていることが多いです.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ex">PS</span> C:/Users/hoge2<span class="op">&gt;</span></span></code></pre></div>
<p>のように表示されていれば今<code>C:</code>ドライブ下の<code>Users</code>下の<code>hoge2</code>がwdとなります.</p>
<div class="warn">
<ul>
<li><p>Windowsでは,ディレクトリを区切る文字が<code>¥</code>あるいは<code>\</code>で表示されていると思います.</p></li>
<li><p>Macでは,<code>/</code>です.</p></li>
</ul>
<p>本資料では,<code>/</code>を利用しています. 自分の環境に併せて適宜読み替えてください.</p>
</div>
<p>CLIの左側に表示されていない場合にも<code>pwd</code>コマンド (print working directory)を入力すると,現在のディレクトリが表示されます.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ex">PS</span> C:/Users/hoge2<span class="op">&gt;</span> pwd</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="ex">PATH</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="ex">----</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="ex">C:/Users/hoge2</span></span></code></pre></div>
<p>wdの下に何があるかを調べるコマンドとして<code>ls</code>コマンド(list)があります.</p>
<div class="warn">
<p>以下, <code>PS C:\Users\hoge2</code>の部分は省略します.</p>
</div>
<div class="sourceCode" id="cb7"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> ls</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Desktop</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="ex">Downloads</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="ex">Documents</span></span></code></pre></div>
<p>※実際の画面では,もう少しいろいろな情報が書かれているかと思います.</p>
<p>ディレクトリ構造を確認するCommandとして<code>tree</code>があります. <code>tree</code>と入力してEnterすることで,wd以下のディレクトリ構成が確認できます.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> tree</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="ex">Folder</span> PATH listing</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Volume</span> serial number is 00000157 B8F4:6480</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="ex">C:.</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="ex">├───Contacts</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="ex">├───Desktop</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="ex">├───Documents</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="ex">│</span>   ├───hoge</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="ex">│</span>   └───slds</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="ex">│</span>       └───program</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="ex">├───Downloads</span></span></code></pre></div>
<p><code>tree [PAHT]</code>と入力すると, wdではなく指定した<code>[PATH]</code>以下のディレクトリ構造が表示されます.
また, <code>/f</code> オプションを加えることでファイルも表示されます.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> tree <span class="bu">.</span><span class="dt">\D</span>ocuments\ /f</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="ex">Folder</span> PATH listing</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Volume</span> serial number is 000001D1 B8F4:6480</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="ex">C:\USERS\AKAGI\DOCUMENTS</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="ex">├───hoge</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="ex">│</span>       hello.py</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="ex">│</span>       slds-2-10.py</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="ex">│</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a><span class="ex">└───slds</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>    <span class="ex">└───program</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>            <span class="ex">hello.py</span></span></code></pre></div>
<div class="warn">
<p>Macの場合は,<code>tree</code>コマンドは入っていないので,<code>brew</code>などを利用してインストールする必要があります.
<code>brew</code>に関しては自分で調べてみましょう.</p>
<p>また,オプションもWindowsとは異なっています.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">コマンド</th>
<th style="text-align: center;">意味</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">-d</td>
<td style="text-align: center;">ディレクトリのみ表示</td>
</tr>
<tr class="even">
<td style="text-align: center;">-L N</td>
<td style="text-align: center;">N 階層まで表示</td>
</tr>
<tr class="odd">
<td style="text-align: center;">-P X</td>
<td style="text-align: center;">正規表現Xに従って表示</td>
</tr>
</tbody>
</table>
<div class="sourceCode" id="cb10"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> tree</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="bu">.</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="ex">├──</span> hoge</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="ex">│</span>      └── hoge.py</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="ex">└──</span> huga</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>        <span class="ex">└──</span> huga.py</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span> directories, 2 files</span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> tree <span class="ex">-d</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="bu">.</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a><span class="ex">├──</span> hoge</span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a><span class="ex">└──</span> huga</span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span> directories</span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> tree <span class="ex">-L</span> 1</span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a><span class="bu">.</span></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a><span class="ex">├──</span> hoge</span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a><span class="ex">└──</span> huga</span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span> directories, 0 files</span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> tree <span class="ex">-P</span> <span class="st">&quot;hoge*&quot;</span></span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a><span class="bu">.</span></span>
<span id="cb10-23"><a href="#cb10-23" aria-hidden="true" tabindex="-1"></a><span class="ex">├──</span> hoge</span>
<span id="cb10-24"><a href="#cb10-24" aria-hidden="true" tabindex="-1"></a><span class="ex">│</span>     └── hoge.py</span>
<span id="cb10-25"><a href="#cb10-25" aria-hidden="true" tabindex="-1"></a><span class="ex">└──</span> huga</span></code></pre></div>
</div>
<p>wdから別のディレクトリに移動するコマンドとして <code>cd</code> コマンド(change directory)があります</p>
<p><code>cd [移動先]</code> と打つことで,lsコマンドで出てきた,ディレクトリに移動することができます.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> ls</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="ex">Desktop</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Downloads</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="ex">Documents</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> cd <span class="ex">Documents</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> pwd</span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="ex">PS</span> C:/Users/hoge2/Documents</span></code></pre></div>
<div class="warn">
<p>移動先のディレクトリ名はすべて自分で入力する必要はありません. 最初の数文字を入力して<code>Tab</code> Keyを押すと,自動で保管してくれます.</p>
</div>
<p><code>cd ..</code> と打つと一つ前のディレクトリ,<code>cd ~</code>と打つとホームディレクトリ(基本的には最初に開いた際にいた場所)に一挙に移動することができます.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> pwd</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="ex">PS</span> C:/Users/hoge2/Documents</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> cd <span class="ex">..</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> pwd</span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="ex">PS</span> C:/Users/hoge2</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> cd <span class="ex">Documents/huga</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> pwd</span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a><span class="ex">PS</span> C:/Users/hoge2/huga</span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> cd <span class="ex">~</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> pwd</span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a><span class="ex">PS</span> C:/Users/hoge2</span></code></pre></div>
<p><code>mkdir [作りたいディレクトリ名]</code> コマンド(make directory)で,新しいディレクトリを作成できます.</p>
<p><code>rmdir [消したいディレクトリ名]</code> コマンド(remove directory)で,ディレクトリを消すことができます.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> pwd</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="ex">PS</span> C:/Users/hoge2</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> ls</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="ex">Desktop</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="ex">Downloads</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="ex">Documents</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> cd <span class="ex">Documents</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> ls</span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="ex">huga</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="ex">huga2</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> mkdir <span class="ex">huga3</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> ls</span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a><span class="ex">huga</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a><span class="ex">huga2</span></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a><span class="ex">huga3</span></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> rmdir <span class="ex">huga3</span></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> ls</span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a><span class="ex">huga</span></span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a><span class="ex">huga2</span></span></code></pre></div>
<p><code>rmdir</code> コマンドでは中身のあるディレクトリは消せません. オプションを追加することで消せますが,危険なのでここでは教えません.興味があったら自分で調べてみましょう.</p>
<div class="note">
<p><strong>練習:作業用ディレクトリを作ろう</strong></p>
<ul>
<li><p>これから,作業をするためのディレクトリをコマンドで作成しましょう.</p>
<ul>
<li>Documentsに移動</li>
<li>Programs というディレクトリを作成し移動</li>
<li>Python というディレクトリを作成し移動</li>
<li>slds というディレクトリを作成し移動
(名前は好きに設定して良いです. slds; special lecture data science)</li>
</ul></li>
</ul>
<p>これからこの講義で利用するプログラムなどはsldsに保存しましょう.</p>
</div>
<h2 data-number="1.6" id="環境構築"><span class="header-section-number">1.6</span> 環境構築</h2>
<p>自身の環境(PC)でプログラムが動くようにすることを<strong>環境構築</strong>といいます. Python自分のPCで動くように設定をしましょう.</p>
<p>Pythonの環境構築に関して説明します.Pythonを動かす方法は沢山あります.一つのソフトの中でプログラムの編集から実行まで全て完結するIDE(統合開発環境)やブラウザ上でSaaSを通じて実行する方法もありますが,ここではCLIを利用して実行する方法を準備します.Windowsを所有している学生が多いと思われるので,Windowsを前提に説明します. それ以外のOSの方は分からなければ教員に聞いて下さい.</p>
<p>Pythonの環境構築にもいくつかの手法がありますが,現在は <a href="https://github.com/pyenv/pyenv"><code>pyenv</code></a>や<a href="https://www.docker.com"><code>Docker</code></a>を利用した仮想環境でpythonのversionやライブラリをアプリケーションごとに分ける方法が主流です.</p>
<p>本講義では, <code>pyenv</code>を利用するため,以下<code>pyenv</code>環境の構築を行います.</p>
<h3 data-number="1.6.1" id="現状の開発環境の削除"><span class="header-section-number">1.6.1</span> 現状の開発環境の削除</h3>
<p>Terminalを開いて, <code>python --version</code>と入力しましょう. すでに<code>python</code> が入っている場合は,Pythonのversion情報が表示されます.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> python <span class="ex">--version</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="ex">Python</span> 3.11.9</span></code></pre></div>
<p>Pythonがインストールされていない場合は以下のような表示になります.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> python <span class="ex">--version</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="ex">fha</span> : The term <span class="st">&#39;python&#39;</span> is not recognized as the name of a cmdlet, function, script file, or operable program. Check the s</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="ex">pelling</span> of the name, or if a path was included, verify that the path is correct and try again.</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a><span class="ex">At</span> line:1 char:1</span></code></pre></div>
<p>Python の version情報が表示された場合は, <code>pyenv --version</code> と入力してすでに<code>pyenv</code>が入っていないか確認してください.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> pyenv <span class="ex">--version</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="ex">pyenv</span> 3.1.1</span></code></pre></div>
<p>pyenv の version情報が表示されている場合はすでに環境構築が済んでいるので飛ばしてください. pyenvのversion情報が表示されない人はまず現行のPythonを削除しましょう.</p>
<p><code>設定 &gt; アプリ &gt; インストールされているアプリ</code>から <code>python</code>を検索して, <code>Python X.X</code> の形式のアプリと,<code>Python Luncher</code>などを<code>アンインストール</code>してください.</p>
<p>その他, <code>anaconda</code>などが入っていたらアンインストールしておいてください.</p>
<p><img src="/images/python-delete1.png" /></p>
<p><img src="/images/python-delete2.png" /></p>
<p><img src="/images/python-delete3.png" /></p>
<p>アンインストールが終わったら,terminal を一度開き直して, <code>python --version</code> コマンドで確認してみましょう.
(VSCodeなどTerminalにアクセスするアプリを開いている場合は,閉じておきましょう.)</p>
<h3 data-number="1.6.2" id="pyenvのインストール"><span class="header-section-number">1.6.2</span> pyenvのインストール</h3>
<p>続いて <a href="https://github.com/pyenv-win/pyenv-win/tree/master">pyenv for windows</a>を参考に<code>pyenv</code>環境を構築します.</p>
<p>Terminal を再度開き以下のコマンドをコピー,貼り付けしてEnterを押してください.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a> <span class="ex">Set-ExecutionPolicy</span> <span class="at">-ExecutionPolicy</span> RemoteSigned <span class="at">-Scope</span> CurrentUser</span></code></pre></div>
<p>Quick start 内のコマンドをコピーしてTerminalに貼り付け,Enterを押してください.</p>
<figure>
<img src="/images/pyenv-win1.png" alt="インストールコマンド" />
<figcaption aria-hidden="true">インストールコマンド</figcaption>
</figure>
<p>Terminalを再起動して,<code>pyenv --version</code>を入力し,version情報が表示されれば成功です.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> pyenv <span class="ex">--version</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="ex">pyenv</span> 3.1.1</span></code></pre></div>
<h3 data-number="1.6.3" id="pythonのインストール"><span class="header-section-number">1.6.3</span> Pythonのインストール</h3>
<p>Pythonにはいくつかのversionがあり,必要に応じて切り替えて利用します.
まずはインストール可能なversionを <code>pyenv install --list</code>コマンドで確認してみましょう.</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> pyenv <span class="fu">install</span> <span class="at">--list</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="ex">::</span> <span class="pp">[</span><span class="ss">Info</span><span class="pp">]</span> ::  Mirror: https://www.python.org/ftp/python</span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="ex">::</span> <span class="pp">[</span><span class="ss">Info</span><span class="pp">]</span> ::  Mirror: https://downloads.python.org/pypy/versions.json</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a><span class="ex">::</span> <span class="pp">[</span><span class="ss">Info</span><span class="pp">]</span> ::  Mirror: https://api.github.com/repos/oracle/graalpython/releases</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a><span class="ex">2.4-win32</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a><span class="ex">2.4.1-win32</span></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a><span class="ex">2.4.2-win32</span></span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a><span class="bu">.</span></span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a><span class="bu">.</span></span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a><span class="bu">.</span></span></code></pre></div>
<p>この中から一つを選んでインストールします.
最新のものをインストールするとライブラリなどが対応していない場合があるので,<code>3.11.9</code>あたりをインストールしておきましょう.</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> pyenv <span class="fu">install</span> 3.11.9</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a><span class="ex">::</span> <span class="pp">[</span><span class="ss">Info</span><span class="pp">]</span> ::  Mirror: https://www.python.org/ftp/python</span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a><span class="ex">::</span> <span class="pp">[</span><span class="ss">Info</span><span class="pp">]</span> ::  Mirror: https://downloads.python.org/pypy/versions.json</span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a><span class="ex">::</span> <span class="pp">[</span><span class="ss">Info</span><span class="pp">]</span> ::  Mirror: https://api.github.com/repos/oracle/graalpython/releases</span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a><span class="ex">::</span> <span class="pp">[</span><span class="ss">Downloading</span><span class="pp">]</span> ::  3.11.9 ...</span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a><span class="ex">::</span> <span class="pp">[</span><span class="ss">Downloading</span><span class="pp">]</span> ::  From https://www.python.org/ftp/python/3.11.9/python-3.11.9-amd64.exe</span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a><span class="ex">::</span> <span class="pp">[</span><span class="ss">Downloading</span><span class="pp">]</span> ::  To   C:<span class="dt">\U</span>sers<span class="dt">\a</span>kagi<span class="dt">\.</span>pyenv<span class="dt">\p</span>yenv-win<span class="dt">\i</span>nstall_cache<span class="dt">\p</span>ython-3.11.9-amd64.exe</span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a><span class="ex">::</span> <span class="pp">[</span><span class="ss">Installing</span><span class="pp">]</span> ::  3.11.9 ...</span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a><span class="ex">::</span> <span class="pp">[</span><span class="ss">Info</span><span class="pp">]</span> :: completed! 3.11.9</span></code></pre></div>
<p><code>pyenv</code>はディレクトリごとに使用するPythonのバージョンなどを管理できます.
現行のディレクトリのみで,特定のversionのPythonを利用したい場合は</p>
<p><code>pyenv local &lt;使いたいPython&gt;</code>で設定します.</p>
<p><code>local</code>で設定されているディレクトリ以外全てで共通のPythonを使用したい場合は</p>
<p><code>pyenv global &lt;使いたいPython&gt;</code> で設定します.</p>
<p>今は,</p>
<p><code>pyenv global 3.11.9</code> で全体に<code>3.11.9</code>を設定しましょう.</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> pyenv <span class="ex">global</span> 3.11.9</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> python <span class="ex">--version</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Python</span> 3.11.9</span></code></pre></div>
<p><code>python --version</code>で指定したversionのpythonが表示されればPythonの環境構築完了です.</p>
<h2 data-number="1.7" id="hello-world"><span class="header-section-number">1.7</span> Hello World</h2>
<p>初めて作成するプログラムとして標準出力(PowerShellなどの画面)に<code>Hello World</code>と出力するだけのプログラムを作成してみます.</p>
<p><code>PowerShell</code>を開いて,自分の作業用ディレクトリに移動します.</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> chcp <span class="ex">65001</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> cd <span class="ex">Documents/Programs/Python/slds</span></span></code></pre></div>
<p>テキストエディタで新しいファイルを開き,<strong>作業用ディレクトリ</strong>に<code>hello.py</code>という名前で保存しましょう.</p>
<p><code>.py</code>はPythonプログラムの拡張子です.</p>
<p>保存は,タブから<code>File &gt; save with encoding &gt; UTF-8</code>の順にクリックし<code>UTF-8</code>で保存しましょう.
それ以降は <code>Ctrl + s</code>などで上書き保存しても構いません.</p>
<p>作成したディレクトリに移動し, lsコマンドでファイルがあるか確認しましょう.
ょう.</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> ls</span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a><span class="ex">hello.py</span></span></code></pre></div>
<p>確認できたらhello.pyに以下の2行を書き足して上書き保存します.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding:utf-8 -*-</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(“Hello world<span class="op">!</span>”)</span></code></pre></div>
<p>保存できたら<code>python hello.py</code>コマンドでプログラムを実行します.</p>
<p>標準出力に<code>Hello World!</code>と表示されれば成功です.</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> python <span class="ex">hello.py</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span></code></pre></div>
<p>ここまでで，皆さんはPCでプログラムを書く準備が整いました．
あとはプログラムの書き方を学習すれば自身の環境で開発が行なえます．</p>
<h2 data-number="1.8" id="プログラミングの勉強の仕方"><span class="header-section-number">1.8</span> プログラミングの勉強の仕方</h2>
<p>プログラミング言語は,文字通り<strong>言語</strong>です. 英語などと同じ様に,使わないと身につきません.なので,大事なことは<strong>勉強するより使う</strong>ことです.</p>
<p>英語の勉強で,一つひとつ文法を覚えることは大切かもしれませんが,実際に英文を書いたり,会話しないと使えるようにはなりません. プログラミングの学習で,学習用の資料や教科書を一つ一つ<strong>読んだり,ノートに書き写す人</strong>がたまにいますが,かなり効率が悪い方法です. 何も分からなくてもいいので,取り敢えずプログラムを書いて実行するようにしましょう. 資料に載っている例はすべて,実際に書いて実行してみましょう.</p>
<p>一番いい方法は,何も分からなくても取り敢えず,プログラムをつかってしてみたいことを実行することです.1からすべての構文などを覚えようとしないで,自分がやりたい,しなければならないことを,書き始めましょう. <strong>分からないところだけを</strong>調べれば十分です.</p>
<p>その際に,新しく知ったことは,メモなどして,あとで参照できるようにしておきましょう. その資料が後々役に立ちます.</p>
<p>プログラミングは,すべて暗記する必要はありません. 覚えていなくても,それの調べ方や載っている資料を知っていれば十分です. 何回も使う機能であれば自然に覚えます.</p>
<p><strong>ただし,</strong> Pythonは非常に多くの人が利用しているので,みなさんがこの講義で習うレベルのことは検索すれば既に,完成したプログラムを参考にすることができます. また,ChatGPTなどの生成AIを利用すれば,皆さんの書いたプログラムよりかなりできの良いものをすぐに得ることができます. それらを見て勉強することは大切ですが,ただ,只管コピペしたり,生成AIの結果を利用しているだけでは,全く身につきません. 検索して出てきたコードや,生成AIによるコードを利用しても構いませんが, それをただ貼り付けるのではなく,<strong>自分で読んで,理解する</strong>ようにしましょう.</p>
<p>知らない部分,自分では書けない部分が見つかったらそれを理解するように勉強しましょう. ChatGPTに質問しても構いません. ただ,聞いたことを説明できるようにしましょう.</p>
<p>自分で説明できないものを使えるのは<strong>せいぜい学校の課題くらいです</strong>. 仕事や研究では,中身の良く分からないコードは利用できません. 最低限自分で理解したものだけを利用してください.</p>
<p>講義では,結果があっていればよいだけではなく,<strong>なぜそのように書いたのか</strong>,<strong>どのような意味か</strong>,<strong>なぜこうなるのか</strong>などを皆さんに聞きますので,理解に務めるようにしましょう.</p>
<div class="note">
<p><strong>演習</strong></p>
<ul>
<li><u>演習1 Shellコマンドの調査</u></li>
</ul>
<p>今回ならったいくつかのコマンド以外にも便利なコマンドが沢山あります. 3つ調べて,使い方を説明してください.</p>
<ul>
<li><u>演習2 チートシートの作成</u></li>
</ul>
<p>チートシートとは「それだけを見れば必要な情報が分かるメモ書き」のことです.
プログラミングの学習では, 自分でノートを取って,それさえ見ればなんとかできる資料を作る のは非常に有用です.</p>
<p><code>.ppt</code>でも<code>.txt</code>でも形態は何でも良いので, 自分だけのチートシートを作成して, 今日覚えたこと,調べたことなどをメモしていきましょう.</p>
<p>◦ CLI, Pythonの基礎, Pandasなど学習の区切りごとにシートを分けると便利です.</p>
<p>◦ スライドサイズを事前に大きく設定しておくと便利です</p>
<p>書き方は自由ですが, <a href="https://www.google.com/search?newwindow=1&amp;client=safari&amp;sca_esv=635483f0705dd420&amp;sca_upv=1&amp;q=python+%E3%83%81%E3%83%BC%E3%83%88%E3%82%B7%E3%83%BC%E3%83%88&amp;uds=AMwkrPtd7EXxieMQKehnHvZf8S6pNpVcJzQvmfSMfustdt5GVU4paqDezVS1KwRLLfnWdTPfRKqI2vio1swnpAMe65pQfFGqsLrhLm9FBruViqbu8gs83egRP5pID9cAUWbOoFAII8Bi4Sa9pC2nZB8uNY_Im_IVhSc-ISQJazoPJyS7Y5hq8j_wtxEDwusT0kav7Mhx_On2phc8rZKZ0rWb3f5AykS1iJlyMqAYBs5Ke8QgUSIasP6AkeP9P6DIKWQaXCglNYTRDcA_cLO0qv_MU45G2ng9BfipwmjcaL4l2EsY-TdRRazsTUowT__BAUHIv2lsEG32&amp;udm=2&amp;prmd=ivsnmbtz&amp;sa=X&amp;ved=2ahUKEwiA48qB-bOFAxU3aPUHHYJmBQsQtKgLegQICRAB&amp;biw=1147&amp;bih=1269&amp;dpr=1">検索して</a>有名なチートシートを参考にしてください.</p>
<p>このチートシートは後で紹介してもらいます.</p>
<ul>
<li><u>演習3 <code>print()</code>の利用</u></li>
</ul>
<p>今回作成した<code>hello.py</code>における
<code>print()</code> という関数は()内の文字(<code>""</code>で囲われている部分)を標準出力する関数です.
<code>print()</code>の括弧内の <code>Hello World!</code> 部分を好きな文字に書き換えて実行してみましょう.</p>
</div>
<div class="warn">
<p><strong>演習について</strong></p>
<p>この資料では,所々に演習が指定されています.
演習は自分で行い, どのようにやったのかを講義中に発表,あるいは宿題として提出してもらいます.</p>
<p>家で演習を進めた場合には,講義中にそれが再現できるように,</p>
<ul>
<li>どのようにやったのか</li>
<li>なぜやったのか</li>
</ul>
<p>などを人に説明できるように<strong>必ず作成したメモ,資料</strong>などを残しておきましょう.</p>
</div>
]]></description>
    <pubDate>Mon, 24 Mar 2025 00:00:00 UT</pubDate>
    <guid>/lectures/slds3.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>特別講義DS Ch15 自然言語処理</title>
    <link>/lectures/slds15.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#自然言語処理" id="toc-自然言語処理"><span class="toc-section-number">1</span> 自然言語処理</a></li>
<li><a href="#トークン化と形態素解析" id="toc-トークン化と形態素解析"><span class="toc-section-number">2</span> トークン化と形態素解析</a></li>
<li><a href="#wordcloud" id="toc-wordcloud"><span class="toc-section-number">3</span> WordCloud</a></li>
<li><a href="#トピックモデル" id="toc-トピックモデル"><span class="toc-section-number">4</span> トピックモデル</a>
<ul>
<li><a href="#xtwitter-apiを用いたデータの取得" id="toc-xtwitter-apiを用いたデータの取得"><span class="toc-section-number">4.1</span> X(Twitter) APIを用いたデータの取得</a></li>
<li><a href="#トピックモデル実践" id="toc-トピックモデル実践"><span class="toc-section-number">4.2</span> トピックモデル実践</a></li>
</ul></li>
<li><a href="#ニューラル言語モデル" id="toc-ニューラル言語モデル"><span class="toc-section-number">5</span> ニューラル言語モデル</a>
<ul>
<li><a href="#マルチラベル分類" id="toc-マルチラベル分類"><span class="toc-section-number">5.1</span> マルチラベル分類</a></li>
</ul></li>
<li><a href="#自然言語ベクトル抽出によるデータ可視化と類似度評価" id="toc-自然言語ベクトル抽出によるデータ可視化と類似度評価"><span class="toc-section-number">6</span> 自然言語ベクトル抽出によるデータ可視化と類似度評価</a></li>
</ul>
</div>
<h1 data-number="1" id="自然言語処理"><span class="header-section-number">1</span> 自然言語処理</h1>
<p>非構造化データの分析手法として,前章では画像データを扱いました. 本章では, テキストデータを分析する手法である<strong>自然言語処理 (NPL; Natural Language Processing)</strong>について解説します.</p>
<h1 data-number="2" id="トークン化と形態素解析"><span class="header-section-number">2</span> トークン化と形態素解析</h1>
<p>自然言語処理にも様々な手法がありますが,基本的には元の文章データをそのまま使うことはなく,文章を適切な単位に分割するなどの前処理を施します. これを<strong>トークン化</strong>といい,代表的な手法としては<strong>単語分割</strong>,<strong>品詞分割</strong>,<strong>文字分割</strong>,<strong>サブワード分割</strong>などがあります.</p>
<p>単語分割に関して元の文章が英語などの単語ごとに区切られている文章であれば</p>
<p><code>"This is a pen"</code> → <code>"This","is","a","pen"</code></p>
<p>という風に簡単に分割できますが,日本語のように単語間に空白などがない言語では特別な処理が必要になります.</p>
<p>また,英語であっても, 代名詞 <code>'This'</code>, 動詞 <code>is</code>, 冠詞 <code>"a"</code>, 名詞 <code>"pen"</code>などのように品詞分割するためには特別な処理が必要になります.</p>
<p>このような処理を施すために文章を最小の意味を持つ言語単位(<strong>形態素</strong>)に分割し,それぞれの品詞を識別処理を
<strong>形態素解析(Morphological Analysis)</strong>といいます.</p>
<div class="note">
<p>形態素解析の基本的な手順は以下のようになります.</p>
<ul>
<li><h2 id="データの作成">データの作成</h2></li>
</ul>
<p>PDFやホームページなどから直接処理することも可能ですが, <code>.txt</code>や<code>.csv</code>,<code>.xlm</code>などの構造化データに変換しておくと処理が楽になります.</p>
<p>入力例文: <code>"太陽が昇る東の空が美しい"</code></p>
<ul>
<li><h2 id="テキストの前処理">テキストの前処理</h2></li>
</ul>
<p>不要なスペースや記号を除去しテキストを処理しやすい形に整理します.</p>
<ul>
<li><h2 id="形態素への分割">形態素への分割</h2></li>
</ul>
<p>文章を形態素と呼ばれる最小単位に分割します.</p>
<p><code>"太陽","が","昇る","東","の","空","が","美しい"</code></p>
<ul>
<li><h2 id="品詞のタグ付け">品詞のタグ付け</h2></li>
</ul>
<p>分割された形態素に品詞情報を付与します.</p>
<p><code>"太陽"</code>: 名詞</p>
<p><code>"が"</code>: 助詞</p>
<p><code>"昇る"</code>: 動詞</p>
<p><code>"東"</code>: 名詞</p>
<p><code>"の"</code>: 助詞</p>
<p><code>"空"</code>: 名詞</p>
<p><code>"が"</code>: 助詞</p>
<p><code>"美しい"</code>: 形容詞</p>
</div>
<p>日本語の形態素解析用のPythonパッケージとして有名なものには,<code>Mecab</code>や<code>Janome</code>があります.</p>
<div class="note">
<ul>
<li><code>Mecab</code>
<ul>
<li>日本語のオープンソース形態素解析システム</li>
<li>pythonのライブラリとしてはmecab-python3</li>
</ul></li>
<li><code>janome</code>
<ul>
<li>Pythonで書かれた日本語形態素解析器</li>
<li>MecabよりインストールなどがPythonに最適化されており,インストールなどが楽</li>
<li>ただし,遅いので大規模な処理では余り使われない</li>
</ul></li>
</ul>
<p>本資料では,以下形態素解析用ライブラリとして<code>Mecab</code>を利用するので</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">pip</span> install mecab-python3</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="ex">pip</span> install unidic-lite</span></code></pre></div>
<p>を実行してインストールしておきましょう(<code>unidic-lite</code>は形態素解析用の日本語の辞書です.)</p>
</div>
<p>形態素解析の練習用のデータとして<a href="https://www.cuc.ac.jp/about_cuc/outline/spirits/index.html">千葉商科大学のHPに掲載されている理念</a>を利用してみます. テキスト部分をコピーして,<code>UTF-8</code>の<code>cuc.txt</code>ファイルを作成し,<code>data</code>フォルダに保存しましょう.</p>
<p><img src="/images/Ch15-WordCloud1.png" /></p>
<p>まずは,テキストデータを読み込んでみます. <code>pandas</code>などを利用して読み込むこともできますが,ここではPythonの組み込みメソッドである,<code>open()</code>でファイルを開き,<code>read()</code>で読み込み,<code>close()</code>でファイルを閉じます.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co"># ファイルを開く</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>f <span class="op">=</span> <span class="bu">open</span>(<span class="st">&#39;data/cuc.txt&#39;</span>, encoding<span class="op">=</span><span class="st">&#39;utf-8&#39;</span>)</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="co"># ファイルを読み込む</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>raw <span class="op">=</span> f.read()</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="co"># ファイルを閉じる</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>f.close()</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(raw)</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="co">建学の精神と理念:有用の学術と商業道徳の涵養</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="co">巣鴨高等商業学校を創設した文学博士遠藤隆吉は、自らの志とする学府創立に当たり、「建学の趣旨」を次のように述べています。</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="co">創設者 文学博士 遠藤 隆吉</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="co">...</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p><code>pandas</code>などではこれらの手順を一度にまとめて行ってくれていましたが,この手法で行う場合は<code>close()</code>を利用してファイルを閉じることを忘れないようにしましょう. 忘れた場合,システムのリソースが無駄に占有され,他のプログラムやソフトがファイルにアクセスできなくなるなどの問題が生じる可能性があります. 今回はファイルを読み込むだけですが,間に適用される処理が多くなるほど,<code>open()</code>と<code>close()</code>の間の対応関係が分かりづらくなります.</p>
<p>そこでこのように手動で<code>close()</code>を呼ぶ代わりに,Pythonでは<code>with文</code>を使うことで,インデントブロックを抜けた時に自動的にファイルを閉じるようにできます.<code>with文</code>を使うことでコードがよりシンプルかつエラーに強くなりますので,一般的にはwith文の使用が推奨されます.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="cf">with</span> <span class="bu">open</span>(<span class="st">&#39;data/cuc.txt&#39;</span>, encoding<span class="op">=</span><span class="st">&#39;utf-8&#39;</span>) <span class="im">as</span> f:</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    raw <span class="op">=</span> f.read()</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(raw)</span></code></pre></div>
<p>続いて形態素解析の前の前処理を行います.
(以下の形態素解析のコードなどは<a href="https://rinsaka.com/python/nltk/05-wordcloud.html">神戸学院大学 林坂ゼミの資料</a>を参考にしました.)</p>
<p>前処理として, テキストファイルの改行,タブ,などを削除するための関数を用意します.
文字列を正規表現操作するための標準ライブラリ<code>re</code>を<code>import</code>する必要があるので注意して下さい.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> re <span class="co">#正規表現操作のための標準ライブラリ</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> strip_CRLF_from_Text(text):</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;テキストファイルの改行,タブを削除し,形態素解析を実行</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="co">    改行前後が日本語文字の場合は改行を削除する．</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="co">    それ以外はスペースに置換する．</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="co">    &quot;&quot;&quot;</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 改行前後の文字が日本語文字の場合は改行を削除する</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    plaintext <span class="op">=</span> re.sub(<span class="st">&#39;([ぁ-んー]+|[ァ-ンー]+|[</span><span class="ch">\\</span><span class="st">u4e00-</span><span class="ch">\\</span><span class="st">u9FFF]+|[ぁ-んァ-ンー</span><span class="ch">\\</span><span class="st">u4e00-</span><span class="ch">\\</span><span class="st">u9FFF]+)(</span><span class="ch">\n</span><span class="st">)([ぁ-んー]+|[ァ-ンー]+|[</span><span class="ch">\\</span><span class="st">u4e00-</span><span class="ch">\\</span><span class="st">u9FFF]+|[ぁ-んァ-ンー</span><span class="ch">\\</span><span class="st">u4e00-</span><span class="ch">\\</span><span class="st">u9FFF]+)&#39;</span>,</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>                       <span class="vs">r&#39;\1\3&#39;</span>,</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>                       text)</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 残った改行とタブ記号はスペースに置換する</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>    plaintext <span class="op">=</span> plaintext.replace(<span class="st">&#39;</span><span class="ch">\n</span><span class="st">&#39;</span>, <span class="st">&#39; &#39;</span>).replace(<span class="st">&#39;</span><span class="ch">\t</span><span class="st">&#39;</span>, <span class="st">&#39; &#39;</span>)</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> plaintext</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>text <span class="op">=</span> strip_CRLF_from_Text(raw)</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(text)</span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a><span class="co">建学の精神と理念:有用の学術と商業道徳の涵養  巣鴨高等商業学校を創設した文学博士遠藤隆吉は...</span></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>改行やタブが消えて, 文毎にスペースで区切られた文章が作成されました. 日本語の文章の途中で改行がある場合には,改行前後を結合して1文としてまとめられていることを確認しましょう.</p>
<p>続いて,前処理が施された文章を<code>mecab</code>を利用して形態素解析を実施してみます.</p>
<p>抽出する品詞は<code>word_types</code>に<code>[String]</code>で指定します.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> MeCab <span class="im">as</span> mc</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> mecab_wakati(text,word_types <span class="op">=</span> [<span class="st">&quot;名詞&quot;</span>,<span class="st">&quot;動詞&quot;</span>,<span class="st">&quot;形容詞&quot;</span>,<span class="st">&quot;副詞&quot;</span>]):</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">#分かち書き</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    t <span class="op">=</span> mc.Tagger()</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">#word_types = [String]で指定 (&quot;名詞&quot;,&quot;動詞&quot;,&quot;形容詞&quot;,&quot;副詞&quot;)</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    node <span class="op">=</span> t.parseToNode(text)</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>    sent <span class="op">=</span> <span class="st">&quot;&quot;</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>    noun <span class="op">=</span> [x <span class="cf">for</span> x <span class="kw">in</span> word_types <span class="cf">if</span> x <span class="op">==</span> <span class="st">&quot;名詞&quot;</span>]</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>    others <span class="op">=</span> [x <span class="cf">for</span> x <span class="kw">in</span> word_types <span class="cf">if</span> x <span class="kw">in</span> [ <span class="st">&quot;動詞&quot;</span>, <span class="st">&quot;形容詞&quot;</span>,<span class="st">&quot;副詞&quot;</span>]]</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span>(node):</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> node.surface <span class="op">!=</span> <span class="st">&quot;&quot;</span>:  <span class="co"># ヘッダとフッタを除外</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>            word_type <span class="op">=</span> node.feature.split(<span class="st">&quot;,&quot;</span>)[<span class="dv">0</span>]</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> word_type <span class="kw">in</span> noun:</span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>                 sent <span class="op">+=</span> node.surface <span class="op">+</span> <span class="st">&quot; &quot;</span> <span class="co"># node.surface は「表層形」</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> word_type <span class="kw">in</span> others:</span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>                sent <span class="op">+=</span> node.feature.split(<span class="st">&quot;,&quot;</span>)[<span class="dv">6</span>] <span class="op">+</span> <span class="st">&quot; &quot;</span> <span class="co"># node.feature.split(&quot;,&quot;)[6] は形態素解析結果の「原型」</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>        node <span class="op">=</span> node.<span class="bu">next</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> node <span class="kw">is</span> <span class="va">None</span>:</span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> sent</span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>sent <span class="op">=</span> mecab_wakati(text)</span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(sent)</span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a><span class="co">建学 精神 理念 有用 学術 商業 道徳 涵養 巣鴨 商業 学校 創設 し...</span></span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-29"><a href="#cb5-29" aria-hidden="true" tabindex="-1"></a><span class="co">#動詞だけ抽出</span></span>
<span id="cb5-30"><a href="#cb5-30" aria-hidden="true" tabindex="-1"></a>sent <span class="op">=</span> mecab_wakati(text,[<span class="st">&#39;動詞&#39;</span>])</span>
<span id="cb5-31"><a href="#cb5-31" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;-&#39;</span><span class="op">*</span><span class="dv">10</span> <span class="op">+</span> <span class="st">&#39;</span><span class="ch">\n</span><span class="st">&#39;</span>, sent)</span>
<span id="cb5-32"><a href="#cb5-32" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb5-33"><a href="#cb5-33" aria-hidden="true" tabindex="-1"></a><span class="co"> スル スル アタル ノベル イル マサル</span></span>
<span id="cb5-34"><a href="#cb5-34" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>以上で文章の形態素解析は完了です.</p>
<h1 data-number="3" id="wordcloud"><span class="header-section-number">3</span> WordCloud</h1>
<p>広く使われる文章の可視化手法として,文章中に利用されている単語の頻度などを基準に文字の色や大きさを変える<code>WordCloud</code>があります. 先ほど形態素解析した文章を利用して,<code>WordCloud</code>を作成してみましょう.</p>
<p>まず日本語を表示するためにフォントの設定を行います.</p>
<p><code>Windwos</code>と<code>Mac</code>で異なりますので,自身の環境に併せて<code>コメントアウト</code>を外して下さい.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co"># フォントの保存先を指定する（環境によって書き換えてください）</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>font_path <span class="op">=</span> <span class="st">&quot;C:</span><span class="ch">\\</span><span class="st">WINDOWS</span><span class="ch">\\</span><span class="st">FONTS</span><span class="ch">\\</span><span class="st">MEIRYO.TTC&quot;</span>    <span class="co">## Windows 版はこちら</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="co"># font_path = &quot;/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc&quot;  ## Mac 版はこちら</span></span></code></pre></div>
<p><code>wordcloud</code>を<code>import</code>して,画像を生成します.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ex">pip</span> install wordcloud</span></code></pre></div>
<p>をしてから以下を実行しましょう.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> wordcloud <span class="im">import</span> WordCloud</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>wc <span class="op">=</span> WordCloud(width<span class="op">=</span><span class="dv">1000</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>              ,height<span class="op">=</span><span class="dv">400</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>              ,background_color<span class="op">=</span><span class="st">&#39;white&#39;</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>              , regexp<span class="op">=</span><span class="vs">r&quot;[\w&#39;]+&quot;</span> <span class="co">#一文字を表示</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>              ,font_path<span class="op">=</span>font_path).generate(sent)</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>wc.to_file(<span class="st">&quot;result/fig/cuc.png&quot;</span>)</span></code></pre></div>
<p>指定した保存先(<code>"result/fig/cuc.png"</code>)に以下の画像が保存されているはずです.</p>
<p><img src="/images/ch15-WordCloud2.png" /></p>
<p>WordCloudでは登場する用語の頻度で大きさや色などが強調されています. 千葉商科大学の理念では,実業,道徳,などが強調されていることが分かります.</p>
<p>WordCloudを作成する場合<code>'こと'</code>,<code>'もの'</code>などどのような文章にも頻出する用語は削除した方が望ましいです.
その場合,<code>stopwords</code>に記述した単語が除外されるので,除外しましょう.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>stopwords <span class="op">=</span> [<span class="st">&#39;こと&#39;</span>,<span class="st">&#39;もの&#39;</span>,<span class="st">&#39;ため&#39;</span>]</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>wc <span class="op">=</span> WordCloud(width<span class="op">=</span><span class="dv">1000</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>              ,height<span class="op">=</span><span class="dv">400</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>              ,background_color<span class="op">=</span><span class="st">&#39;white&#39;</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>              , regexp<span class="op">=</span><span class="vs">r&quot;[\w&#39;]+&quot;</span> <span class="co">#一文字を表示</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>              ,font_path<span class="op">=</span>font_path</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>              ,stopwords<span class="op">=</span>stopwords).generate(sent)</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>wc.to_file(<span class="st">&quot;result/fig/cuc2.png&quot;</span>)</span></code></pre></div>
<p><img src="/images/ch15-WordCloud3.png" /></p>
<p>これまでのコードを整理すると以下のようになります.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> wordcloud <span class="im">import</span> WordCloud</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> re <span class="co">#正規表現操作のための標準ライブラリ</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> MeCab <span class="im">as</span> mc</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> strip_CRLF_from_Text(text):</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;テキストファイルの改行,タブを削除し,形態素解析を実行</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="co">    改行前後が日本語文字の場合は改行を削除する．</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="co">    それ以外はスペースに置換する．</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="co">    &quot;&quot;&quot;</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 改行前後の文字が日本語文字の場合は改行を削除する</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>    plaintext <span class="op">=</span> re.sub(<span class="st">&#39;([ぁ-んー]+|[ァ-ンー]+|[</span><span class="ch">\\</span><span class="st">u4e00-</span><span class="ch">\\</span><span class="st">u9FFF]+|[ぁ-んァ-ンー</span><span class="ch">\\</span><span class="st">u4e00-</span><span class="ch">\\</span><span class="st">u9FFF]+)(</span><span class="ch">\n</span><span class="st">)([ぁ-んー]+|[ァ-ンー]+|[</span><span class="ch">\\</span><span class="st">u4e00-</span><span class="ch">\\</span><span class="st">u9FFF]+|[ぁ-んァ-ンー</span><span class="ch">\\</span><span class="st">u4e00-</span><span class="ch">\\</span><span class="st">u9FFF]+)&#39;</span>,</span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>                       <span class="vs">r&#39;\1\3&#39;</span>,</span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>                       text)</span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 残った改行とタブ記号はスペースに置換する</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>    plaintext <span class="op">=</span> plaintext.replace(<span class="st">&#39;</span><span class="ch">\n</span><span class="st">&#39;</span>, <span class="st">&#39; &#39;</span>).replace(<span class="st">&#39;</span><span class="ch">\t</span><span class="st">&#39;</span>, <span class="st">&#39; &#39;</span>)</span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> plaintext</span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> mecab_wakati(text,word_types <span class="op">=</span> [<span class="st">&quot;名詞&quot;</span>,<span class="st">&quot;動詞&quot;</span>,<span class="st">&quot;形容詞&quot;</span>,<span class="st">&quot;副詞&quot;</span>]):</span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a>    <span class="co">#分かち書き</span></span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a>    t <span class="op">=</span> mc.Tagger()</span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a>    <span class="co">#word_types = [String]で指定 (&quot;名詞&quot;,&quot;動詞&quot;,&quot;形容詞&quot;,&quot;副詞&quot;)</span></span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a>    node <span class="op">=</span> t.parseToNode(text)</span>
<span id="cb10-23"><a href="#cb10-23" aria-hidden="true" tabindex="-1"></a>    sent <span class="op">=</span> <span class="st">&quot;&quot;</span></span>
<span id="cb10-24"><a href="#cb10-24" aria-hidden="true" tabindex="-1"></a>    noun <span class="op">=</span> [x <span class="cf">for</span> x <span class="kw">in</span> word_types <span class="cf">if</span> x <span class="op">==</span> <span class="st">&quot;名詞&quot;</span>]</span>
<span id="cb10-25"><a href="#cb10-25" aria-hidden="true" tabindex="-1"></a>    others <span class="op">=</span> [x <span class="cf">for</span> x <span class="kw">in</span> word_types <span class="cf">if</span> x <span class="kw">in</span> [ <span class="st">&quot;動詞&quot;</span>, <span class="st">&quot;形容詞&quot;</span>,<span class="st">&quot;副詞&quot;</span>]]</span>
<span id="cb10-26"><a href="#cb10-26" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span>(node):</span>
<span id="cb10-27"><a href="#cb10-27" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> node.surface <span class="op">!=</span> <span class="st">&quot;&quot;</span>:  <span class="co"># ヘッダとフッタを除外</span></span>
<span id="cb10-28"><a href="#cb10-28" aria-hidden="true" tabindex="-1"></a>            word_type <span class="op">=</span> node.feature.split(<span class="st">&quot;,&quot;</span>)[<span class="dv">0</span>]</span>
<span id="cb10-29"><a href="#cb10-29" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> word_type <span class="kw">in</span> noun:</span>
<span id="cb10-30"><a href="#cb10-30" aria-hidden="true" tabindex="-1"></a>                 sent <span class="op">+=</span> node.surface <span class="op">+</span> <span class="st">&quot; &quot;</span> <span class="co"># node.surface は「表層形」</span></span>
<span id="cb10-31"><a href="#cb10-31" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> word_type <span class="kw">in</span> others:</span>
<span id="cb10-32"><a href="#cb10-32" aria-hidden="true" tabindex="-1"></a>                sent <span class="op">+=</span> node.feature.split(<span class="st">&quot;,&quot;</span>)[<span class="dv">6</span>] <span class="op">+</span> <span class="st">&quot; &quot;</span> <span class="co"># node.feature.split(&quot;,&quot;)[6] は形態素解析結果の「原型」</span></span>
<span id="cb10-33"><a href="#cb10-33" aria-hidden="true" tabindex="-1"></a>        node <span class="op">=</span> node.<span class="bu">next</span></span>
<span id="cb10-34"><a href="#cb10-34" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> node <span class="kw">is</span> <span class="va">None</span>:</span>
<span id="cb10-35"><a href="#cb10-35" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span></span>
<span id="cb10-36"><a href="#cb10-36" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> sent</span>
<span id="cb10-37"><a href="#cb10-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-38"><a href="#cb10-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-39"><a href="#cb10-39" aria-hidden="true" tabindex="-1"></a><span class="cf">with</span> <span class="bu">open</span>(<span class="st">&#39;data/cuc.txt&#39;</span>, encoding<span class="op">=</span><span class="st">&#39;utf-8&#39;</span>) <span class="im">as</span> f:</span>
<span id="cb10-40"><a href="#cb10-40" aria-hidden="true" tabindex="-1"></a>    raw <span class="op">=</span> f.read()</span>
<span id="cb10-41"><a href="#cb10-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-42"><a href="#cb10-42" aria-hidden="true" tabindex="-1"></a>text <span class="op">=</span> strip_CRLF_from_Text(raw)</span>
<span id="cb10-43"><a href="#cb10-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-44"><a href="#cb10-44" aria-hidden="true" tabindex="-1"></a><span class="co">#名詞だけ抽出</span></span>
<span id="cb10-45"><a href="#cb10-45" aria-hidden="true" tabindex="-1"></a>sent <span class="op">=</span> mecab_wakati(text,[<span class="st">&#39;名詞&#39;</span>])</span>
<span id="cb10-46"><a href="#cb10-46" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-47"><a href="#cb10-47" aria-hidden="true" tabindex="-1"></a><span class="co"># WordCloud</span></span>
<span id="cb10-48"><a href="#cb10-48" aria-hidden="true" tabindex="-1"></a><span class="co"># フォントの保存先を指定する（環境によって書き換えてください）</span></span>
<span id="cb10-49"><a href="#cb10-49" aria-hidden="true" tabindex="-1"></a>font_path <span class="op">=</span> <span class="st">&quot;C:</span><span class="ch">\\</span><span class="st">WINDOWS</span><span class="ch">\\</span><span class="st">FONTS</span><span class="ch">\\</span><span class="st">MEIRYO.TTC&quot;</span>    <span class="co">## Windows 版はこちら</span></span>
<span id="cb10-50"><a href="#cb10-50" aria-hidden="true" tabindex="-1"></a><span class="co">#font_path = &quot;/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc&quot;  ## Mac 版はこちら</span></span>
<span id="cb10-51"><a href="#cb10-51" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-52"><a href="#cb10-52" aria-hidden="true" tabindex="-1"></a>stopwords <span class="op">=</span> [<span class="st">&#39;こと&#39;</span>,<span class="st">&#39;もの&#39;</span>,<span class="st">&#39;ため&#39;</span>]</span>
<span id="cb10-53"><a href="#cb10-53" aria-hidden="true" tabindex="-1"></a>wc <span class="op">=</span> WordCloud(width<span class="op">=</span><span class="dv">1000</span></span>
<span id="cb10-54"><a href="#cb10-54" aria-hidden="true" tabindex="-1"></a>              ,height<span class="op">=</span><span class="dv">400</span></span>
<span id="cb10-55"><a href="#cb10-55" aria-hidden="true" tabindex="-1"></a>              ,background_color<span class="op">=</span><span class="st">&#39;white&#39;</span></span>
<span id="cb10-56"><a href="#cb10-56" aria-hidden="true" tabindex="-1"></a>              , regexp<span class="op">=</span><span class="vs">r&quot;[\w&#39;]+&quot;</span> <span class="co">#一文字を表示</span></span>
<span id="cb10-57"><a href="#cb10-57" aria-hidden="true" tabindex="-1"></a>              ,font_path<span class="op">=</span>font_path</span>
<span id="cb10-58"><a href="#cb10-58" aria-hidden="true" tabindex="-1"></a>              ,stopwords<span class="op">=</span>stopwords).generate(sent)</span>
<span id="cb10-59"><a href="#cb10-59" aria-hidden="true" tabindex="-1"></a>wc.to_file(<span class="st">&quot;result/fig/cuc2.png&quot;</span>)</span></code></pre></div>
<h1 data-number="4" id="トピックモデル"><span class="header-section-number">4</span> トピックモデル</h1>
<p>続いて, テキスト文書の集合から潜在的なトピック(話題)を抽出するために広く利用される古典的手法である,トピックモデルを利用してみましょう.</p>
<p>トピックモデルでは単語の分布を使って,文章が何について話しているかを抽出します.ただし,出力は単語の集合で表されるため,そのトピックが何に関する話題かは利用者が判断する必要があります.</p>
<pre><code>- 例: トピックA: ｢経済｣｢市場｣｢投資｣ ← 経済に関するトピック
- 例: トピックB: ｢ねこ｣｢いぬ｣｢ペット｣ ← ペットに関するトピック と解釈できる</code></pre>
<p>トピックモデルにもいくつかの手法がありますが,最も一般的な実装手法の一つにLDA（Latent Dirichlet Allocation: 潜在的ディリクレ配分法）があります. LDA以外にもPLSA（Probabilistic Latent Semantic Analysis）などがあります.</p>
<p>LDAでは各文章をトピックの混合分布として表現します.</p>
<pre><code>-   例: 文章1: トピックA 0.5, トピックB 0.4, トピックD 0.1
-   例: 文章2: トピックA 0.6, トピックE 0.3</code></pre>
<p>LDAでは,各文書のトピック分布と各トピックの単語分布にディリクレ分布を使用します.ディリクレ分布は,確率の分布に対する分布（事前分布）として使われ,特にトピックの混合率が異なる多様な文書集合に対応できます.この過程では「ギブスサンプリング」や「変分ベイズ法」といった推論手法を使い,文書全体のトピックと単語の分布が収束するまで反復的に計算されます.ギブスサンプリングや事後分布,事前分布などに関しては, 一般化線形モデルの章で扱っています.</p>
<h2 data-number="4.1" id="xtwitter-apiを用いたデータの取得"><span class="header-section-number">4.1</span> X(Twitter) APIを用いたデータの取得</h2>
<p>自然言語解析では,ワードクラウドの事例のように,まとまった文章を分析する場合もありますが,X(旧:Twitter)のつぶやきのように,短い文章の集合を扱う場合もあります. ここでは, TwitterのAPIを利用して,つぶやきを取得し,そのつぶやきに関して分析してみましょう.</p>
<div class="note">
<p><code>API（Application Programming Interface）</code>とは,ソフトウェア同士がデータや機能をやりとりするための「窓口」のようなものです.開発者はAPIを通じて,他のサービスやアプリケーションの機能を利用できるため,複雑な処理を簡単に実行したり,他のサービスと連携することができます.</p>
<p>APIの利用に関わる主な通信技術には, <code>HTTP/HTTPSプロトコル</code>, <code>REST（Representational State Transfer）</code>, <code>SOAP（Simple Object Access Protocol）</code>,および<code>WebSocket</code>などがあり,それぞれ異なる目的や特徴を持っています.</p>
</div>
<p><code>X.API</code>は<code>REST</code>アーキテクチャで提供されて降りその概要は以下のとおりです.</p>
<div class="note">
<ul>
<li><code>HTTP/HTTPSプロトコル</code></li>
</ul>
<p>APIの通信は通常,ウェブブラウザと同様にHTTPやHTTPSプロトコルを使って行われます.HTTPSは通信を暗号化し,セキュリティを確保するため,多くのAPIで推奨されます.</p>
<ul>
<li><code>REST（Representational State Transfer）</code></li>
</ul>
<p>RESTは,HTTPを利用してリソース（データや機能）にアクセスするための設計原則で,最も広く使われるAPI通信の形式です.REST APIでは,<code>GET</code>,<code>POST</code>,<code>PUT</code>,<code>DELETE</code>などのHTTPメソッドを使ってデータを取得,作成,更新,削除します.シンプルかつ軽量なため,モバイルアプリやWebサービスでの利用に適しています.</p>
<ul>
<li><code>GET</code></li>
</ul>
<p>概要: リソース（データ）の取得に使用される.</p>
<p>例: ユーザー情報を取得する場合,GET /users/123のように送信すると,ユーザーIDが123のデータが返されます.</p>
<p>特徴: サーバー上のデータを変更しない「読み取り専用」操作.</p>
<ul>
<li><code>POST</code></li>
</ul>
<p>概要: 新しいリソースを作成するために使用される.</p>
<p>例: 新しい記事を投稿する場合,POST /articlesで記事データをサーバーに送信すると,新しい記事が作成されます.</p>
<p>特徴: サーバーにデータを送信して新しいエントリを追加する操作.</p>
<ul>
<li><code>PUT</code></li>
</ul>
<p>概要: 既存のリソースを更新するために使用される.</p>
<p>例: 記事の内容を変更する場合,PUT /articles/456で新しいデータを送信し,記事ID456の内容を更新します.</p>
<p>特徴: 指定されたリソース全体を置き換える操作.</p>
<ul>
<li><code>DELETE</code></li>
</ul>
<p>概要: リソースの削除に使用される.</p>
<p>例: 記事を削除する場合,DELETE /articles/456を実行すると,記事ID456が削除されます.</p>
<p>特徴: サーバーからリソースを取り除く操作.</p>
</div>
<p>REST APIでデータをやりとりする際のデータ形式として,<strong><code>JSON（JavaScript Object Notation）</code></strong>が一般的に使用されます.JSONはシンプルで軽量なテキスト形式で,読みやすく,プログラミング言語間の互換性も高いため,多くのAPIで標準的なフォーマットとして採用されています.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="fu">{</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;id&quot;</span><span class="fu">:</span> <span class="dv">123</span><span class="fu">,</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;name&quot;</span><span class="fu">:</span> <span class="st">&quot;John Doe&quot;</span><span class="fu">,</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;email&quot;</span><span class="fu">:</span> <span class="st">&quot;johndoe@example.com&quot;</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="fu">}</span></span></code></pre></div>
<p>これから,<code>X.API</code>にGETメソッドを利用し呟きを取得します.APIから返答されるデータはjsonですが,今回はJSONを直接触らず,これまでに扱ってきた<code>CSV</code>に変換します. APIを操作するためのライブラリ<code>requests</code>をinstallしておきましょう.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="ex">pip</span> install requests</span></code></pre></div>
<p>以下の処理はX APIの無料の範囲で行っていますので,誰でも再現できますが, アカウントの登録など手間が多く,また無料版のAPIでは15分に一回しかリクエストが送れないため,データの取得には最低でも15分かかります.
社長と社名が変わってからAPI機能が物凄く使いにくくなっており,値段も高額になっています.まともに研究で利用しようと思うと月5000ドルのAPI使用料を払う必要があります.2000ドルはこの講義のために払うのが難しいので,月200ドルのBasicプランであれば利用できるアカウントは準備しますが,Basicプランでは<strong>過去7日間の呟きしか取得できない</strong>ので注意しましょう.</p>
<p><img src="/images/ch15-XAPIV2Products.png" /></p>
<p>研究で利用する人以外は完成した<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/tweets.csv">こちらのデータ</a>をダウンロードして利用しましょう.</p>
<p>XのAPIを利用するには,認証トークン(<code>Bearer Token</code>)を発行する必要があります.認証トークンとは<code>X.API</code>にアクセスするための認証情報です.</p>
<p><a href="https://x.com/i/flow/login?input_flow_data=%7B%22requested_variant%22%3A%22eyJyZWRpcmVjdF9hZnRlcl9sb2dpbiI6Imh0dHBzOi8vZGV2ZWxvcGVyLnguY29tL2VuL3BvcnRhbC9wcm9qZWN0cy1hbmQtYXBwcyJ9%22%7D">Xのデベロッパー用ページ</a>からまずはサインアップします.</p>
<p>今回は無料版を利用するので, <code>Sign up for Free Account</code>をクリックしましょう.</p>
<p><img src="/images/ch15-X-sign-up.png" /></p>
<p>利用目的を尋ねられるので,<strong>250文字以上の英文で</strong>回答しましょう. その他のチェックを入れて,次に進みます.</p>
<p><img src="/images/ch15-X-reason.png" /></p>
<p>左のメニューの<code>Dashboard</code>に表示されている<code>Project APP</code>の<code>Keys and Tokens</code>(鍵)ボタンを押します.</p>
<p><img src="/images/ch15-XAPI-Dashbooard.png" /></p>
<p><code>Bearer Token</code>の<code>Regenerate</code>をクリックすると<code>Bearer Token</code>が表示されます. クリップボードにコピーしてどこかに保存しましょう.このトークンは一度しか表示されません.忘れた場合は別のトークンを再生成する必要があるので注意しましょう.</p>
<p><img src="/images/ch15-XAPI-Token.png" /></p>
<p>取得したトークンを利用してプログラムを書いていきます.</p>
<p>まずは認証トークンを設定します.先ほど取得した認証トークンを<code>bearer_token</code>という変数に格納し,API呼び出し時に利用します(<code>YOUR_BEARER_TOKEN</code>の部分を書き換えましょう.)</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> requests <span class="co">#HTTPリクエストを送るためのライブラリです.このライブラリを使ってAPIにアクセスします.</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="co"># 認証トークン</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>bearer_token <span class="op">=</span> <span class="st">&#39;YOUR_BEARER_TOKEN&#39;</span></span></code></pre></div>
<p><code>X.API</code>の「検索」機能にアクセスするためのURLを指定します. ここでは,最近のツイートを取得するエンドポイント<code>search/recent</code>を指定しています. <code>search/recent</code>では直近7日間のつぶやきを取得できます. それ以上過去のつぶやきは<code>Pro</code>アカウントでしか取得することができません.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="co"># Twitter APIのエンドポイントURL</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>search_url <span class="op">=</span> <span class="st">&quot;https://api.x.com/2/tweets/search/recent&quot;</span></span></code></pre></div>
<p>取得対象のキーワード（検索ワード）を指定します.このコードでは「国民民主党」に関するツイートを検索します.一つのプログラムで複数のワードを取得することも可能ですが,<code>X.API</code>の無料版では,<strong>15分に1回しかリクエストが送れない</strong>ため,複数のワードで検索するにはコード内で15分間待機する機能を入れる必要があるので今回は一つだけ検索してみましょう.</p>
<p><code>tweet_count</code>で各検索で取得するツイート数の上限です.無料版のAPI機能では, <strong>1ヶ月あたり100ツイートのみアクセスできる</strong>ので,50にすると1ヶ月に2回アクセスできます. 1度失敗すると数を大幅に減らすか,1ヶ月待つか,課金する必要があるので注意して下さい.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 検索ワード</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>word <span class="op">=</span> <span class="st">&quot;国民民主党&quot;</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>tweet_count <span class="op">=</span> <span class="dv">50</span></span></code></pre></div>
<p>認証トークンをリクエストヘッダーに追加するための関数<code>bearer_oauth()</code>を作成します.この関数で設定されたヘッダーを使って,<code>X.API</code>へのリクエストが認証されます.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> bearer_oauth(r):</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>    r.headers[<span class="st">&quot;Authorization&quot;</span>] <span class="op">=</span> <span class="ss">f&quot;Bearer </span><span class="sc">{</span>bearer_token<span class="sc">}</span><span class="ss">&quot;</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>    r.headers[<span class="st">&quot;User-Agent&quot;</span>] <span class="op">=</span> <span class="st">&quot;v2RecentSearchPython&quot;</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> r</span></code></pre></div>
<p>指定されたURLにGETリクエストを送信し,APIのレスポンスを取得します.<code>response.status_code != 200</code>でAPIからエラーが返された場合,例外を発生させます.正常なレスポンスを受け取った場合,JSON形式でデータを返します.</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> connect_to_endpoint(url, params):</span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>    response <span class="op">=</span> requests.get(url, auth<span class="op">=</span>bearer_oauth, params<span class="op">=</span>params)</span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>    response.encoding <span class="op">=</span> response.apparent_encoding</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> response.status_code <span class="op">!=</span> <span class="dv">200</span>:</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">raise</span> <span class="pp">Exception</span>(response.status_code, response.text)</span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> response.json()</span></code></pre></div>
<p>特定の検索ワードに関するツイートを取得します. 検索パラメータを<code>lang:ja</code>に設定し,日本語のツイートに限定しています.</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> fetch_tweets_for_party(party):</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>    query_params <span class="op">=</span> {</span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;query&quot;</span>: <span class="ss">f&quot;</span><span class="sc">{</span>party<span class="sc">}</span><span class="ss"> lang:ja&quot;</span>,</span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;max_results&quot;</span>: tweet_count</span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a>    json_response <span class="op">=</span> connect_to_endpoint(search_url, query_params)</span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a>    tweets_data <span class="op">=</span> json_response.get(<span class="st">&quot;data&quot;</span>, [])</span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> [tweet[<span class="st">&quot;text&quot;</span>] <span class="cf">for</span> tweet <span class="kw">in</span> tweets_data]</span></code></pre></div>
<p>作成した関数を利用して,つぶやきを取得します.</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main():</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>    all_tweets <span class="op">=</span> []</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f&quot;</span><span class="sc">{</span>word<span class="sc">}</span><span class="ss">のツイートを取得中...&quot;</span>)</span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a>    tweets <span class="op">=</span> fetch_tweets_for_party(word)</span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> tweet <span class="kw">in</span> tweets:</span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a>        all_tweets.append({<span class="st">&quot;Word&quot;</span>: word, <span class="st">&quot;Tweet&quot;</span>: tweet})</span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> all_tweets:</span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true" tabindex="-1"></a>        df <span class="op">=</span> pd.DataFrame(all_tweets)</span>
<span id="cb21-10"><a href="#cb21-10" aria-hidden="true" tabindex="-1"></a>        df.to_csv(<span class="st">&quot;tweets.csv&quot;</span>, index<span class="op">=</span><span class="va">False</span>, encoding<span class="op">=</span><span class="st">&quot;utf-8-sig&quot;</span>)</span>
<span id="cb21-11"><a href="#cb21-11" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;tweets.csvにデータを書き出しました。&quot;</span>)</span>
<span id="cb21-12"><a href="#cb21-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb21-13"><a href="#cb21-13" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;取得したデータがありません。&quot;</span>)</span></code></pre></div>
<p>コード全体は以下のようになります.</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> requests</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a><span class="co"># 認証トークン</span></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a>bearer_token <span class="op">=</span> <span class="st">&#39;YOUR_BEARER_TOKEN&#39;</span></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a><span class="co"># Twitter APIのエンドポイントURL</span></span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true" tabindex="-1"></a>search_url <span class="op">=</span> <span class="st">&quot;https://api.x.com/2/tweets/search/recent&quot;</span></span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true" tabindex="-1"></a><span class="co"># 検索ワード</span></span>
<span id="cb22-11"><a href="#cb22-11" aria-hidden="true" tabindex="-1"></a>word <span class="op">=</span> <span class="st">&quot;国民民主党&quot;</span></span>
<span id="cb22-12"><a href="#cb22-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-13"><a href="#cb22-13" aria-hidden="true" tabindex="-1"></a><span class="co"># 各政党ごとに取得する件数</span></span>
<span id="cb22-14"><a href="#cb22-14" aria-hidden="true" tabindex="-1"></a>tweet_count <span class="op">=</span> <span class="dv">50</span></span>
<span id="cb22-15"><a href="#cb22-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-16"><a href="#cb22-16" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> bearer_oauth(r):</span>
<span id="cb22-17"><a href="#cb22-17" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;</span></span>
<span id="cb22-18"><a href="#cb22-18" aria-hidden="true" tabindex="-1"></a><span class="co">    Method required by bearer token authentication.</span></span>
<span id="cb22-19"><a href="#cb22-19" aria-hidden="true" tabindex="-1"></a><span class="co">    &quot;&quot;&quot;</span></span>
<span id="cb22-20"><a href="#cb22-20" aria-hidden="true" tabindex="-1"></a>    r.headers[<span class="st">&quot;Authorization&quot;</span>] <span class="op">=</span> <span class="ss">f&quot;Bearer </span><span class="sc">{</span>bearer_token<span class="sc">}</span><span class="ss">&quot;</span></span>
<span id="cb22-21"><a href="#cb22-21" aria-hidden="true" tabindex="-1"></a>    r.headers[<span class="st">&quot;User-Agent&quot;</span>] <span class="op">=</span> <span class="st">&quot;v2RecentSearchPython&quot;</span></span>
<span id="cb22-22"><a href="#cb22-22" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> r</span>
<span id="cb22-23"><a href="#cb22-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-24"><a href="#cb22-24" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> connect_to_endpoint(url, params):</span>
<span id="cb22-25"><a href="#cb22-25" aria-hidden="true" tabindex="-1"></a>    response <span class="op">=</span> requests.get(url, auth<span class="op">=</span>bearer_oauth, params<span class="op">=</span>params)</span>
<span id="cb22-26"><a href="#cb22-26" aria-hidden="true" tabindex="-1"></a>    response.encoding <span class="op">=</span> response.apparent_encoding</span>
<span id="cb22-27"><a href="#cb22-27" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> response.status_code <span class="op">!=</span> <span class="dv">200</span>:</span>
<span id="cb22-28"><a href="#cb22-28" aria-hidden="true" tabindex="-1"></a>        <span class="cf">raise</span> <span class="pp">Exception</span>(response.status_code, response.text)</span>
<span id="cb22-29"><a href="#cb22-29" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> response.json()</span>
<span id="cb22-30"><a href="#cb22-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-31"><a href="#cb22-31" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> fetch_tweets_for_party(party):</span>
<span id="cb22-32"><a href="#cb22-32" aria-hidden="true" tabindex="-1"></a>    <span class="co"># パラメータの設定</span></span>
<span id="cb22-33"><a href="#cb22-33" aria-hidden="true" tabindex="-1"></a>    query_params <span class="op">=</span> {</span>
<span id="cb22-34"><a href="#cb22-34" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;query&quot;</span>: <span class="ss">f&quot;</span><span class="sc">{</span>party<span class="sc">}</span><span class="ss"> lang:ja&quot;</span>,</span>
<span id="cb22-35"><a href="#cb22-35" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;max_results&quot;</span>: tweet_count  <span class="co"># APIの制限で一度に取得できるのは最大100件まで</span></span>
<span id="cb22-36"><a href="#cb22-36" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb22-37"><a href="#cb22-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-38"><a href="#cb22-38" aria-hidden="true" tabindex="-1"></a>    <span class="co"># エンドポイントに接続してデータを取得</span></span>
<span id="cb22-39"><a href="#cb22-39" aria-hidden="true" tabindex="-1"></a>    json_response <span class="op">=</span> connect_to_endpoint(search_url, query_params)</span>
<span id="cb22-40"><a href="#cb22-40" aria-hidden="true" tabindex="-1"></a>    tweets_data <span class="op">=</span> json_response.get(<span class="st">&quot;data&quot;</span>, [])</span>
<span id="cb22-41"><a href="#cb22-41" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> [tweet[<span class="st">&quot;text&quot;</span>] <span class="cf">for</span> tweet <span class="kw">in</span> tweets_data]</span>
<span id="cb22-42"><a href="#cb22-42" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-43"><a href="#cb22-43" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main():</span>
<span id="cb22-44"><a href="#cb22-44" aria-hidden="true" tabindex="-1"></a>    all_tweets <span class="op">=</span> []</span>
<span id="cb22-45"><a href="#cb22-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-46"><a href="#cb22-46" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 各政党ごとのツイートを取得してデータを集約</span></span>
<span id="cb22-47"><a href="#cb22-47" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f&quot;</span><span class="sc">{</span>word<span class="sc">}</span><span class="ss">のツイートを取得中...&quot;</span>)</span>
<span id="cb22-48"><a href="#cb22-48" aria-hidden="true" tabindex="-1"></a>    tweets <span class="op">=</span> fetch_tweets_for_party(party)</span>
<span id="cb22-49"><a href="#cb22-49" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> tweet <span class="kw">in</span> tweets:</span>
<span id="cb22-50"><a href="#cb22-50" aria-hidden="true" tabindex="-1"></a>        all_tweets.append({<span class="st">&quot;Word&quot;</span>: party, <span class="st">&quot;Tweet&quot;</span>: tweet})</span>
<span id="cb22-51"><a href="#cb22-51" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-52"><a href="#cb22-52" aria-hidden="true" tabindex="-1"></a>    <span class="co"># データをDataFrameに変換してCSVに書き出し</span></span>
<span id="cb22-53"><a href="#cb22-53" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> all_tweets:</span>
<span id="cb22-54"><a href="#cb22-54" aria-hidden="true" tabindex="-1"></a>        df <span class="op">=</span> pd.DataFrame(all_tweets)</span>
<span id="cb22-55"><a href="#cb22-55" aria-hidden="true" tabindex="-1"></a>        df.to_csv(<span class="st">&quot;tweets.csv&quot;</span>, index<span class="op">=</span><span class="va">False</span>, encoding<span class="op">=</span><span class="st">&quot;utf-8-sig&quot;</span>)</span>
<span id="cb22-56"><a href="#cb22-56" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;tweets.csvにデータを書き出しました。&quot;</span>)</span>
<span id="cb22-57"><a href="#cb22-57" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb22-58"><a href="#cb22-58" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;取得したデータがありません。&quot;</span>)</span>
<span id="cb22-59"><a href="#cb22-59" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-60"><a href="#cb22-60" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">&quot;__main__&quot;</span>:</span>
<span id="cb22-61"><a href="#cb22-61" aria-hidden="true" tabindex="-1"></a>    main()</span></code></pre></div>
<p>このコードで取得した50件の呟きをまとめたデータが<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/tweets.csv">こちら</a>になります.</p>
<p>以下,このデータを利用して分析を行ってみましょう.</p>
<h2 data-number="4.2" id="トピックモデル実践"><span class="header-section-number">4.2</span> トピックモデル実践</h2>
<p>LDAによるトピックモデルを利用するためにライブラリ<code>gensim</code>と,LDAの可視化用のライブラリ<code>pyLDAvis</code>をインストールしましょう.</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="ex">pip</span> install gensim pyLDAvis</span></code></pre></div>
<p><code>import</code>と形態素解析のための関数を定義しておきます.
URLは上手く形態素解析できないので,URLを削除する関数も新たに定義しています.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> MeCab <span class="im">as</span> mc</span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> re</span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> gensim.corpora.dictionary <span class="im">import</span> Dictionary</span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> gensim.models <span class="im">import</span> LdaModel</span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pyLDAvis</span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pyLDAvis.gensim_models <span class="im">as</span> gensimvis</span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pyLDAvis.gensim</span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-10"><a href="#cb24-10" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> strip_CRLF_from_Text(text):</span>
<span id="cb24-11"><a href="#cb24-11" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;テキストファイルの改行,タブを削除し,形態素解析を実行</span></span>
<span id="cb24-12"><a href="#cb24-12" aria-hidden="true" tabindex="-1"></a><span class="co">    改行前後が日本語文字の場合は改行を削除する．</span></span>
<span id="cb24-13"><a href="#cb24-13" aria-hidden="true" tabindex="-1"></a><span class="co">    それ以外はスペースに置換する．</span></span>
<span id="cb24-14"><a href="#cb24-14" aria-hidden="true" tabindex="-1"></a><span class="co">    &quot;&quot;&quot;</span></span>
<span id="cb24-15"><a href="#cb24-15" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 改行前後の文字が日本語文字の場合は改行を削除する</span></span>
<span id="cb24-16"><a href="#cb24-16" aria-hidden="true" tabindex="-1"></a>    plaintext <span class="op">=</span> re.sub(<span class="st">&#39;([ぁ-んー]+|[ァ-ンー]+|[</span><span class="ch">\\</span><span class="st">u4e00-</span><span class="ch">\\</span><span class="st">u9FFF]+|[ぁ-んァ-ンー</span><span class="ch">\\</span><span class="st">u4e00-</span><span class="ch">\\</span><span class="st">u9FFF]+)(</span><span class="ch">\n</span><span class="st">)([ぁ-んー]+|[ァ-ンー]+|[</span><span class="ch">\\</span><span class="st">u4e00-</span><span class="ch">\\</span><span class="st">u9FFF]+|[ぁ-んァ-ンー</span><span class="ch">\\</span><span class="st">u4e00-</span><span class="ch">\\</span><span class="st">u9FFF]+)&#39;</span>,</span>
<span id="cb24-17"><a href="#cb24-17" aria-hidden="true" tabindex="-1"></a>                       <span class="vs">r&#39;\1\3&#39;</span>,</span>
<span id="cb24-18"><a href="#cb24-18" aria-hidden="true" tabindex="-1"></a>                       text)</span>
<span id="cb24-19"><a href="#cb24-19" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 残った改行とタブ記号はスペースに置換する</span></span>
<span id="cb24-20"><a href="#cb24-20" aria-hidden="true" tabindex="-1"></a>    plaintext <span class="op">=</span> plaintext.replace(<span class="st">&#39;</span><span class="ch">\n</span><span class="st">&#39;</span>, <span class="st">&#39; &#39;</span>).replace(<span class="st">&#39;</span><span class="ch">\t</span><span class="st">&#39;</span>, <span class="st">&#39; &#39;</span>)</span>
<span id="cb24-21"><a href="#cb24-21" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> plaintext</span>
<span id="cb24-22"><a href="#cb24-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-23"><a href="#cb24-23" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> mecab_wakati(text,word_types <span class="op">=</span> [<span class="st">&quot;名詞&quot;</span>,<span class="st">&quot;動詞&quot;</span>,<span class="st">&quot;形容詞&quot;</span>,<span class="st">&quot;副詞&quot;</span>]):</span>
<span id="cb24-24"><a href="#cb24-24" aria-hidden="true" tabindex="-1"></a>    <span class="co">#分かち書き</span></span>
<span id="cb24-25"><a href="#cb24-25" aria-hidden="true" tabindex="-1"></a>    t <span class="op">=</span> mc.Tagger()</span>
<span id="cb24-26"><a href="#cb24-26" aria-hidden="true" tabindex="-1"></a>    <span class="co">#word_types = [String]で指定 (&quot;名詞&quot;,&quot;動詞&quot;,&quot;形容詞&quot;,&quot;副詞&quot;)</span></span>
<span id="cb24-27"><a href="#cb24-27" aria-hidden="true" tabindex="-1"></a>    node <span class="op">=</span> t.parseToNode(text)</span>
<span id="cb24-28"><a href="#cb24-28" aria-hidden="true" tabindex="-1"></a>    sent <span class="op">=</span> <span class="st">&quot;&quot;</span></span>
<span id="cb24-29"><a href="#cb24-29" aria-hidden="true" tabindex="-1"></a>    noun <span class="op">=</span> [x <span class="cf">for</span> x <span class="kw">in</span> word_types <span class="cf">if</span> x <span class="op">==</span> <span class="st">&quot;名詞&quot;</span>]</span>
<span id="cb24-30"><a href="#cb24-30" aria-hidden="true" tabindex="-1"></a>    others <span class="op">=</span> [x <span class="cf">for</span> x <span class="kw">in</span> word_types <span class="cf">if</span> x <span class="kw">in</span> [ <span class="st">&quot;動詞&quot;</span>, <span class="st">&quot;形容詞&quot;</span>,<span class="st">&quot;副詞&quot;</span>]]</span>
<span id="cb24-31"><a href="#cb24-31" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span>(node):</span>
<span id="cb24-32"><a href="#cb24-32" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> node.surface <span class="op">!=</span> <span class="st">&quot;&quot;</span>:  <span class="co"># ヘッダとフッタを除外</span></span>
<span id="cb24-33"><a href="#cb24-33" aria-hidden="true" tabindex="-1"></a>            word_type <span class="op">=</span> node.feature.split(<span class="st">&quot;,&quot;</span>)[<span class="dv">0</span>]</span>
<span id="cb24-34"><a href="#cb24-34" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> word_type <span class="kw">in</span> noun:</span>
<span id="cb24-35"><a href="#cb24-35" aria-hidden="true" tabindex="-1"></a>                 sent <span class="op">+=</span> node.surface <span class="op">+</span> <span class="st">&quot; &quot;</span> <span class="co"># node.surface は「表層形」</span></span>
<span id="cb24-36"><a href="#cb24-36" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> word_type <span class="kw">in</span> others:</span>
<span id="cb24-37"><a href="#cb24-37" aria-hidden="true" tabindex="-1"></a>                sent <span class="op">+=</span> node.feature.split(<span class="st">&quot;,&quot;</span>)[<span class="dv">6</span>] <span class="op">+</span> <span class="st">&quot; &quot;</span> <span class="co"># node.feature.split(&quot;,&quot;)[6] は形態素解析結果の「原型」</span></span>
<span id="cb24-38"><a href="#cb24-38" aria-hidden="true" tabindex="-1"></a>        node <span class="op">=</span> node.<span class="bu">next</span></span>
<span id="cb24-39"><a href="#cb24-39" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> node <span class="kw">is</span> <span class="va">None</span>:</span>
<span id="cb24-40"><a href="#cb24-40" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span></span>
<span id="cb24-41"><a href="#cb24-41" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> sent</span>
<span id="cb24-42"><a href="#cb24-42" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-43"><a href="#cb24-43" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> remove_urls(text):</span>
<span id="cb24-44"><a href="#cb24-44" aria-hidden="true" tabindex="-1"></a>    <span class="co"># URLを検出する正規表現パターン</span></span>
<span id="cb24-45"><a href="#cb24-45" aria-hidden="true" tabindex="-1"></a>    url_pattern <span class="op">=</span> <span class="vs">r&#39;http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&amp;+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+&#39;</span></span>
<span id="cb24-46"><a href="#cb24-46" aria-hidden="true" tabindex="-1"></a>    <span class="co"># URLを空文字に置換して除外</span></span>
<span id="cb24-47"><a href="#cb24-47" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> re.sub(url_pattern, <span class="st">&#39;&#39;</span>, text)</span></code></pre></div>
<p>データを読み込みます(このデータを取得した次の日に国民民主党の党首の不倫騒動があったので,そのつぶやきが取れていれば面白かったのですが,残念です.)</p>
<p>トークナイズ(形態素解析),と削除文字の指定,削除までをまとめて行います. ここで,指定している削除文字は一度結果を見たあとで追加したものです.実際の分析では,結果とコードを何往復かして,調整する作業が必要になります.</p>
<p>形態素解析の前に<code>remove_urls()</code>を適用していることに注意して下さい.</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="co">#データの読み込み</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/tweets.csv&#39;</span>)</span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a><span class="co">#国民民主党のリアクションシートだけのデータを作る</span></span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a>akagi <span class="op">=</span> df[<span class="st">&#39;Tweet&#39;</span>]</span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true" tabindex="-1"></a><span class="co">#トークナイズ</span></span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true" tabindex="-1"></a>txt <span class="op">=</span> [mecab_wakati(strip_CRLF_from_Text(remove_urls(x)),[<span class="st">&quot;名詞&quot;</span>,<span class="st">&quot;動詞&quot;</span>]).split(<span class="st">&#39; &#39;</span>) <span class="cf">for</span> x <span class="kw">in</span> akagi]</span>
<span id="cb25-9"><a href="#cb25-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-10"><a href="#cb25-10" aria-hidden="true" tabindex="-1"></a><span class="co">#削除文字の指定</span></span>
<span id="cb25-11"><a href="#cb25-11" aria-hidden="true" tabindex="-1"></a>stopwords <span class="op">=</span> [<span class="st">&#39;オモウ&#39;</span>,<span class="st">&#39;イウ&#39;</span>,<span class="st">&#39;イル&#39;</span>,<span class="st">&#39;アル&#39;</span>,<span class="st">&#39;こと&#39;</span>]</span>
<span id="cb25-12"><a href="#cb25-12" aria-hidden="true" tabindex="-1"></a>txt <span class="op">=</span> [[x <span class="cf">for</span> x <span class="kw">in</span> t <span class="cf">if</span> x <span class="kw">not</span> <span class="kw">in</span> stopwords] <span class="cf">for</span> t <span class="kw">in</span> txt]</span></code></pre></div>
<p>前回扱った｢千葉商科大学の理念｣は単一のテキストデータでしたが,今回の分析の対象は50件のつぶやきです. このような複数のテキストを扱う際には,前処理として<strong>出現頻度による単語の削除</strong>がよく用いられます. 殆ど全てのテキストに出てくるような単語(数字や副詞などが多い)は特徴を抽出する際には役に立たないので削除したほうが良い場合があります. また,反対に出現が非常に稀な単語,造語や個人名なども削除したほうがいい場合があります.</p>
<p>実際の分析では,どの程度の頻度を基準とするかを結果を見ながら調整する必要がありますが,今回は練習なので<code>2文書未満にしか出現しない単語</code>と,<code>全体の50%以上に出現する単語</code>を削除しています.</p>
<p>実装は<code>dictionary</code>クラスの<code>filter_extremes()</code>メソッドを利用しています.</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="co">#辞書の作成</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a>dictionary <span class="op">=</span> Dictionary(txt)</span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="co">#出現がx文書に満たない単語と、y%以上の文書に出現する単語を極端と見做し削除する</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span><span class="dv">2</span></span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span><span class="fl">0.5</span></span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a>dictionary.filter_extremes(no_below<span class="op">=</span>x,no_above<span class="op">=</span>y)</span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a><span class="co"># LdaModelが読み込めるBoW形式に変換</span></span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true" tabindex="-1"></a>corpus <span class="op">=</span> [dictionary.doc2bow(x) <span class="cf">for</span> x <span class="kw">in</span> txt]</span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-10"><a href="#cb26-10" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&quot;Number of unique tokens: </span><span class="sc">{</span><span class="bu">len</span>(dictionary)<span class="sc">}</span><span class="ss">&quot;</span>)</span>
<span id="cb26-11"><a href="#cb26-11" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&quot;Number of documents: </span><span class="sc">{</span><span class="bu">len</span>(corpus)<span class="sc">}</span><span class="ss">&quot;</span>)</span>
<span id="cb26-12"><a href="#cb26-12" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb26-13"><a href="#cb26-13" aria-hidden="true" tabindex="-1"></a><span class="co">Number of unique tokens: 200</span></span>
<span id="cb26-14"><a href="#cb26-14" aria-hidden="true" tabindex="-1"></a><span class="co">Number of documents: 50</span></span>
<span id="cb26-15"><a href="#cb26-15" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>LDAでは,事前に抽出するトピック数を決めることができます.こちらも実際には調整が必要ですが,今回は決め打ちで<code>3</code>としています.</p>
<p><code>LDA</code>の結果は<code>pyLDAvis</code>によって<code>html</code>形式で出力されます.</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="co">#3トピックを抽出</span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a>num_topics <span class="op">=</span><span class="dv">3</span></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a>lda <span class="op">=</span> LdaModel(corpus, id2word <span class="op">=</span>dictionary, num_topics<span class="op">=</span>num_topics, alpha<span class="op">=</span><span class="fl">0.01</span>)</span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true" tabindex="-1"></a><span class="co">#トピックごとに上位5単語を表示</span></span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span>pd.DataFrame()</span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> t <span class="kw">in</span> <span class="bu">range</span>(num_topics):</span>
<span id="cb27-8"><a href="#cb27-8" aria-hidden="true" tabindex="-1"></a>    word<span class="op">=</span>[]</span>
<span id="cb27-9"><a href="#cb27-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> i, prob <span class="kw">in</span> lda.get_topic_terms(t, topn<span class="op">=</span><span class="dv">5</span>):</span>
<span id="cb27-10"><a href="#cb27-10" aria-hidden="true" tabindex="-1"></a>        word.append(dictionary.id2token[<span class="bu">int</span>(i)])</span>
<span id="cb27-11"><a href="#cb27-11" aria-hidden="true" tabindex="-1"></a>    _ <span class="op">=</span> pd.DataFrame([word],index<span class="op">=</span>[<span class="ss">f&#39;topic</span><span class="sc">{</span>t<span class="op">+</span><span class="dv">1</span><span class="sc">}</span><span class="ss">&#39;</span>])</span>
<span id="cb27-12"><a href="#cb27-12" aria-hidden="true" tabindex="-1"></a>    df <span class="op">=</span> df._append(_)</span>
<span id="cb27-13"><a href="#cb27-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-14"><a href="#cb27-14" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.T)</span>
<span id="cb27-15"><a href="#cb27-15" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb27-16"><a href="#cb27-16" aria-hidden="true" tabindex="-1"></a><span class="co">  topic1 topic2 topic3</span></span>
<span id="cb27-17"><a href="#cb27-17" aria-hidden="true" tabindex="-1"></a><span class="co">0      金      万     増税</span></span>
<span id="cb27-18"><a href="#cb27-18" aria-hidden="true" tabindex="-1"></a><span class="co">1     立憲      円      壁</span></span>
<span id="cb27-19"><a href="#cb27-19" aria-hidden="true" tabindex="-1"></a><span class="co">2      案      壁   メディア</span></span>
<span id="cb27-20"><a href="#cb27-20" aria-hidden="true" tabindex="-1"></a><span class="co">3     給付    103     自民</span></span>
<span id="cb27-21"><a href="#cb27-21" aria-hidden="true" tabindex="-1"></a><span class="co">4     経済      話     結果</span></span>
<span id="cb27-22"><a href="#cb27-22" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb27-23"><a href="#cb27-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-24"><a href="#cb27-24" aria-hidden="true" tabindex="-1"></a><span class="co">#可視化</span></span>
<span id="cb27-25"><a href="#cb27-25" aria-hidden="true" tabindex="-1"></a><span class="co">#PyLDAvisの実装</span></span>
<span id="cb27-26"><a href="#cb27-26" aria-hidden="true" tabindex="-1"></a>visualisation <span class="op">=</span> pyLDAvis.gensim.prepare(lda, corpus, dictionary)</span>
<span id="cb27-27"><a href="#cb27-27" aria-hidden="true" tabindex="-1"></a>pyLDAvis.save_html(visualisation, <span class="st">&#39;result/LDA_Visualization.html&#39;</span>)</span></code></pre></div>
<p>今回は3つのトピックではいずれも103万円の壁の話をしていますが<code>topic1</code>では立憲民主党の対案としての低所得者への給付の話題,<code>topic3</code>ではメディアや自民党に対する批判などの話題
が抽出されました. あまりはっきりしていませんが,もう少しつぶやきの数を増やすと分かりやすくなるかもしれません.</p>
<p>出力された<code>LDA_Visualization.html</code>をクリックするとブラウザ上で確認することができます.</p>
<p><img src="/images/ch15-LDA-result1.png" /></p>
<p>左側には主成分分析による第1主成分,第2主成分上にマッピングされたトピックの集合が可視化されており,右側には全体のトピックにおける単語の分布が表示されています.</p>
<p>それぞれのトピックをクリックすることでトピックごとの単語の分布が表示されます.</p>
<p><img src="/images/ch15-LDA-result2.png" />
<img src="/images/ch15-LDA-result3.png" /></p>
<p>右上のバーで調整できるラムダは,トピックモデルの結果を調整するためのパラメータです.ラムダの値が大きいほど,他のトピックにも出現する一般的な単語を除外し,トピック内の単語の特徴を強調します. 値を変化させてどのようにトピックの分布が変わるかを確認してみましょう.</p>
<p>コード全体は以下のようになっています.</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> MeCab <span class="im">as</span> mc</span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> re</span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> gensim.corpora.dictionary <span class="im">import</span> Dictionary</span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> gensim.models <span class="im">import</span> LdaModel</span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pyLDAvis</span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pyLDAvis.gensim_models <span class="im">as</span> gensimvis</span>
<span id="cb28-8"><a href="#cb28-8" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pyLDAvis.gensim</span>
<span id="cb28-9"><a href="#cb28-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-10"><a href="#cb28-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-11"><a href="#cb28-11" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> strip_CRLF_from_Text(text):</span>
<span id="cb28-12"><a href="#cb28-12" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;テキストファイルの改行,タブを削除し,形態素解析を実行</span></span>
<span id="cb28-13"><a href="#cb28-13" aria-hidden="true" tabindex="-1"></a><span class="co">    改行前後が日本語文字の場合は改行を削除する．</span></span>
<span id="cb28-14"><a href="#cb28-14" aria-hidden="true" tabindex="-1"></a><span class="co">    それ以外はスペースに置換する．</span></span>
<span id="cb28-15"><a href="#cb28-15" aria-hidden="true" tabindex="-1"></a><span class="co">    &quot;&quot;&quot;</span></span>
<span id="cb28-16"><a href="#cb28-16" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 改行前後の文字が日本語文字の場合は改行を削除する</span></span>
<span id="cb28-17"><a href="#cb28-17" aria-hidden="true" tabindex="-1"></a>    plaintext <span class="op">=</span> re.sub(<span class="st">&#39;([ぁ-んー]+|[ァ-ンー]+|[</span><span class="ch">\\</span><span class="st">u4e00-</span><span class="ch">\\</span><span class="st">u9FFF]+|[ぁ-んァ-ンー</span><span class="ch">\\</span><span class="st">u4e00-</span><span class="ch">\\</span><span class="st">u9FFF]+)(</span><span class="ch">\n</span><span class="st">)([ぁ-んー]+|[ァ-ンー]+|[</span><span class="ch">\\</span><span class="st">u4e00-</span><span class="ch">\\</span><span class="st">u9FFF]+|[ぁ-んァ-ンー</span><span class="ch">\\</span><span class="st">u4e00-</span><span class="ch">\\</span><span class="st">u9FFF]+)&#39;</span>,</span>
<span id="cb28-18"><a href="#cb28-18" aria-hidden="true" tabindex="-1"></a>                       <span class="vs">r&#39;\1\3&#39;</span>,</span>
<span id="cb28-19"><a href="#cb28-19" aria-hidden="true" tabindex="-1"></a>                       text)</span>
<span id="cb28-20"><a href="#cb28-20" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 残った改行とタブ記号はスペースに置換する</span></span>
<span id="cb28-21"><a href="#cb28-21" aria-hidden="true" tabindex="-1"></a>    plaintext <span class="op">=</span> plaintext.replace(<span class="st">&#39;</span><span class="ch">\n</span><span class="st">&#39;</span>, <span class="st">&#39; &#39;</span>).replace(<span class="st">&#39;</span><span class="ch">\t</span><span class="st">&#39;</span>, <span class="st">&#39; &#39;</span>)</span>
<span id="cb28-22"><a href="#cb28-22" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> plaintext</span>
<span id="cb28-23"><a href="#cb28-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-24"><a href="#cb28-24" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> mecab_wakati(text,word_types <span class="op">=</span> [<span class="st">&quot;名詞&quot;</span>,<span class="st">&quot;動詞&quot;</span>,<span class="st">&quot;形容詞&quot;</span>,<span class="st">&quot;副詞&quot;</span>]):</span>
<span id="cb28-25"><a href="#cb28-25" aria-hidden="true" tabindex="-1"></a>    <span class="co">#分かち書き</span></span>
<span id="cb28-26"><a href="#cb28-26" aria-hidden="true" tabindex="-1"></a>    t <span class="op">=</span> mc.Tagger()</span>
<span id="cb28-27"><a href="#cb28-27" aria-hidden="true" tabindex="-1"></a>    <span class="co">#word_types = [String]で指定 (&quot;名詞&quot;,&quot;動詞&quot;,&quot;形容詞&quot;,&quot;副詞&quot;)</span></span>
<span id="cb28-28"><a href="#cb28-28" aria-hidden="true" tabindex="-1"></a>    node <span class="op">=</span> t.parseToNode(text)</span>
<span id="cb28-29"><a href="#cb28-29" aria-hidden="true" tabindex="-1"></a>    sent <span class="op">=</span> <span class="st">&quot;&quot;</span></span>
<span id="cb28-30"><a href="#cb28-30" aria-hidden="true" tabindex="-1"></a>    noun <span class="op">=</span> [x <span class="cf">for</span> x <span class="kw">in</span> word_types <span class="cf">if</span> x <span class="op">==</span> <span class="st">&quot;名詞&quot;</span>]</span>
<span id="cb28-31"><a href="#cb28-31" aria-hidden="true" tabindex="-1"></a>    others <span class="op">=</span> [x <span class="cf">for</span> x <span class="kw">in</span> word_types <span class="cf">if</span> x <span class="kw">in</span> [ <span class="st">&quot;動詞&quot;</span>, <span class="st">&quot;形容詞&quot;</span>,<span class="st">&quot;副詞&quot;</span>]]</span>
<span id="cb28-32"><a href="#cb28-32" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span>(node):</span>
<span id="cb28-33"><a href="#cb28-33" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> node.surface <span class="op">!=</span> <span class="st">&quot;&quot;</span>:  <span class="co"># ヘッダとフッタを除外</span></span>
<span id="cb28-34"><a href="#cb28-34" aria-hidden="true" tabindex="-1"></a>            word_type <span class="op">=</span> node.feature.split(<span class="st">&quot;,&quot;</span>)[<span class="dv">0</span>]</span>
<span id="cb28-35"><a href="#cb28-35" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> word_type <span class="kw">in</span> noun:</span>
<span id="cb28-36"><a href="#cb28-36" aria-hidden="true" tabindex="-1"></a>                 sent <span class="op">+=</span> node.surface <span class="op">+</span> <span class="st">&quot; &quot;</span> <span class="co"># node.surface は「表層形」</span></span>
<span id="cb28-37"><a href="#cb28-37" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> word_type <span class="kw">in</span> others:</span>
<span id="cb28-38"><a href="#cb28-38" aria-hidden="true" tabindex="-1"></a>                sent <span class="op">+=</span> node.feature.split(<span class="st">&quot;,&quot;</span>)[<span class="dv">6</span>] <span class="op">+</span> <span class="st">&quot; &quot;</span> <span class="co"># node.feature.split(&quot;,&quot;)[6] は形態素解析結果の「原型」</span></span>
<span id="cb28-39"><a href="#cb28-39" aria-hidden="true" tabindex="-1"></a>        node <span class="op">=</span> node.<span class="bu">next</span></span>
<span id="cb28-40"><a href="#cb28-40" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> node <span class="kw">is</span> <span class="va">None</span>:</span>
<span id="cb28-41"><a href="#cb28-41" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span></span>
<span id="cb28-42"><a href="#cb28-42" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> sent</span>
<span id="cb28-43"><a href="#cb28-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-44"><a href="#cb28-44" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> remove_urls(text):</span>
<span id="cb28-45"><a href="#cb28-45" aria-hidden="true" tabindex="-1"></a>    <span class="co"># URLを検出する正規表現パターン</span></span>
<span id="cb28-46"><a href="#cb28-46" aria-hidden="true" tabindex="-1"></a>    url_pattern <span class="op">=</span> <span class="vs">r&#39;http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&amp;+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+&#39;</span></span>
<span id="cb28-47"><a href="#cb28-47" aria-hidden="true" tabindex="-1"></a>    <span class="co"># URLを空文字に置換して除外</span></span>
<span id="cb28-48"><a href="#cb28-48" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> re.sub(url_pattern, <span class="st">&#39;&#39;</span>, text)</span>
<span id="cb28-49"><a href="#cb28-49" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-50"><a href="#cb28-50" aria-hidden="true" tabindex="-1"></a><span class="co">#------------------------------------------------------------------</span></span>
<span id="cb28-51"><a href="#cb28-51" aria-hidden="true" tabindex="-1"></a><span class="co"># ↑ ここまで,関数定義</span></span>
<span id="cb28-52"><a href="#cb28-52" aria-hidden="true" tabindex="-1"></a><span class="co"># ↓ ここから,データ処理</span></span>
<span id="cb28-53"><a href="#cb28-53" aria-hidden="true" tabindex="-1"></a><span class="co">#------------------------------------------------------------------</span></span>
<span id="cb28-54"><a href="#cb28-54" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-55"><a href="#cb28-55" aria-hidden="true" tabindex="-1"></a><span class="co">#データの読み込み</span></span>
<span id="cb28-56"><a href="#cb28-56" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/tweets.csv&#39;</span>)</span>
<span id="cb28-57"><a href="#cb28-57" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-58"><a href="#cb28-58" aria-hidden="true" tabindex="-1"></a><span class="co">#国民民主党のリアクションシートだけのデータを作る</span></span>
<span id="cb28-59"><a href="#cb28-59" aria-hidden="true" tabindex="-1"></a>akagi <span class="op">=</span> df[df[<span class="st">&#39;Word&#39;</span>] <span class="op">==</span> <span class="st">&#39;自民党&#39;</span>][<span class="st">&#39;Tweet&#39;</span>]</span>
<span id="cb28-60"><a href="#cb28-60" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-61"><a href="#cb28-61" aria-hidden="true" tabindex="-1"></a><span class="co">#トークナイズ</span></span>
<span id="cb28-62"><a href="#cb28-62" aria-hidden="true" tabindex="-1"></a>txt <span class="op">=</span> [mecab_wakati(strip_CRLF_from_Text(remove_urls(x)),[<span class="st">&quot;名詞&quot;</span>,<span class="st">&quot;動詞&quot;</span>]).split(<span class="st">&#39; &#39;</span>) <span class="cf">for</span> x <span class="kw">in</span> akagi]</span>
<span id="cb28-63"><a href="#cb28-63" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-64"><a href="#cb28-64" aria-hidden="true" tabindex="-1"></a><span class="co">#削除文字の指定</span></span>
<span id="cb28-65"><a href="#cb28-65" aria-hidden="true" tabindex="-1"></a>stopwords <span class="op">=</span> [<span class="st">&#39;オモウ&#39;</span>,<span class="st">&#39;イウ&#39;</span>,<span class="st">&#39;イル&#39;</span>,<span class="st">&#39;アル&#39;</span>,<span class="st">&#39;こと&#39;</span>]</span>
<span id="cb28-66"><a href="#cb28-66" aria-hidden="true" tabindex="-1"></a>txt <span class="op">=</span> [[x <span class="cf">for</span> x <span class="kw">in</span> t <span class="cf">if</span> x <span class="kw">not</span> <span class="kw">in</span> stopwords] <span class="cf">for</span> t <span class="kw">in</span> txt]</span>
<span id="cb28-67"><a href="#cb28-67" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-68"><a href="#cb28-68" aria-hidden="true" tabindex="-1"></a><span class="co">#辞書の作成</span></span>
<span id="cb28-69"><a href="#cb28-69" aria-hidden="true" tabindex="-1"></a>dictionary <span class="op">=</span> Dictionary(txt)</span>
<span id="cb28-70"><a href="#cb28-70" aria-hidden="true" tabindex="-1"></a><span class="co">#出現がx文書に満たない単語と、y%以上の文書に出現する単語を極端と見做し削除する</span></span>
<span id="cb28-71"><a href="#cb28-71" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span><span class="dv">2</span></span>
<span id="cb28-72"><a href="#cb28-72" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span><span class="fl">0.5</span></span>
<span id="cb28-73"><a href="#cb28-73" aria-hidden="true" tabindex="-1"></a>dictionary.filter_extremes(no_below<span class="op">=</span>x,no_above<span class="op">=</span>y)</span>
<span id="cb28-74"><a href="#cb28-74" aria-hidden="true" tabindex="-1"></a><span class="co"># LdaModelが読み込めるBoW形式に変換</span></span>
<span id="cb28-75"><a href="#cb28-75" aria-hidden="true" tabindex="-1"></a>corpus <span class="op">=</span> [dictionary.doc2bow(x) <span class="cf">for</span> x <span class="kw">in</span> txt]</span>
<span id="cb28-76"><a href="#cb28-76" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-77"><a href="#cb28-77" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&quot;Number of unique tokens: </span><span class="sc">{</span><span class="bu">len</span>(dictionary)<span class="sc">}</span><span class="ss">&quot;</span>)</span>
<span id="cb28-78"><a href="#cb28-78" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&quot;Number of documents: </span><span class="sc">{</span><span class="bu">len</span>(corpus)<span class="sc">}</span><span class="ss">&quot;</span>)</span>
<span id="cb28-79"><a href="#cb28-79" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-80"><a href="#cb28-80" aria-hidden="true" tabindex="-1"></a><span class="co">#3トピックを抽出</span></span>
<span id="cb28-81"><a href="#cb28-81" aria-hidden="true" tabindex="-1"></a>num_topics <span class="op">=</span><span class="dv">3</span></span>
<span id="cb28-82"><a href="#cb28-82" aria-hidden="true" tabindex="-1"></a>lda <span class="op">=</span> LdaModel(corpus, id2word <span class="op">=</span>dictionary, num_topics<span class="op">=</span>num_topics, alpha<span class="op">=</span><span class="fl">0.01</span>)</span>
<span id="cb28-83"><a href="#cb28-83" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-84"><a href="#cb28-84" aria-hidden="true" tabindex="-1"></a><span class="co">#トピックごとに上位5単語を表示</span></span>
<span id="cb28-85"><a href="#cb28-85" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span>pd.DataFrame()</span>
<span id="cb28-86"><a href="#cb28-86" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> t <span class="kw">in</span> <span class="bu">range</span>(num_topics):</span>
<span id="cb28-87"><a href="#cb28-87" aria-hidden="true" tabindex="-1"></a>    word<span class="op">=</span>[]</span>
<span id="cb28-88"><a href="#cb28-88" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> i, prob <span class="kw">in</span> lda.get_topic_terms(t, topn<span class="op">=</span><span class="dv">5</span>):</span>
<span id="cb28-89"><a href="#cb28-89" aria-hidden="true" tabindex="-1"></a>        word.append(dictionary.id2token[<span class="bu">int</span>(i)])</span>
<span id="cb28-90"><a href="#cb28-90" aria-hidden="true" tabindex="-1"></a>    _ <span class="op">=</span> pd.DataFrame([word],index<span class="op">=</span>[<span class="ss">f&#39;topic</span><span class="sc">{</span>t<span class="op">+</span><span class="dv">1</span><span class="sc">}</span><span class="ss">&#39;</span>])</span>
<span id="cb28-91"><a href="#cb28-91" aria-hidden="true" tabindex="-1"></a>    df <span class="op">=</span> df._append(_)</span>
<span id="cb28-92"><a href="#cb28-92" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-93"><a href="#cb28-93" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.T)</span>
<span id="cb28-94"><a href="#cb28-94" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-95"><a href="#cb28-95" aria-hidden="true" tabindex="-1"></a><span class="co">#可視化</span></span>
<span id="cb28-96"><a href="#cb28-96" aria-hidden="true" tabindex="-1"></a><span class="co">#PyLDAvisの実装</span></span>
<span id="cb28-97"><a href="#cb28-97" aria-hidden="true" tabindex="-1"></a>visualisation <span class="op">=</span> pyLDAvis.gensim.prepare(lda, corpus, dictionary)</span>
<span id="cb28-98"><a href="#cb28-98" aria-hidden="true" tabindex="-1"></a>pyLDAvis.save_html(visualisation, <span class="st">&#39;result/LDA_Visualization.html&#39;</span>)</span></code></pre></div>
<h1 data-number="5" id="ニューラル言語モデル"><span class="header-section-number">5</span> ニューラル言語モデル</h1>
<p>トピックモデルでは,単語の分布を解釈していましたが,文章自体の意味を扱っているわけでは有りません. 文章や単語の意味を利用した分析手法について見てみましょう.</p>
<p>本節では, 2018年にGoogleが発表したニューラル言語モデルのである<strong><code>BERT(Bidirectional Encoder Representations from Transformers)</code></strong>を利用して見ましょう(なお,BERTの後継に<code>ELECTRA</code>がありますが,資料の更新ができていません.)</p>
<p>BERTはなどのニューラル言語モデルは<strong>事前学習</strong>と<strong>ファインチューニング</strong>という二段階の学習を行うのが一般的です.</p>
<div class="note">
<ul>
<li>事前学習</li>
</ul>
<p>(日本語など)言語全般に関して大規模なテキストコーパス(Wikipediaなど)で学習
こちらのモデルがGoogleによって公開されている(ライブラリとして利用可能)</p>
<ul>
<li>ファインチューニング</li>
</ul>
<p>事前学習済みのBERTモデルをタスク(穴埋め,ラベリング,校正などの用途)によって追加学習させる.
タスクに関連した新たなデータセットが必要
ラベリングをするのであれば,ラベル付けされた教師データが必要</p>
</div>
<p>BERTはコーパスを用いてどのような学習を行っているのでしょうか. 基本的にBERTが行っているのは文章の穴埋め精度を高めるための学習です.</p>
<ul>
<li>私はりんごを【MASK】</li>
</ul>
<p>という一部が隠れた文章があったとき, 【MASK】の部分に入る文字列の確率計算をしています.
通常,文章の【MASK】部分に入る文章は,それぞれ確率が異なります.</p>
<p>例えば,上の文章では【MASK】部分に｢行う｣｢走る｣などの動詞が続く確率よりも｢食べる｣｢買う｣｢調理する｣などの動詞が続く確率が高いと考えられます.</p>
<ul>
<li>私はりんごを行った ← 確率低い</li>
<li>私はりんごを食べた ← 確率高い</li>
</ul>
<p>人間は過去の学習から,このような確率をなんとなく判断できますが,BERTはコーパスから教師あり学習をして,あらゆる語彙の連なりやすさの確率を計算しています.</p>
<p><span class="math display">𝑃(食べた│私はりんごを)=\frac{(コーパス中の頻度(私はりんごを食べた))}{(コーパス中の頻度(私はりんごを))}</span></p>
<p><span class="math display">𝑃(食べた│私はりんごを)= \frac{(コーパス中の頻度(私はりんごを行った))}{(コーパス中の頻度(私はりんごを))}</span></p>
<p>大抵はすでにこのような事前学習が行われたモデルを利用し,必要があればファインチューニングをそれぞれの利用者が行います. 日本語で有名な学習済みモデルには東北大がWikipediaの日本語記事ので学習したモデル(<code>'tohoku-nlp/bert-base-japanese-whole-word-masking</code>)などがあります.</p>
<p>BERTのファインチューニングのためには,目的に応じたデータセットが必要となります.このデータは,トピックモデルなどで扱ってきたような分析用のデータではなく,学習用のデータです.</p>
<div class="note">
<ul>
<li>データセット</li>
</ul>
<p>日本語データセットとして良く利用されるものは以下のとおりです.</p>
<ul>
<li><h2 id="twitter日本語評判分析データセット"><a href="http://www.cl.ecei.tohoku.ac.jp/resources/twitter_target_review/">Twitter日本語評判分析データセット</a></h2></li>
</ul>
<p>Twitterの商品に関するポジティブ,ネガティブ,ニュートラルのラベリングデータ</p>
<ul>
<li><h2 id="snow-d18日本語感情表現辞書"><a href="https://www.jnlp.org/GengoHouse/snow/d18">SNOW D18日本語感情表現辞書</a></h2></li>
</ul>
<p>日本語を48の勘定に分類</p>
<blockquote>
<p>安らぎ、楽しさ親しみ、尊敬・尊さ、感謝、気持ちが良い、誇らしい、感動、喜び、悲しさ、寂しさ不満、切なさ、苦しさ、不安、憂鬱、辛さ、好き、嫌悪、恥ずかしい、焦り、驚き、怒り、幸福感、恨み、恐れ（恐縮等の意味で）、恐怖、悔しさ、祝う気持ち、困惑、きまずさ、興奮、悩み、願望、失望、あわれみ、見下し、謝罪、ためらい、不快、怠さ、あきれ、心配、緊張、妬み、憎い、残念、情けない、穏やか</p>
</blockquote>
<ul>
<li><h2 id="livedorニュースコーパス"><a href="https://www.rondhuit.com/download.html#news%20corpus">livedorニュースコーパス</a></h2></li>
</ul>
<p>ニュース記事をサイト別/ジャンル別に分類</p>
<ul>
<li><p><a href="http://news.livedoor.com/category/vender/news/">トピックニュース</a> - <a href="http://news.livedoor.com/category/vender/208/">Sports Watch</a> - <a href="http://news.livedoor.com/category/vender/223/">ITライフハック</a> - <a href="http://news.livedoor.com/category/vender/kadench/">家電チャンネル</a> - <a href="http://news.livedoor.com/category/vender/movie_enter/">MOVIE ENTER</a> - <a href="http://news.livedoor.com/category/vender/90/">独女通信</a> - <a href="http://news.livedoor.com/category/vender/smax/">エスマックス</a> - <a href="http://news.livedoor.com/category/vender/homme/">livedoor HOMME</a> - <a href="http://news.livedoor.com/category/vender/ldgirls/">Peachy</a></p></li>
<li><h2 id="有価証券報告書ネガポジデータセット"><a href="https://github.com/chakki-works/chABSA-dataset">有価証券報告書ネガポジデータセット</a></h2></li>
</ul>
<p>TIS株式会社が公開している上場企業の有価証券報告書を用いて作成されたマルチラベルのネガポジデータセット</p>
<p>ネガティブ, ポジティブ, ニュートラルの3ラベル</p>
</div>
<p>BERTをどのように利用するかは,様々な応用がありえますが, 良く利用される事例は以下のようなものです.</p>
<div class="note">
<ul>
<li><h2 id="bertの利用例">BERTの利用例</h2></li>
</ul>
<ol type="1">
<li><p><strong>文章の穴埋め（Masked Language Model, MLM）</strong></p>
<p>トークンを利用して文中の一部を隠し,その隠れた部分を予測します.たとえば「今日は【MASK】に行く」という文が与えられた場合,BERTは文脈に基づいて【MASK】部分が「学校」「会社」などになると予測します.この機能により,文章の補完やオートコンプリート機能に利用できます.</p></li>
<li><p><strong>文章分類</strong></p>
<p>BERTは感情分析や話題の分類などの文章分類タスクで広く使われています.例えば,商品レビューやSNSの投稿をポジティブ・ネガティブといった感情ラベルに分類することで,マーケティング分析やレコメンドシステムの精度を向上させます.また,ニュース記事をカテゴリに分けるなど,文書分類にも応用されています.</p></li>
<li><p><strong>マルチラベル文章分類</strong></p>
<p>一部の文章は,複数の感情やカテゴリに属することがあり,BERTは「ポジティブかつネガティブ」のように複数のラベルを付与するマルチラベル分類も可能です.これにより,特定のジャンルに限らない複数の特徴や感情を同時に判別し,より高度な文章分析を可能にします.たとえば,レビューが「高評価だが高価」といった異なる側面を含む場合も,それぞれの特徴を捉えることができます.</p></li>
<li><p><strong>固有表現抽出（Named Entity Recognition, NER）</strong></p>
<p>BERTを用いて文章から特定の固有名詞を抽出できます.例えば,文中の「人名」「組織名」「地名」などの固有表現を検出し,ビジネスや医療,自然言語処理の分野で多用されます.ニュース記事から企業名や国名を抽出して情報整理を行ったり,顧客対応で企業名や製品名を抽出して対応を迅速化するなどの応用が可能です.</p></li>
<li><p><strong>文章校正</strong></p>
<p>BERTを使った校正機能は,文法チェックやスペルチェックに利用され,Grammarlyのようなサービスに応用できます.文脈を考慮した校正が可能なため,単なる誤字脱字の修正だけでなく,不自然な表現を検知し,より適切な言い回しに修正することも可能です.</p></li>
<li><p><strong>データの可視化と類似文章検索</strong></p>
<p>BERTのエンコーディング機能を使うと,文章をベクトル化し,意味の似た文章を数値的に比較できるようになります.これにより,多次元空間における文章の類似性が計算でき,例えばPCAやt-SNEで次元を減らし,クラスタリングを行ってデータを可視化できます.類似した内容の文書を自動でグループ分けしたり,ユーザーが検索したい文に近い内容の文書を瞬時に探すといった検索機能にも利用されます.</p></li>
</ol>
</div>
<h2 data-number="5.1" id="マルチラベル分類"><span class="header-section-number">5.1</span> マルチラベル分類</h2>
<p>マルチラベル分類とは選択肢の中から復数のカテゴリーを選ぶ分類手法です.
今回は有価証券報告書データを利用して<code>[ネガティブ,ニュートラル,ポジティブ]</code>に分類します.
ネガティブと判定されると<code>[1,0,0]</code>,ニュートラルと判定されると<code>[0,1,0]</code>のようなベクトルが返ってきます.
また,一つの文章にネガティブな内容とポジティブな内容両方が含まれている場合には<code>[1,0,1]</code>のような結果となります.</p>
<div class="note">
<ul>
<li><h2 id="gpu計算とcpu計算">GPU計算とCPU計算</h2>
PCにおける計算は通常CPUによって行われます.
これまでに実行してきたPythonプログラムは全てCPUを用いた計算を行っていました(画像処理ではGPU計算も可能なプログラムになっていました.)
一方でGPU(Graphics Processing Unit,画像処理装置,いわゆるグラボ)を利用してプログラムを計算することも可能です.
ニューラルネットワークモデルは,その特性から単純な計算を大量に行うためGPUを用いた並列計算が行われることが多いです.</li>
</ul>
<p><img src="/images/ch15-cpu-gpu.png" /></p>
</div>
<p>これからBERTを利用してマルチラベル分類を実施してみます. ただし,ニューラルモデルを利用するにあたって,学生それぞれのノートPCでGPU計算の環境を構築することが困難なので, Googleの提供するオンライン上のPythonの実行環境である<code>Colaboratory</code>を利用します.</p>
<p>まずは,<a href="https://www.google.com">Google</a>のサービスを利用するためのGoogleアカウントを作成しましょう(既にある人はスキップ)</p>
<p><img src="/images/ch15-google.png" /></p>
<p>プログラムやデータなどはGoogleのクラウドストレージであるGoogle Driveに保存されます.
Google Drive上に作業用ディレクトリを作りましょう.</p>
<p><img src="/images/ch15-google2.png" /></p>
<p>新規作成からフォルダを作成し,適当な名前をつけましょう. フォルダ内にはデータを保存するフォルダ<code>data</code>を作成しておきましょう.
<img src="/images/ch15-google3.png" /></p>
<p>作成したフォルダにプログラムやデータをドラッグアンドドロップすることでアップロードできます.</p>
<p>実際にコードやデータを利用する前にGoogle Drive上で<code>Colaboratory</code>のファイルを扱えるようにしましょう.</p>
<p>右下<code>+</code>ボタンをクリックして,<code>Colaboratory</code>のアドオンを検索し,インストールしましょう.</p>
<p><img src="/images/ch15-google4.png" /></p>
<div class="warn">
<p>インストールが完了したら一度ページを再読み込みしましょう.</p>
</div>
<p>今回はマルチラベル用のプログラムを新規作成します. フォルダの何もない部分を右クリックして,その他から,Colaboratoryのファイル(拡張子<code>.ipynb</code>)を作成しましょう.</p>
<p><img src="/images/ch15-google5.png" /></p>
<p>作成したファイルをダブルクリックするとColaboratoryが起動します.
まずは,右上の設定からGPU計算が可能なように設定を変更しましょう.</p>
<p><img src="/images/ch15-colab.png" /></p>
<p>Colaboratoryは対話型環境になっており, プログラムを書いてブロックごとに実行します. 各ブロックの左側にある再生ボタンを押すか,<code>Runtime</code>から実行方法を選択して実行します. <code>Run all</code>をクリックすると全てのブロックが上から順に実行されます.</p>
<p><img src="/images/ch15-colab1.png" /></p>
<p><img src="/images/ch15-colab2.png" /></p>
<p><code>!</code>に続けて入力することでシェルコマンドも実行可能です.</p>
<p>最初に,今回のプログラムで必要となるライブラリをインストールしてみましょう.なお,以下のマルチラベル文章分類に関するコードは,<strong><a href="https://www.ohmsha.co.jp/book/9784274227264/">BERTによる自然言語処理入門 オーム社</a></strong>を参考にしています.</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a><span class="co">#ライブラリのインストール</span></span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a><span class="op">!</span>pip install transformers<span class="op">==</span><span class="fl">4.18.0</span> fugashi<span class="op">==</span><span class="fl">1.1.0</span> ipadic<span class="op">==</span><span class="fl">1.0.0</span> pytorch_lightning</span></code></pre></div>
<p>まずは,学習済みのモデルを読み込みます. ニューラルモデルに関するこれらのコードは全て理解しようと思うと,膨大な時間が必要になります.
なので,ここでは取り敢えずそれぞれの部分で何をやっているのかを大雑把に把握するようにしましょう.</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> random</span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> glob</span>
<span id="cb30-3"><a href="#cb30-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> json</span>
<span id="cb30-4"><a href="#cb30-4" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> tqdm <span class="im">import</span> tqdm</span>
<span id="cb30-5"><a href="#cb30-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-6"><a href="#cb30-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> torch</span>
<span id="cb30-7"><a href="#cb30-7" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> torch.utils.data <span class="im">import</span> DataLoader</span>
<span id="cb30-8"><a href="#cb30-8" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> transformers <span class="im">import</span> BertJapaneseTokenizer, BertModel</span>
<span id="cb30-9"><a href="#cb30-9" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pytorch_lightning <span class="im">as</span> pl</span>
<span id="cb30-10"><a href="#cb30-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-11"><a href="#cb30-11" aria-hidden="true" tabindex="-1"></a><span class="co"># 日本語の学習モデル</span></span>
<span id="cb30-12"><a href="#cb30-12" aria-hidden="true" tabindex="-1"></a>MODEL_NAME <span class="op">=</span> <span class="st">&#39;tohoku-nlp/bert-base-japanese-whole-word-masking&#39;</span></span>
<span id="cb30-13"><a href="#cb30-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-14"><a href="#cb30-14" aria-hidden="true" tabindex="-1"></a><span class="co"># ------------------------------------------------------------------</span></span>
<span id="cb30-15"><a href="#cb30-15" aria-hidden="true" tabindex="-1"></a><span class="co"># マルチラベル文章分類用のクラス</span></span>
<span id="cb30-16"><a href="#cb30-16" aria-hidden="true" tabindex="-1"></a><span class="co"># ------------------------------------------------------------------</span></span>
<span id="cb30-17"><a href="#cb30-17" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> BertForSequenceClassificationMultiLabel(torch.nn.Module):</span>
<span id="cb30-18"><a href="#cb30-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-19"><a href="#cb30-19" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, model_name, num_labels):</span>
<span id="cb30-20"><a href="#cb30-20" aria-hidden="true" tabindex="-1"></a>        <span class="bu">super</span>().<span class="fu">__init__</span>()</span>
<span id="cb30-21"><a href="#cb30-21" aria-hidden="true" tabindex="-1"></a>        <span class="co"># BertModelのロード</span></span>
<span id="cb30-22"><a href="#cb30-22" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.bert <span class="op">=</span> BertModel.from_pretrained(model_name)</span>
<span id="cb30-23"><a href="#cb30-23" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 線形変換を初期化しておく</span></span>
<span id="cb30-24"><a href="#cb30-24" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.linear <span class="op">=</span> torch.nn.Linear(</span>
<span id="cb30-25"><a href="#cb30-25" aria-hidden="true" tabindex="-1"></a>            <span class="va">self</span>.bert.config.hidden_size, num_labels</span>
<span id="cb30-26"><a href="#cb30-26" aria-hidden="true" tabindex="-1"></a>        )</span>
<span id="cb30-27"><a href="#cb30-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-28"><a href="#cb30-28" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> forward(</span>
<span id="cb30-29"><a href="#cb30-29" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>,</span>
<span id="cb30-30"><a href="#cb30-30" aria-hidden="true" tabindex="-1"></a>        input_ids<span class="op">=</span><span class="va">None</span>,</span>
<span id="cb30-31"><a href="#cb30-31" aria-hidden="true" tabindex="-1"></a>        attention_mask<span class="op">=</span><span class="va">None</span>,</span>
<span id="cb30-32"><a href="#cb30-32" aria-hidden="true" tabindex="-1"></a>        token_type_ids<span class="op">=</span><span class="va">None</span>,</span>
<span id="cb30-33"><a href="#cb30-33" aria-hidden="true" tabindex="-1"></a>        labels<span class="op">=</span><span class="va">None</span></span>
<span id="cb30-34"><a href="#cb30-34" aria-hidden="true" tabindex="-1"></a>    ):</span>
<span id="cb30-35"><a href="#cb30-35" aria-hidden="true" tabindex="-1"></a>        <span class="co"># データを入力しBERTの最終層の出力を得る。</span></span>
<span id="cb30-36"><a href="#cb30-36" aria-hidden="true" tabindex="-1"></a>        bert_output <span class="op">=</span> <span class="va">self</span>.bert(</span>
<span id="cb30-37"><a href="#cb30-37" aria-hidden="true" tabindex="-1"></a>            input_ids<span class="op">=</span>input_ids,</span>
<span id="cb30-38"><a href="#cb30-38" aria-hidden="true" tabindex="-1"></a>            attention_mask<span class="op">=</span>attention_mask,</span>
<span id="cb30-39"><a href="#cb30-39" aria-hidden="true" tabindex="-1"></a>            token_type_ids<span class="op">=</span>token_type_ids)</span>
<span id="cb30-40"><a href="#cb30-40" aria-hidden="true" tabindex="-1"></a>        last_hidden_state <span class="op">=</span> bert_output.last_hidden_state</span>
<span id="cb30-41"><a href="#cb30-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-42"><a href="#cb30-42" aria-hidden="true" tabindex="-1"></a>        <span class="co"># [PAD]以外のトークンで隠れ状態の平均をとる</span></span>
<span id="cb30-43"><a href="#cb30-43" aria-hidden="true" tabindex="-1"></a>        averaged_hidden_state <span class="op">=</span> <span class="op">\</span></span>
<span id="cb30-44"><a href="#cb30-44" aria-hidden="true" tabindex="-1"></a>            (last_hidden_state<span class="op">*</span>attention_mask.unsqueeze(<span class="op">-</span><span class="dv">1</span>)).<span class="bu">sum</span>(<span class="dv">1</span>) <span class="op">\</span></span>
<span id="cb30-45"><a href="#cb30-45" aria-hidden="true" tabindex="-1"></a>            <span class="op">/</span> attention_mask.<span class="bu">sum</span>(<span class="dv">1</span>, keepdim<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb30-46"><a href="#cb30-46" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-47"><a href="#cb30-47" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 線形変換</span></span>
<span id="cb30-48"><a href="#cb30-48" aria-hidden="true" tabindex="-1"></a>        scores <span class="op">=</span> <span class="va">self</span>.linear(averaged_hidden_state)</span>
<span id="cb30-49"><a href="#cb30-49" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-50"><a href="#cb30-50" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 出力の形式を整える。</span></span>
<span id="cb30-51"><a href="#cb30-51" aria-hidden="true" tabindex="-1"></a>        output <span class="op">=</span> {<span class="st">&#39;logits&#39;</span>: scores}</span>
<span id="cb30-52"><a href="#cb30-52" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-53"><a href="#cb30-53" aria-hidden="true" tabindex="-1"></a>        <span class="co"># labelsが入力に含まれていたら、損失を計算し出力する。</span></span>
<span id="cb30-54"><a href="#cb30-54" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> labels <span class="kw">is</span> <span class="kw">not</span> <span class="va">None</span>:</span>
<span id="cb30-55"><a href="#cb30-55" aria-hidden="true" tabindex="-1"></a>            loss <span class="op">=</span> torch.nn.BCEWithLogitsLoss()(scores, labels.<span class="bu">float</span>())</span>
<span id="cb30-56"><a href="#cb30-56" aria-hidden="true" tabindex="-1"></a>            output[<span class="st">&#39;loss&#39;</span>] <span class="op">=</span> loss</span>
<span id="cb30-57"><a href="#cb30-57" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-58"><a href="#cb30-58" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 属性でアクセスできるようにする。</span></span>
<span id="cb30-59"><a href="#cb30-59" aria-hidden="true" tabindex="-1"></a>        output <span class="op">=</span> <span class="bu">type</span>(<span class="st">&#39;bert_output&#39;</span>, (<span class="bu">object</span>,), output)</span>
<span id="cb30-60"><a href="#cb30-60" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-61"><a href="#cb30-61" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> output</span>
<span id="cb30-62"><a href="#cb30-62" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-63"><a href="#cb30-63" aria-hidden="true" tabindex="-1"></a><span class="co"># モデルとトークナイザのロード</span></span>
<span id="cb30-64"><a href="#cb30-64" aria-hidden="true" tabindex="-1"></a><span class="co"># num_label:カテゴリー数</span></span>
<span id="cb30-65"><a href="#cb30-65" aria-hidden="true" tabindex="-1"></a>tokenizer <span class="op">=</span> BertJapaneseTokenizer.from_pretrained(MODEL_NAME)</span>
<span id="cb30-66"><a href="#cb30-66" aria-hidden="true" tabindex="-1"></a>bert_scml <span class="op">=</span> BertForSequenceClassificationMultiLabel(</span>
<span id="cb30-67"><a href="#cb30-67" aria-hidden="true" tabindex="-1"></a>    MODEL_NAME, num_labels<span class="op">=</span><span class="dv">2</span></span>
<span id="cb30-68"><a href="#cb30-68" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb30-69"><a href="#cb30-69" aria-hidden="true" tabindex="-1"></a>bert_scml <span class="op">=</span> bert_scml.cuda()</span></code></pre></div>
<p>これでBertのマルチラベル変換用のモデルが利用できるようになりました. 続いて,ファインチューニングを実施します.
今回は先述のTIS株式会社による上場企業の有価証券報告書を用いて作成されたマルチラベルのネガポジデータセット <a href="https://www.tis.co.jp/news/2018/tis_news/20180410_1.html"><code>chABSA-dataset</code></a>を利用します.</p>
<p>データとしては<code>json</code>でそれぞれの文章が,ネガティブなのか,ポジティブなのかが記録されています.</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="co"># データのダウンロード</span></span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a><span class="op">!</span>wget https:<span class="op">//</span>s3<span class="op">-</span>ap<span class="op">-</span>northeast<span class="op">-</span><span class="fl">1.</span><span class="er">amazonaws</span>.com<span class="op">/</span>dev.tech<span class="op">-</span>sketch.jp<span class="op">/</span>chakki<span class="op">/</span>public<span class="op">/</span>chABSA<span class="op">-</span>dataset.<span class="bu">zip</span></span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true" tabindex="-1"></a><span class="co"># データの解凍</span></span>
<span id="cb31-4"><a href="#cb31-4" aria-hidden="true" tabindex="-1"></a><span class="op">!</span>unzip chABSA<span class="op">-</span>dataset.<span class="bu">zip</span></span>
<span id="cb31-5"><a href="#cb31-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-6"><a href="#cb31-6" aria-hidden="true" tabindex="-1"></a><span class="co"># chABSA-dataset</span></span>
<span id="cb31-7"><a href="#cb31-7" aria-hidden="true" tabindex="-1"></a><span class="co">#     - xxx.json</span></span>
<span id="cb31-8"><a href="#cb31-8" aria-hidden="true" tabindex="-1"></a><span class="co"># の形で保存</span></span>
<span id="cb31-9"><a href="#cb31-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-10"><a href="#cb31-10" aria-hidden="true" tabindex="-1"></a>data <span class="op">=</span> json.load(<span class="bu">open</span>(<span class="st">&#39;chABSA-dataset/e00030_ann.json&#39;</span>))</span>
<span id="cb31-11"><a href="#cb31-11" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>( data[<span class="st">&#39;sentences&#39;</span>][<span class="dv">0</span>] )</span>
<span id="cb31-12"><a href="#cb31-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-13"><a href="#cb31-13" aria-hidden="true" tabindex="-1"></a><span class="co">#データから文章とカテゴリーを抜き出して整形しておく</span></span>
<span id="cb31-14"><a href="#cb31-14" aria-hidden="true" tabindex="-1"></a>category_id <span class="op">=</span> {<span class="st">&#39;negative&#39;</span>:<span class="dv">0</span>, <span class="st">&#39;neutral&#39;</span>:<span class="dv">1</span> , <span class="st">&#39;positive&#39;</span>:<span class="dv">2</span>}</span>
<span id="cb31-15"><a href="#cb31-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-16"><a href="#cb31-16" aria-hidden="true" tabindex="-1"></a>dataset <span class="op">=</span> []</span>
<span id="cb31-17"><a href="#cb31-17" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> <span class="bu">file</span> <span class="kw">in</span> glob.glob(<span class="st">&#39;chABSA-dataset/*.json&#39;</span>):</span>
<span id="cb31-18"><a href="#cb31-18" aria-hidden="true" tabindex="-1"></a>    data <span class="op">=</span> json.load(<span class="bu">open</span>(<span class="bu">file</span>))</span>
<span id="cb31-19"><a href="#cb31-19" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 各データから文章（text）を抜き出し、ラベル（&#39;labels&#39;）を作成</span></span>
<span id="cb31-20"><a href="#cb31-20" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> sentence <span class="kw">in</span> data[<span class="st">&#39;sentences&#39;</span>]:</span>
<span id="cb31-21"><a href="#cb31-21" aria-hidden="true" tabindex="-1"></a>        text <span class="op">=</span> sentence[<span class="st">&#39;sentence&#39;</span>]</span>
<span id="cb31-22"><a href="#cb31-22" aria-hidden="true" tabindex="-1"></a>        labels <span class="op">=</span> [<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>]</span>
<span id="cb31-23"><a href="#cb31-23" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> opinion <span class="kw">in</span> sentence[<span class="st">&#39;opinions&#39;</span>]:</span>
<span id="cb31-24"><a href="#cb31-24" aria-hidden="true" tabindex="-1"></a>            labels[category_id[opinion[<span class="st">&#39;polarity&#39;</span>]]] <span class="op">=</span> <span class="dv">1</span></span>
<span id="cb31-25"><a href="#cb31-25" aria-hidden="true" tabindex="-1"></a>        sample <span class="op">=</span> {<span class="st">&#39;text&#39;</span>: text, <span class="st">&#39;labels&#39;</span>: labels}</span>
<span id="cb31-26"><a href="#cb31-26" aria-hidden="true" tabindex="-1"></a>        dataset.append(sample)</span>
<span id="cb31-27"><a href="#cb31-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-28"><a href="#cb31-28" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(dataset[<span class="dv">0</span>])</span>
<span id="cb31-29"><a href="#cb31-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-30"><a href="#cb31-30" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb31-31"><a href="#cb31-31" aria-hidden="true" tabindex="-1"></a><span class="co">{&#39;text&#39;: &#39;当連結会計年度（平成28年１月１日から平成29年３月31日まで）におけるわが国経済は...</span></span>
<span id="cb31-32"><a href="#cb31-32" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p><code>print</code>による表示結果は省略していますが,もとのデータセットが表示されているかと思います.</p>
<p>続いて,文章をトークン化した後,学習用(60%),検証用(20%),テスト用(20%)にそれぞれ分割します.
文章のトークン化には,Bertのトークナイザを利用します.</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="co"># トークナイザのロード</span></span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a>tokenizer <span class="op">=</span> BertJapaneseTokenizer.from_pretrained(MODEL_NAME)</span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-4"><a href="#cb32-4" aria-hidden="true" tabindex="-1"></a><span class="co"># 各データの形式を整える</span></span>
<span id="cb32-5"><a href="#cb32-5" aria-hidden="true" tabindex="-1"></a>max_length <span class="op">=</span> <span class="dv">128</span></span>
<span id="cb32-6"><a href="#cb32-6" aria-hidden="true" tabindex="-1"></a>dataset_for_loader <span class="op">=</span> []</span>
<span id="cb32-7"><a href="#cb32-7" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> sample <span class="kw">in</span> dataset:</span>
<span id="cb32-8"><a href="#cb32-8" aria-hidden="true" tabindex="-1"></a>    text <span class="op">=</span> sample[<span class="st">&#39;text&#39;</span>]</span>
<span id="cb32-9"><a href="#cb32-9" aria-hidden="true" tabindex="-1"></a>    labels <span class="op">=</span> sample[<span class="st">&#39;labels&#39;</span>]</span>
<span id="cb32-10"><a href="#cb32-10" aria-hidden="true" tabindex="-1"></a>    encoding <span class="op">=</span> tokenizer(</span>
<span id="cb32-11"><a href="#cb32-11" aria-hidden="true" tabindex="-1"></a>        text,</span>
<span id="cb32-12"><a href="#cb32-12" aria-hidden="true" tabindex="-1"></a>        max_length<span class="op">=</span>max_length,</span>
<span id="cb32-13"><a href="#cb32-13" aria-hidden="true" tabindex="-1"></a>        padding<span class="op">=</span><span class="st">&#39;max_length&#39;</span>,</span>
<span id="cb32-14"><a href="#cb32-14" aria-hidden="true" tabindex="-1"></a>        truncation<span class="op">=</span><span class="va">True</span></span>
<span id="cb32-15"><a href="#cb32-15" aria-hidden="true" tabindex="-1"></a>    )</span>
<span id="cb32-16"><a href="#cb32-16" aria-hidden="true" tabindex="-1"></a>    encoding[<span class="st">&#39;labels&#39;</span>] <span class="op">=</span> labels</span>
<span id="cb32-17"><a href="#cb32-17" aria-hidden="true" tabindex="-1"></a>    encoding <span class="op">=</span> { k: torch.tensor(v) <span class="cf">for</span> k, v <span class="kw">in</span> encoding.items() }</span>
<span id="cb32-18"><a href="#cb32-18" aria-hidden="true" tabindex="-1"></a>    dataset_for_loader.append(encoding)</span>
<span id="cb32-19"><a href="#cb32-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-20"><a href="#cb32-20" aria-hidden="true" tabindex="-1"></a><span class="co"># データセットの分割</span></span>
<span id="cb32-21"><a href="#cb32-21" aria-hidden="true" tabindex="-1"></a>random.shuffle(dataset_for_loader)</span>
<span id="cb32-22"><a href="#cb32-22" aria-hidden="true" tabindex="-1"></a>n <span class="op">=</span> <span class="bu">len</span>(dataset_for_loader)</span>
<span id="cb32-23"><a href="#cb32-23" aria-hidden="true" tabindex="-1"></a>n_train <span class="op">=</span> <span class="bu">int</span>(<span class="fl">0.6</span><span class="op">*</span>n)</span>
<span id="cb32-24"><a href="#cb32-24" aria-hidden="true" tabindex="-1"></a>n_val <span class="op">=</span> <span class="bu">int</span>(<span class="fl">0.2</span><span class="op">*</span>n)</span>
<span id="cb32-25"><a href="#cb32-25" aria-hidden="true" tabindex="-1"></a>dataset_train <span class="op">=</span> dataset_for_loader[:n_train] <span class="co"># 学習データ</span></span>
<span id="cb32-26"><a href="#cb32-26" aria-hidden="true" tabindex="-1"></a>dataset_val <span class="op">=</span> dataset_for_loader[n_train:n_train<span class="op">+</span>n_val] <span class="co"># 検証データ</span></span>
<span id="cb32-27"><a href="#cb32-27" aria-hidden="true" tabindex="-1"></a>dataset_test <span class="op">=</span> dataset_for_loader[n_train<span class="op">+</span>n_val:] <span class="co"># テストデータ</span></span>
<span id="cb32-28"><a href="#cb32-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-29"><a href="#cb32-29" aria-hidden="true" tabindex="-1"></a><span class="co"># データセットからデータローダを作成</span></span>
<span id="cb32-30"><a href="#cb32-30" aria-hidden="true" tabindex="-1"></a>dataloader_train <span class="op">=</span> DataLoader(</span>
<span id="cb32-31"><a href="#cb32-31" aria-hidden="true" tabindex="-1"></a>    dataset_train, batch_size<span class="op">=</span><span class="dv">32</span>, shuffle<span class="op">=</span><span class="va">True</span></span>
<span id="cb32-32"><a href="#cb32-32" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb32-33"><a href="#cb32-33" aria-hidden="true" tabindex="-1"></a>dataloader_val <span class="op">=</span> DataLoader(dataset_val, batch_size<span class="op">=</span><span class="dv">256</span>)</span>
<span id="cb32-34"><a href="#cb32-34" aria-hidden="true" tabindex="-1"></a>dataloader_test <span class="op">=</span> DataLoader(dataset_test, batch_size<span class="op">=</span><span class="dv">256</span>)</span></code></pre></div>
<p>データの準備が整ったので,ファインチューニングを行います. 今回はエポック数を5として,決め打ちで行っていますが,
実際に研究等で使用する場合には前章に習って過学習の確認や学習率(<code>lr</code>)の調整などを行いましょう.</p>
<p>以下の処理は,およそ10分程度かかるので,時間的に余裕のあるときに実行して下さい.</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> BertForSequenceClassificationMultiLabel_pl(pl.LightningModule):</span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, model_name, num_labels, lr):</span>
<span id="cb33-4"><a href="#cb33-4" aria-hidden="true" tabindex="-1"></a>        <span class="bu">super</span>().<span class="fu">__init__</span>()</span>
<span id="cb33-5"><a href="#cb33-5" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.save_hyperparameters()</span>
<span id="cb33-6"><a href="#cb33-6" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.bert_scml <span class="op">=</span> BertForSequenceClassificationMultiLabel(</span>
<span id="cb33-7"><a href="#cb33-7" aria-hidden="true" tabindex="-1"></a>            model_name, num_labels<span class="op">=</span>num_labels</span>
<span id="cb33-8"><a href="#cb33-8" aria-hidden="true" tabindex="-1"></a>        )</span>
<span id="cb33-9"><a href="#cb33-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-10"><a href="#cb33-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> training_step(<span class="va">self</span>, batch, batch_idx):</span>
<span id="cb33-11"><a href="#cb33-11" aria-hidden="true" tabindex="-1"></a>        output <span class="op">=</span> <span class="va">self</span>.bert_scml(<span class="op">**</span>batch)</span>
<span id="cb33-12"><a href="#cb33-12" aria-hidden="true" tabindex="-1"></a>        loss <span class="op">=</span> output.loss</span>
<span id="cb33-13"><a href="#cb33-13" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.log(<span class="st">&#39;train_loss&#39;</span>, loss)</span>
<span id="cb33-14"><a href="#cb33-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> loss</span>
<span id="cb33-15"><a href="#cb33-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-16"><a href="#cb33-16" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> validation_step(<span class="va">self</span>, batch, batch_idx):</span>
<span id="cb33-17"><a href="#cb33-17" aria-hidden="true" tabindex="-1"></a>        output <span class="op">=</span> <span class="va">self</span>.bert_scml(<span class="op">**</span>batch)</span>
<span id="cb33-18"><a href="#cb33-18" aria-hidden="true" tabindex="-1"></a>        val_loss <span class="op">=</span> output.loss</span>
<span id="cb33-19"><a href="#cb33-19" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.log(<span class="st">&#39;val_loss&#39;</span>, val_loss)</span>
<span id="cb33-20"><a href="#cb33-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-21"><a href="#cb33-21" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> test_step(<span class="va">self</span>, batch, batch_idx):</span>
<span id="cb33-22"><a href="#cb33-22" aria-hidden="true" tabindex="-1"></a>        labels <span class="op">=</span> batch.pop(<span class="st">&#39;labels&#39;</span>)</span>
<span id="cb33-23"><a href="#cb33-23" aria-hidden="true" tabindex="-1"></a>        output <span class="op">=</span> <span class="va">self</span>.bert_scml(<span class="op">**</span>batch)</span>
<span id="cb33-24"><a href="#cb33-24" aria-hidden="true" tabindex="-1"></a>        scores <span class="op">=</span> output.logits</span>
<span id="cb33-25"><a href="#cb33-25" aria-hidden="true" tabindex="-1"></a>        labels_predicted <span class="op">=</span> ( scores <span class="op">&gt;</span> <span class="dv">0</span> ).<span class="bu">int</span>()</span>
<span id="cb33-26"><a href="#cb33-26" aria-hidden="true" tabindex="-1"></a>        num_correct <span class="op">=</span> ( labels_predicted <span class="op">==</span> labels ).<span class="bu">all</span>(<span class="op">-</span><span class="dv">1</span>).<span class="bu">sum</span>().item()</span>
<span id="cb33-27"><a href="#cb33-27" aria-hidden="true" tabindex="-1"></a>        accuracy <span class="op">=</span> num_correct<span class="op">/</span>scores.size(<span class="dv">0</span>)</span>
<span id="cb33-28"><a href="#cb33-28" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.log(<span class="st">&#39;accuracy&#39;</span>, accuracy)</span>
<span id="cb33-29"><a href="#cb33-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-30"><a href="#cb33-30" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> configure_optimizers(<span class="va">self</span>):</span>
<span id="cb33-31"><a href="#cb33-31" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> torch.optim.Adam(<span class="va">self</span>.parameters(), lr<span class="op">=</span><span class="va">self</span>.hparams.lr)</span>
<span id="cb33-32"><a href="#cb33-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-33"><a href="#cb33-33" aria-hidden="true" tabindex="-1"></a>checkpoint <span class="op">=</span> pl.callbacks.ModelCheckpoint(</span>
<span id="cb33-34"><a href="#cb33-34" aria-hidden="true" tabindex="-1"></a>    monitor<span class="op">=</span><span class="st">&#39;val_loss&#39;</span>,</span>
<span id="cb33-35"><a href="#cb33-35" aria-hidden="true" tabindex="-1"></a>    mode<span class="op">=</span><span class="st">&#39;min&#39;</span>,</span>
<span id="cb33-36"><a href="#cb33-36" aria-hidden="true" tabindex="-1"></a>    save_top_k<span class="op">=</span><span class="dv">1</span>,</span>
<span id="cb33-37"><a href="#cb33-37" aria-hidden="true" tabindex="-1"></a>    save_weights_only<span class="op">=</span><span class="va">True</span>,</span>
<span id="cb33-38"><a href="#cb33-38" aria-hidden="true" tabindex="-1"></a>    dirpath<span class="op">=</span><span class="st">&#39;model/&#39;</span>,</span>
<span id="cb33-39"><a href="#cb33-39" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb33-40"><a href="#cb33-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-41"><a href="#cb33-41" aria-hidden="true" tabindex="-1"></a>trainer <span class="op">=</span> pl.Trainer(</span>
<span id="cb33-42"><a href="#cb33-42" aria-hidden="true" tabindex="-1"></a>    max_epochs<span class="op">=</span><span class="dv">5</span>,</span>
<span id="cb33-43"><a href="#cb33-43" aria-hidden="true" tabindex="-1"></a>    callbacks <span class="op">=</span> [checkpoint]</span>
<span id="cb33-44"><a href="#cb33-44" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb33-45"><a href="#cb33-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-46"><a href="#cb33-46" aria-hidden="true" tabindex="-1"></a>model <span class="op">=</span> BertForSequenceClassificationMultiLabel_pl(</span>
<span id="cb33-47"><a href="#cb33-47" aria-hidden="true" tabindex="-1"></a>    MODEL_NAME,</span>
<span id="cb33-48"><a href="#cb33-48" aria-hidden="true" tabindex="-1"></a>    num_labels<span class="op">=</span><span class="dv">3</span>,</span>
<span id="cb33-49"><a href="#cb33-49" aria-hidden="true" tabindex="-1"></a>    lr<span class="op">=</span><span class="fl">1e-5</span></span>
<span id="cb33-50"><a href="#cb33-50" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb33-51"><a href="#cb33-51" aria-hidden="true" tabindex="-1"></a>trainer.fit(model, dataloader_train, dataloader_val)</span>
<span id="cb33-52"><a href="#cb33-52" aria-hidden="true" tabindex="-1"></a>test <span class="op">=</span> trainer.test(dataloaders<span class="op">=</span>dataloader_test)</span>
<span id="cb33-53"><a href="#cb33-53" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&#39;Accuracy: </span><span class="sc">{</span>test[<span class="dv">0</span>][<span class="st">&quot;accuracy&quot;</span>]<span class="sc">:.2f}</span><span class="ss">&#39;</span>)</span>
<span id="cb33-54"><a href="#cb33-54" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-55"><a href="#cb33-55" aria-hidden="true" tabindex="-1"></a><span class="co"># Accuracy: 0.90</span></span></code></pre></div>
<p>テストデータに対する正確率は90%程を確保できているようです.</p>
<p>それではファインチューニングしたモデルを利用して,マルチラベル分類を行ってみます.</p>
<p>最初の<code>text_list</code>部分に適当に作成した文章をリスト形式で与えます. 研究などではここにCSVなどで取得した外部のデータを指定します. それぞれのネガティブ,ニュートラル,ポジティブの判定結果を見てみましょう.</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 入力する文章</span></span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true" tabindex="-1"></a><span class="co"># 結果はネガティブ,ニュートラル,ポジティブの順</span></span>
<span id="cb34-3"><a href="#cb34-3" aria-hidden="true" tabindex="-1"></a>text_list <span class="op">=</span> [<span class="st">&quot;当連結会計年度の売上高は前期比5.8%増加し、業績は堅調に推移しました。&quot;</span></span>
<span id="cb34-4"><a href="#cb34-4" aria-hidden="true" tabindex="-1"></a>            ,<span class="st">&quot;海外市場での需要拡大が寄与し、売上および営業利益が過去最高を記録しました。&quot;</span></span>
<span id="cb34-5"><a href="#cb34-5" aria-hidden="true" tabindex="-1"></a>            ,<span class="st">&quot;一部事業における原材料価格の高騰の影響を受け、収益性が低下しました。&quot;</span></span>
<span id="cb34-6"><a href="#cb34-6" aria-hidden="true" tabindex="-1"></a>            ,<span class="st">&quot;国内景気は緩やかな回復基調を維持したものの、インフレ率の上昇が購買力に影響を及ぼしました。&quot;</span></span>
<span id="cb34-7"><a href="#cb34-7" aria-hidden="true" tabindex="-1"></a>            ,<span class="st">&quot;新興市場における競争激化により、当社製品のシェアは微減しましたが、全体的な市場拡大により売上は増加しました。&quot;</span></span>
<span id="cb34-8"><a href="#cb34-8" aria-hidden="true" tabindex="-1"></a>            ,<span class="st">&quot;為替変動が利益にプラスの影響を与えた一方で、サプライチェーンの遅延が一部事業の成長を抑制しました。&quot;</span></span>
<span id="cb34-9"><a href="#cb34-9" aria-hidden="true" tabindex="-1"></a>            ,<span class="st">&quot;2025年度に向けて、成長市場への積極的な投資と新規事業の開発に注力する予定です。&quot;</span></span>
<span id="cb34-10"><a href="#cb34-10" aria-hidden="true" tabindex="-1"></a>            ,<span class="st">&quot;業界全体の需要鈍化が予想される中で、コスト構造の見直しにより安定的な収益を確保していきます。&quot;</span></span>
<span id="cb34-11"><a href="#cb34-11" aria-hidden="true" tabindex="-1"></a>            ,<span class="st">&quot;カーボンニュートラル達成を目指し、再生可能エネルギーへのシフトを加速させます。&quot;</span></span>
<span id="cb34-12"><a href="#cb34-12" aria-hidden="true" tabindex="-1"></a>            ,<span class="st">&quot;当社は、デジタル化の遅れが競争力に与える影響を認識しており、ITシステムへの投資を増強する方針です。&quot;</span></span>
<span id="cb34-13"><a href="#cb34-13" aria-hidden="true" tabindex="-1"></a>            ,<span class="st">&quot;地政学的リスクの高まりにより、一部の輸出取引に不確実性が生じています。&quot;</span></span>
<span id="cb34-14"><a href="#cb34-14" aria-hidden="true" tabindex="-1"></a>            ,<span class="st">&quot;半導体不足の影響を受け、特定製品の納期が遅延する可能性があります。&quot;</span></span>
<span id="cb34-15"><a href="#cb34-15" aria-hidden="true" tabindex="-1"></a>            ]</span>
<span id="cb34-16"><a href="#cb34-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-17"><a href="#cb34-17" aria-hidden="true" tabindex="-1"></a><span class="co"># モデルのロード</span></span>
<span id="cb34-18"><a href="#cb34-18" aria-hidden="true" tabindex="-1"></a>best_model_path <span class="op">=</span> checkpoint.best_model_path</span>
<span id="cb34-19"><a href="#cb34-19" aria-hidden="true" tabindex="-1"></a>model <span class="op">=</span> BertForSequenceClassificationMultiLabel_pl.load_from_checkpoint(best_model_path)</span>
<span id="cb34-20"><a href="#cb34-20" aria-hidden="true" tabindex="-1"></a>bert_scml <span class="op">=</span> model.bert_scml.cuda()</span>
<span id="cb34-21"><a href="#cb34-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-22"><a href="#cb34-22" aria-hidden="true" tabindex="-1"></a><span class="co"># データの符号化</span></span>
<span id="cb34-23"><a href="#cb34-23" aria-hidden="true" tabindex="-1"></a>encoding <span class="op">=</span> tokenizer(</span>
<span id="cb34-24"><a href="#cb34-24" aria-hidden="true" tabindex="-1"></a>    text_list,</span>
<span id="cb34-25"><a href="#cb34-25" aria-hidden="true" tabindex="-1"></a>    padding <span class="op">=</span> <span class="st">&#39;longest&#39;</span>,</span>
<span id="cb34-26"><a href="#cb34-26" aria-hidden="true" tabindex="-1"></a>    return_tensors<span class="op">=</span><span class="st">&#39;pt&#39;</span></span>
<span id="cb34-27"><a href="#cb34-27" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb34-28"><a href="#cb34-28" aria-hidden="true" tabindex="-1"></a>encoding <span class="op">=</span> { k: v.cuda() <span class="cf">for</span> k, v <span class="kw">in</span> encoding.items() }</span>
<span id="cb34-29"><a href="#cb34-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-30"><a href="#cb34-30" aria-hidden="true" tabindex="-1"></a><span class="co"># BERTへデータを入力し分類スコアを得る。</span></span>
<span id="cb34-31"><a href="#cb34-31" aria-hidden="true" tabindex="-1"></a><span class="cf">with</span> torch.no_grad():</span>
<span id="cb34-32"><a href="#cb34-32" aria-hidden="true" tabindex="-1"></a>    output <span class="op">=</span> bert_scml(<span class="op">**</span>encoding)</span>
<span id="cb34-33"><a href="#cb34-33" aria-hidden="true" tabindex="-1"></a>scores <span class="op">=</span> output.logits</span>
<span id="cb34-34"><a href="#cb34-34" aria-hidden="true" tabindex="-1"></a>labels_predicted <span class="op">=</span> ( scores <span class="op">&gt;</span> <span class="dv">0</span> ).<span class="bu">int</span>().cpu().numpy().tolist()</span>
<span id="cb34-35"><a href="#cb34-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-36"><a href="#cb34-36" aria-hidden="true" tabindex="-1"></a><span class="co"># 結果を表示</span></span>
<span id="cb34-37"><a href="#cb34-37" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> text, label <span class="kw">in</span> <span class="bu">zip</span>(text_list, labels_predicted):</span>
<span id="cb34-38"><a href="#cb34-38" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;--&#39;</span>)</span>
<span id="cb34-39"><a href="#cb34-39" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f&#39;入力：</span><span class="sc">{</span>text<span class="sc">}</span><span class="ss">&#39;</span>)</span>
<span id="cb34-40"><a href="#cb34-40" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f&#39;出力：</span><span class="sc">{</span>label<span class="sc">}</span><span class="ss">&#39;</span>)</span>
<span id="cb34-41"><a href="#cb34-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-42"><a href="#cb34-42" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb34-43"><a href="#cb34-43" aria-hidden="true" tabindex="-1"></a><span class="co">--</span></span>
<span id="cb34-44"><a href="#cb34-44" aria-hidden="true" tabindex="-1"></a><span class="co">入力：当連結会計年度の売上高は前期比5.8%増加し、業績は堅調に推移しました。</span></span>
<span id="cb34-45"><a href="#cb34-45" aria-hidden="true" tabindex="-1"></a><span class="co">出力：[0, 0, 1]</span></span>
<span id="cb34-46"><a href="#cb34-46" aria-hidden="true" tabindex="-1"></a><span class="co">--</span></span>
<span id="cb34-47"><a href="#cb34-47" aria-hidden="true" tabindex="-1"></a><span class="co">入力：海外市場での需要拡大が寄与し、売上および営業利益が過去最高を記録しました。</span></span>
<span id="cb34-48"><a href="#cb34-48" aria-hidden="true" tabindex="-1"></a><span class="co">出力：[0, 0, 1]</span></span>
<span id="cb34-49"><a href="#cb34-49" aria-hidden="true" tabindex="-1"></a><span class="co">--</span></span>
<span id="cb34-50"><a href="#cb34-50" aria-hidden="true" tabindex="-1"></a><span class="co">入力：一部事業における原材料価格の高騰の影響を受け、収益性が低下しました。</span></span>
<span id="cb34-51"><a href="#cb34-51" aria-hidden="true" tabindex="-1"></a><span class="co">出力：[1, 0, 0]</span></span>
<span id="cb34-52"><a href="#cb34-52" aria-hidden="true" tabindex="-1"></a><span class="co">--</span></span>
<span id="cb34-53"><a href="#cb34-53" aria-hidden="true" tabindex="-1"></a><span class="co">入力：国内景気は緩やかな回復基調を維持したものの、インフレ率の上昇が購買力に影響を及ぼしました。</span></span>
<span id="cb34-54"><a href="#cb34-54" aria-hidden="true" tabindex="-1"></a><span class="co">出力：[1, 0, 1]</span></span>
<span id="cb34-55"><a href="#cb34-55" aria-hidden="true" tabindex="-1"></a><span class="co">--</span></span>
<span id="cb34-56"><a href="#cb34-56" aria-hidden="true" tabindex="-1"></a><span class="co">入力：新興市場における競争激化により、当社製品のシェアは微減しましたが、全体的な市場拡大により売上は増加しました。</span></span>
<span id="cb34-57"><a href="#cb34-57" aria-hidden="true" tabindex="-1"></a><span class="co">出力：[1, 0, 1]</span></span>
<span id="cb34-58"><a href="#cb34-58" aria-hidden="true" tabindex="-1"></a><span class="co">--</span></span>
<span id="cb34-59"><a href="#cb34-59" aria-hidden="true" tabindex="-1"></a><span class="co">入力：為替変動が利益にプラスの影響を与えた一方で、サプライチェーンの遅延が一部事業の成長を抑制しました。</span></span>
<span id="cb34-60"><a href="#cb34-60" aria-hidden="true" tabindex="-1"></a><span class="co">出力：[1, 0, 1]</span></span>
<span id="cb34-61"><a href="#cb34-61" aria-hidden="true" tabindex="-1"></a><span class="co">--</span></span>
<span id="cb34-62"><a href="#cb34-62" aria-hidden="true" tabindex="-1"></a><span class="co">入力：2025年度に向けて、成長市場への積極的な投資と新規事業の開発に注力する予定です。</span></span>
<span id="cb34-63"><a href="#cb34-63" aria-hidden="true" tabindex="-1"></a><span class="co">出力：[0, 0, 0]</span></span>
<span id="cb34-64"><a href="#cb34-64" aria-hidden="true" tabindex="-1"></a><span class="co">--</span></span>
<span id="cb34-65"><a href="#cb34-65" aria-hidden="true" tabindex="-1"></a><span class="co">入力：業界全体の需要鈍化が予想される中で、コスト構造の見直しにより安定的な収益を確保していきます。</span></span>
<span id="cb34-66"><a href="#cb34-66" aria-hidden="true" tabindex="-1"></a><span class="co">出力：[0, 0, 1]</span></span>
<span id="cb34-67"><a href="#cb34-67" aria-hidden="true" tabindex="-1"></a><span class="co">--</span></span>
<span id="cb34-68"><a href="#cb34-68" aria-hidden="true" tabindex="-1"></a><span class="co">入力：カーボンニュートラル達成を目指し、再生可能エネルギーへのシフトを加速させます。</span></span>
<span id="cb34-69"><a href="#cb34-69" aria-hidden="true" tabindex="-1"></a><span class="co">出力：[0, 0, 0]</span></span>
<span id="cb34-70"><a href="#cb34-70" aria-hidden="true" tabindex="-1"></a><span class="co">--</span></span>
<span id="cb34-71"><a href="#cb34-71" aria-hidden="true" tabindex="-1"></a><span class="co">入力：当社は、デジタル化の遅れが競争力に与える影響を認識しており、ITシステムへの投資を増強する方針です。</span></span>
<span id="cb34-72"><a href="#cb34-72" aria-hidden="true" tabindex="-1"></a><span class="co">出力：[0, 0, 0]</span></span>
<span id="cb34-73"><a href="#cb34-73" aria-hidden="true" tabindex="-1"></a><span class="co">--</span></span>
<span id="cb34-74"><a href="#cb34-74" aria-hidden="true" tabindex="-1"></a><span class="co">入力：地政学的リスクの高まりにより、一部の輸出取引に不確実性が生じています。</span></span>
<span id="cb34-75"><a href="#cb34-75" aria-hidden="true" tabindex="-1"></a><span class="co">出力：[1, 0, 0]</span></span>
<span id="cb34-76"><a href="#cb34-76" aria-hidden="true" tabindex="-1"></a><span class="co">--</span></span>
<span id="cb34-77"><a href="#cb34-77" aria-hidden="true" tabindex="-1"></a><span class="co">入力：半導体不足の影響を受け、特定製品の納期が遅延する可能性があります。</span></span>
<span id="cb34-78"><a href="#cb34-78" aria-hidden="true" tabindex="-1"></a><span class="co">出力：[1, 0, 0]</span></span>
<span id="cb34-79"><a href="#cb34-79" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>結果を見てみるとかなり正確に文章のネガティブポジティブ判定ができていることが分かります.
文章を変える,外部からデータを取り込むなどして,これ以外の事例でも試してみましょう.</p>
<h1 data-number="6" id="自然言語ベクトル抽出によるデータ可視化と類似度評価"><span class="header-section-number">6</span> 自然言語ベクトル抽出によるデータ可視化と類似度評価</h1>
<p>続いて,BERTを利用して文章をベクトルに変換しクラスタリングや類似度の評価を行ってみます.
事例として,異なる言語(アラビア語,中国語,英語,フランス語,ドイツ度,ヒンディー語,インドネシア語,イタリア語,日本語,韓国語,ポルトガル語,ロシア語,スペイン語,トルコ語,)でのWikipediaにおけるLGBTQに関する記事の類似度を評価してみます.</p>
<p><a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/LGBTWiki.csv"><code>こちら</code></a>の各言語の記事を日本語に翻訳したデータをダウンロードして,Google Driveの作業用ディレクトリの<code>Data</code>フォルダ内に配置しましょう. 本来は, 英語に翻訳したほうが翻訳精度の関係から望ましいですが,ここでは分かりやすいように日本語に翻訳してあります.</p>
<p>また,<code>Colaboratory</code>上で日本語のワードクラウドなどを作成するために,日本語のフォントをGoogle Driveにアップロードしておく必要があります. <a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/fonts-japanese-gothic.ttf"><code>こちら</code></a>の日本語フォントをダウンロードして,<code>Data</code>フォルダ内に配置してきましょう.</p>
<p>まずは,Google Driveのマウントと必要なライブラリのインストールを行います.</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true" tabindex="-1"></a><span class="co">#Google Drive上のデータを利用できるようにする</span></span>
<span id="cb35-2"><a href="#cb35-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> google.colab <span class="im">import</span> drive</span>
<span id="cb35-3"><a href="#cb35-3" aria-hidden="true" tabindex="-1"></a>drive.mount(<span class="st">&#39;/content/drive&#39;</span>)</span>
<span id="cb35-4"><a href="#cb35-4" aria-hidden="true" tabindex="-1"></a><span class="co">#ディレクトリの移動</span></span>
<span id="cb35-5"><a href="#cb35-5" aria-hidden="true" tabindex="-1"></a><span class="co">#ここを自分のディレクトリにすればデータが利用可能</span></span>
<span id="cb35-6"><a href="#cb35-6" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>cd <span class="op">/</span>content<span class="op">/</span>drive<span class="op">/</span>My Drive<span class="op">/</span>slds</span>
<span id="cb35-7"><a href="#cb35-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-8"><a href="#cb35-8" aria-hidden="true" tabindex="-1"></a><span class="op">!</span>pip install transformers<span class="op">==</span><span class="fl">4.18.0</span> fugashi<span class="op">==</span><span class="fl">1.1.0</span> ipadic<span class="op">==</span><span class="fl">1.0.0</span></span>
<span id="cb35-9"><a href="#cb35-9" aria-hidden="true" tabindex="-1"></a><span class="op">!</span>pip install japanize_matplotlib</span>
<span id="cb35-10"><a href="#cb35-10" aria-hidden="true" tabindex="-1"></a><span class="op">!</span>pip install adjustText</span></code></pre></div>
<p>続いて各種インポートと,設定を行います.</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> random</span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> glob</span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> tqdm <span class="im">import</span> tqdm</span>
<span id="cb36-4"><a href="#cb36-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb36-5"><a href="#cb36-5" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.manifold <span class="im">import</span> TSNE</span>
<span id="cb36-6"><a href="#cb36-6" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.decomposition <span class="im">import</span> PCA</span>
<span id="cb36-7"><a href="#cb36-7" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.pyplot <span class="im">as</span> plt</span>
<span id="cb36-8"><a href="#cb36-8" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> japanize_matplotlib</span>
<span id="cb36-9"><a href="#cb36-9" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb36-10"><a href="#cb36-10" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> torch</span>
<span id="cb36-11"><a href="#cb36-11" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> torch.utils.data <span class="im">import</span> DataLoader</span>
<span id="cb36-12"><a href="#cb36-12" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> transformers <span class="im">import</span> BertJapaneseTokenizer, BertModel</span>
<span id="cb36-13"><a href="#cb36-13" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> seaborn <span class="im">as</span> sns</span>
<span id="cb36-14"><a href="#cb36-14" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> adjustText <span class="im">import</span> adjust_text</span>
<span id="cb36-15"><a href="#cb36-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-16"><a href="#cb36-16" aria-hidden="true" tabindex="-1"></a><span class="co">#グラフの設定</span></span>
<span id="cb36-17"><a href="#cb36-17" aria-hidden="true" tabindex="-1"></a>plt.style.use(<span class="st">&#39;ggplot&#39;</span>) <span class="co">#グラフスタイル</span></span>
<span id="cb36-18"><a href="#cb36-18" aria-hidden="true" tabindex="-1"></a>plt.rcParams[<span class="st">&#39;figure.figsize&#39;</span>] <span class="op">=</span> [<span class="dv">20</span>, <span class="dv">15</span>] <span class="co">#グラフサイズ</span></span>
<span id="cb36-19"><a href="#cb36-19" aria-hidden="true" tabindex="-1"></a>plt.rcParams[<span class="st">&#39;font.size&#39;</span>] <span class="op">=</span> <span class="dv">14</span> <span class="co">#フォントサイズ</span></span>
<span id="cb36-20"><a href="#cb36-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-21"><a href="#cb36-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-22"><a href="#cb36-22" aria-hidden="true" tabindex="-1"></a><span class="co"># BERTの日本語モデル</span></span>
<span id="cb36-23"><a href="#cb36-23" aria-hidden="true" tabindex="-1"></a>MODEL_NAME <span class="op">=</span> <span class="st">&#39;tohoku-nlp/bert-base-japanese-whole-word-masking&#39;</span></span></code></pre></div>
<p>データを読み込み,ベクトル化します. 今回はファインチューニングは行わず日本語Wikipediaで学習したBERTのモデルをそのまま利用します.</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true" tabindex="-1"></a><span class="co"># ベクトルを作成するデータの読み込み</span></span>
<span id="cb37-2"><a href="#cb37-2" aria-hidden="true" tabindex="-1"></a>df_wiki <span class="op">=</span> pd.read_csv(<span class="st">&#39;./data/LGBTWiki.csv&#39;</span>)</span>
<span id="cb37-3"><a href="#cb37-3" aria-hidden="true" tabindex="-1"></a>category_list <span class="op">=</span> [<span class="st">&#39;Arabic&#39;</span></span>
<span id="cb37-4"><a href="#cb37-4" aria-hidden="true" tabindex="-1"></a>                ,<span class="st">&#39;Chinese&#39;</span></span>
<span id="cb37-5"><a href="#cb37-5" aria-hidden="true" tabindex="-1"></a>                ,<span class="st">&#39;English&#39;</span></span>
<span id="cb37-6"><a href="#cb37-6" aria-hidden="true" tabindex="-1"></a>                ,<span class="st">&#39;France&#39;</span></span>
<span id="cb37-7"><a href="#cb37-7" aria-hidden="true" tabindex="-1"></a>                ,<span class="st">&#39;German&#39;</span></span>
<span id="cb37-8"><a href="#cb37-8" aria-hidden="true" tabindex="-1"></a>                ,<span class="st">&#39;Hindi&#39;</span></span>
<span id="cb37-9"><a href="#cb37-9" aria-hidden="true" tabindex="-1"></a>                ,<span class="st">&#39;Indonesian&#39;</span></span>
<span id="cb37-10"><a href="#cb37-10" aria-hidden="true" tabindex="-1"></a>                ,<span class="st">&#39;Italian&#39;</span></span>
<span id="cb37-11"><a href="#cb37-11" aria-hidden="true" tabindex="-1"></a>                ,<span class="st">&#39;Japanese&#39;</span></span>
<span id="cb37-12"><a href="#cb37-12" aria-hidden="true" tabindex="-1"></a>                ,<span class="st">&#39;Korean&#39;</span></span>
<span id="cb37-13"><a href="#cb37-13" aria-hidden="true" tabindex="-1"></a>                ,<span class="st">&#39;Portuguese&#39;</span></span>
<span id="cb37-14"><a href="#cb37-14" aria-hidden="true" tabindex="-1"></a>                ,<span class="st">&#39;Russian&#39;</span></span>
<span id="cb37-15"><a href="#cb37-15" aria-hidden="true" tabindex="-1"></a>                ,<span class="st">&#39;Spanish&#39;</span></span>
<span id="cb37-16"><a href="#cb37-16" aria-hidden="true" tabindex="-1"></a>                ,<span class="st">&#39;Turkish&#39;</span>]</span>
<span id="cb37-17"><a href="#cb37-17" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df_wiki)</span>
<span id="cb37-18"><a href="#cb37-18" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df_wiki[<span class="st">&#39;Text&#39;</span>][<span class="dv">0</span>])</span>
<span id="cb37-19"><a href="#cb37-19" aria-hidden="true" tabindex="-1"></a>df_wiki[<span class="st">&#39;Text&#39;</span>] <span class="op">=</span> df_wiki[<span class="st">&#39;Text&#39;</span>].astype(<span class="bu">str</span>)</span>
<span id="cb37-20"><a href="#cb37-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb37-21"><a href="#cb37-21" aria-hidden="true" tabindex="-1"></a><span class="co"># トークナイザとモデルのロード</span></span>
<span id="cb37-22"><a href="#cb37-22" aria-hidden="true" tabindex="-1"></a>tokenizer <span class="op">=</span> BertJapaneseTokenizer.from_pretrained(MODEL_NAME)</span>
<span id="cb37-23"><a href="#cb37-23" aria-hidden="true" tabindex="-1"></a>model <span class="op">=</span> BertModel.from_pretrained(MODEL_NAME)</span>
<span id="cb37-24"><a href="#cb37-24" aria-hidden="true" tabindex="-1"></a>model <span class="op">=</span> model.cuda()</span>
<span id="cb37-25"><a href="#cb37-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb37-26"><a href="#cb37-26" aria-hidden="true" tabindex="-1"></a><span class="co"># 各データの形式を整える</span></span>
<span id="cb37-27"><a href="#cb37-27" aria-hidden="true" tabindex="-1"></a>max_length <span class="op">=</span> <span class="dv">256</span></span>
<span id="cb37-28"><a href="#cb37-28" aria-hidden="true" tabindex="-1"></a>sentence_vectors <span class="op">=</span> [] <span class="co"># 文章ベクトルを追加していく。</span></span>
<span id="cb37-29"><a href="#cb37-29" aria-hidden="true" tabindex="-1"></a>labels <span class="op">=</span> [] <span class="co"># ラベルを追加していく。</span></span>
<span id="cb37-30"><a href="#cb37-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb37-31"><a href="#cb37-31" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> tqdm(df_wiki.index):</span>
<span id="cb37-32"><a href="#cb37-32" aria-hidden="true" tabindex="-1"></a>    encoding <span class="op">=</span> tokenizer(</span>
<span id="cb37-33"><a href="#cb37-33" aria-hidden="true" tabindex="-1"></a>        df_wiki.at[i,<span class="st">&#39;Text&#39;</span>],</span>
<span id="cb37-34"><a href="#cb37-34" aria-hidden="true" tabindex="-1"></a>        max_length<span class="op">=</span>max_length,</span>
<span id="cb37-35"><a href="#cb37-35" aria-hidden="true" tabindex="-1"></a>        padding<span class="op">=</span><span class="st">&#39;max_length&#39;</span>,</span>
<span id="cb37-36"><a href="#cb37-36" aria-hidden="true" tabindex="-1"></a>        truncation<span class="op">=</span><span class="va">True</span>,</span>
<span id="cb37-37"><a href="#cb37-37" aria-hidden="true" tabindex="-1"></a>        return_tensors<span class="op">=</span><span class="st">&#39;pt&#39;</span></span>
<span id="cb37-38"><a href="#cb37-38" aria-hidden="true" tabindex="-1"></a>    )</span>
<span id="cb37-39"><a href="#cb37-39" aria-hidden="true" tabindex="-1"></a>    encoding <span class="op">=</span> { k: v.cuda() <span class="cf">for</span> k, v <span class="kw">in</span> encoding.items() }</span>
<span id="cb37-40"><a href="#cb37-40" aria-hidden="true" tabindex="-1"></a>    attention_mask <span class="op">=</span> encoding[<span class="st">&#39;attention_mask&#39;</span>]</span>
<span id="cb37-41"><a href="#cb37-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb37-42"><a href="#cb37-42" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 文章ベクトルを計算</span></span>
<span id="cb37-43"><a href="#cb37-43" aria-hidden="true" tabindex="-1"></a>    <span class="co"># BERTの最終層の出力を平均を計算する。（ただし、[PAD]は除く。）</span></span>
<span id="cb37-44"><a href="#cb37-44" aria-hidden="true" tabindex="-1"></a>    <span class="cf">with</span> torch.no_grad():</span>
<span id="cb37-45"><a href="#cb37-45" aria-hidden="true" tabindex="-1"></a>        output <span class="op">=</span> model(<span class="op">**</span>encoding)</span>
<span id="cb37-46"><a href="#cb37-46" aria-hidden="true" tabindex="-1"></a>        last_hidden_state <span class="op">=</span> output.last_hidden_state</span>
<span id="cb37-47"><a href="#cb37-47" aria-hidden="true" tabindex="-1"></a>        averaged_hidden_state <span class="op">=</span> <span class="op">\</span></span>
<span id="cb37-48"><a href="#cb37-48" aria-hidden="true" tabindex="-1"></a>            (last_hidden_state<span class="op">*</span>attention_mask.unsqueeze(<span class="op">-</span><span class="dv">1</span>)).<span class="bu">sum</span>(<span class="dv">1</span>) <span class="op">\</span></span>
<span id="cb37-49"><a href="#cb37-49" aria-hidden="true" tabindex="-1"></a>            <span class="op">/</span> attention_mask.<span class="bu">sum</span>(<span class="dv">1</span>, keepdim<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb37-50"><a href="#cb37-50" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb37-51"><a href="#cb37-51" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 文章ベクトルとラベルを追加</span></span>
<span id="cb37-52"><a href="#cb37-52" aria-hidden="true" tabindex="-1"></a>    sentence_vectors.append(averaged_hidden_state[<span class="dv">0</span>].cpu().numpy())</span>
<span id="cb37-53"><a href="#cb37-53" aria-hidden="true" tabindex="-1"></a>    labels.append(df_wiki.at[i,<span class="st">&#39;Country&#39;</span>])</span>
<span id="cb37-54"><a href="#cb37-54" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb37-55"><a href="#cb37-55" aria-hidden="true" tabindex="-1"></a><span class="co"># それぞれをnumpy.ndarrayにする。</span></span>
<span id="cb37-56"><a href="#cb37-56" aria-hidden="true" tabindex="-1"></a>sentence_vectors <span class="op">=</span> np.vstack(sentence_vectors)</span>
<span id="cb37-57"><a href="#cb37-57" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(sentence_vectors)</span>
<span id="cb37-58"><a href="#cb37-58" aria-hidden="true" tabindex="-1"></a>labels <span class="op">=</span> np.array(labels)</span>
<span id="cb37-59"><a href="#cb37-59" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(labels)</span></code></pre></div>
<p>各Wikipediaの記事がベクトル化されたので,それぞれのコサイン距離を計算します.</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb38-1"><a href="#cb38-1" aria-hidden="true" tabindex="-1"></a>df_vector <span class="op">=</span> pd.DataFrame(data<span class="op">=</span>sentence_vectors.T,columns<span class="op">=</span>labels)</span>
<span id="cb38-2"><a href="#cb38-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df_vector)</span>
<span id="cb38-3"><a href="#cb38-3" aria-hidden="true" tabindex="-1"></a>df_vector.to_csv(<span class="st">&#39;data/vector.csv&#39;</span>,encoding<span class="op">=</span><span class="st">&#39;utf-8-sig&#39;</span>)</span>
<span id="cb38-4"><a href="#cb38-4" aria-hidden="true" tabindex="-1"></a><span class="co">#コサイン類似度の計算</span></span>
<span id="cb38-5"><a href="#cb38-5" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> cos(x,y):</span>
<span id="cb38-6"><a href="#cb38-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> np.dot(x,y) <span class="op">/</span> (np.linalg.norm(x)<span class="op">*</span>np.linalg.norm(y))</span>
<span id="cb38-7"><a href="#cb38-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-8"><a href="#cb38-8" aria-hidden="true" tabindex="-1"></a><span class="co">#全組み合わせのコサイン距離</span></span>
<span id="cb38-9"><a href="#cb38-9" aria-hidden="true" tabindex="-1"></a>df_cos <span class="op">=</span> pd.DataFrame(columns<span class="op">=</span>[<span class="bu">str</span>(x) <span class="cf">for</span> x <span class="kw">in</span> labels]</span>
<span id="cb38-10"><a href="#cb38-10" aria-hidden="true" tabindex="-1"></a>                      ,index<span class="op">=</span>[<span class="bu">str</span>(x) <span class="cf">for</span> x <span class="kw">in</span> labels])</span>
<span id="cb38-11"><a href="#cb38-11" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> df_cos.index:</span>
<span id="cb38-12"><a href="#cb38-12" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> c <span class="kw">in</span> df_cos.columns:</span>
<span id="cb38-13"><a href="#cb38-13" aria-hidden="true" tabindex="-1"></a>    df_cos.at[i,c] <span class="op">=</span> cos(df_vector[i],df_vector[c])</span>
<span id="cb38-14"><a href="#cb38-14" aria-hidden="true" tabindex="-1"></a>df_cos <span class="op">=</span> df_cos[labels].astype(<span class="bu">float</span>)</span>
<span id="cb38-15"><a href="#cb38-15" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df_cos.dtypes)</span>
<span id="cb38-16"><a href="#cb38-16" aria-hidden="true" tabindex="-1"></a>df_cos.sort_values(inplace<span class="op">=</span><span class="va">True</span>, by<span class="op">=</span>[<span class="st">&#39;German&#39;</span>],ascending<span class="op">=</span><span class="va">False</span>)</span>
<span id="cb38-17"><a href="#cb38-17" aria-hidden="true" tabindex="-1"></a>df_cos <span class="op">=</span> df_cos.reindex(columns<span class="op">=</span>df_cos.index)</span>
<span id="cb38-18"><a href="#cb38-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-19"><a href="#cb38-19" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;コサイン距離------&#39;</span>)</span>
<span id="cb38-20"><a href="#cb38-20" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df_cos)</span>
<span id="cb38-21"><a href="#cb38-21" aria-hidden="true" tabindex="-1"></a>sns.heatmap(df_cos)</span>
<span id="cb38-22"><a href="#cb38-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-23"><a href="#cb38-23" aria-hidden="true" tabindex="-1"></a>df_cos.to_csv(<span class="st">&#39;data/cos.csv&#39;</span>,encoding<span class="op">=</span><span class="st">&#39;utf-8-sig&#39;</span>)</span>
<span id="cb38-24"><a href="#cb38-24" aria-hidden="true" tabindex="-1"></a><span class="co">#ドイツとの距離を測る</span></span>
<span id="cb38-25"><a href="#cb38-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-26"><a href="#cb38-26" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb38-27"><a href="#cb38-27" aria-hidden="true" tabindex="-1"></a><span class="co">コサイン距離------</span></span>
<span id="cb38-28"><a href="#cb38-28" aria-hidden="true" tabindex="-1"></a><span class="co">              German   Spanish  Portuguese    France   Italian   Russian  </span><span class="ch">\</span></span>
<span id="cb38-29"><a href="#cb38-29" aria-hidden="true" tabindex="-1"></a><span class="co">German      1.000000  0.979876    0.977262  0.972203  0.971380  0.969898</span></span>
<span id="cb38-30"><a href="#cb38-30" aria-hidden="true" tabindex="-1"></a><span class="co">Spanish     0.979876  1.000000    0.982863  0.978872  0.979864  0.978996</span></span>
<span id="cb38-31"><a href="#cb38-31" aria-hidden="true" tabindex="-1"></a><span class="co">Portuguese  0.977262  0.982863    1.000000  0.976089  0.981436  0.982457</span></span>
<span id="cb38-32"><a href="#cb38-32" aria-hidden="true" tabindex="-1"></a><span class="co">France      0.972203  0.978872    0.976089  1.000000  0.976741  0.970900</span></span>
<span id="cb38-33"><a href="#cb38-33" aria-hidden="true" tabindex="-1"></a><span class="co">Italian     0.971380  0.979864    0.981436  0.976741  1.000000  0.976250</span></span>
<span id="cb38-34"><a href="#cb38-34" aria-hidden="true" tabindex="-1"></a><span class="co">Russian     0.969898  0.978996    0.982457  0.970900  0.976250  1.000000</span></span>
<span id="cb38-35"><a href="#cb38-35" aria-hidden="true" tabindex="-1"></a><span class="co">Hindi       0.968832  0.973127    0.980610  0.963404  0.976204  0.975082</span></span>
<span id="cb38-36"><a href="#cb38-36" aria-hidden="true" tabindex="-1"></a><span class="co">Arabic      0.967984  0.970234    0.980389  0.958874  0.968162  0.975689</span></span>
<span id="cb38-37"><a href="#cb38-37" aria-hidden="true" tabindex="-1"></a><span class="co">Japanese    0.956910  0.962005    0.955607  0.964237  0.967997  0.953722</span></span>
<span id="cb38-38"><a href="#cb38-38" aria-hidden="true" tabindex="-1"></a><span class="co">Turkish     0.940751  0.944137    0.937296  0.952527  0.953905  0.943392</span></span>
<span id="cb38-39"><a href="#cb38-39" aria-hidden="true" tabindex="-1"></a><span class="co">Chinise     0.933739  0.952394    0.945277  0.935895  0.951706  0.941210</span></span>
<span id="cb38-40"><a href="#cb38-40" aria-hidden="true" tabindex="-1"></a><span class="co">Korean      0.927201  0.927902    0.905628  0.919758  0.928268  0.904069</span></span>
<span id="cb38-41"><a href="#cb38-41" aria-hidden="true" tabindex="-1"></a><span class="co">English     0.912216  0.912019    0.890923  0.910977  0.916483  0.889809</span></span>
<span id="cb38-42"><a href="#cb38-42" aria-hidden="true" tabindex="-1"></a><span class="co">Indonesian  0.882634  0.879143    0.856105  0.877627  0.882631  0.857904</span></span>
<span id="cb38-43"><a href="#cb38-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-44"><a href="#cb38-44" aria-hidden="true" tabindex="-1"></a><span class="co">               Hindi    Arabic  Japanese   Turkish   Chinise    Korean  </span><span class="ch">\</span></span>
<span id="cb38-45"><a href="#cb38-45" aria-hidden="true" tabindex="-1"></a><span class="co">German      0.968832  0.967984  0.956910  0.940751  0.933739  0.927201</span></span>
<span id="cb38-46"><a href="#cb38-46" aria-hidden="true" tabindex="-1"></a><span class="co">Spanish     0.973127  0.970234  0.962005  0.944137  0.952394  0.927902</span></span>
<span id="cb38-47"><a href="#cb38-47" aria-hidden="true" tabindex="-1"></a><span class="co">Portuguese  0.980610  0.980389  0.955607  0.937296  0.945277  0.905628</span></span>
<span id="cb38-48"><a href="#cb38-48" aria-hidden="true" tabindex="-1"></a><span class="co">France      0.963404  0.958874  0.964237  0.952527  0.935895  0.919758</span></span>
<span id="cb38-49"><a href="#cb38-49" aria-hidden="true" tabindex="-1"></a><span class="co">Italian     0.976204  0.968162  0.967997  0.953905  0.951706  0.928268</span></span>
<span id="cb38-50"><a href="#cb38-50" aria-hidden="true" tabindex="-1"></a><span class="co">Russian     0.975082  0.975689  0.953722  0.943392  0.941210  0.904069</span></span>
<span id="cb38-51"><a href="#cb38-51" aria-hidden="true" tabindex="-1"></a><span class="co">Hindi       1.000000  0.976721  0.962024  0.939230  0.945298  0.889991</span></span>
<span id="cb38-52"><a href="#cb38-52" aria-hidden="true" tabindex="-1"></a><span class="co">Arabic      0.976721  1.000000  0.944017  0.932226  0.924914  0.881642</span></span>
<span id="cb38-53"><a href="#cb38-53" aria-hidden="true" tabindex="-1"></a><span class="co">Japanese    0.962024  0.944017  1.000000  0.952746  0.918798  0.903691</span></span>
<span id="cb38-54"><a href="#cb38-54" aria-hidden="true" tabindex="-1"></a><span class="co">Turkish     0.939230  0.932226  0.952746  1.000000  0.902123  0.894593</span></span>
<span id="cb38-55"><a href="#cb38-55" aria-hidden="true" tabindex="-1"></a><span class="co">Chinise     0.945298  0.924914  0.918798  0.902123  1.000000  0.927152</span></span>
<span id="cb38-56"><a href="#cb38-56" aria-hidden="true" tabindex="-1"></a><span class="co">Korean      0.889991  0.881642  0.903691  0.894593  0.927152  1.000000</span></span>
<span id="cb38-57"><a href="#cb38-57" aria-hidden="true" tabindex="-1"></a><span class="co">English     0.875571  0.867936  0.895869  0.893318  0.898600  0.978736</span></span>
<span id="cb38-58"><a href="#cb38-58" aria-hidden="true" tabindex="-1"></a><span class="co">Indonesian  0.837501  0.831484  0.856639  0.860593  0.869281  0.970492</span></span>
<span id="cb38-59"><a href="#cb38-59" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-60"><a href="#cb38-60" aria-hidden="true" tabindex="-1"></a><span class="co">             English  Indonesian</span></span>
<span id="cb38-61"><a href="#cb38-61" aria-hidden="true" tabindex="-1"></a><span class="co">German      0.912216    0.882634</span></span>
<span id="cb38-62"><a href="#cb38-62" aria-hidden="true" tabindex="-1"></a><span class="co">Spanish     0.912019    0.879143</span></span>
<span id="cb38-63"><a href="#cb38-63" aria-hidden="true" tabindex="-1"></a><span class="co">Portuguese  0.890923    0.856105</span></span>
<span id="cb38-64"><a href="#cb38-64" aria-hidden="true" tabindex="-1"></a><span class="co">France      0.910977    0.877627</span></span>
<span id="cb38-65"><a href="#cb38-65" aria-hidden="true" tabindex="-1"></a><span class="co">Italian     0.916483    0.882631</span></span>
<span id="cb38-66"><a href="#cb38-66" aria-hidden="true" tabindex="-1"></a><span class="co">Russian     0.889809    0.857904</span></span>
<span id="cb38-67"><a href="#cb38-67" aria-hidden="true" tabindex="-1"></a><span class="co">Hindi       0.875571    0.837501</span></span>
<span id="cb38-68"><a href="#cb38-68" aria-hidden="true" tabindex="-1"></a><span class="co">Arabic      0.867936    0.831484</span></span>
<span id="cb38-69"><a href="#cb38-69" aria-hidden="true" tabindex="-1"></a><span class="co">Japanese    0.895869    0.856639</span></span>
<span id="cb38-70"><a href="#cb38-70" aria-hidden="true" tabindex="-1"></a><span class="co">Turkish     0.893318    0.860593</span></span>
<span id="cb38-71"><a href="#cb38-71" aria-hidden="true" tabindex="-1"></a><span class="co">Chinise     0.898600    0.869281</span></span>
<span id="cb38-72"><a href="#cb38-72" aria-hidden="true" tabindex="-1"></a><span class="co">Korean      0.978736    0.970492</span></span>
<span id="cb38-73"><a href="#cb38-73" aria-hidden="true" tabindex="-1"></a><span class="co">English     1.000000    0.972170</span></span>
<span id="cb38-74"><a href="#cb38-74" aria-hidden="true" tabindex="-1"></a><span class="co">Indonesian  0.972170    1.000000</span></span>
<span id="cb38-75"><a href="#cb38-75" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>各言語間の記事の内容のコサイン類似度をヒートマップで表現すると以下のようになりました.</p>
<p><img src="/images/ch15-wiki-cos.png" /></p>
<p>今回はドイツ語からの距離を基準にソートされていますが,ドイツ語と類似度が高いヨーロッパ言語圏のクラスタ,韓国語,インドネシア語,英語のクラスタがあることが見受けられます.</p>
<p>続いて,各言語のベクトルをPCAとt-sneによって次元削減して,2次元上に配置してみます.</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb39-1"><a href="#cb39-1" aria-hidden="true" tabindex="-1"></a><span class="co">#PCAとtsneの比較</span></span>
<span id="cb39-2"><a href="#cb39-2" aria-hidden="true" tabindex="-1"></a><span class="co">#PCAによる次元削減</span></span>
<span id="cb39-3"><a href="#cb39-3" aria-hidden="true" tabindex="-1"></a>pca <span class="op">=</span> sentence_vectors_pca <span class="op">=</span> PCA(n_components<span class="op">=</span><span class="dv">2</span>).fit_transform(sentence_vectors)</span>
<span id="cb39-4"><a href="#cb39-4" aria-hidden="true" tabindex="-1"></a>plt.scatter(pca[:,<span class="dv">0</span>],pca[:,<span class="dv">1</span>])</span>
<span id="cb39-5"><a href="#cb39-5" aria-hidden="true" tabindex="-1"></a>text <span class="op">=</span> [plt.text(pca[i,<span class="dv">0</span>],pca[i,<span class="dv">1</span>],l) <span class="cf">for</span> i,l <span class="kw">in</span> <span class="bu">enumerate</span>(labels)]</span>
<span id="cb39-6"><a href="#cb39-6" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;PCA&#39;</span>)</span>
<span id="cb39-7"><a href="#cb39-7" aria-hidden="true" tabindex="-1"></a>adjust_text(text, arrowprops<span class="op">=</span><span class="bu">dict</span>(arrowstyle<span class="op">=</span><span class="st">&#39;-&#39;</span>, color<span class="op">=</span><span class="st">&#39;gray&#39;</span>, lw<span class="op">=</span><span class="fl">0.5</span>))</span>
<span id="cb39-8"><a href="#cb39-8" aria-hidden="true" tabindex="-1"></a>plt.show()</span>
<span id="cb39-9"><a href="#cb39-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-10"><a href="#cb39-10" aria-hidden="true" tabindex="-1"></a><span class="co"># t-sneによる次元削減 pの適正値を探す</span></span>
<span id="cb39-11"><a href="#cb39-11" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb39-12"><a href="#cb39-12" aria-hidden="true" tabindex="-1"></a><span class="co">for p in range(5,14):</span></span>
<span id="cb39-13"><a href="#cb39-13" aria-hidden="true" tabindex="-1"></a><span class="co">  tsne = sentence_vectors_tsne = TSNE(n_components=2,perplexity=p).fit_transform(sentence_vectors)</span></span>
<span id="cb39-14"><a href="#cb39-14" aria-hidden="true" tabindex="-1"></a><span class="co">  plt.scatter(tsne[:,0],tsne[:,1])</span></span>
<span id="cb39-15"><a href="#cb39-15" aria-hidden="true" tabindex="-1"></a><span class="co">  for i,l in enumerate(labels):</span></span>
<span id="cb39-16"><a href="#cb39-16" aria-hidden="true" tabindex="-1"></a><span class="co">    plt.text(tsne[i,0],tsne[i,1],l)</span></span>
<span id="cb39-17"><a href="#cb39-17" aria-hidden="true" tabindex="-1"></a><span class="co">  plt.title(&#39;TSNE p = &#39;+ str(p))</span></span>
<span id="cb39-18"><a href="#cb39-18" aria-hidden="true" tabindex="-1"></a><span class="co">  plt.show()</span></span>
<span id="cb39-19"><a href="#cb39-19" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb39-20"><a href="#cb39-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-21"><a href="#cb39-21" aria-hidden="true" tabindex="-1"></a><span class="co">#距離と整合的なのでp=5で決め打ち</span></span>
<span id="cb39-22"><a href="#cb39-22" aria-hidden="true" tabindex="-1"></a>tsne <span class="op">=</span> sentence_vectors_tsne <span class="op">=</span> TSNE(n_components<span class="op">=</span><span class="dv">2</span>,perplexity<span class="op">=</span><span class="dv">5</span>).fit_transform(sentence_vectors)</span>
<span id="cb39-23"><a href="#cb39-23" aria-hidden="true" tabindex="-1"></a>plt.scatter(tsne[:,<span class="dv">0</span>],tsne[:,<span class="dv">1</span>])</span>
<span id="cb39-24"><a href="#cb39-24" aria-hidden="true" tabindex="-1"></a>text <span class="op">=</span> [plt.text(tsne[i,<span class="dv">0</span>],tsne[i,<span class="dv">1</span>],l) <span class="cf">for</span> i,l <span class="kw">in</span> <span class="bu">enumerate</span>(labels)]</span>
<span id="cb39-25"><a href="#cb39-25" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;TSNE&#39;</span>)</span>
<span id="cb39-26"><a href="#cb39-26" aria-hidden="true" tabindex="-1"></a>adjust_text(text, arrowprops<span class="op">=</span><span class="bu">dict</span>(arrowstyle<span class="op">=</span><span class="st">&#39;-&#39;</span>, color<span class="op">=</span><span class="st">&#39;gray&#39;</span>, lw<span class="op">=</span><span class="fl">0.5</span>))</span>
<span id="cb39-27"><a href="#cb39-27" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<p>結果は以下のようになりました. いずれの次元削減手法でも,韓国語,インドネシア語,英語のクラスタが見て取れますが,PCAではトルコ語,日本語,中国語などが離れた位置に配置され,それ以外の言語が固まっています.</p>
<p><img src="/images/ch15-wiki-pca.png" /></p>
<p><img src="/images/ch15-wiki-tsne.png" /></p>
<p>ここではよりクラスタに特徴が見られる,PCAを利用してクラスタリングを行ってみましょう.
教師なし学習なので,階層クラスタリングを行ってみます.
研究では,中心や距離を適切に設定する必要がありますが,ここではWard法を用いてみます.</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb40-1"><a href="#cb40-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 階層クラスタリングで決め打ちする.</span></span>
<span id="cb40-2"><a href="#cb40-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> scipy.cluster.hierarchy <span class="im">import</span> dendrogram, linkage, fcluster</span>
<span id="cb40-3"><a href="#cb40-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb40-4"><a href="#cb40-4" aria-hidden="true" tabindex="-1"></a><span class="co">#ward法で分類</span></span>
<span id="cb40-5"><a href="#cb40-5" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame({<span class="st">&#39;x&#39;</span>:pca[:,<span class="dv">0</span>]</span>
<span id="cb40-6"><a href="#cb40-6" aria-hidden="true" tabindex="-1"></a>                  ,<span class="st">&#39;y&#39;</span>:pca[:,<span class="dv">1</span>]}</span>
<span id="cb40-7"><a href="#cb40-7" aria-hidden="true" tabindex="-1"></a>                  ,index<span class="op">=</span>labels)</span>
<span id="cb40-8"><a href="#cb40-8" aria-hidden="true" tabindex="-1"></a>res <span class="op">=</span> linkage(df[[<span class="st">&#39;x&#39;</span>,<span class="st">&#39;y&#39;</span>]]</span>
<span id="cb40-9"><a href="#cb40-9" aria-hidden="true" tabindex="-1"></a>             , method <span class="op">=</span> <span class="st">&#39;ward&#39;</span>)</span>
<span id="cb40-10"><a href="#cb40-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb40-11"><a href="#cb40-11" aria-hidden="true" tabindex="-1"></a><span class="co"># デンドログラムの図示</span></span>
<span id="cb40-12"><a href="#cb40-12" aria-hidden="true" tabindex="-1"></a>dendrogram(res,labels<span class="op">=</span>labels)</span>
<span id="cb40-13"><a href="#cb40-13" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&quot;Dedrogram&quot;</span>)</span>
<span id="cb40-14"><a href="#cb40-14" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&quot;Threshold&quot;</span>)</span>
<span id="cb40-15"><a href="#cb40-15" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<p><img src="/images/ch15-wiki-dendrogram.png" /></p>
<p>階層クラスタリングで得られた結果を散布図上に色で表現してみます.</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb41-1"><a href="#cb41-1" aria-hidden="true" tabindex="-1"></a>clusters <span class="op">=</span> fcluster(res, t<span class="op">=</span><span class="dv">5</span>, criterion<span class="op">=</span><span class="st">&#39;maxclust&#39;</span>)</span>
<span id="cb41-2"><a href="#cb41-2" aria-hidden="true" tabindex="-1"></a>colors <span class="op">=</span>   [<span class="st">&quot;orange&quot;</span>, <span class="st">&quot;pink&quot;</span>, <span class="st">&quot;blue&quot;</span>, <span class="st">&quot;brown&quot;</span>, <span class="st">&quot;red&quot;</span>, <span class="st">&quot;grey&quot;</span>, <span class="st">&quot;yellow&quot;</span>, <span class="st">&quot;green&quot;</span>]</span>
<span id="cb41-3"><a href="#cb41-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(clusters)</span>
<span id="cb41-4"><a href="#cb41-4" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;c&#39;</span>] <span class="op">=</span> clusters</span>
<span id="cb41-5"><a href="#cb41-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb41-6"><a href="#cb41-6" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">list</span>(<span class="bu">set</span>(clusters)):</span>
<span id="cb41-7"><a href="#cb41-7" aria-hidden="true" tabindex="-1"></a>  x <span class="op">=</span> df[df[<span class="st">&#39;c&#39;</span>]<span class="op">==</span>i][<span class="st">&#39;x&#39;</span>]</span>
<span id="cb41-8"><a href="#cb41-8" aria-hidden="true" tabindex="-1"></a>  y <span class="op">=</span> df[df[<span class="st">&#39;c&#39;</span>]<span class="op">==</span>i][<span class="st">&#39;y&#39;</span>]</span>
<span id="cb41-9"><a href="#cb41-9" aria-hidden="true" tabindex="-1"></a>  plt.scatter( x</span>
<span id="cb41-10"><a href="#cb41-10" aria-hidden="true" tabindex="-1"></a>             , y</span>
<span id="cb41-11"><a href="#cb41-11" aria-hidden="true" tabindex="-1"></a>             , alpha<span class="op">=</span><span class="fl">0.8</span></span>
<span id="cb41-12"><a href="#cb41-12" aria-hidden="true" tabindex="-1"></a>             , label <span class="op">=</span> i</span>
<span id="cb41-13"><a href="#cb41-13" aria-hidden="true" tabindex="-1"></a>             , c<span class="op">=</span>colors[i])</span>
<span id="cb41-14"><a href="#cb41-14" aria-hidden="true" tabindex="-1"></a>text <span class="op">=</span> [plt.text(pca[i,<span class="dv">0</span>],pca[i,<span class="dv">1</span>],l) <span class="cf">for</span> i,l <span class="kw">in</span> <span class="bu">enumerate</span>(labels)]</span>
<span id="cb41-15"><a href="#cb41-15" aria-hidden="true" tabindex="-1"></a>adjust_text(text, arrowprops<span class="op">=</span><span class="bu">dict</span>(arrowstyle<span class="op">=</span><span class="st">&#39;-&#39;</span>, color<span class="op">=</span><span class="st">&#39;gray&#39;</span>, lw<span class="op">=</span><span class="fl">0.5</span>))</span>
<span id="cb41-16"><a href="#cb41-16" aria-hidden="true" tabindex="-1"></a>plt.legend()</span>
<span id="cb41-17"><a href="#cb41-17" aria-hidden="true" tabindex="-1"></a>plt.grid()</span>
<span id="cb41-18"><a href="#cb41-18" aria-hidden="true" tabindex="-1"></a>plt.xlabel(<span class="st">&#39;x&#39;</span>)</span>
<span id="cb41-19"><a href="#cb41-19" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&#39;y&#39;</span>)</span>
<span id="cb41-20"><a href="#cb41-20" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<p><img src="/images/ch15-wiki-cluster.png" /></p>
<p>英語,韓国語,インドネシア語の<code>クラスタ1</code>,日本語,トルコ語の<code>クラスタ2</code>,アラビア語,ヒンディー語,ポルトガル語,ロシア語の<code>クラスタ3</code>,フランス語,ドイツ語,スペイン語,イタリア語の<code>クラスタ4</code>,中国語単体の<code>クラスタ5</code>になりました.
研究で行う場合には,それぞれのクラスタの背景などを考察する必要があります.例えば,ここではLGBTQに関する各言語圏での考え方がWikipediaの記事に反映されていると想定して, 各国の法制度や世界価値観調査などと比較すると面白いかもしれません.</p>
<p>続いて,それぞれのクラスタごとの特徴をワードクラウドで確認してみましょう.</p>
<p>ワードクラウドの作成に必要なライブラリをインストールします.</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb42-1"><a href="#cb42-1" aria-hidden="true" tabindex="-1"></a><span class="op">!</span>pip install mecab<span class="op">-</span>python3 unidic<span class="op">-</span>lite wordcloud gensim</span></code></pre></div>
<p>各クラスタごとにワードクラウドを作成してみます.</p>
<div class="sourceCode" id="cb43"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb43-1"><a href="#cb43-1" aria-hidden="true" tabindex="-1"></a><span class="co">#クラスタごとの中身を見てみる</span></span>
<span id="cb43-2"><a href="#cb43-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> wordcloud <span class="im">import</span> WordCloud</span>
<span id="cb43-3"><a href="#cb43-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span>
<span id="cb43-4"><a href="#cb43-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> re</span>
<span id="cb43-5"><a href="#cb43-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> MeCab <span class="im">as</span> mc</span>
<span id="cb43-6"><a href="#cb43-6" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> gensim.corpora.dictionary <span class="im">import</span> Dictionary</span>
<span id="cb43-7"><a href="#cb43-7" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> gensim.models <span class="im">import</span> LdaModel</span>
<span id="cb43-8"><a href="#cb43-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-9"><a href="#cb43-9" aria-hidden="true" tabindex="-1"></a>df_wiki[<span class="st">&#39;c&#39;</span>] <span class="op">=</span> clusters</span>
<span id="cb43-10"><a href="#cb43-10" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df_wiki[<span class="st">&#39;c&#39;</span>])</span>
<span id="cb43-11"><a href="#cb43-11" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> strip_CRLF_from_Text(text):</span>
<span id="cb43-12"><a href="#cb43-12" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;テキストファイルの改行，タブを削除し，形態素解析を実行する．</span></span>
<span id="cb43-13"><a href="#cb43-13" aria-hidden="true" tabindex="-1"></a><span class="co">    改行前後が日本語文字の場合は改行を削除する．</span></span>
<span id="cb43-14"><a href="#cb43-14" aria-hidden="true" tabindex="-1"></a><span class="co">    それ以外はスペースに置換する．</span></span>
<span id="cb43-15"><a href="#cb43-15" aria-hidden="true" tabindex="-1"></a><span class="co">    &quot;&quot;&quot;</span></span>
<span id="cb43-16"><a href="#cb43-16" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 改行前後の文字が日本語文字の場合は改行を削除する</span></span>
<span id="cb43-17"><a href="#cb43-17" aria-hidden="true" tabindex="-1"></a>    plaintext <span class="op">=</span> re.sub(<span class="st">&#39;([ぁ-んー]+|[ァ-ンー]+|[</span><span class="ch">\\</span><span class="st">u4e00-</span><span class="ch">\\</span><span class="st">u9FFF]+|[ぁ-んァ-ンー</span><span class="ch">\\</span><span class="st">u4e00-</span><span class="ch">\\</span><span class="st">u9FFF]+)(</span><span class="ch">\n</span><span class="st">)([ぁ-んー]+|[ァ-ンー]+|[</span><span class="ch">\\</span><span class="st">u4e00-</span><span class="ch">\\</span><span class="st">u9FFF]+|[ぁ-んァ-ンー</span><span class="ch">\\</span><span class="st">u4e00-</span><span class="ch">\\</span><span class="st">u9FFF]+)&#39;</span>,</span>
<span id="cb43-18"><a href="#cb43-18" aria-hidden="true" tabindex="-1"></a>                       <span class="vs">r&#39;\1\3&#39;</span>,</span>
<span id="cb43-19"><a href="#cb43-19" aria-hidden="true" tabindex="-1"></a>                       text)</span>
<span id="cb43-20"><a href="#cb43-20" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 残った改行とタブ記号はスペースに置換する</span></span>
<span id="cb43-21"><a href="#cb43-21" aria-hidden="true" tabindex="-1"></a>    plaintext <span class="op">=</span> plaintext.replace(<span class="st">&#39;</span><span class="ch">\n</span><span class="st">&#39;</span>, <span class="st">&#39; &#39;</span>).replace(<span class="st">&#39;</span><span class="ch">\t</span><span class="st">&#39;</span>, <span class="st">&#39; &#39;</span>)</span>
<span id="cb43-22"><a href="#cb43-22" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> plaintext</span>
<span id="cb43-23"><a href="#cb43-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-24"><a href="#cb43-24" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> mecab_wakati(text):</span>
<span id="cb43-25"><a href="#cb43-25" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;</span></span>
<span id="cb43-26"><a href="#cb43-26" aria-hidden="true" tabindex="-1"></a><span class="co">    MeCabで分かち書き．</span></span>
<span id="cb43-27"><a href="#cb43-27" aria-hidden="true" tabindex="-1"></a><span class="co">    ただし品詞は名詞だけに限定．</span></span>
<span id="cb43-28"><a href="#cb43-28" aria-hidden="true" tabindex="-1"></a><span class="co">    &quot;&quot;&quot;</span></span>
<span id="cb43-29"><a href="#cb43-29" aria-hidden="true" tabindex="-1"></a>    t <span class="op">=</span> mc.Tagger()</span>
<span id="cb43-30"><a href="#cb43-30" aria-hidden="true" tabindex="-1"></a>    <span class="co"># t = mc.Tagger(&#39;-d /usr/local/lib/mecab/dic/mecab-ipadic-neologd/&#39;)</span></span>
<span id="cb43-31"><a href="#cb43-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-32"><a href="#cb43-32" aria-hidden="true" tabindex="-1"></a>    node <span class="op">=</span> t.parseToNode(text)</span>
<span id="cb43-33"><a href="#cb43-33" aria-hidden="true" tabindex="-1"></a>    sent <span class="op">=</span> <span class="st">&quot;&quot;</span></span>
<span id="cb43-34"><a href="#cb43-34" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span>(node):</span>
<span id="cb43-35"><a href="#cb43-35" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> node.surface <span class="op">!=</span> <span class="st">&quot;&quot;</span>:  <span class="co"># ヘッダとフッタを除外</span></span>
<span id="cb43-36"><a href="#cb43-36" aria-hidden="true" tabindex="-1"></a>            word_type <span class="op">=</span> node.feature.split(<span class="st">&quot;,&quot;</span>)[<span class="dv">0</span>]</span>
<span id="cb43-37"><a href="#cb43-37" aria-hidden="true" tabindex="-1"></a>            <span class="co"># 名詞だけをリストに追加する</span></span>
<span id="cb43-38"><a href="#cb43-38" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> word_type <span class="kw">in</span> [<span class="st">&quot;名詞&quot;</span>]:</span>
<span id="cb43-39"><a href="#cb43-39" aria-hidden="true" tabindex="-1"></a>                sent <span class="op">+=</span> node.surface <span class="op">+</span> <span class="st">&quot; &quot;</span>  <span class="co"># node.surface は「表層形」</span></span>
<span id="cb43-40"><a href="#cb43-40" aria-hidden="true" tabindex="-1"></a>            <span class="co"># 動詞（の原型），形容詞，副詞もリストに加えたい場合は次の２行を有効にする</span></span>
<span id="cb43-41"><a href="#cb43-41" aria-hidden="true" tabindex="-1"></a>            <span class="co">#if word_type in [ &quot;動詞&quot;, &quot;形容詞&quot;,&quot;副詞&quot;]:</span></span>
<span id="cb43-42"><a href="#cb43-42" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> word_type <span class="kw">in</span> [ <span class="st">&quot;動詞&quot;</span>,<span class="st">&quot;副詞&quot;</span>,<span class="st">&quot;形容詞&quot;</span>]:</span>
<span id="cb43-43"><a href="#cb43-43" aria-hidden="true" tabindex="-1"></a>                sent <span class="op">+=</span> node.feature.split(<span class="st">&quot;,&quot;</span>)[<span class="dv">6</span>] <span class="op">+</span> <span class="st">&quot; &quot;</span> <span class="co"># node.feature.split(&quot;,&quot;)[6] は形態素解析結果の「原型」</span></span>
<span id="cb43-44"><a href="#cb43-44" aria-hidden="true" tabindex="-1"></a>        node <span class="op">=</span> node.<span class="bu">next</span></span>
<span id="cb43-45"><a href="#cb43-45" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> node <span class="kw">is</span> <span class="va">None</span>:</span>
<span id="cb43-46"><a href="#cb43-46" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span></span>
<span id="cb43-47"><a href="#cb43-47" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> sent</span>
<span id="cb43-48"><a href="#cb43-48" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-49"><a href="#cb43-49" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> ids_to_words(dictionary: Dictionary, ids):</span>
<span id="cb43-50"><a href="#cb43-50" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> [dictionary[idx] <span class="cf">for</span> idx <span class="kw">in</span> ids]</span>
<span id="cb43-51"><a href="#cb43-51" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> most_frequent_words_rate(dictionary: Dictionary, threshold: <span class="bu">float</span>):</span>
<span id="cb43-52"><a href="#cb43-52" aria-hidden="true" tabindex="-1"></a>    threshold_abs <span class="op">=</span> <span class="bu">int</span>(threshold <span class="op">*</span> dictionary.num_docs)</span>
<span id="cb43-53"><a href="#cb43-53" aria-hidden="true" tabindex="-1"></a>    ids <span class="op">=</span> [ v <span class="cf">for</span> v <span class="kw">in</span> dictionary.token2id.values() <span class="cf">if</span> threshold <span class="op">&lt;=</span> dictionary.dfs.get(v, <span class="dv">0</span>) <span class="op">&gt;</span> threshold_abs]</span>
<span id="cb43-54"><a href="#cb43-54" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> ids_to_words(dictionary, ids)</span>
<span id="cb43-55"><a href="#cb43-55" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-56"><a href="#cb43-56" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-57"><a href="#cb43-57" aria-hidden="true" tabindex="-1"></a><span class="co">#クラスタごとにテキストをまとめてワードクラウドを作ってみる</span></span>
<span id="cb43-58"><a href="#cb43-58" aria-hidden="true" tabindex="-1"></a>font_path_gothic <span class="op">=</span> <span class="st">&#39;./data/fonts-japanese-gothic.ttf&#39;</span></span>
<span id="cb43-59"><a href="#cb43-59" aria-hidden="true" tabindex="-1"></a>stop_words <span class="op">=</span> [<span class="st">&#39;こと&#39;</span>,<span class="st">&#39;繁体&#39;</span>,<span class="st">&#39;簡体&#39;</span>,<span class="st">&#39;日本&#39;</span>,<span class="st">&#39;ブラジル&#39;</span>,<span class="st">&#39;ポルトガル&#39;</span>]</span>
<span id="cb43-60"><a href="#cb43-60" aria-hidden="true" tabindex="-1"></a>txts <span class="op">=</span> []</span>
<span id="cb43-61"><a href="#cb43-61" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> c <span class="kw">in</span> <span class="bu">list</span>(df_wiki[<span class="st">&#39;c&#39;</span>].unique()):</span>
<span id="cb43-62"><a href="#cb43-62" aria-hidden="true" tabindex="-1"></a>  txt <span class="op">=</span> <span class="st">&quot;&quot;</span></span>
<span id="cb43-63"><a href="#cb43-63" aria-hidden="true" tabindex="-1"></a>  df_t <span class="op">=</span> df_wiki[df_wiki[<span class="st">&#39;c&#39;</span>] <span class="op">==</span> c]</span>
<span id="cb43-64"><a href="#cb43-64" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> j <span class="kw">in</span> df_t[<span class="st">&#39;Text&#39;</span>]:</span>
<span id="cb43-65"><a href="#cb43-65" aria-hidden="true" tabindex="-1"></a>    txt <span class="op">+=</span> j <span class="op">+</span> <span class="st">&quot;</span><span class="ch">\n</span><span class="st">&quot;</span></span>
<span id="cb43-66"><a href="#cb43-66" aria-hidden="true" tabindex="-1"></a>  txt <span class="op">=</span> strip_CRLF_from_Text(txt)</span>
<span id="cb43-67"><a href="#cb43-67" aria-hidden="true" tabindex="-1"></a>  txt <span class="op">=</span> mecab_wakati(txt)</span>
<span id="cb43-68"><a href="#cb43-68" aria-hidden="true" tabindex="-1"></a>  txts.append(txt)</span>
<span id="cb43-69"><a href="#cb43-69" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-70"><a href="#cb43-70" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(txts)</span>
<span id="cb43-71"><a href="#cb43-71" aria-hidden="true" tabindex="-1"></a>dictionary <span class="op">=</span> Dictionary([x.split(<span class="st">&#39; &#39;</span>) <span class="cf">for</span> x <span class="kw">in</span> txts])</span>
<span id="cb43-72"><a href="#cb43-72" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(most_frequent_words_rate(dictionary, <span class="fl">0.5</span>))</span>
<span id="cb43-73"><a href="#cb43-73" aria-hidden="true" tabindex="-1"></a>stop_words <span class="op">+=</span> most_frequent_words_rate(dictionary, <span class="fl">0.5</span>)</span>
<span id="cb43-74"><a href="#cb43-74" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(stop_words)</span>
<span id="cb43-75"><a href="#cb43-75" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> c,txt <span class="kw">in</span> <span class="bu">zip</span>(<span class="bu">list</span>(df_wiki[<span class="st">&#39;c&#39;</span>].unique()),txts):</span>
<span id="cb43-76"><a href="#cb43-76" aria-hidden="true" tabindex="-1"></a>  result <span class="op">=</span> WordCloud( width<span class="op">=</span><span class="dv">1000</span>,height<span class="op">=</span><span class="dv">400</span>,background_color<span class="op">=</span><span class="st">&#39;white&#39;</span></span>
<span id="cb43-77"><a href="#cb43-77" aria-hidden="true" tabindex="-1"></a>                    , font_path<span class="op">=</span>font_path_gothic</span>
<span id="cb43-78"><a href="#cb43-78" aria-hidden="true" tabindex="-1"></a>                    , regexp<span class="op">=</span><span class="vs">r&quot;[\w&#39;]+&quot;</span> <span class="co">#一文字を表示</span></span>
<span id="cb43-79"><a href="#cb43-79" aria-hidden="true" tabindex="-1"></a>                    , stopwords<span class="op">=</span>stop_words).generate(txt)</span>
<span id="cb43-80"><a href="#cb43-80" aria-hidden="true" tabindex="-1"></a>  plt.figure(figsize<span class="op">=</span>(<span class="dv">12</span>,<span class="dv">10</span>))</span>
<span id="cb43-81"><a href="#cb43-81" aria-hidden="true" tabindex="-1"></a>  plt.imshow(result)</span>
<span id="cb43-82"><a href="#cb43-82" aria-hidden="true" tabindex="-1"></a>  plt.title(<span class="bu">str</span>(c))</span>
<span id="cb43-83"><a href="#cb43-83" aria-hidden="true" tabindex="-1"></a>  plt.axis(<span class="st">&#39;off&#39;</span>)</span>
<span id="cb43-84"><a href="#cb43-84" aria-hidden="true" tabindex="-1"></a>  plt.show()</span></code></pre></div>
<p><img src="/images/ch15-wiki-c1.png" alt="クラスタ1(英語,韓国語,インドネシア語)" />
<img src="/images/ch15-wiki-c2.png" alt="クラスタ2(日本語,トルコ語)" />
<img src="/images/ch15-wiki-c3.png" alt="クラスタ3(アラビア語,ヒンディー語,ポルトガル語,ロシア語)" />
<img src="/images/ch15-wiki-c4.png" alt="クラスタ4(フランス語,ドイツ語,スペイン語,イタリア語)" />
<img src="/images/ch15-wiki-c5.png" alt="クラスタ5(中国語)" /></p>
<p>それぞれ異なる単語が表れており興味深いです. 研究の場合は,それぞれの特徴やその理由に関して考察すると面白いでしょう.</p>
]]></description>
    <pubDate>Tue, 12 Nov 2024 00:00:00 UT</pubDate>
    <guid>/lectures/slds15.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>特別講義DS Ch16 カテゴリーデータ処理</title>
    <link>/lectures/slds16.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#質問紙調査" id="toc-質問紙調査"><span class="toc-section-number">1</span> 質問紙調査</a>
<ul>
<li><a href="#社会的態度の操作的な定義" id="toc-社会的態度の操作的な定義"><span class="toc-section-number">1.1</span> 社会的態度の操作的な定義</a></li>
<li><a href="#心理尺度psychological-scale" id="toc-心理尺度psychological-scale"><span class="toc-section-number">1.2</span> 心理尺度(Psychological scale)</a></li>
<li><a href="#因子潜在変数" id="toc-因子潜在変数"><span class="toc-section-number">1.3</span> 因子(潜在変数)</a></li>
<li><a href="#質問紙の構成" id="toc-質問紙の構成"><span class="toc-section-number">1.4</span> 質問紙の構成</a>
<ul>
<li><a href="#測りたい態度について設定する" id="toc-測りたい態度について設定する"><span class="toc-section-number">1.4.1</span> 測りたい態度について設定する</a></li>
<li><a href="#概念の構造を考える" id="toc-概念の構造を考える"><span class="toc-section-number">1.4.2</span> 概念の構造を考える</a></li>
<li><a href="#項目の作成" id="toc-項目の作成"><span class="toc-section-number">1.4.3</span> 項目の作成</a></li>
</ul></li>
</ul></li>
<li><a href="#利用データ" id="toc-利用データ"><span class="toc-section-number">2</span> 利用データ</a></li>
<li><a href="#データ処理" id="toc-データ処理"><span class="toc-section-number">3</span> データ処理</a></li>
<li><a href="#ヒストグラム" id="toc-ヒストグラム"><span class="toc-section-number">4</span> ヒストグラム</a></li>
<li><a href="#相関係数" id="toc-相関係数"><span class="toc-section-number">5</span> 相関係数</a></li>
<li><a href="#同時度数分布表" id="toc-同時度数分布表"><span class="toc-section-number">6</span> 同時度数分布表</a></li>
<li><a href="#独立性の検定" id="toc-独立性の検定"><span class="toc-section-number">7</span> 独立性の検定</a></li>
<li><a href="#残渣分析" id="toc-残渣分析"><span class="toc-section-number">8</span> 残渣分析</a></li>
<li><a href="#次元削減" id="toc-次元削減"><span class="toc-section-number">9</span> 次元削減</a></li>
<li><a href="#共分散構造分析" id="toc-共分散構造分析"><span class="toc-section-number">10</span> 共分散構造分析</a></li>
</ul>
</div>
<p>本章は,カテゴリーデータの処理手法に関するまとめの章となります. 学生の研究ではアンケートデータが非常によく利用されますが, アンケートでは5段階評価などの質問項目がよく利用されるため,得られたデータの大部分がカテゴリーデータとなります. この章では,アンケートデータを事例に,よく行われる分析手法をいくつか紹介・実践してみます.
なお,本稿で紹介される手法は既にほかの章で説明されているものも含まれており, 内容の重複があります.</p>
<h1 data-number="1" id="質問紙調査"><span class="header-section-number">1</span> 質問紙調査</h1>
<p>本章はアンケート調査,質問紙調査によって集められるデータを分析するための事例を紹介することを目的としています. 質問紙調査によるデータの収集は,質問紙の設計や,倫理的な課題などにおいて留意すべき課題がいくつもあります. 本講義では学生自身が,データを収集することになるので,まずはそれらの内容に関して学習してみましょう. なお,本節の内容は, 教育・心理分野がご専門の江草遼平先生に監修いただきましたが,資料に含まれる誤りは筆者の責任に依るものです.</p>
<h2 data-number="1.1" id="社会的態度の操作的な定義"><span class="header-section-number">1.1</span> 社会的態度の操作的な定義</h2>
<p>質問紙調査を行う研究では,人の行動を説明・予測するための概念として,人の行動の背後に<strong>社会的態度</strong>があると仮定します. <strong>社会的態度</strong>とはオールポートの定義によれば,</p>
<ul>
<li>経験によって構築された心理・神経生理的な準備状態</li>
<li>人が関わる対象に対する行動を,方向づけたり変えたりするもの</li>
</ul>
<p>とされています.</p>
<p>これらの態度は直接観察することができません.そこで,態度の測定には,行動の測定を行い類推する手法を用います.</p>
<h2 data-number="1.2" id="心理尺度psychological-scale"><span class="header-section-number">1.2</span> 心理尺度(Psychological scale)</h2>
<p>実際の行動を測定するのには実験環境,参加者などの制約があり難しいことがあります.そこで,心理尺度による測定方法がよく用いられます.心理尺度とは態度に関する質問によって行動を測るもので,普段目にするアンケートで用いられている手法がそれに当たります(英語で検索する際には”Questionnaire”や”Scale”のキーワードを含めるとヒットしやすい).</p>
<p>厳密な心理尺度の構成は,それだけで1つの研究となるものです.「心理尺度を使って何かを明らかにしたい」が目的の場合には,可能であれば先行研究から心理尺度を援用して用いるか,そこに1つ2つ測定可能な指標を持ち込んで,それについて分析するのが望ましいです.例えば,共に先行研究がある”自尊感情の評価”と”大学生の恋愛観”の関係,あるいは”自尊感情の評価”と容易に測定可能な”100ます計算でケアレスミスが何回起こるか”の関係などが挙げられます.</p>
<p>既存の尺度を援用する際には,ものによって使用料金や著者の許諾を必要とする場合があるので,これらのチェックを忘れないようにする必要があります.</p>
<p>心理尺度における質問手法にはいくつかの種類がありますが,ここでは代表的なものを2つ見てみましょう.</p>
<div class="note">
<ul>
<li><h2 id="リッカート法-likert-scale-method">リッカート法 (Likert scale method)</h2></li>
</ul>
<p>リッカート法は質問項目について「とても当てはまる」,「やや当てはまる」,「どちらとも言えない」,「ほとんど当てはまらない」,「全く当てはまらない」などの段階化された回答を得る手法です.</p>
<p>各回答の間は等間隔とは限らず,測定が粗いため同じことについて複数の質問を集めることで測定誤差を小さくすることを試みます.</p>
<p>例えば,「授業における英語への関心」を測定するために,「分からないときでも英語を聞こうとする」,「分からないときでも英語を読もうとする」,「英語で話すのが楽しい」など複数の項目を立てます.</p>
<div class="warn">
<p>リッカート法で得られたデータは厳密には順序尺度にあたりますが,心理学分野では便宜的に間隔尺度として扱うことがあります.これは,複数の項目の得点の合計や平均点を用いるための処置ですが,他分野からは批判もあるので,その後の統計検定手法の選択などには注意する必要があります.</p>
</div>
</div>
<div class="note">
<ul>
<li><h2 id="sd法semantic-differential-scale-method">SD法(Semantic Differential Scale Method)</h2></li>
</ul>
<p>SD法は,文章での質問ではなく形容詞対を用いる方法です.例えば,ステンレスのコップを見たときの印象について,「温かい」-「冷たい」,「硬い」-「柔らかい」といった項目のどちらにより近いかを5段階,7段階の尺度で尋ねます.SD法は感情や印象に関する評価に向いており,デザインやサービスなどの評価によく用いられます.</p>
<p>SD法は適当な形容詞対をリストアップするのに苦労があるので,リッカート法と比べると作成が難しいですが,質問紙では異なる文章を用いる必要がありそうな複数の対象でも,同じ質問紙で評価ができる場合があり,比較が容易になるメリットがあります.</p>
</div>
<h2 data-number="1.3" id="因子潜在変数"><span class="header-section-number">1.3</span> 因子(潜在変数)</h2>
<p>ある態度を説明する際に,複数の側面を必要とする場合があります.例えば,対人認知(人に対する印象,ある人が好ましいかどうか)に関する研究では<a href="https://doi.org/10.1037/h0026086" title="https://doi.org/10.1037/h0026086">Rosenberg et al.(1968)</a>が,対人的な印象を形成する認知次元として<strong>社会的望ましさ</strong>と<strong>知的望ましさ</strong>の2次元を見出しています.</p>
<p><img src="/images/ch16-rosenberg.png" /></p>
<p>この説に基づけば,対人認知の傾向を問うアンケートを行うには「社会的望ましさ」と「知的望ましさ」のどちらか一方でなく,2つの次元を持つ尺度が望ましいこととなります.
このような概念構成の構造を知るには,構成する因子（上の例でいえば２つの望ましさ）を探索する必要があります.
そのような複数の変数の中から少数の次元を探索する分析手法として<strong>因子分析</strong>があります.
10項目の7段階であるリッカート尺度によるアンケートがあったとしたとき,このアンケートの10個の項目がすべて1つのことについて測定しているのであれば,ある項目への回答が中間の「４：どちらでもない」であったとき,ほかの回答も「４：どちらでもない」かそれに近い回答が選ばれる傾向がみられるはずです.そうなっていないなら,その質問は他のことについて尋ねている可能性が高いとみなされます.
アンケートの10個の項目が複数の次元について訊ねるものであるとき,いくつかの項目がほかの項目とは関係なく,まとまって高く反応する,反対に低く反応するなどのケースが見受けられます.このまとまった項目が共通して持つ部分を因子とみなします.</p>
<p><img src="/images/ch16-food.png" /></p>
<p>因子分析では直接観測できる質問項目（下位尺度）への反応から,直接観測できない「食べ物への態度」を構成する因子を測定し,それによって全体の概念を説明します.
各質問項目が因子につながる共通の部分を持っているかどうかは,質問項目間の相関係数から求められます.
質問項目によっては,2つ以上の因子にかかわることがあります.例えば,わさびが寿司につきものであるなら,多少は辛い物への態度が影響している可能性が考えられます.このようなケースでは,下位尺度のグループ化において,相関係数をもとに判断をする必要があります.</p>
<p><img src="/images/ch16-hot.png" /></p>
<p>質問項目には,尺度の全体に関わる部分があります.これを<strong>共通性</strong>といい,逆に,尺度に関わらない質問項目独自の要素を<strong>独自性</strong>と呼びます.
例えば寿司が好きという行動は尺度全体における「食べ物への態度」と高く関わっているかもしれません.この場合にはこれが共通性とみなされます.
しかし寿司が好きな人の中には「形がかわいいから好き」など食べ物に直接かかわらない要素があるかもしれません.
このような時,寿司が好きかという質問項目には独自性があるといえます.
共通性と独自性は足して１になるようになっており,共通性があまりに低い項目がある場合は共通因子を探るのに役に立たないことがあります.このような場合,その質問項目を除外して考えることもあります. 一方で,そのような質問項目から新しい因子が作成されたり,回答者グループの属性に影響を受けているなど,データ全体の解釈において有用である場合もあるので慎重に考える必要であります</p>
<p><img src="/images/ch16-sushi.png" /></p>
<p><img src="/images/ch16-carpaccio.png" /></p>
<ul>
<li>項目が持つ共通性（青）と独自性（白）
<ul>
<li>寿司のほうがより尺度全体への共通性が高いイメージ</li>
</ul></li>
</ul>
<p>各項目が因子から受ける影響の強さを因子負荷量と呼び,これが大きい項目が因子を解釈する際の中心となります.</p>
<p>この授業では因子分析自体は扱わず,共分散構造分析を扱いますが,これらの概念は解釈に必要なので忘れたら戻ってきてください.</p>
<div class="warn">
<ul>
<li><h2 id="信頼性と妥当性">信頼性と妥当性</h2></li>
</ul>
<p>尺度は態度を測るためのものさしにあたるものです.よって,測るたびに大きく数値が変わったり,対象を図るのに十分な長さがないとなれば役に立ちません.</p>
<p>そのような尺度の有用度を判断する基準として<strong>信頼性</strong>があります.信頼性は,尺度の測定誤差について吟味することです.一貫性の測定として,クロンバッハのα係数がよく用いられますが,ここでは深く扱いません. 興味のある方は調べてみる,教員に質問してみましょう.</p>
<p>作成者の意図通りに尺度を測定できているかを表す<strong>妥当性</strong>という概念もよく利用されます.妥当性の判断としては,より詳細には基準関連妥当性,内容的妥当性,構成概念妥当性を吟味することが求められますが,こちらも詳細は割愛します.</p>
</div>
<h2 data-number="1.4" id="質問紙の構成"><span class="header-section-number">1.4</span> 質問紙の構成</h2>
<h3 data-number="1.4.1" id="測りたい態度について設定する"><span class="header-section-number">1.4.1</span> 測りたい態度について設定する</h3>
<p>質問紙を構成する目的は,<strong>ある態度について類推することができる行動を計測すること</strong>です.したがって,まずその<strong>態度</strong>について明良化する必要があります.</p>
<p>例えば「人の一生」のような巨大すぎる概念を対象にするのは相当無理があります.「寝起き時の感情について」だとより限定されていて望ましいですが,例えば少年と老人,日本人と外国人では大きく異なるかもしれません.これらを比較することも一つの研究テーマとして面白いですが,まずは手におえる範囲までそれを訊ねる対象と扱う概念について小さくすることをおすすめします.</p>
<p>このようなときに重要なのは先行研究です.これまで研究されてこなかった概念を１から作るにしても,類似の研究について追試するにあたっても,先行研究から大きなヒントを得ることが近道となります. 先行研究の調べ方に関しては,講義で別の機会に扱いますので,参考にして先行研究を集めてみましょう.</p>
<h3 data-number="1.4.2" id="概念の構造を考える"><span class="header-section-number">1.4.2</span> 概念の構造を考える</h3>
<p>概念を構成する下位概念とについて,事前にイメージすることも重要です.これらは,アンケートを回収した結果修正を要することもありますが,ひとまず質問項目をまんべんなくそろえるために重要なステップです.</p>
<p>概念の構造には多様な種類がありますが,やはり先行研究から自分の知りたい概念についてどのような構造が適当であるかを吟味する必要があります.</p>
<figure>
<img src="/images/ch16-image-structure.png" alt="上位・下位の構造,並列構造,類型的構造の例" />
<figcaption aria-hidden="true">上位・下位の構造,並列構造,類型的構造の例</figcaption>
</figure>
<h3 data-number="1.4.3" id="項目の作成"><span class="header-section-number">1.4.3</span> 項目の作成</h3>
<p>心理尺度の項で先駆けてリッカート法とSD法については示しています.これらの方法は得点化して計算することを考慮したものですが,それ以外の方法でもデータを補強したり,集めることができます. いくつかの方法に関して概観してみましょう.</p>
<div class="note">
<ul>
<li><h2 id="順位法">順位法</h2>
順位法は提示された選択肢に順位をつけさせるものです.例えば,「カレー,ラーメン,とんかつの３つについて好きな順番をつけてください」のような質問項目が考えられます.この方法では,順序尺度のデータを得ることができます.</li>
</ul>
</div>
<div class="note">
<ul>
<li><h2 id="多肢選択法">多肢選択法</h2>
多肢選択法は質問項目について,複数の回答選択をさせるものです.「以下の中から,好きな授業名を１つ選べ」という質問では1つしか回答が得られませんが,「好きなだけ選べ」とすれば複数の情報が手に入ります.十分に設計された選択肢があれば傾向を得ることができます.</li>
</ul>
</div>
<div class="note">
<ul>
<li><h2 id="自由記述法">自由記述法</h2>
自由記述法は質問に対して,自由に文章を書かせる方法です.構造化されたデータを手に入れることができないが,見逃していた要素,想像もしていない要素が情報として得られる可能性があります.カテゴリー分類や自然言語処理によって解釈に寄与するデータを得ることができるかもしれません. 自然言語処理に関しては他の章で扱っていますので,参考にしてください.</li>
</ul>
</div>
<div class="warn">
<ul>
<li><h2 id="項目作成の際の注意">項目作成の際の注意</h2>
いずれの方法でも,質問項目の作成においては以下の点に注意を払う必要があります. それぞれの詳細に関しては,実際に質問紙を構成する中で,個別に解説しますので,必要に応じて対応していきましょう.</li>
</ul>
<p>１）項目が適切に構成概念を反映していること</p>
<p>２）項目がわかりやすいこと</p>
<p>３）回答を誘導しないこと</p>
<p>４）項目数が適切であること</p>
<p>５）選択肢が適切であること</p>
<p>６）逆転項目をいれるかどうか</p>
<p>７）回答者に社会通念上許されない負担を与えないこと</p>
</div>
<h1 data-number="2" id="利用データ"><span class="header-section-number">2</span> 利用データ</h1>
<p>本章では,仮想のアンケートデータとして,情報入門で利用されている理解度アンケートを利用します. なお,こちらのアンケートの質問形式は実際に利用しているものですが, 解答に関して仮想のものであり,得られた結果も実際の講義とは無関係であることに注意して下さい.</p>
<p>データは<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/questionnaire_sample_original.csv">こちら</a>からダウンロードできます.</p>
<p>こちらのデータは,Microsoft Formsで取得したアンケートデータになります. 自由回答や量的データを回答する質問項目はなく, 5段階の順序尺度及び複数選択式の質問項目からなります.</p>
<p>質問項目は以下の通りです.</p>
<div class="note">
<ul>
<li>あなたの「スマートフォン」に対する印象について、どれくらいあてはまるかを教えてください。</li>
<li>あなたの「スマートフォン」に対する操作や知識について、どれくらい自信があるかを教えてください。</li>
<li>あなたの「パソコン」に対する印象について、どれくらいあてはまるかを教えてください。</li>
<li>あなたの「パソコン」に対する操作や知識について、どれくらい自信があるかを教えてください。</li>
<li>あなたの「SNS（FacebookやInstagramなど）」に対する印象について、どれくらいあてはまるかを教えてください。</li>
<li>あなたの「SNS（FacebookやInstagramなど）」に対する操作や知識について、どれくらい自信があるかを教えてください。</li>
<li>あなたの「ネットを使ったコミュニケーション（LINEやTwitterなど）」に対する印象について、どれくらいあてはまるかを教えてください。</li>
<li>あなたの「ネットを使ったコミュニケーション（LINEやTwitterなど）」に対する操作や知識について、どれくらい自信があるかを教えてください。</li>
<li>次の「IT用語」について「知っている」という言葉にチェックをしてください（知っているものすべてにチェック）。</li>
<li>Windowsの操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。</li>
<li>電子メールの操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。</li>
<li>WWW(ウェブ)の操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。</li>
<li>Wordの操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。</li>
<li>Excelの操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。</li>
<li>PowerPointの操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。</li>
<li>Officeの応用的な操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。</li>
<li>情報倫理について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。’</li>
</ul>
</div>
<h1 data-number="3" id="データ処理"><span class="header-section-number">3</span> データ処理</h1>
<p>Microsoft Formsによるデータは,複数選択可能な質問項目への解答が一つのセルに｢<code>;</code>｣を用いて区切られて記入されるなど特徴があります.</p>
<figure>
<img src="/images/ch16-data-sample.png" alt="データの形式" />
<figcaption aria-hidden="true">データの形式</figcaption>
</figure>
<p>分析の際には,これらの情報を利用しやすいように変形する必要があります. ここでは,練習も兼ねて一通りの処理を体験してみましょう.</p>
<p>加工後のデータは<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/questionnaire_sample_edited.csv">こちら</a>で配布しているので,内容を確認して自力でできると感じた方はこの節は飛ばしていただいて構いません.</p>
<p>まずはデータの形式を確認してみましょう.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.pyplot <span class="im">as</span> plt</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> japanize_matplotlib</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> seaborn <span class="im">as</span> sns</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> scipy.stats <span class="im">as</span> st</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="co">#グラフの保存場所</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>dir_fig <span class="op">=</span> <span class="st">&#39;./result/fig/&#39;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="co">#グラフの設定</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>plt.style.use(<span class="st">&#39;ggplot&#39;</span>) <span class="co">#グラフスタイル</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>plt.rcParams[<span class="st">&#39;figure.figsize&#39;</span>] <span class="op">=</span> [<span class="dv">12</span>, <span class="dv">9</span>] <span class="co">#グラフサイズ</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>plt.rcParams[<span class="st">&#39;font.size&#39;</span>] <span class="op">=</span> <span class="dv">14</span> <span class="co">#フォントサイズ</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="co">#------------------------------------------------------------------</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="co">#データの読み込み</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="co">#------------------------------------------------------------------</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;./data/questionnaire_sample_original.csv&#39;</span>)</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.columns)</span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a><span class="co">Index([&#39;あなたの「スマートフォン」に対する印象について、どれくらいあてはまるかを教えてください。&#39;,</span></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a><span class="co">       &#39;あなたの「スマートフォン」に対する操作や知識について、どれくらい自信があるかを教えてください。&#39;,</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a><span class="co">       &#39;あなたの「パソコン」に対する印象について、どれくらいあてはまるかを教えてください。&#39;,</span></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a><span class="co">       &#39;あなたの「パソコン」に対する操作や知識について、どれくらい自信があるかを教えてください。&#39;,</span></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a><span class="co">       &#39;あなたの「SNS（FacebookやInstagramなど）」に対する印象について、どれくらいあてはまるかを教えてください。&#39;,</span></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a><span class="co">       &#39;あなたの「SNS（FacebookやInstagramなど）」に対する操作や知識について、どれくらい自信があるかを教えてください。&#39;,</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a><span class="co">       &#39;あなたの「ネットを使ったコミュニケーション（LINEやTwitterなど）」に対する印象について、どれくらいあてはまるかを教えてください。&#39;,</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a><span class="co">       &#39;あなたの「ネットを使ったコミュニケーション（LINEやTwitterなど）」に対する操作や知識について、どれくらい自信があるかを教えてください。&#39;,</span></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a><span class="co">       &#39;次の「IT用語」について「知っている」という言葉にチェックをしてください（知っているものすべてにチェック）。&#39;,</span></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a><span class="co">       &#39;Windowsの操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。&#39;,</span></span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a><span class="co">       &#39;電子メールの操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。&#39;,</span></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a><span class="co">       &#39;WWW(ウェブ)の操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。&#39;,</span></span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a><span class="co">       &#39;Wordの操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。&#39;,</span></span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a><span class="co">       &#39;Excelの操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。&#39;,</span></span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a><span class="co">       &#39;PowerPointの操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。&#39;,</span></span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a><span class="co">       &#39;Officeの応用的な操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。&#39;,</span></span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a><span class="co">       &#39;情報倫理について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。&#39;],</span></span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a><span class="co">      dtype=&#39;object&#39;)</span></span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>このままでは列名が長すぎてプログラムが書きにくいので,列名を順に<code>Q1~Q17</code>の連番に変更します.
今回は辞書型で連番を作成するために,組み込み関数の<code>enumerate()</code>を利用しています.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>new_columns <span class="op">=</span> <span class="bu">dict</span>([(t,<span class="st">&#39;Q&#39;</span><span class="op">+</span><span class="bu">str</span>(n <span class="op">+</span> <span class="dv">1</span>))<span class="cf">for</span> (n,t) <span class="kw">in</span>  <span class="bu">enumerate</span>(df.columns)])</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="co">一つ一つ手書きすると以下のようになる.</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="co">new_columns = {&#39;あなたの「スマートフォン」に対する印象について、どれくらいあてはまるかを教えてください。&#39;:&#39;Q1&#39;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="co">              ,&#39;あなたの「スマートフォン」に対する操作や知識について、どれくらい自信があるかを教えてください。&#39;:&#39;Q2&#39;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="co">              ,&#39;あなたの「パソコン」に対する印象について、どれくらいあてはまるかを教えてください。&#39;:&#39;Q3&#39;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="co">              ,&#39;あなたの「パソコン」に対する操作や知識について、どれくらい自信があるかを教えてください。&#39;:&#39;Q4&#39;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="co">              ,&#39;あなたの「SNS（FacebookやInstagramなど）」に対する印象について、どれくらいあてはまるかを教えてください。&#39;:&#39;Q5&#39;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="co">              ,&#39;あなたの「SNS（FacebookやInstagramなど）」に対する操作や知識について、どれくらい自信があるかを教えてください。&#39;:&#39;Q6&#39;</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="co">              ,&#39;あなたの「ネットを使ったコミュニケーション（LINEやTwitterなど）」に対する印象について、どれくらいあてはまるかを教えてください。&#39;:&#39;Q7&#39;</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="co">              ,&#39;あなたの「ネットを使ったコミュニケーション（LINEやTwitterなど）」に対する操作や知識について、どれくらい自信があるかを教えてください。&#39;:&#39;Q8&#39;</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="co">              ,&#39;次の「IT用語」について「知っている」という言葉にチェックをしてください（知っているものすべてにチェック）。&#39;:&#39;Q9&#39;</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="co">              ,&#39;Windowsの操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。&#39;:&#39;Q10&#39;</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="co">              ,&#39;電子メールの操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。&#39;:&#39;Q11&#39;</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="co">              ,&#39;WWW(ウェブ)の操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。&#39;:&#39;Q12&#39;</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a><span class="co">              ,&#39;Wordの操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。&#39;:&#39;Q13&#39;</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a><span class="co">              ,&#39;Excelの操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。&#39;:&#39;Q14&#39;</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a><span class="co">              ,&#39;PowerPointの操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。&#39;:&#39;Q15&#39;</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a><span class="co">              ,&#39;Officeの応用的な操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。&#39;:&#39;Q16&#39;</span></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a><span class="co">              ,&#39;情報倫理について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。&#39;:&#39;Q17&#39;}</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(new_columns)</span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a><span class="co">{&#39;あなたの「スマートフォン」に対する印象について、どれくらいあてはまるかを教えてください。&#39;: &#39;Q1&#39;</span></span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a><span class="co">, &#39;あなたの「スマートフォン」に対する操作や知識について、どれくらい自信があるかを教えてください。&#39;: &#39;Q2&#39;</span></span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a><span class="co">, &#39;あなたの「パソコン」に対する印象について、どれくらいあてはまるかを教えてください。&#39;: &#39;Q3&#39;</span></span>
<span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a><span class="co">, &#39;あなたの「パソコン」に対する操作や知識について、どれくらい自信があるかを教えてください。&#39;: &#39;Q4&#39;</span></span>
<span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a><span class="co">, &#39;あなたの「SNS（FacebookやInstagramなど）」に対する印象について、どれくらいあてはまるかを教えてください。&#39;: &#39;Q5&#39;</span></span>
<span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a><span class="co">, &#39;あなたの「SNS（FacebookやInstagramなど）」に対する操作や知識について、どれくらい自信があるかを教えてください。&#39;: &#39;Q6&#39;</span></span>
<span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a><span class="co">, &#39;あなたの「ネットを使ったコミュニケーション（LINEやTwitterなど）」に対する印象について、どれくらいあてはまるかを教えてください。&#39;: &#39;Q7&#39;</span></span>
<span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a><span class="co">, &#39;あなたの「ネットを使ったコミュニケーション（LINEやTwitterなど）」に対する操作や知識について、どれくらい自信があるかを教えてください。&#39;: &#39;Q8&#39;</span></span>
<span id="cb2-34"><a href="#cb2-34" aria-hidden="true" tabindex="-1"></a><span class="co">, &#39;次の「IT用語」について「知っている」という言葉にチェックをしてください（知っているものすべてにチェック）。&#39;: &#39;Q9&#39;</span></span>
<span id="cb2-35"><a href="#cb2-35" aria-hidden="true" tabindex="-1"></a><span class="co">, &#39;Windowsの操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。&#39;: &#39;Q10&#39;</span></span>
<span id="cb2-36"><a href="#cb2-36" aria-hidden="true" tabindex="-1"></a><span class="co">, &#39;電子メールの操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。&#39;: &#39;Q11&#39;</span></span>
<span id="cb2-37"><a href="#cb2-37" aria-hidden="true" tabindex="-1"></a><span class="co">, &#39;WWW(ウェブ)の操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。&#39;: &#39;Q12&#39;</span></span>
<span id="cb2-38"><a href="#cb2-38" aria-hidden="true" tabindex="-1"></a><span class="co">, &#39;Wordの操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。&#39;: &#39;Q13&#39;</span></span>
<span id="cb2-39"><a href="#cb2-39" aria-hidden="true" tabindex="-1"></a><span class="co">, &#39;Excelの操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。&#39;: &#39;Q14&#39;</span></span>
<span id="cb2-40"><a href="#cb2-40" aria-hidden="true" tabindex="-1"></a><span class="co">, &#39;PowerPointの操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。&#39;: &#39;Q15&#39;</span></span>
<span id="cb2-41"><a href="#cb2-41" aria-hidden="true" tabindex="-1"></a><span class="co">, &#39;Officeの応用的な操作や事柄について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。&#39;: &#39;Q16&#39;</span></span>
<span id="cb2-42"><a href="#cb2-42" aria-hidden="true" tabindex="-1"></a><span class="co">, &#39;情報倫理について「身に付いている」ものにチェックをしてください（身に付いているものすべてにチェック）。&#39;: &#39;Q17&#39;}</span></span>
<span id="cb2-43"><a href="#cb2-43" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb2-44"><a href="#cb2-44" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-45"><a href="#cb2-45" aria-hidden="true" tabindex="-1"></a>df.rename(new_columns, inplace<span class="op">=</span><span class="va">True</span>,axis<span class="op">=</span><span class="st">&#39;columns&#39;</span>)</span>
<span id="cb2-46"><a href="#cb2-46" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb2-47"><a href="#cb2-47" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb2-48"><a href="#cb2-48" aria-hidden="true" tabindex="-1"></a><span class="co">             Q1         Q2         Q3  ...                                                Q15                         Q16                                                Q17</span></span>
<span id="cb2-49"><a href="#cb2-49" aria-hidden="true" tabindex="-1"></a><span class="co">0     まあまあ興味がある    どちらでもない    どちらでもない  ...           スライドマスターを活用することができる;SmartArtを挿入することができる;  学内PCで作成したファイルを自宅のPCに持ち運べる;                                       どれも身についていない;</span></span>
<span id="cb2-50"><a href="#cb2-50" aria-hidden="true" tabindex="-1"></a><span class="co">1      すごく興味がある  まあまあ自信がある   すごく興味がある  ...                                新しいスライドを追加することができる;    学術的文章の規則を踏まえてレポートを作成できる;  学内PCでログアウトせずに帰る危険性を理解している;マルウェア（不正ソフト）について理解して...</span></span>
<span id="cb2-51"><a href="#cb2-51" aria-hidden="true" tabindex="-1"></a><span class="co">2      すごく興味がある   あまり自信がない  まあまあ興味がある  ...                                       どれも身についていない;                どれも身に付いていない;                                       どれも身についていない;</span></span>
<span id="cb2-52"><a href="#cb2-52" aria-hidden="true" tabindex="-1"></a><span class="co">3       どちらでもない   あまり自信がない    全く興味がない  ...                                新しいスライドを追加することができる;                どれも身に付いていない;                         学内PCでログアウトせずに帰る危険性を理解している;</span></span>
<span id="cb2-53"><a href="#cb2-53" aria-hidden="true" tabindex="-1"></a><span class="co">4     まあまあ興味がある  まあまあ自信がある   すごく興味がある  ...                                新しいスライドを追加することができる;                どれも身に付いていない;                                       どれも身についていない;</span></span>
<span id="cb2-54"><a href="#cb2-54" aria-hidden="true" tabindex="-1"></a><span class="co">...         ...        ...        ...  ...                                                ...                         ...                                                ...</span></span>
<span id="cb2-55"><a href="#cb2-55" aria-hidden="true" tabindex="-1"></a><span class="co">1347  まあまあ興味がある   あまり自信がない  まあまあ興味がある  ...  新しいスライドを追加することができる;スライドにページ番号を挿入することができる;スライドマ...                どれも身に付いていない;  学内PCでログアウトせずに帰る危険性を理解している;フィッシング詐欺について理解している;ウ...</span></span>
<span id="cb2-56"><a href="#cb2-56" aria-hidden="true" tabindex="-1"></a><span class="co">1348  まあまあ興味がある   あまり自信がない  まあまあ興味がある  ...                                新しいスライドを追加することができる;                どれも身に付いていない;                         学内PCでログアウトせずに帰る危険性を理解している;</span></span>
<span id="cb2-57"><a href="#cb2-57" aria-hidden="true" tabindex="-1"></a><span class="co">1349  まあまあ興味がある    全く自信がない    全く興味がない  ...                                新しいスライドを追加することができる;                どれも身に付いていない;                                       どれも身についていない;</span></span>
<span id="cb2-58"><a href="#cb2-58" aria-hidden="true" tabindex="-1"></a><span class="co">1350  まあまあ興味がある  まあまあ自信がある  まあまあ興味がある  ...             アニメーション機能を使うことができる;新しいスライドを追加することができる;                どれも身に付いていない;  学内PCでログアウトせずに帰る危険性を理解している;ウェブ上の画像に関する著作権について理解...</span></span>
<span id="cb2-59"><a href="#cb2-59" aria-hidden="true" tabindex="-1"></a><span class="co">1351  まあまあ興味がある   あまり自信がない  まあまあ興味がある  ...          新しいスライドを追加することができる;スライドにページ番号を挿入することができる;                どれも身に付いていない;  フィッシング詐欺について理解している;ウェブ上の画像に関する著作権について理解している;学内...</span></span>
<span id="cb2-60"><a href="#cb2-60" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>続いて,質問項目を利用しやすいように変換します. このアンケートでは,<code>Q1~Q8</code>では,ITに関連する事柄に関する興味の強さと自信を5段階評価で聞いています.そのままでも使えますが,後の処理のために整数に変換します.
もとの列も残して置くために,数値変換した列は <code>QX_num</code>の形で新しい列を作成しています.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>kyomi <span class="op">=</span> {<span class="st">&#39;すごく興味がある&#39;</span>:<span class="dv">5</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>        ,<span class="st">&#39;まあまあ興味がある&#39;</span>:<span class="dv">4</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>        ,<span class="st">&#39;どちらでもない&#39;</span>:<span class="dv">3</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>        ,<span class="st">&#39;あまり興味がない&#39;</span>:<span class="dv">2</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        ,<span class="st">&#39;全く興味がない&#39;</span>:<span class="dv">1</span>}</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>zishin <span class="op">=</span> {<span class="st">&#39;すごく自信がある&#39;</span>:<span class="dv">5</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>         ,<span class="st">&#39;まあまあ自信がある&#39;</span>:<span class="dv">4</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>         ,<span class="st">&#39;どちらでもない&#39;</span>:<span class="dv">3</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>         ,<span class="st">&#39;あまり自信がない&#39;</span>:<span class="dv">2</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>         ,<span class="st">&#39;全く自信がない&#39;</span>:<span class="dv">1</span>}</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> [<span class="dv">1</span>,<span class="dv">3</span>,<span class="dv">5</span>,<span class="dv">7</span>]:</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>    df[<span class="st">&#39;Q&#39;</span> <span class="op">+</span> <span class="bu">str</span>(i) <span class="op">+</span> <span class="st">&#39;_num&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;Q&#39;</span> <span class="op">+</span> <span class="bu">str</span>(i)].<span class="bu">apply</span>(<span class="kw">lambda</span> x : kyomi[x])</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> [<span class="dv">2</span>,<span class="dv">4</span>,<span class="dv">6</span>,<span class="dv">8</span>]:</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>    df[<span class="st">&#39;Q&#39;</span> <span class="op">+</span> <span class="bu">str</span>(i) <span class="op">+</span> <span class="st">&#39;_num&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;Q&#39;</span> <span class="op">+</span> <span class="bu">str</span>(i)].<span class="bu">apply</span>(<span class="kw">lambda</span> x : zishin[x])</span></code></pre></div>
<p><code>Q9~Q17</code>では,身についているスキルを複数選択形式で尋ねています. 複数選択された項目は,セミコロン(<code>;</code>)で区切られています. 各質問項目で選択されたスキルの数に変換してみます.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">#｢身についているもの｣の数の列を作る</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="co">#------------------------------------------------------------------</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> to_list(x):</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="co"># &#39;;&#39;で区切ったリストにする</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    <span class="co"># &#39;どれも身についていない&#39;がある場合は空の列を返す</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    xs <span class="op">=</span> x.split(<span class="st">&#39;;&#39;</span>)[<span class="dv">0</span>:<span class="op">-</span><span class="dv">1</span>]</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="st">&#39;どれも身についていない&#39;</span> <span class="kw">in</span> xs:</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> []</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> <span class="st">&#39;どれも知らない&#39;</span> <span class="kw">in</span> xs:</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> []</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> xs</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a><span class="co">#テスト</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.at[<span class="dv">100</span>,<span class="st">&#39;Q13&#39;</span>])</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(to_list(df.at[<span class="dv">100</span>,<span class="st">&#39;Q13&#39;</span>]))</span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a><span class="co"># &gt;&gt;&gt; フォントの種類やサイズを変更することができる;中央揃えや右揃えを設定することができる;</span></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a><span class="co"># &gt;&gt;&gt; [&#39;フォントの種類やサイズを変更することができる&#39;, &#39;中央揃えや右揃えを設定することができる&#39;]</span></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">9</span>,<span class="dv">18</span>,<span class="dv">1</span>):</span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>    df[<span class="st">&#39;Q&#39;</span> <span class="op">+</span> <span class="bu">str</span>(i) <span class="op">+</span> <span class="st">&#39;_num&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;Q&#39;</span> <span class="op">+</span> <span class="bu">str</span>(i)].<span class="bu">apply</span>(<span class="kw">lambda</span> x : <span class="bu">len</span>(to_list(x)))</span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;Q17_num&#39;</span>])</span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a><span class="co">0       0</span></span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a><span class="co">1       3</span></span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a><span class="co">2       0</span></span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a><span class="co">3       1</span></span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a><span class="co">4       0</span></span>
<span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a><span class="co">       ..</span></span>
<span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a><span class="co">1347    3</span></span>
<span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a><span class="co">1348    1</span></span>
<span id="cb4-34"><a href="#cb4-34" aria-hidden="true" tabindex="-1"></a><span class="co">1349    0</span></span>
<span id="cb4-35"><a href="#cb4-35" aria-hidden="true" tabindex="-1"></a><span class="co">1350    2</span></span>
<span id="cb4-36"><a href="#cb4-36" aria-hidden="true" tabindex="-1"></a><span class="co">1351    3</span></span>
<span id="cb4-37"><a href="#cb4-37" aria-hidden="true" tabindex="-1"></a><span class="co">Name: Q17_num, Length: 1352, dtype: int64</span></span>
<span id="cb4-38"><a href="#cb4-38" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb4-39"><a href="#cb4-39" aria-hidden="true" tabindex="-1"></a>num_columns <span class="op">=</span> [<span class="st">&#39;Q&#39;</span> <span class="op">+</span> <span class="bu">str</span>(x) <span class="op">+</span> <span class="st">&#39;_num&#39;</span> <span class="cf">for</span> x <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">18</span>,<span class="dv">1</span>)]</span>
<span id="cb4-40"><a href="#cb4-40" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(num_columns)</span>
<span id="cb4-41"><a href="#cb4-41" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb4-42"><a href="#cb4-42" aria-hidden="true" tabindex="-1"></a><span class="co">[&#39;Q1_num&#39;, &#39;Q2_num&#39;, &#39;Q3_num&#39;, &#39;Q4_num&#39;, &#39;Q5_num&#39;, &#39;Q6_num&#39;, &#39;Q7_num&#39;, &#39;Q8_num&#39;, &#39;Q9_num&#39;, &#39;Q10_num&#39;, &#39;Q11_num&#39;, &#39;Q12_num&#39;, &#39;Q13_num&#39;, &#39;Q14_num&#39;, &#39;Q15_num&#39;, &#39;Q16_num&#39;, &#39;Q17_num&#39;]</span></span>
<span id="cb4-43"><a href="#cb4-43" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<h1 data-number="4" id="ヒストグラム"><span class="header-section-number">4</span> ヒストグラム</h1>
<p>続いて<strong>データ分析のファーストステップ</strong>であるヒストグラムを作成して<strong>個別の質問項目ごとのデータの特徴を</strong>みてみましょう. ヒストグラムの作成方法などに関しては,<a href="slds8.html">データの可視化の章</a>を参照して下さい.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">#ヒストグラムを作る</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="co">#------------------------------------------------------------------</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="co">## Q1~Q6</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>fig, ax <span class="op">=</span> plt.subplots(nrows <span class="op">=</span> <span class="dv">6</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>                      ,ncols <span class="op">=</span> <span class="dv">1</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>                      ,tight_layout<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">6</span>):</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>    col <span class="op">=</span> <span class="st">&#39;Q&#39;</span> <span class="op">+</span> <span class="bu">str</span>(i <span class="op">+</span> <span class="dv">1</span>) <span class="op">+</span> <span class="st">&#39;_num&#39;</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>    xs <span class="op">=</span> df[col].value_counts().sort_index()</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>    ax[i].bar(xs.index,xs.values, width <span class="op">=</span> <span class="dv">1</span>)</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    ax[i].set_title(col)</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>plt.savefig(dir_fig <span class="op">+</span> <span class="st">&#39;Q1_6_histgram.png&#39;</span>)</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>plt.close(fig)</span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a><span class="co">##Q6~Q12</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>fig, ax <span class="op">=</span> plt.subplots(nrows <span class="op">=</span> <span class="dv">6</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>                      ,ncols <span class="op">=</span> <span class="dv">1</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>                      ,tight_layout<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">6</span>):</span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>    col <span class="op">=</span> <span class="st">&#39;Q&#39;</span> <span class="op">+</span> <span class="bu">str</span>(i <span class="op">+</span> <span class="dv">6</span>) <span class="op">+</span> <span class="st">&#39;_num&#39;</span></span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>    xs <span class="op">=</span> df[col].value_counts().sort_index()</span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>    ax[i].bar(xs.index,xs.values, width <span class="op">=</span> <span class="dv">1</span>)</span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a>    ax[i].set_title(col)</span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a>plt.savefig(dir_fig <span class="op">+</span> <span class="st">&#39;Q7_12_histgram.png&#39;</span>)</span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a>plt.close(fig)</span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-29"><a href="#cb5-29" aria-hidden="true" tabindex="-1"></a><span class="co">##Q13~Q17</span></span>
<span id="cb5-30"><a href="#cb5-30" aria-hidden="true" tabindex="-1"></a>fig, ax <span class="op">=</span> plt.subplots(nrows <span class="op">=</span> <span class="dv">5</span></span>
<span id="cb5-31"><a href="#cb5-31" aria-hidden="true" tabindex="-1"></a>                      ,ncols <span class="op">=</span> <span class="dv">1</span></span>
<span id="cb5-32"><a href="#cb5-32" aria-hidden="true" tabindex="-1"></a>                      ,tight_layout<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb5-33"><a href="#cb5-33" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">5</span>):</span>
<span id="cb5-34"><a href="#cb5-34" aria-hidden="true" tabindex="-1"></a>    col <span class="op">=</span> <span class="st">&#39;Q&#39;</span> <span class="op">+</span> <span class="bu">str</span>(i <span class="op">+</span> <span class="dv">13</span>) <span class="op">+</span> <span class="st">&#39;_num&#39;</span></span>
<span id="cb5-35"><a href="#cb5-35" aria-hidden="true" tabindex="-1"></a>    xs <span class="op">=</span> df[col].value_counts().sort_index()</span>
<span id="cb5-36"><a href="#cb5-36" aria-hidden="true" tabindex="-1"></a>    ax[i].bar(xs.index,xs.values, width <span class="op">=</span> <span class="dv">1</span>)</span>
<span id="cb5-37"><a href="#cb5-37" aria-hidden="true" tabindex="-1"></a>    ax[i].set_title(col)</span>
<span id="cb5-38"><a href="#cb5-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-39"><a href="#cb5-39" aria-hidden="true" tabindex="-1"></a>plt.savefig(dir_fig <span class="op">+</span> <span class="st">&#39;Q13_17_histgram.png&#39;</span>)</span>
<span id="cb5-40"><a href="#cb5-40" aria-hidden="true" tabindex="-1"></a>plt.close(fig)</span></code></pre></div>
<p>以下のようなグラフが最初に設定したグラフの保存場所 <code>./result/fig</code>に保存されているはずです.
ここでは,ヒストグラムの分析の仕方については細かく扱いませんが,多くの示唆が得られます.
<img src="/images/Ch16_Q13_17_histgram.png" alt="アンケートデータヒストグラム" /></p>
<h1 data-number="5" id="相関係数"><span class="header-section-number">5</span> 相関係数</h1>
<p>ヒストグラムで質問項目ごとのデータの特徴を把握したので,相関係数を求めて,データ間の関係性を可視化してみましょう. 今回のデータは<strong>順序尺度</strong>なので,<strong>スピアマンの順位相関係数</strong>を利用します. 相関に関する説明は,<a href="slds9.html">データの数値化に関する章</a>を参照してください.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">#順位相関係数を求める</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="co">#------------------------------------------------------------------</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>sns.heatmap(df[num_columns].corr(method<span class="op">=</span><span class="st">&#39;spearman&#39;</span>)</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>           ,cmap<span class="op">=</span>plt.get_cmap(<span class="st">&#39;bwr&#39;</span>)</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>           ,vmax<span class="op">=</span><span class="fl">1.0</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>           ,center <span class="op">=</span><span class="dv">0</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>           ,vmin<span class="op">=-</span><span class="fl">1.0</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>           ,xticklabels<span class="op">=</span><span class="dv">1</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>           ,yticklabels<span class="op">=</span><span class="dv">1</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>           ,linewidths<span class="op">=</span><span class="fl">.5</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>           ,annot<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;spearman&#39;</span>)</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>plt.xticks(rotation<span class="op">=</span><span class="dv">45</span>)</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>plt.savefig(dir_fig <span class="op">+</span> <span class="st">&#39;spearman.png&#39;</span>)</span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>plt.close()</span></code></pre></div>
<p>以下のような相関係数のヒートマップが作成されます. 細かな分析は行いませんが,<code>Q1~Q8</code>までの興味関心に関する質問項目間,<code>Q9~Q17</code>のスキルに関する質問間の相関が強いことなどが視覚的に表現されています.</p>
<figure>
<img src="/images/ch16_spearman.png" alt="スピアマンの順位相関係数" />
<figcaption aria-hidden="true">スピアマンの順位相関係数</figcaption>
</figure>
<p>こちらの相関係数は,後に行う<strong>共分散構造分析(SEM)</strong>におけるモデル作成のためにも利用されます.</p>
<h1 data-number="6" id="同時度数分布表"><span class="header-section-number">6</span> 同時度数分布表</h1>
<p>相関係数によって相関が高い質問項目の組み合わせがいくつか把握されましたがこれは質問項目全体の関係性です. 解釈を行うには,相関係数の高い質問項目の組み合わせごとに更に詳細に,どの回答とどの回答がどのような関係にあるのか,といった分析が必要になります. そのような,<strong>質的データ</strong>に関してそのような分析に利用できるのが<strong>同時度数分布表</strong>です. 詳細は,<a href="slds8.html">可視化の章</a>を参照して下さい.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">#クロス表</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="co">#------------------------------------------------------------------</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="co">#質問項目の区分間にどのような関係があるのかを検定する</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="co">#今回はスマホの自信(Q2)と,PCの自信(Q4)だけ(自分の仮説に応じて色々ためす)</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="co"># 作業手順</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="co">## クロス表を作成する</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="co">## 独立性の検定(お互いに影響があるか)を検定する</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="co">## 検定が有意であれば,どの項目が具体的にどの項目に影響しているかを残渣分析で明らかにする.</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="co">#クロス表の作成</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="co">## 列と行に指定する質問項目</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>target_row <span class="op">=</span> <span class="st">&#39;Q4&#39;</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>target_col <span class="op">=</span> <span class="st">&#39;Q2&#39;</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a><span class="co">## 選択肢の順序(指定しないとデータの出てきた順になる)</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>order <span class="op">=</span> {target_row:[<span class="st">&#39;すごく自信がある&#39;</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;まあまあ自信がある&#39;</span></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;どちらでもない&#39;</span></span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;あまり自信がない&#39;</span></span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;全く自信がない&#39;</span>]</span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>        ,target_col:[<span class="st">&#39;すごく自信がある&#39;</span></span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;まあまあ自信がある&#39;</span></span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;どちらでもない&#39;</span></span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;あまり自信がない&#39;</span></span>
<span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;全く自信がない&#39;</span>]}</span>
<span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-26"><a href="#cb7-26" aria-hidden="true" tabindex="-1"></a>crosstab <span class="op">=</span> pd.crosstab(df[target_row],df[target_col])</span>
<span id="cb7-27"><a href="#cb7-27" aria-hidden="true" tabindex="-1"></a>crosstab <span class="op">=</span> crosstab.reindex(order[target_row],axis<span class="op">=</span><span class="st">&#39;index&#39;</span>)</span>
<span id="cb7-28"><a href="#cb7-28" aria-hidden="true" tabindex="-1"></a>crosstab <span class="op">=</span> crosstab.reindex(order[target_col],axis<span class="op">=</span><span class="st">&#39;columns&#39;</span>)</span>
<span id="cb7-29"><a href="#cb7-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-30"><a href="#cb7-30" aria-hidden="true" tabindex="-1"></a>sns.heatmap( crosstab</span>
<span id="cb7-31"><a href="#cb7-31" aria-hidden="true" tabindex="-1"></a>           , cmap<span class="op">=</span>plt.get_cmap(<span class="st">&#39;Reds&#39;</span>)</span>
<span id="cb7-32"><a href="#cb7-32" aria-hidden="true" tabindex="-1"></a>           , yticklabels<span class="op">=</span><span class="dv">1</span></span>
<span id="cb7-33"><a href="#cb7-33" aria-hidden="true" tabindex="-1"></a>           , xticklabels<span class="op">=</span><span class="dv">1</span></span>
<span id="cb7-34"><a href="#cb7-34" aria-hidden="true" tabindex="-1"></a>           , linewidths<span class="op">=</span><span class="fl">.5</span></span>
<span id="cb7-35"><a href="#cb7-35" aria-hidden="true" tabindex="-1"></a>           , annot<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb7-36"><a href="#cb7-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-37"><a href="#cb7-37" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;クロステーブル:&#39;</span> <span class="op">+</span> target_row <span class="op">+</span> <span class="st">&#39;×&#39;</span> <span class="op">+</span> target_col)</span>
<span id="cb7-38"><a href="#cb7-38" aria-hidden="true" tabindex="-1"></a>plt.xticks(rotation<span class="op">=</span><span class="dv">70</span>)</span>
<span id="cb7-39"><a href="#cb7-39" aria-hidden="true" tabindex="-1"></a>plt.savefig(dir_fig <span class="op">+</span> <span class="st">&#39;cross_table_&#39;</span><span class="op">+</span> target_row <span class="op">+</span> <span class="st">&#39;_&#39;</span> <span class="op">+</span> target_col <span class="op">+</span><span class="st">&#39;.png&#39;</span>)</span>
<span id="cb7-40"><a href="#cb7-40" aria-hidden="true" tabindex="-1"></a>plt.close()</span></code></pre></div>
<p>作成された度数分布表を確認してみると,<code>Q2</code>と<code>Q2</code>の間に全体的に右肩下がりの関係性があること,それぞれの分布が分かります. 今回は一つの組み合わせについて注目してみましたが,様々な組み合わせについて分析してみましょう.</p>
<figure>
<img src="/images/ch16-cross.png" alt="同時度数分布表" />
<figcaption aria-hidden="true">同時度数分布表</figcaption>
</figure>
<h1 data-number="7" id="独立性の検定"><span class="header-section-number">7</span> 独立性の検定</h1>
<p>同時度数分布表によって,質問項目間の細かな関係性が分析されましたが,実際に2つの変数間に関係があるとは判断できていません. そのような判断のためには,<strong>検定</strong>を行う必要がありますが, 質的データの場合にしばしば用いられるのが,<strong>独立性の検定(Χ二乗検定)</strong>です. 詳細は<a href="slds9.html">数値化の章</a>を参照して下さい.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co">#独立性の検定</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>x2, p, dof, e <span class="op">=</span> st.chi2_contingency(crosstab,correction<span class="op">=</span><span class="va">False</span>)</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(p)</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="co"># &gt;&gt;&gt; 2.2871064452593352e-84</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> p <span class="op">&lt;=</span> <span class="fl">0.025</span>:</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;有意&#39;</span>)</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="cf">else</span>:</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;有意でない&#39;</span>)</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="co"># &gt;&gt;&gt; 有意</span></span></code></pre></div>
<h1 data-number="8" id="残渣分析"><span class="header-section-number">8</span> 残渣分析</h1>
<p>2つの質問項目間に期待値に対する偏りがあることが分かりました. 偏りが確認された場合には, 相関係数の場合と同様に,質問項目のどの回答同士が偏っているのかを把握するためには<strong>残渣分析</strong>が利用できます. 詳細は<a href="slds9.html">数値化の章</a>を参照して下さい.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co">#有意であれば,残渣分析を行う</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="co">##期待値表の計算</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>expect <span class="op">=</span> pd.DataFrame(e)</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>expect.columns <span class="op">=</span> crosstab.columns</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>expect.index   <span class="op">=</span> crosstab.index</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="co">#残渣の計算</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>residual <span class="op">=</span> crosstab <span class="op">-</span> expect</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="co">#標準化残渣の計算</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>col_sum <span class="op">=</span> crosstab.<span class="bu">sum</span>()</span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>row_sum <span class="op">=</span> crosstab.transpose().<span class="bu">sum</span>()</span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>total   <span class="op">=</span> col_sum.<span class="bu">sum</span>()</span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>stdres  <span class="op">=</span> residual</span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> c <span class="kw">in</span> stdres.columns:</span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> r <span class="kw">in</span> stdres.index:</span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a>        stdres.at[r,c]    <span class="op">=</span> stdres.at[r,c] <span class="op">\</span></span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a>                         <span class="op">/</span> np.sqrt( expect.at[r,c]</span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a>                                  <span class="op">*</span> (<span class="dv">1</span> <span class="op">-</span> col_sum[c] <span class="op">/</span> total)</span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a>                                  <span class="op">*</span> (<span class="dv">1</span> <span class="op">-</span> row_sum[r] <span class="op">/</span> total))</span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a><span class="co">#ヒートマップの作成</span></span>
<span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a>sns.heatmap(stdres</span>
<span id="cb9-25"><a href="#cb9-25" aria-hidden="true" tabindex="-1"></a>           ,cmap<span class="op">=</span>plt.get_cmap(<span class="st">&#39;bwr&#39;</span>)</span>
<span id="cb9-26"><a href="#cb9-26" aria-hidden="true" tabindex="-1"></a>           ,vmax<span class="op">=</span><span class="fl">1.96</span></span>
<span id="cb9-27"><a href="#cb9-27" aria-hidden="true" tabindex="-1"></a>           ,vmin<span class="op">=-</span><span class="fl">1.96</span></span>
<span id="cb9-28"><a href="#cb9-28" aria-hidden="true" tabindex="-1"></a>           ,center<span class="op">=</span><span class="dv">0</span></span>
<span id="cb9-29"><a href="#cb9-29" aria-hidden="true" tabindex="-1"></a>           ,xticklabels<span class="op">=</span><span class="dv">1</span></span>
<span id="cb9-30"><a href="#cb9-30" aria-hidden="true" tabindex="-1"></a>           ,linewidths<span class="op">=</span><span class="fl">.5</span></span>
<span id="cb9-31"><a href="#cb9-31" aria-hidden="true" tabindex="-1"></a>           ,annot<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb9-32"><a href="#cb9-32" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;標準化残渣:&#39;</span><span class="op">+</span> target_row <span class="op">+</span> <span class="st">&#39;×&#39;</span> <span class="op">+</span> target_col)</span>
<span id="cb9-33"><a href="#cb9-33" aria-hidden="true" tabindex="-1"></a>plt.xticks(rotation<span class="op">=</span><span class="dv">70</span>)</span>
<span id="cb9-34"><a href="#cb9-34" aria-hidden="true" tabindex="-1"></a>plt.savefig(dir_fig <span class="op">+</span> <span class="st">&#39;stdres_&#39;</span> <span class="op">+</span> target_row <span class="op">+</span> <span class="st">&#39;_&#39;</span> <span class="op">+</span> target_col <span class="op">+</span> <span class="st">&#39;.png&#39;</span>)</span>
<span id="cb9-35"><a href="#cb9-35" aria-hidden="true" tabindex="-1"></a>plt.close()</span></code></pre></div>
<p>作成された標準化残渣を確認すると, 全体的に右肩下がりの偏りがあることが統計的に判断されました.</p>
<figure>
<img src="/images/ch16-regit.png" alt="標準化残渣" />
<figcaption aria-hidden="true">標準化残渣</figcaption>
</figure>
<h1 data-number="9" id="次元削減"><span class="header-section-number">9</span> 次元削減</h1>
<p>これまでは一つ一つの質問項目及び質問項目間の関係に注目してきましたが, いくつかの質問項目をまとめてどのような関係があるのか,あるいは全体の質問をまとめてどのようなことが言えるのかという着眼点もあります.
そのような場合に使える手法の一つが, <strong>次元削減</strong>です. 次元削減は,多数の変数がある場合にいくつかの変数を要約した一つの<strong>合成変数</strong>を作成する手法になります.</p>
<p>例えば, 以下のような各科目の成績データを考えた場合に,個別の科目の成績を見ると,国語は高いが,数学は低い人と社会は高いが,英語は低い人のどちらが学力が高いのかというような判断は困難です.</p>
<table>
<thead>
<tr class="header">
<th>id</th>
<th>国語 (x₁)</th>
<th>英語 (x₂)</th>
<th>社会 (x₃)</th>
<th>物理 (x₄)</th>
<th>化学 (x₅)</th>
<th>数学 (x₆)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>78</td>
<td>80</td>
<td>49</td>
<td>76</td>
<td>70</td>
<td>35</td>
</tr>
<tr class="even">
<td>2</td>
<td>66</td>
<td>90</td>
<td>68</td>
<td>47</td>
<td>60</td>
<td>55</td>
</tr>
<tr class="odd">
<td>3</td>
<td>55</td>
<td>89</td>
<td>90</td>
<td>88</td>
<td>82</td>
<td>78</td>
</tr>
<tr class="even">
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
</tbody>
</table>
<p>そこで, 以下のように文系の科目をまとめた文系力やすべての科目を合成した総合学力のような変数を作成することで全体的な傾向が判断できます.
<span class="math display">
z_1 = \beta_{11}u_1 + \beta_{12}u_2 + \beta_{13}u_3 + \beta_{14}u_4 + \beta_{15}u_5 + \beta_{16}u_6 \implies 総合学力
</span>
<span class="math display">
z_2 = \beta_{21}u_1 + \beta_{22}u_2 + \beta_{23}u_3  \implies 文系力
</span>
<span class="math display">
z_3 =  \beta_{34}u_4 + \beta_{35}u_5 + \beta_{36}u_6 \implies 理系力
</span></p>
<p>ここで,<span class="math inline">u_i</span> は <span class="math inline">x_i</span> を標準化したものです.</p>
<p>このようにそれぞれの点数をまとめて,要約した変数に変換することで,文系力が高いグループを文系に分類するなど全体的な解釈を行うことが可能になります. 変数の要約は,上の用に回帰式を用いて分析者が独自に設計することも可能ですが, まとめられる以前の情報の情報をできるだけ損なわずに自動的に合成変数を作成する<strong>次元削減</strong>手法を利用することが一般的です.</p>
<p>次元削減手法にはいくつかありますが,ここでは代表的な手法である<strong>主成分分析(Principle component analysis)</strong>を利用してみましょう.</p>
<div class="note">
<ul>
<li>主成分分析(PCA;Principle component analysis)</li>
</ul>
<p>主成分分析は,多数の変数の持つ情報を損なわずに圧縮する技術(次数削減)であり,予測モデル構築の前処理としてもよく使われます.
主成分分析では,主成分の分散が最大になる軸(主成分)を探しその軸に直行する軸の中で分散が最大になる主成分を順に探していく手法です. 最も分散の大きい主成分を<strong>第1主成分</strong>,次に大きいものを<strong>第2主成分</strong>といい,以下順に数字が増えていきます.</p>
<p>通常は人間が把握できない多次元(多変数)を要約するために利用されますが,ここでは理解のために,二次元の場合のイメージを考えてみましょう.</p>
<figure>
<img src="/images/ch16-pca.png" alt="PCA" />
<figcaption aria-hidden="true">PCA</figcaption>
</figure>
<p>第1主成分を軸としてみると,第2主成分の情報は失われますが,情報の損失が最も少なく2次元から1次元に情報を圧縮できます. これは,<span class="math inline">[x,y]</span>を<span class="math inline">\theta</span>だけ回転させて,<span class="math inline">[x,y][cos(\theta),sin(\theta)]^t</span>を計算していることになります.</p>
</div>
<p>ここでは,アンケートデータの興味に関する質問<code>Q1,Q3,Q5,Q7</code>,自信に関する質問<code>Q2,Q4,Q6,Q8</code>,知識に関する質問<code>Q9~Q17</code>をそれぞれ要約して合成変数を作成してみます.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">#次元削減</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="co">#------------------------------------------------------------------</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="co">#興味,自信,知識を統合して3変数にする</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>interest    <span class="op">=</span> df[[<span class="st">&#39;Q&#39;</span> <span class="op">+</span> <span class="bu">str</span>(x) <span class="op">+</span> <span class="st">&#39;_num&#39;</span> <span class="cf">for</span> x <span class="kw">in</span> [<span class="dv">1</span>,<span class="dv">3</span>,<span class="dv">5</span>,<span class="dv">7</span>]]]</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>confidence  <span class="op">=</span> df[[<span class="st">&#39;Q&#39;</span> <span class="op">+</span> <span class="bu">str</span>(x) <span class="op">+</span> <span class="st">&#39;_num&#39;</span> <span class="cf">for</span> x <span class="kw">in</span> [<span class="dv">2</span>,<span class="dv">4</span>,<span class="dv">6</span>,<span class="dv">8</span>]]]</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>knowledge   <span class="op">=</span>  df[[<span class="st">&#39;Q&#39;</span> <span class="op">+</span> <span class="bu">str</span>(x) <span class="op">+</span> <span class="st">&#39;_num&#39;</span> <span class="cf">for</span> x <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">9</span>,<span class="dv">18</span>,<span class="dv">1</span>)]]</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="co">#普通に平均値を出して,正規化するパターン</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a><span class="co">def min_max_scaling(x):</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a><span class="co">    return (x - x.min())/(x.max() - x.min())</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a><span class="co">interest = min_max_scaling(interest.mean(axis=1))</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a><span class="co">confidence = min_max_scaling(confidence.mean(axis=1))</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a><span class="co">knowledge = min_max_scaling(knowledge.mean(axis=1))</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a><span class="co">print(interest)</span></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a><span class="co">#PCAやt-sneでやってみるパターン(ただし,解釈が難しい)</span></span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.decomposition  <span class="im">import</span> PCA</span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a>pca <span class="op">=</span> PCA()</span>
<span id="cb10-23"><a href="#cb10-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-24"><a href="#cb10-24" aria-hidden="true" tabindex="-1"></a>pca.fit(interest)</span>
<span id="cb10-25"><a href="#cb10-25" aria-hidden="true" tabindex="-1"></a>interest <span class="op">=</span> pca.transform(interest)[:,<span class="dv">0</span>]</span>
<span id="cb10-26"><a href="#cb10-26" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;interest:&#39;</span>, pca.explained_variance_ratio_[<span class="dv">0</span>])</span>
<span id="cb10-27"><a href="#cb10-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-28"><a href="#cb10-28" aria-hidden="true" tabindex="-1"></a>pca.fit(confidence)</span>
<span id="cb10-29"><a href="#cb10-29" aria-hidden="true" tabindex="-1"></a>confidence <span class="op">=</span> pca.transform(confidence)[:,<span class="dv">0</span>]</span>
<span id="cb10-30"><a href="#cb10-30" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;confidence:&#39;</span>, pca.explained_variance_ratio_[<span class="dv">0</span>])</span>
<span id="cb10-31"><a href="#cb10-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-32"><a href="#cb10-32" aria-hidden="true" tabindex="-1"></a>pca.fit(knowledge)</span>
<span id="cb10-33"><a href="#cb10-33" aria-hidden="true" tabindex="-1"></a>knowledge <span class="op">=</span> pca.transform(knowledge)[:,<span class="dv">0</span>]</span>
<span id="cb10-34"><a href="#cb10-34" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;knowledge:&#39;</span>, pca.explained_variance_ratio_[<span class="dv">0</span>])</span>
<span id="cb10-35"><a href="#cb10-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-36"><a href="#cb10-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-37"><a href="#cb10-37" aria-hidden="true" tabindex="-1"></a><span class="co">#図示してみる</span></span>
<span id="cb10-38"><a href="#cb10-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-39"><a href="#cb10-39" aria-hidden="true" tabindex="-1"></a><span class="co">## interest-confidence</span></span>
<span id="cb10-40"><a href="#cb10-40" aria-hidden="true" tabindex="-1"></a>plt.scatter(y<span class="op">=</span>interest,x<span class="op">=</span>confidence)</span>
<span id="cb10-41"><a href="#cb10-41" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;interest-confidence&#39;</span>)</span>
<span id="cb10-42"><a href="#cb10-42" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&#39;interest&#39;</span>)</span>
<span id="cb10-43"><a href="#cb10-43" aria-hidden="true" tabindex="-1"></a>plt.xlabel(<span class="st">&#39;confidence&#39;</span>)</span>
<span id="cb10-44"><a href="#cb10-44" aria-hidden="true" tabindex="-1"></a>plt.savefig(dir_fig <span class="op">+</span> <span class="st">&#39;interest-confidence.png&#39;</span>)</span>
<span id="cb10-45"><a href="#cb10-45" aria-hidden="true" tabindex="-1"></a>plt.close()</span>
<span id="cb10-46"><a href="#cb10-46" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-47"><a href="#cb10-47" aria-hidden="true" tabindex="-1"></a><span class="co">## interest-knowledge</span></span>
<span id="cb10-48"><a href="#cb10-48" aria-hidden="true" tabindex="-1"></a>plt.scatter(y<span class="op">=</span>interest,x<span class="op">=</span>knowledge)</span>
<span id="cb10-49"><a href="#cb10-49" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;interest-knowledge&#39;</span>)</span>
<span id="cb10-50"><a href="#cb10-50" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&#39;interest&#39;</span>)</span>
<span id="cb10-51"><a href="#cb10-51" aria-hidden="true" tabindex="-1"></a>plt.xlabel(<span class="st">&#39;knowledge&#39;</span>)</span>
<span id="cb10-52"><a href="#cb10-52" aria-hidden="true" tabindex="-1"></a>plt.savefig(dir_fig <span class="op">+</span> <span class="st">&#39;interest-knowledge.png&#39;</span>)</span>
<span id="cb10-53"><a href="#cb10-53" aria-hidden="true" tabindex="-1"></a>plt.close()</span>
<span id="cb10-54"><a href="#cb10-54" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-55"><a href="#cb10-55" aria-hidden="true" tabindex="-1"></a><span class="co">## confidence-knowledge</span></span>
<span id="cb10-56"><a href="#cb10-56" aria-hidden="true" tabindex="-1"></a>plt.scatter(y<span class="op">=</span>confidence,x<span class="op">=</span>knowledge)</span>
<span id="cb10-57"><a href="#cb10-57" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;confidence-knowledge&#39;</span>)</span>
<span id="cb10-58"><a href="#cb10-58" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&#39;confidence&#39;</span>)</span>
<span id="cb10-59"><a href="#cb10-59" aria-hidden="true" tabindex="-1"></a>plt.xlabel(<span class="st">&#39;knowledge&#39;</span>)</span>
<span id="cb10-60"><a href="#cb10-60" aria-hidden="true" tabindex="-1"></a>plt.savefig(dir_fig <span class="op">+</span> <span class="st">&#39;confidence-knowledge.png&#39;</span>)</span>
<span id="cb10-61"><a href="#cb10-61" aria-hidden="true" tabindex="-1"></a>plt.close()</span>
<span id="cb10-62"><a href="#cb10-62" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-63"><a href="#cb10-63" aria-hidden="true" tabindex="-1"></a><span class="co">##3変数</span></span>
<span id="cb10-64"><a href="#cb10-64" aria-hidden="true" tabindex="-1"></a>fig <span class="op">=</span> plt.figure()</span>
<span id="cb10-65"><a href="#cb10-65" aria-hidden="true" tabindex="-1"></a>ax <span class="op">=</span> fig.add_subplot(projection<span class="op">=</span><span class="st">&#39;3d&#39;</span>)</span>
<span id="cb10-66"><a href="#cb10-66" aria-hidden="true" tabindex="-1"></a>ax.scatter(interest,confidence,knowledge)</span>
<span id="cb10-67"><a href="#cb10-67" aria-hidden="true" tabindex="-1"></a>plt.savefig(dir_fig <span class="op">+</span> <span class="st">&#39;pca3d.png&#39;</span>)</span>
<span id="cb10-68"><a href="#cb10-68" aria-hidden="true" tabindex="-1"></a>plt.close(fig)</span>
<span id="cb10-69"><a href="#cb10-69" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-70"><a href="#cb10-70" aria-hidden="true" tabindex="-1"></a><span class="co">#それぞれの相関係数を確認する</span></span>
<span id="cb10-71"><a href="#cb10-71" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;interest&#39;</span>]      <span class="op">=</span> interest</span>
<span id="cb10-72"><a href="#cb10-72" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;confidence&#39;</span>]    <span class="op">=</span> confidence</span>
<span id="cb10-73"><a href="#cb10-73" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;knowledge&#39;</span>]     <span class="op">=</span> knowledge</span>
<span id="cb10-74"><a href="#cb10-74" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-75"><a href="#cb10-75" aria-hidden="true" tabindex="-1"></a>sns.heatmap(df[[<span class="st">&#39;interest&#39;</span>,<span class="st">&#39;confidence&#39;</span>,<span class="st">&#39;knowledge&#39;</span>]].corr(method<span class="op">=</span><span class="st">&#39;spearman&#39;</span>)</span>
<span id="cb10-76"><a href="#cb10-76" aria-hidden="true" tabindex="-1"></a>           ,cmap<span class="op">=</span>plt.get_cmap(<span class="st">&#39;bwr&#39;</span>)</span>
<span id="cb10-77"><a href="#cb10-77" aria-hidden="true" tabindex="-1"></a>           ,vmax<span class="op">=</span><span class="fl">1.0</span></span>
<span id="cb10-78"><a href="#cb10-78" aria-hidden="true" tabindex="-1"></a>           ,center <span class="op">=</span><span class="dv">0</span></span>
<span id="cb10-79"><a href="#cb10-79" aria-hidden="true" tabindex="-1"></a>           ,vmin<span class="op">=-</span><span class="fl">1.0</span></span>
<span id="cb10-80"><a href="#cb10-80" aria-hidden="true" tabindex="-1"></a>           ,xticklabels<span class="op">=</span><span class="dv">1</span></span>
<span id="cb10-81"><a href="#cb10-81" aria-hidden="true" tabindex="-1"></a>           ,yticklabels<span class="op">=</span><span class="dv">1</span></span>
<span id="cb10-82"><a href="#cb10-82" aria-hidden="true" tabindex="-1"></a>           ,linewidths<span class="op">=</span><span class="fl">.5</span></span>
<span id="cb10-83"><a href="#cb10-83" aria-hidden="true" tabindex="-1"></a>           ,annot<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb10-84"><a href="#cb10-84" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-85"><a href="#cb10-85" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;pca_spearman&#39;</span>)</span>
<span id="cb10-86"><a href="#cb10-86" aria-hidden="true" tabindex="-1"></a>plt.xticks(rotation<span class="op">=</span><span class="dv">45</span>)</span>
<span id="cb10-87"><a href="#cb10-87" aria-hidden="true" tabindex="-1"></a>plt.savefig(dir_fig <span class="op">+</span> <span class="st">&#39;pca_spearman.png&#39;</span>)</span>
<span id="cb10-88"><a href="#cb10-88" aria-hidden="true" tabindex="-1"></a>plt.close()</span>
<span id="cb10-89"><a href="#cb10-89" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-90"><a href="#cb10-90" aria-hidden="true" tabindex="-1"></a><span class="co">#このあとクラスタリングしてみることで,学生の分類ができるかもしれない</span></span>
<span id="cb10-91"><a href="#cb10-91" aria-hidden="true" tabindex="-1"></a><span class="co">#(けど今回はやらない)</span></span></code></pre></div>
<p>PCAによる合成変数の関係を散布図で確認し,それぞれの合成変数間の関係性を見てみることで個別にはわからなかった特徴が見えることがあります. 今回は,これ以上は扱いませんが,可視化によって特徴が見えた場合にはこのあと作成した変数を利用した解析,クラスタリングなどでデータの解釈を進めることになります.</p>
<figure>
<img src="/images/ch16-pca-graph.png" alt="次元削減の結果確認" />
<figcaption aria-hidden="true">次元削減の結果確認</figcaption>
</figure>
<figure>
<img src="/images/ch16-pca-corr.png" alt="合成変数の相関係数" />
<figcaption aria-hidden="true">合成変数の相関係数</figcaption>
</figure>
<h1 data-number="10" id="共分散構造分析"><span class="header-section-number">10</span> 共分散構造分析</h1>
<p>これまでに残渣分析などで2変数間の関係性を確かめてきました. しかし,アンケート調査のように多数の項目がある場合には, より複雑な多数の変数間の関係性を知りたい場合があります.
そのような場合に利用できるのが<strong>共分散構造分析(SEM;Covariance Structure Analysis, Structural Equation Modeling）</strong>です.
SEMは社会科学,心理学,マーケティング,教育研究などの分野でよく用いられる複数の変数間の関係をモデル化し分析する統計的手法です.
SEMはこれまでの分析手法のように2つのデータの関係を対等に分析するのではなく, 先に理論や仮説に基づいたモデルを構築し,そのモデルの適合性をデータを通じて検証します. したがって,事前にモデルを構築する必要があり,その点が難しいポイントとなります.</p>
<p>SEMに関して説明する前に,SEMと関連が深い<strong>因子分析</strong>に関して説明しておきます.</p>
<div class="note">
<ul>
<li>因子分析
観測された複数の変数の背景にある因子を想定して,その因子を明らかにする分析手法を<strong>因子分析</strong>といいます.
例として,学生別の｢100M走のタイム｣と｢走り幅跳びの飛距離｣は,背景にデータとして観測されていないである｢脚力｣という共通の<strong>潜在変数</strong>を持つと仮定します. その場合に,</li>
</ul>
<p><span class="math display">脚力=100M + 走り幅跳び + ... </span></p>
<p>のような形で,背景にある因子を説明するのが因子分析です.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">ID</th>
<th style="text-align: center;">100M</th>
<th style="text-align: center;">走り幅跳び</th>
<th style="text-align: center;">遠投</th>
<th style="text-align: center;">懸垂</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">14.5</td>
<td style="text-align: center;">2.2</td>
<td style="text-align: center;">20</td>
<td style="text-align: center;">12</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">15.2</td>
<td style="text-align: center;">1.7</td>
<td style="text-align: center;">18</td>
<td style="text-align: center;">7</td>
</tr>
<tr class="odd">
<td style="text-align: center;">…</td>
<td style="text-align: center;">…</td>
<td style="text-align: center;">…</td>
<td style="text-align: center;">…</td>
<td style="text-align: center;"></td>
</tr>
</tbody>
</table>
<p><img src="/images/ch16-sem-1.png" /></p>
</div>
<div class="note">
<ul>
<li>共分散構造分析</li>
</ul>
<p>SEMで適合度を検討するモデルは<strong>構造モデル</strong>と呼ばれます. 構造モデルは,<strong>観測変数(直接測定される変数)</strong>と<strong>潜在変数(直接測定はできないが,観測変数を通じて推定される変数)</strong>によって構成される複数の方程式からなります.</p>
<p>SEMでは以下のような観測変数と潜在変数からなる回帰モデルによって<strong>因果関係</strong>を表します.</p>
<p><span class="math display"> 体育大学合格率(観測) = 脚力(潜在) + 腕力(潜在) + 筆記テスト成績(観測)  </span></p>
<p>更に, 変数間の双方向の相関関係も同時に検討します.</p>
<p>まとめると,SEMはモデルを構築するための,回帰分析と因子分析を同時に行う分析手法になります.</p>
<p>SEMにおける構造モデルは,複数の観測変数からなる潜在変数,観測変数と潜在変数からなる因果関係から構成され,非常に複雑な構造を持ちます. そのようなモデルの全体像を視覚的に把握できるように図にしたものを<strong>パス図</strong>といい,SEMを利用するためにはこの図を最初に仮説として作成する必要があります.</p>
<p>パス図では,モデル内の変数間の因果関係を矢印として表し, p値と偏回帰係数によってそれぞれの因果関係の検定と影響力が示されます.</p>
<p><img src="/images/ch16-sem2.png" /></p>
<p>データによってモデルはその適合性が確認されますが,確認すべき結果は以下の表のようになります.</p>
<table>
<colgroup>
<col style="width: 21%" />
<col style="width: 56%" />
<col style="width: 21%" />
</colgroup>
<thead>
<tr class="header">
<th>評価指標</th>
<th>意味</th>
<th>目安</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>カイ二乗適合度検定 (Chi-Square Goodness-of-Fit Test)</td>
<td>モデルによって生成された共分散行列とサンプルデータの共分散行列との誤差を評価</td>
<td>p値 &lt; 0.05</td>
</tr>
<tr class="even">
<td>ルート平均二乗誤差の近似 (RMSEA: Root Mean Square Error of Approximation)</td>
<td>一人一人の観測値に対してモデルの適合度がどれだけ良いか</td>
<td>0.05以下であれば良い 0.05〜0.08であれば許可範囲 0.08〜0.10は許可 それ以上であれば不適切</td>
</tr>
<tr class="odd">
<td>標準化平均二乗残差 (SRMR: Standardized Root Mean Square Residual)</td>
<td>モデルとデータの間の差異の平均</td>
<td>SRMR値が0.05以下であれば,モデルの適合度は良い</td>
</tr>
<tr class="even">
<td>比較適合指数 (CFI: Comparative Fit Index)</td>
<td>モデルの適合度を、無制約のベースラインモデル（すべての観測変数が独立しているモデル）と比較して評価</td>
<td>CFI値は0.9から1の範囲 0.95以上であれば非常に良い適合度 0.9以上であれば可</td>
</tr>
<tr class="odd">
<td>GFI (Goodness of Fit Index)</td>
<td>モデルによって再現された共分散および共分散の割合</td>
<td>GFI値が1から0の範囲、0.95以上であれば非常に良い適合度 0.9以上であれば可</td>
</tr>
<tr class="even">
<td>AGFI (Adjusted Goodness of Fit Index)</td>
<td>GFIをモデルの複雑さ（モデルに含まれるパラメータの数）で調整したもの</td>
<td>0.95以上であれば非常に良い適合度 0.9以上であれば可</td>
</tr>
<tr class="odd">
<td>NFI (Normed Fit Index)</td>
<td>モデルの適合度を独立している無制約の帰無仮説モデル（null model）と比較して評価し,モデルがモデルにどれだけ適合度を示しているかを測定</td>
<td>0.95以上であれば非常に良い適合度 0.9以上であれば可</td>
</tr>
</tbody>
</table>
</div>
<p>それでは,アンケートデータを利用してSEMを実際に行ってみましょう. 今回は以下のパス図によって表される図を検証します.</p>
<p><img src="/images/ch16-sem-4.png" /></p>
<p>今回はあくまで仮想データを利用した練習なので,このモデルは深く考えられたものではありませんが,実際にSEMを利用する場合には事前に仮説を立てて, アンケートの質問の設計自体を仮説が検証できるような形にしておく必要があります.</p>
<p>今回は, 潜在因子として, Word,Excel,PowerPointのスキルによって構成される<strong>情報作成志向</strong>,情報倫理,IT用語に関する知識によって構成される<strong>情報探求志向</strong>,SNSやネットのコミュニケーション能力によって構成される<strong>情報消費志向</strong>によって,パソコンとスマートフォンに対する自信が決まるという因果関係を表しています. また,情報作成志向を構成する観測変数は,Office操作技能によって影響を受けるという構造になっています.</p>
<p>Pythonでは,共分散構造分析用のライブラリ<code>semopy</code>を利用してSEMを実施できます.
<code>semopy</code>では,モデルを文字列で指定します.</p>
<p>指定される,潜在変数,因果関係,相関関係は記号を用いてそれぞれ以下のように表現されます.</p>
<ul>
<li><strong>潜在因子</strong></li>
</ul>
<p><code>潜在変数 =~ 観測変数1 + 観測変数2 + ...</code></p>
<ul>
<li><strong>因果関係</strong></li>
</ul>
<p><code>目的変数 ~ 説明変数1 + 説明変数2 + ...</code></p>
<ul>
<li><strong>相関関係</strong></li>
</ul>
<p><code>変数 ~ 変数</code></p>
<p>それでは,モデルを構築し,実際のデータで検証してみましょう.
SEMは,回帰分析を行うので回帰係数の解釈のために事前に変数を標準化しておくことを忘れないようにしましょう.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co">#共分散構造分析</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="co">#------------------------------------------------------------------</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="co">#変数間の因果関係をモデル化する.</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> semopy</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> semopy <span class="im">import</span> Model</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> scipy <span class="im">import</span> stats</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="co">#標準化する</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>df[num_columns] <span class="op">=</span> stats.zscore(df[num_columns])</span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="co">#データ型の変換</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a><span class="co">## すべてfloatでないとだめ.</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>df_sem <span class="op">=</span> df[num_columns].astype(<span class="st">&#39;float64&#39;</span>)</span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a><span class="co">#わかりにくいから名前を変える</span></span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a>df_sem.rename({<span class="st">&#39;Q2_num&#39;</span>:<span class="st">&#39;Smartphone&#39;</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a>              ,<span class="st">&#39;Q4_num&#39;</span>:<span class="st">&#39;PC&#39;</span></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a>              ,<span class="st">&#39;Q13_num&#39;</span>:<span class="st">&#39;Word&#39;</span></span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a>              ,<span class="st">&#39;Q14_num&#39;</span>:<span class="st">&#39;Excel&#39;</span></span>
<span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a>              ,<span class="st">&#39;Q15_num&#39;</span>:<span class="st">&#39;PowerPoint&#39;</span></span>
<span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a>              ,<span class="st">&#39;Q10_num&#39;</span>:<span class="st">&#39;Windows&#39;</span></span>
<span id="cb11-23"><a href="#cb11-23" aria-hidden="true" tabindex="-1"></a>              ,<span class="st">&#39;Q16_num&#39;</span>:<span class="st">&#39;Office&#39;</span></span>
<span id="cb11-24"><a href="#cb11-24" aria-hidden="true" tabindex="-1"></a>              ,<span class="st">&#39;Q17_num&#39;</span>:<span class="st">&#39;Info&#39;</span></span>
<span id="cb11-25"><a href="#cb11-25" aria-hidden="true" tabindex="-1"></a>              ,<span class="st">&#39;Q9_num&#39;</span>:<span class="st">&#39;IT&#39;</span></span>
<span id="cb11-26"><a href="#cb11-26" aria-hidden="true" tabindex="-1"></a>              ,<span class="st">&#39;Q8_num&#39;</span>:<span class="st">&#39;Communication&#39;</span></span>
<span id="cb11-27"><a href="#cb11-27" aria-hidden="true" tabindex="-1"></a>              ,<span class="st">&#39;Q6_num&#39;</span>:<span class="st">&#39;SNS&#39;</span>}</span>
<span id="cb11-28"><a href="#cb11-28" aria-hidden="true" tabindex="-1"></a>              ,inplace<span class="op">=</span><span class="va">True</span></span>
<span id="cb11-29"><a href="#cb11-29" aria-hidden="true" tabindex="-1"></a>              ,axis<span class="op">=</span><span class="st">&#39;columns&#39;</span>)</span>
<span id="cb11-30"><a href="#cb11-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-31"><a href="#cb11-31" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df_sem)</span>
<span id="cb11-32"><a href="#cb11-32" aria-hidden="true" tabindex="-1"></a><span class="co"># 仮説(割と適当です)</span></span>
<span id="cb11-33"><a href="#cb11-33" aria-hidden="true" tabindex="-1"></a><span class="co"># 文字列で指定する</span></span>
<span id="cb11-34"><a href="#cb11-34" aria-hidden="true" tabindex="-1"></a>desc <span class="op">=</span> <span class="st">&#39;&#39;&#39;</span></span>
<span id="cb11-35"><a href="#cb11-35" aria-hidden="true" tabindex="-1"></a><span class="st">    # (潜在因子) 潜在変数=~観測変数</span></span>
<span id="cb11-36"><a href="#cb11-36" aria-hidden="true" tabindex="-1"></a><span class="st">    ##隠れた因子を作成する</span></span>
<span id="cb11-37"><a href="#cb11-37" aria-hidden="true" tabindex="-1"></a><span class="st">    creation =~ Word + Excel + PowerPoint + Windows</span></span>
<span id="cb11-38"><a href="#cb11-38" aria-hidden="true" tabindex="-1"></a><span class="st">    knowledge =~ Info + IT</span></span>
<span id="cb11-39"><a href="#cb11-39" aria-hidden="true" tabindex="-1"></a><span class="st">    consumption =~ Communication + SNS</span></span>
<span id="cb11-40"><a href="#cb11-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-41"><a href="#cb11-41" aria-hidden="true" tabindex="-1"></a><span class="st">    # (因果関係) 目的変数 ~ 説明変数</span></span>
<span id="cb11-42"><a href="#cb11-42" aria-hidden="true" tabindex="-1"></a><span class="st">    ## 変数の間の因果関係の仮説(潜在,観測どちらでも)</span></span>
<span id="cb11-43"><a href="#cb11-43" aria-hidden="true" tabindex="-1"></a><span class="st">    PC ~ creation + knowledge + consumption</span></span>
<span id="cb11-44"><a href="#cb11-44" aria-hidden="true" tabindex="-1"></a><span class="st">    Smartphone ~ creation + knowledge + consumption</span></span>
<span id="cb11-45"><a href="#cb11-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-46"><a href="#cb11-46" aria-hidden="true" tabindex="-1"></a><span class="st">    # (相関関係 双方向)</span></span>
<span id="cb11-47"><a href="#cb11-47" aria-hidden="true" tabindex="-1"></a><span class="st">    ## 向きはどちらでも良い</span></span>
<span id="cb11-48"><a href="#cb11-48" aria-hidden="true" tabindex="-1"></a><span class="st">    ### 面倒なので1つだけ</span></span>
<span id="cb11-49"><a href="#cb11-49" aria-hidden="true" tabindex="-1"></a><span class="st">    PC ~~ Smartphone</span></span>
<span id="cb11-50"><a href="#cb11-50" aria-hidden="true" tabindex="-1"></a><span class="st">    &#39;&#39;&#39;</span></span>
<span id="cb11-51"><a href="#cb11-51" aria-hidden="true" tabindex="-1"></a><span class="co"># 学習器を用意</span></span>
<span id="cb11-52"><a href="#cb11-52" aria-hidden="true" tabindex="-1"></a>mod <span class="op">=</span> Model(desc)</span>
<span id="cb11-53"><a href="#cb11-53" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-54"><a href="#cb11-54" aria-hidden="true" tabindex="-1"></a><span class="co"># 学習結果をresに代入する</span></span>
<span id="cb11-55"><a href="#cb11-55" aria-hidden="true" tabindex="-1"></a>res <span class="op">=</span> mod.fit(df_sem)</span>
<span id="cb11-56"><a href="#cb11-56" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-57"><a href="#cb11-57" aria-hidden="true" tabindex="-1"></a><span class="co"># 学習結果のパラメータ一覧を表示する</span></span>
<span id="cb11-58"><a href="#cb11-58" aria-hidden="true" tabindex="-1"></a><span class="co">#CFI、GFI、AGFI、NFI &gt;= 0.95非常に良い &lt;0.9 悪い</span></span>
<span id="cb11-59"><a href="#cb11-59" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-60"><a href="#cb11-60" aria-hidden="true" tabindex="-1"></a>inspect <span class="op">=</span> mod.inspect()</span>
<span id="cb11-61"><a href="#cb11-61" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(inspect)</span>
<span id="cb11-62"><a href="#cb11-62" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-63"><a href="#cb11-63" aria-hidden="true" tabindex="-1"></a><span class="co"># モデルの評価指標を表示</span></span>
<span id="cb11-64"><a href="#cb11-64" aria-hidden="true" tabindex="-1"></a>stats <span class="op">=</span> semopy.calc_stats(mod)</span>
<span id="cb11-65"><a href="#cb11-65" aria-hidden="true" tabindex="-1"></a><span class="co"># 転置して表示</span></span>
<span id="cb11-66"><a href="#cb11-66" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(stats.T)</span>
<span id="cb11-67"><a href="#cb11-67" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-68"><a href="#cb11-68" aria-hidden="true" tabindex="-1"></a><span class="co">#偏回帰係数(因果の大きさ+p値(0.05以下で有意))</span></span>
<span id="cb11-69"><a href="#cb11-69" aria-hidden="true" tabindex="-1"></a><span class="co">#plot_covs=True で共分散を表示</span></span>
<span id="cb11-70"><a href="#cb11-70" aria-hidden="true" tabindex="-1"></a><span class="co">#engine=</span></span>
<span id="cb11-71"><a href="#cb11-71" aria-hidden="true" tabindex="-1"></a><span class="co">## &#39;circo&#39; 円形</span></span>
<span id="cb11-72"><a href="#cb11-72" aria-hidden="true" tabindex="-1"></a><span class="co">## &#39;dot&#39; 階層型のグラフ</span></span>
<span id="cb11-73"><a href="#cb11-73" aria-hidden="true" tabindex="-1"></a>pass_graph <span class="op">=</span> semopy.semplot(mod</span>
<span id="cb11-74"><a href="#cb11-74" aria-hidden="true" tabindex="-1"></a>                           ,dir_fig <span class="op">+</span> <span class="st">&#39;SEM.png&#39;</span></span>
<span id="cb11-75"><a href="#cb11-75" aria-hidden="true" tabindex="-1"></a>                           ,plot_covs<span class="op">=</span><span class="va">True</span></span>
<span id="cb11-76"><a href="#cb11-76" aria-hidden="true" tabindex="-1"></a>                           ,engine<span class="op">=</span><span class="st">&#39;dot&#39;</span>)</span></code></pre></div>
<p><code>semopy</code>では以下のような形でパス図におけるそれぞれの矢印毎にp値を求めてくれます.</p>
<p><img src="/images/ch16-sem-5.png" /></p>
<p>また,パス図として結果を表示してくれる機能もあります.</p>
<p><img src="/images/ch16-sem6.png" /></p>
<p>今回は,スマートフォンに関する興味関心から情報作成志向に対するパス以外は有意でした.また,モデル全体を評価する指標も概ね問題なく,データによってモデルの適合性が確認されました.</p>
]]></description>
    <pubDate>Sat, 19 Oct 2024 00:00:00 UT</pubDate>
    <guid>/lectures/slds16.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>特別講義DS Ch14 ニューラルネットワーク(画像認識)</title>
    <link>/lectures/slds14.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#ニューラルネットワーク概要" id="toc-ニューラルネットワーク概要"><span class="toc-section-number">1</span> ニューラルネットワーク概要</a>
<ul>
<li><a href="#パーセプトロン" id="toc-パーセプトロン"><span class="toc-section-number">1.1</span> パーセプトロン</a></li>
<li><a href="#ニューラルネットワークの構成" id="toc-ニューラルネットワークの構成"><span class="toc-section-number">1.2</span> ニューラルネットワークの構成</a></li>
<li><a href="#ニューラルネットワークの学習" id="toc-ニューラルネットワークの学習"><span class="toc-section-number">1.3</span> ニューラルネットワークの学習</a></li>
</ul></li>
<li><a href="#画像認識" id="toc-画像認識"><span class="toc-section-number">2</span> 画像認識</a>
<ul>
<li><a href="#代表的なcnnモデル" id="toc-代表的なcnnモデル"><span class="toc-section-number">2.5</span> 代表的なCNNモデル</a></li>
<li><a href="#顔による年齢識別" id="toc-顔による年齢識別"><span class="toc-section-number">2.6</span> 顔による年齢識別</a>
<ul>
<li><a href="#画像ファイルの形式" id="toc-画像ファイルの形式"><span class="toc-section-number">2.6.1</span> 画像ファイルの形式</a></li>
<li><a href="#画像認識の実施" id="toc-画像認識の実施"><span class="toc-section-number">2.6.2</span> 画像認識の実施</a></li>
<li><a href="#特徴マップ" id="toc-特徴マップ"><span class="toc-section-number">2.6.3</span> 特徴マップ</a></li>
</ul></li>
</ul></li>
</ul>
</div>
<h1 data-number="1" id="ニューラルネットワーク概要"><span class="header-section-number">1</span> ニューラルネットワーク概要</h1>
<p>この章と次の章ではニューラルネットワークの概要を学び,画像や文章などの非構造化データを利用した学習を扱います.
本講義はニューラルネットワークモデル等を直接開発,学習することは行わないため詳細については扱いません.そのため,この節では何を行っているのかの概要を掴むための基礎知識を学習します.</p>
<h2 data-number="1.1" id="パーセプトロン"><span class="header-section-number">1.1</span> パーセプトロン</h2>
<p><strong>ニューラルネットワーク（Neural Network）</strong>は, 人間の脳の神経回路を模倣した数学モデルです. 脳は1000億個のニューロン(神経細胞)が軸索を通じて結合したネットワークであり,特定のニューロンが発した電気信号が一定の閾値を超えるとつながっているニューロンも電気信号を発します. このような仕組みを数学的に模倣したものに<strong>パーセプトロン</strong>があります.</p>
<p><img src="/images/ch14-NN.png" /></p>
<p>上図のパーセプトロンでは,2つのニューロンから発せられた信号(<span class="math inline">x_1,x_2 = 0,1</span>)がそれぞれ特定の重み付け(<span class="math inline">w_1,w_2</span>)をされて,yに伝達されている様子が示されています. ここで重みは,それぞれのニューロンからの信号の重要性を表していると考えましょう. 例えば,<span class="math inline">y</span>を以下のように定めると,<span class="math inline">y</span>は重み付けされた<span class="math inline">x_1,x_2</span>が特定の閾値<span class="math inline">\theta</span>を超えると<span class="math inline">1</span>,超えなかった場合は<span class="math inline">0</span>を発するという意味になります.</p>
<p><span class="math display">
y = \begin{cases}
1 &amp; (w_1x_1 + w_2x_2 &gt; \theta) \\
0 &amp; (w_1x_1 + w_2x_2 \leq \theta)
\end{cases}
</span></p>
<p>パーセプトロンはコンピュータの計算における論理演算との関連が深く,論理演算を実装することができます.
例えば,<code>AND演算</code>と<code>OR演算</code>を考えてみましょう. <code>TRUE</code>を<code>1</code>,<code>FALSE</code>を<code>2</code>とした場合のそれぞれの真偽値表は,以下のようになります.</p>
<ul>
<li>AND</li>
</ul>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"><span class="math inline">x_1</span></th>
<th style="text-align: center;"><span class="math inline">x_2</span></th>
<th style="text-align: center;"><span class="math inline">~y~</span></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
</tr>
<tr class="even">
<td style="text-align: center;">1</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
</tr>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">0</td>
</tr>
<tr class="even">
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
</tr>
</tbody>
</table>
<ul>
<li>OR</li>
</ul>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"><span class="math inline">x_1</span></th>
<th style="text-align: center;"><span class="math inline">x_2</span></th>
<th style="text-align: center;"><span class="math inline">~y~</span></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
</tr>
<tr class="even">
<td style="text-align: center;">1</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="even">
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
</tr>
</tbody>
</table>
<p>このような演算は例えば以下のように<span class="math inline">w_1,w_2,\theta</span>を定めると実現できます.</p>
<ul>
<li><code>AND</code></li>
</ul>
<p><span class="math display">
y = \begin{cases}
1 &amp; (x_1 + x_2 &gt; 1) \\
0 &amp; (x_1 + x_2 \leq 1)
\end{cases}
</span></p>
<ul>
<li><code>OR</code></li>
</ul>
<p><span class="math display">
y = \begin{cases}
1 &amp; (0.5x_1 + 0.5x_2 &gt; 0.2) \\
0 &amp; (0.5x_1 + 0.5x_2 \leq 0.2)
\end{cases}
</span></p>
<p>このとき,例えばOR演算を実装する<span class="math inline">y</span>を,<span class="math inline">y = f(w_1x_1+w_2x_2)</span> として,</p>
<p><span class="math display">
f(x) = \begin{cases}
1 &amp; (x &gt; 0.2) \\
0 &amp; (x \leq 0.2)
\end{cases}
</span></p>
<p>のように表すことができます. このような特定のニューロンの発火の有無を決める関数を<strong>活性化関数(activation function)</strong>と呼びます.</p>
<p>パーセプトロンでは,活性化関数として,特定の閾値に重み付け入力合計値が達するか否かによって出力が0か1のいずれかになります.このような,0/1が特定の閾値で極端に切り替わる関数を<strong>ステップ関数</strong>,<strong>階段関数</strong>などと呼びます.</p>
<h2 data-number="1.2" id="ニューラルネットワークの構成"><span class="header-section-number">1.2</span> ニューラルネットワークの構成</h2>
<p>これまでに説明してきたのパーセプトロンは最初の<span class="math inline">x_1,x_2</span>からなる0層と入力を受け取る<span class="math inline">y</span>の2層から構成されていますが,ニューロンの数や,層の数を増やして様々な複雑な条件を表現することが可能になります.</p>
<p>基本的なニューラルネットワークではネットワークを入力層,隠れ層,出力層の3層に分類します.</p>
<p><img src="/images/ch14-NN1.png" /></p>
<p>ここで中間層においてn個の入力ニューロン<span class="math inline">(x_1,x_2,...,x_n)</span>からy個の出力ニューロン<span class="math inline">(y_1,y_2,...,y_m)</span>に入力がある場合,各出力ニューロンの発火条件は以下のように行列形式で表現されます.</p>
<p><span class="math display">
\begin{align*}
&amp;Y = f(WX + B) \\
&amp;W: 重み行列 ; (m \times n) \\
&amp;X: 入力ベクトル ; (n \times 1) \\
&amp;B: バイアスベクトル ; (m \times 1) \\
&amp;f: 活性化関数（要素ごとに適用される非線形関数） \\
&amp;Y: 出力ベクトル ; (m \times 1) \\
\end{align*}
</span></p>
<p>具体的には, 重み行列 <span class="math inline">W</span>, 入力ベクトル <span class="math inline">X</span>, バイアスベクトル <span class="math inline">B</span> を以下のように定義します.</p>
<p>各入力ニューロン <span class="math inline">x_i</span> から出力ニューロン <span class="math inline">y_j</span> への接続には重みが存在し, それを <span class="math inline">w_{ij}</span> とします. このとき, 重み行列 <span class="math inline">W</span> は次のように表されます:</p>
<p><span class="math display">
W =
\begin{bmatrix}
w_{11} &amp; w_{12} &amp; \cdots &amp; w_{1n} \\
w_{21} &amp; w_{22} &amp; \cdots &amp; w_{2n} \\
\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\
w_{m1} &amp; w_{m2} &amp; \cdots &amp; w_{mn}
\end{bmatrix}
</span></p>
<p>入力ベクトル X :
<span class="math display">
X =
\begin{bmatrix}
x_1 \\
x_2 \\
\vdots \\
x_n
\end{bmatrix}
</span></p>
<p>バイアスベクトル B :
<span class="math display">
B =
\begin{bmatrix}
b_1 \\
b_2 \\
\vdots \\
b_m
\end{bmatrix}
</span></p>
<p>出力ベクトル Y :
<span class="math display">
Y =
\begin{bmatrix}
y_1 \\
y_2 \\
\vdots \\
y_m
\end{bmatrix}
</span></p>
<p>このとき, 発火条件は活性化関数を利用して以下のように計算されます.</p>
<p><span class="math display">
Y = f(WX + B)
</span></p>
<p>単純なニューラルネットワークでは, 隠れ層において, 全てのニューロンが結合している<strong>全結合層（Affine Layer）</strong>が使用されています. 全結合層は, 行列演算を用いて入力データを重み付けし, バイアスを加算する操作を行います. これにより, ネットワークが入力データの全体的な特徴を学習することが可能になります.</p>
<p>パーセプトロンでは,活性化関数としてステップ関数が利用されており,その出力は必ず0か1でした.</p>
<p>ニューラルネットワークでは,通常, 非線形の<strong>シグモイド関数</strong>や<strong>ReLU関数(Rectified Linear Unit function)</strong>
などが利用され出力が0,1以外の値を取ります.</p>
<ul>
<li><code>シグモイド関数</code></li>
</ul>
<p><span class="math display">
f(x) = \frac{1}{1+exp(-x)}
</span></p>
<p>出力を0～1の範囲にマッピングするため, 確率を表現する場面で使われることがあります.</p>
<ul>
<li><code>ReLu</code></li>
</ul>
<p><span class="math display">
f(x) = \begin{cases}
x &amp; (x &gt; 0) \\
0 &amp; (x \leq 0)
\end{cases}
</span></p>
<p>ReLUは計算が効率的で, 学習を早める効果があるため, 現在最も広く利用されている活性化関数です.</p>
<p><img src="/images/ch14-NN2.png" /></p>
<p>出力層では, 解きたい問題の性質に応じて適切な活性化関数が選択されます.</p>
<div class="note">
<pre><code>1.  回帰問題（数値を予測する場合）:</code></pre>
<p>出力層には<strong>恒等関数（Identity Function）</strong>が使用されます. この場合, 出力はそのまま数値として扱われます.</p>
<p><span class="math display">
f(x) = x
</span></p>
<pre><code>2.  分類問題（カテゴリを予測する場合）:</code></pre>
<p>出力層にはSoftmax関数が使用されることが一般的です. Softmax関数は, 出力を確率分布に変換します.</p>
<p><span class="math display">
f(x_i) = \frac{e^{x_i}}{\sum_{j} e^{x_j}} \\
</span></p>
<p><span class="math inline">x_i</span> : i番目の出力ニューロンの値,<span class="math inline">f(x_i)</span> : i 番目のカテゴリの確率,<span class="math inline">\sum_j f(x_j)</span> = 1 : 全てのカテゴリの確率の総和が1になる.</p>
<p>Softmax関数は, 手書き文字認識や画像分類タスクのように, 複数のクラスを予測する場面で広く使われています.</p>
</div>
<p>これらのレイヤによって一般的なニューラルネットワークは以下のようなレイヤとして表せます.</p>
<p><img src="/images/ch14-NN-normal.png" /></p>
<h2 data-number="1.3" id="ニューラルネットワークの学習"><span class="header-section-number">1.3</span> ニューラルネットワークの学習</h2>
<p>パーセプトロンはそれぞれの重みを人間が設定する必要がありました.しかし,複雑な条件を満たすネットワークの重みを人間が設定するのは現実的ではありません.そこで,<strong>それぞれの重みを機械学習によってデータから自動で学ぶようにしたものがニューラルネットワークです</strong>.</p>
<p>ニューラルネットワークの学習では,ネットワーク内の重み <span class="math inline">(w_1, w_2, \dots, w_n)</span> とバイアス (<span class="math inline">b</span>) の値を適切に調整することで,モデルが入力データから期待される出力を生成できるようにします.このプロセスは次の手順で進行します.</p>
<div class="note">
<ul>
<li><h2 id="順伝播と損失関数の計算">順伝播と損失関数の計算</h2></li>
</ul>
<p>入力データをネットワークに通し,各層のニューロンで計算が行われ,最終的な出力が生成されます. この出力は予測値として解釈されます. このようなデータにに基づく計算の過程を<strong>順伝播（Forward Propagation）</strong>といいます.</p>
<p>例えば,手書きの<code>0~9</code>の数字を認識するタスクでは <span class="math inline">m \times n</span> ピクセルの画像データが入力され、最終出力層で<code>0~9</code>のいずれかを予測します.</p>
<p>学習のためにはネットワークの予測値と実際の正解データとの差を数値化して,より良い重みを発見する必要があります.その際の予測値と正解データとの差を数値化するための関数を損失関数と呼びます.この損失関数は、ネットワークがどれだけ誤った予測をしているかを示す指標となります。</p>
<pre><code>一般的な損失関数の例:
•   平均二乗誤差 (Mean Squared Error, MSE): 回帰タスクで使用</code></pre>
<p><span class="math display">
L = \frac{1}{N} \sum_{i=1}^{N} (y_i - \hat{y}_i)^2
</span></p>
<pre><code>交差エントロピー損失 (Cross-Entropy Loss): 分類タスクで使用</code></pre>
<p><span class="math display">
L = -\sum_{i=1}^{N} y_i \log(\hat{y}_i)
</span></p>
<p>ここで,<span class="math inline">y_i</span>は正解ラベル, <span class="math inline">\hat{y}_i</span> は予測値を示します.</p>
</div>
<div class="note">
<ul>
<li><h2 id="逆伝播と重みの修正">逆伝播と重みの修正</h2></li>
</ul>
<p>ニューラルネットワークはでは損失関数を基に, 誤差をネットワーク内で逆方向に伝播させ, 各ニューロンの重みとバイアスを更新する手法します. これを,<strong>誤差逆伝播法(Backpropagation)</strong>といいます.このとき, 微分を用いて重みやバイアスがどの程度影響を与えるかを計算します.</p>
<pre><code>- 勾配降下法（Gradient Descent）</code></pre>
<p>逆伝播によって得られた勾配を用いて, 重みとバイアスを更新する手法の最も基本的なものとして勾配降下法があります</p>
<p><span class="math display">
W_{new} = W_{old} - \eta \frac{\partial L}{\partial W}
</span></p>
<p>ここで,<span class="math inline">L</span> : 損失関数（誤差を表す関数）,<span class="math inline">y_i</span>:正解ラベル,<span class="math inline">\hat{y}_i</span> :予測値,<span class="math inline">\frac{\partial L}{\partial W}</span> : 重み <span class="math inline">W</span> に関する損失関数の勾配,<span class="math inline">\eta</span> : 学習率（Learning Rate） 重みの更新量を決定する定数です.</p>
<p>例として, シンプルな1次元関数の最小化を考えます.
<span class="math display">L(w) = (w - 2)^2</span>
ここで, 最小値は <span class="math inline">w = 2</span> です.</p>
<ol type="1">
<li>初期値を <span class="math inline">w = 0</span> , 学習率を <span class="math inline">\eta = 0.1</span> とします.</li>
<li>勾配を計算します:</li>
</ol>
<p><span class="math display">\frac{\partial L}{\partial w} = 2(w - 2)</span>
初期値 <span class="math inline">w = 0</span> のとき,
<span class="math display">\frac{\partial L}{\partial w} = -4 </span></p>
<ol start="3" type="1">
<li>重みを更新します:
<span class="math display">w_{new} = w_{old} - \eta \cdot \frac{\partial L}{\partial w} </span>
<span class="math display">w_{new} = 0 - 0.1 \cdot (-4) = 0.4 </span></li>
</ol>
<p>この処理を繰り返していくと重みは理論的な最小値の2に近づいていきます.</p>
<p><img src="/images/ch14-WeightUpdates.png" /></p>
</div>
<div class="note">
<ul>
<li><h2 id="繰り返し学習">繰り返し学習</h2></li>
</ul>
<p>順伝播, 損失計算, 逆伝播のプロセスを繰り返し, ネットワークが徐々にデータの特徴を学習します. この反復的なプロセスを<code>エポック（Epoch）</code>と呼びます. 十分なエポックを実行することで, モデルは訓練データに対して高い精度を達成することが期待されます.</p>
<p>学習では, 全てのデータを一度に処理するのではなく, <code>バッチ処理（Batch Processing）</code> と呼ばれる手法を使用するのが一般的です. データセットをいくつかの小さなグループ（バッチ）に分割し, 各バッチごとに順伝播と逆伝播を実行します.</p>
<p>データセットをいくつかの小さなバッチに分割して処理する手法を <code>ミニバッチ学習（Mini-Batch Learning）</code>といい,メモリの使用料を抑え,またGPUの並列処理能力を最大限に利用できるという実施上の利点と,ゼータ全体を満遍なく学習することで,勾配のばらつきが抑えられるという学習能力面の利点もあります.</p>
<p>例えば, データセットが10,000個のサンプルで構成されている場合, バッチサイズを100に設定すると, モデルは100個のデータを1つのバッチとして扱い, 全部で100のバッチを処理することになります. 1エポックでは100回の更新が行われ, これを複数回繰り返して学習が進行します.</p>
<p>ミニバッチ学習はモデルの効率的な学習とメモリ使用量のバランスを取るため, 実務で最も一般的に使われています. 例えば, バッチサイズを32や64に設定することが多いです.</p>
</div>
<h1 data-number="2" id="画像認識"><span class="header-section-number">2</span> 画像認識</h1>
<p>こちらの節では, ニューラルネットワークの一種である,畳み込みニューラルネットワークを利用して画像認識処理を試してみます.
画像認識や,本資料では扱いませんが音声認識などのニューラルネットワークモデルでは基本的に<strong>畳み込みニューラルネットワーク（Convolutional Neural Network, CNN）</strong>が用いられています.</p>
<p>基本的なニューラルネットワークは,入力層,AffineレイヤとReLUなどの活性化関数による隠れ層,Softmax関数などによる出力層から構成されていました.</p>
<p><img src="/images/ch14-NN-normal.png" /></p>
<p>全結合層（Affine Layer）は, 入力データ内の全てのニューロンが次の層の全てのニューロンと結合する構造を持っています. これは言い換えれば,全ての入力を1次元ベクトルに変換することを意味しています.しかし,例えば画像データは,縦・横・チャンネル方向(RGBなら3チャンネル)の三次元の構造を持ちます.
例えば, 28ピクセル×28ピクセルのグレースケール画像(1チャンネル)の場合は, <span class="math inline">28 \times 28 \times 1</span>という構造になります.</p>
<p>したがって,画像認識などの問題に対してAffine層を導入することは 画像や音声のようなデータの空間的構造を無視することになりますこれにより, データの位置や局所的な特徴を効果的に捉えることが困難になります.</p>
<p>そこでCNNでは<strong>畳み込み層(Convolution Layer)</strong>と<strong>プーリング層(Pooling Layer)</strong>を加えることでデータの空間的構造を適切に取り込みます.</p>
<p><img src="/images/ch14-CNN.png" /></p>
<div class="note">
<ul>
<li><h2 id="畳み込み層convolution-layer">畳み込み層（Convolution Layer）</h2></li>
</ul>
<p>畳み込み層は, 入力データ<span class="math inline">I</span>に対してフィルタ（カーネル）<span class="math inline">K</span> を適用して特徴マップ<span class="math inline">F</span>を生成します. 畳み込み演算は次の数式で表されます:</p>
<p><span class="math display">
F(x, y) = \sum_{i=1}^{m} \sum_{j=1}^{n} I(x+i, y+j) \cdot K(i, j)
</span></p>
<p>ここで:
<span class="math inline">I(x, y)</span> : 入力画像のピクセル値（例: グレースケール画像の場合0～255の値）,
<span class="math inline">K(i, j)</span> : フィルタ（カーネル）の要素,
<span class="math inline">m \times n</span> : フィルタのサイズ（例: <span class="math inline">3 \times 3</span> ）.</p>
<p>畳み込みの結果はフィルタが滑らかに適用されることで, 画像内の特徴（エッジや模様など）を抽出します.</p>
<p>例として,<span class="math inline">4 \times 4</span>のグレースケール画像を考えます.各要素は0～255のピクセル値を持ちます.</p>
<p>入力画像 I :</p>
<p><span class="math display">
I =
\begin{bmatrix}
1 &amp; 2 &amp; 3 &amp; 0 \\
0 &amp; 1 &amp; 2 &amp; 3 \\
1 &amp; 0 &amp; 1 &amp; 2 \\
2 &amp; 1 &amp; 0 &amp; 1
\end{bmatrix}
</span></p>
<p>フィルタ K :</p>
<p><span class="math display">
K =
\begin{bmatrix}
1 &amp; 0 &amp; -1 \\
1 &amp; 0 &amp; -1 \\
1 &amp; 0 &amp; -1
\end{bmatrix}
</span></p>
<p>このフィルタは<strong>垂直方向のエッジ(輪郭)</strong>を検出するためのカーネルとしてよく使われます.</p>
<h2 data-number="2.1" id="畳み込み演算のプロセス"><span class="header-section-number">2.1</span> 畳み込み演算のプロセス</h2>
<p>畳み込み演算では,フィルタ K を入力画像 I に適用し、以下の手順を繰り返します：</p>
<pre><code>1.  フィルタ  K  を入力画像  I  の一部（局所領域）に重ね合わせます.
2.  対応する要素同士を掛け算し,その結果を合計します.
3.  合計値を特徴マップ  F  の対応する位置に記録します.
4.  フィルタをストライド（移動量）分ずらして次の位置に移動し,同様の計算を繰り返します.</code></pre>
<p>ストライド: 1 （1ピクセルずつ移動）
出力特徴マップ F :
入力画像が <span class="math inline">4 \times 4</span> , フィルタサイズが <span class="math inline">3 \times 3</span> , ストライドが 1 の場合,出力特徴マップのサイズは以下で計算されます.</p>
<p><span class="math display">
F_{\text{Size}} = \left( I_{\text{Size}} - K_{\text{Size}} \right) / \text{Stride} + 1
</span></p>
<p><span class="math display">
F_{\text{Size}} = (4 - 3) / 1 + 1 = 2
</span></p>
<p>したがって,出力特徴マップ F のサイズは <span class="math inline">2 \times 2</span> になります.</p>
<p>畳み込み演算の計算手順</p>
<pre><code>ステップ1: フィルタを左上に適用</code></pre>
<p>入力画像の左上 <span class="math inline">3 \times 3</span> 領域：</p>
<p><span class="math display">
\begin{bmatrix}
1 &amp; 2 &amp; 3 \\
0 &amp; 1 &amp; 2 \\
1 &amp; 0 &amp; 1
\end{bmatrix}
</span></p>
<p>フィルタ K を適用：</p>
<p><span class="math display">
F(1, 1) =
\begin{bmatrix}
1 &amp; 2 &amp; 3 \\
0 &amp; 1 &amp; 2 \\
1 &amp; 0 &amp; 1 \\
\end{bmatrix}
\cdot
\begin{bmatrix}
1 &amp; 0 &amp; -1 \\
1 &amp; 0 &amp; -1 \\
1 &amp; 0 &amp; -1
\end{bmatrix} \\
=
(1 \cdot 1) + (0 \cdot 2) + (-1 \cdot 3) +
(1 \cdot 0) + (0 \cdot 1) + (-1 \cdot 2) +
(1 \cdot 1) + (0 \cdot 0) + (-1 \cdot 1) \\
= 1 + 0 - 3 + 0 + 0 - 2 + 1 + 0 - 1 = -4
</span></p>
<p><img src="/images/ch14-kernel1.png" /></p>
<pre><code>ステップ2: フィルタを右に1つ移動</code></pre>
<p>次に,フィルタを右に1つ移動させて適用します。</p>
<p>入力画像の次の領域：</p>
<p><span class="math display">
\begin{bmatrix}
2 &amp; 3 &amp; 0 \\
1 &amp; 2 &amp; 3 \\
0 &amp; 1 &amp; 2
\end{bmatrix}
</span></p>
<p>フィルタ K を適用：
<span class="math display">
F(1, 2) =
\begin{bmatrix}
2 &amp; 3 &amp; 0 \\
1 &amp; 2 &amp; 3 \\
0 &amp; 1 &amp; 2 \\
\end{bmatrix}
\cdot
\begin{bmatrix}
1 &amp; 0 &amp; -1 \\
1 &amp; 0 &amp; -1 \\
1 &amp; 0 &amp; -1
\end{bmatrix}
= -2
</span></p>
<p><img src="/images/ch14-kernel2.png" /></p>
<p>ステップ3: フィルタを下に移動</p>
<p>フィルタを下に移動して適用します。</p>
<p>入力画像の次の領域：
<span class="math display">
\begin{bmatrix}
0 &amp; 1 &amp; 2 \\
1 &amp; 0 &amp; 1 \\
2 &amp; 1 &amp; 0
\end{bmatrix}
</span></p>
<p>フィルタ K を適用：</p>
<p><span class="math display">
F(2, 1) =
\begin{bmatrix}
0 &amp; 1 &amp; 2 \\
1 &amp; 0 &amp; 1 \\
2 &amp; 1 &amp; 0 \\
\end{bmatrix}
\cdot
\begin{bmatrix}
1 &amp; 0 &amp; -1 \\
1 &amp; 0 &amp; -1 \\
1 &amp; 0 &amp; -1
\end{bmatrix}
= 0
</span></p>
<p><img src="/images/ch14-kernel3.png" /></p>
<p>ステップ4: フィルタを右下に移動</p>
<p>最後に、フィルタを右下に移動して適用します。</p>
<p>入力画像の次の領域：
<span class="math display">
\begin{bmatrix}
1 &amp; 2 &amp; 3 \\
0 &amp; 1 &amp; 2 \\
1 &amp; 0 &amp; 1
\end{bmatrix}
</span></p>
<p>同様に計算すると：</p>
<p><span class="math display">
F(2, 1) =
\begin{bmatrix}
1 &amp; 2 &amp; 3 \\
0 &amp; 1 &amp; 2 \\
1 &amp; 0 &amp; 1
\end{bmatrix}
\cdot
\begin{bmatrix}
1 &amp; 0 &amp; -1 \\
1 &amp; 0 &amp; -1 \\
1 &amp; 0 &amp; -1
\end{bmatrix}
= -4
</span></p>
<p><img src="/images/ch14-kernel4.png" /></p>
<p>特徴マップの結果</p>
<p>畳み込み演算の結果として得られる特徴マップ F は次の通りです：</p>
<p><span class="math display">
F =
\begin{bmatrix}
-4 &amp; -2 \\
0  &amp; -2
\end{bmatrix}
</span></p>
<p><img src="/images/ch14-kernel5.png" /></p>
<p>実際にこの事例の画像にカーネルを適用すると以下のようになりますが,単純すぎて良くわからないので,我が家の犬の画像をグレースケールにしたものをにこのカーネルを適用したものが次の画像になります. 物体の垂直方向のエッジ(輪郭)のみが強調されていることが分かります.</p>
<p><img src="/images/ch14-After-Applying-Kernel.png" /></p>
<p><img src="/images/ch14-Vertical-Edge-Detection.png" /></p>
<p>ここでは,取り上げませんが,他の代表的なカーネルとして以下のようなものがあります.</p>
<p><img src="/images/ch14-Other-Kernels.png" /></p>
<h2 data-number="2.2" id="水平エッジ検出カーネル-horizontal-edge-detection-kernel"><span class="header-section-number">2.2</span> 水平エッジ検出カーネル (Horizontal Edge Detection Kernel)</h2>
<p><span class="math display">
K_{\text{horizontal}} =
\begin{bmatrix}
1 &amp; 1 &amp; 1 \\
0 &amp; 0 &amp; 0 \\
-1 &amp; -1 &amp; -1
\end{bmatrix}
</span></p>
<p>このカーネルは、画像内の水平方向のエッジを検出します.
上部の値（ +1 ）と下部の値（ -1 ）が異なるため、明るい領域と暗い領域の境界を強調します.
例えば,地平線や階段の段差などの水平線を抽出するのに適しています.</p>
<h2 data-number="2.3" id="シャープ化カーネル-sharpen-kernel"><span class="header-section-number">2.3</span> シャープ化カーネル (Sharpen Kernel)</h2>
<p>行列表記:</p>
<p><span class="math display">
K_{\text{sharpen}} =
\begin{bmatrix}
0 &amp; -1 &amp; 0 \\
-1 &amp; 5 &amp; -1 \\
0 &amp; -1 &amp; 0
\end{bmatrix}
</span></p>
<p>中央の値（ 5 ）が高く, 周囲の値（ -1 ）が低いことで, 隣接するピクセルとの差を強調します.
これにより, 画像のエッジやディテールが際立ちます.
一般的に, エッジを目立たせたい場合やぼやけた画像を鮮明化する際に使用されます.</p>
<h2 data-number="2.4" id="ぼかしブラーカーネル-blur-kernel"><span class="header-section-number">2.4</span> ぼかし（ブラー）カーネル (Blur Kernel)</h2>
<p><span class="math display">
K_{\text{blur}} =
\frac{1}{9}
\begin{bmatrix}
1 &amp; 1 &amp; 1 \\
1 &amp; 1 &amp; 1 \\
1 &amp; 1 &amp; 1
\end{bmatrix}
</span></p>
<p>このカーネルは, 隣接するピクセルの平均値を計算して, 画像全体を滑らかにします.
ピクセル間の明るさの差を緩和し, ノイズの低減に役立ちます.
例えば, 背景の処理やノイズの軽減などに使用されます.</p>
<p>このようにフィルタの形状や内容に応じて異なる特徴(エッジ,模様など)を捉えることが可能です. この畳み込みフィルタの各セルの値が,これまでのニューラルネットワークにおける重み<span class="math inline">W</span>のように作用し,CNNではその値が学習の対称となります.</p>
</div>
<div class="note">
<ol start="3" type="1">
<li>プーリング層（Pooling Layer）</li>
</ol>
<p>プーリング層は, 特徴マップのサイズを縮小し, 計算量を減らすと同時に, 特徴の不変性を高める役割を持ちます.
例えば, <strong>最大プーリング（Max Pooling）</strong>は次の式で表されます:</p>
<p><span class="math display">
P(x, y) = \max_{i=1}^{m} \max_{j=1}^{n} F(x+i, y+j)
</span></p>
<p>ここで:
<span class="math inline">F(x, y)</span>: 入力特徴マップ,<span class="math inline">P(x, y)</span>: プーリング後の特徴マップ,<span class="math inline">m \times n</span>: プーリングウィンドウのサイズ（例: 2 ）.</p>
<p>最大プーリングは, 各ウィンドウ内の最大値を取得することで, 特徴の最も重要な部分を抽出します. 画像中のエッジや高輝度部分を強調するのに適しています.</p>
<p>例:
入力データ <span class="math inline">4 \times 4</span> の行列に対し, <span class="math inline">2 \times 2</span> のウィンドウサイズで最大プーリングを適用します.</p>
<p>入力行列:</p>
<p><span class="math display">
I =
\begin{bmatrix}
1 &amp; 3 &amp; 2 &amp; 1 \\
4 &amp; 6 &amp; 5 &amp; 0 \\
7 &amp; 8 &amp; 9 &amp; 2 \\
3 &amp; 4 &amp; 1 &amp; 6
\end{bmatrix}
</span></p>
<p>手順:
各 <span class="math inline">2 \times 2</span> のウィンドウ内の最大値を取り, 縮小された行列を生成します.
1. 最初の <span class="math inline">2 \times 2</span> ウィンドウ:
<span class="math display">
\begin{bmatrix}
1 &amp; 3 \\
4 &amp; 6
\end{bmatrix}
\quad \text{最大値: } 6
</span></p>
<p><span class="math display">
\begin{bmatrix}
2 &amp; 1 \\
5 &amp; 0
\end{bmatrix}
\quad \text{最大値: } 5
</span></p>
<p><span class="math display">
\begin{bmatrix}
7 &amp; 8 \\
3 &amp; 4
\end{bmatrix}
\quad \text{最大値: } 8
</span></p>
<p><span class="math display">
\begin{bmatrix}
9 &amp; 2 \\
1 &amp; 6
\end{bmatrix}
\quad \text{最大値: } 9
</span></p>
<p>出力行列:</p>
<p><span class="math display">
P_{\text{max}} =
\begin{bmatrix}
6 &amp; 5 \\
8 &amp; 9
\end{bmatrix}
</span></p>
</div>
<p>CNNの全体的なデータフローを数式でまとめると次のようになります:</p>
<div class="note">
<pre><code>1.  畳み込み層:</code></pre>
<p><span class="math display">
F^{(l)} = f(W^{(l)} * F^{(l-1)} + b^{(l)})
</span></p>
<p><span class="math inline">W^{(l)}</span> : 畳み込みフィルタ（重み）,<span class="math inline">F^{(l-1)}</span> : 前層の特徴マップ,<span class="math inline">b^{(l)}</span> : バイアス,<span class="math inline">f</span> : 活性化関数（例: ReLU）.</p>
<pre><code>2.  プーリング層:</code></pre>
<p><span class="math display">
P^{(l)} = \text{Pooling}(F^{(l)})
</span></p>
<pre><code>3.  全結合層:</code></pre>
<p><span class="math display">
Y = \text{Softmax}(WX + B)
</span></p>
<p>W : 全結合層の重み行列,X : プーリング層の出力,B : バイアス.</p>
</div>
<p>このように, CNNは畳み込み層で特徴を抽出し, プーリング層でデータの次元を縮小し, 全結合層で最終的な予測を行います. これらの操作が連続的に行われることで, 画像や音声などのデータの複雑なパターンを学習することが可能になります.</p>
<h2 data-number="2.5" id="代表的なcnnモデル"><span class="header-section-number">2.5</span> 代表的なCNNモデル</h2>
<p>CNNを利用した主な画像認識モデルの歴史は以下のようにまとめられます.</p>
<table>
<colgroup>
<col style="width: 3%" />
<col style="width: 11%" />
<col style="width: 51%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th>年代</th>
<th>モデル名</th>
<th>特徴・概要</th>
<th>主な貢献や革新点</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1998</td>
<td>LeNet</td>
<td>手書き数字認識に使われた初期のCNNモデル. 主にMNISTデータセットで使用.</td>
<td>畳み込み層とプーリング層を使用した初期の画像認識モデル.</td>
</tr>
<tr class="even">
<td>2012</td>
<td>AlexNet</td>
<td>ImageNetで初めて畳み込みニューラルネットワークを使用し,トップ5エラー率を大幅に改善.</td>
<td>ReLU活性化関数の使用や,GPUによるトレーニングの導入.</td>
</tr>
<tr class="odd">
<td>2014</td>
<td>VGGNet</td>
<td>小さな3x3のフィルタを多層に積み重ねたアーキテクチャ.VGG16とVGG19が特に有名.</td>
<td>モデルの深さが精度に大きく寄与することを示す.</td>
</tr>
<tr class="even">
<td>2014</td>
<td>GoogLeNet (Inception)</td>
<td>“Inception Module”を採用し,計算効率と精度を両立.</td>
<td>異なるサイズの畳み込みフィルタを同時に適用するInceptionモジュール.</td>
</tr>
<tr class="odd">
<td>2015</td>
<td>ResNet</td>
<td>残差ブロックを使用し,非常に深いネットワークのトレーニングを可能に.ImageNetで優勝.</td>
<td>152層の深いネットワークで,勾配消失問題を解決.</td>
</tr>
<tr class="even">
<td>2016</td>
<td>DenseNet</td>
<td>各層がすべての前層からの入力を受け取る密結合アーキテクチャ.</td>
<td>パラメータ効率が良く,勾配の流れが改善される.</td>
</tr>
<tr class="odd">
<td>2017</td>
<td>Xception</td>
<td>畳み込みの代わりに「深さ方向の畳み込み（Depthwise Separable Convolutions）」を使用.</td>
<td>計算コストの削減と精度の向上.</td>
</tr>
<tr class="even">
<td>2017</td>
<td>MobileNet</td>
<td>軽量かつ効率的なCNNアーキテクチャ.モバイルデバイス向けに最適化.</td>
<td>計算量を削減し,モバイル環境でのリアルタイム推論を可能に.</td>
</tr>
<tr class="odd">
<td>2020</td>
<td>Vision Transformer (ViT)</td>
<td>画像をパッチに分割し,トランスフォーマーアーキテクチャを使用したモデル.</td>
<td>トランスフォーマーモデルが画像認識タスクでも有効であることを示す.</td>
</tr>
<tr class="even">
<td>2021</td>
<td>Swin Transformer</td>
<td>階層的なトランスフォーマーアーキテクチャで,局所的な窓（ウィンドウ）を用いた画像認識モデル.</td>
<td>トランスフォーマーのスケーラビリティを改善し,高い精度を達成.</td>
</tr>
<tr class="odd">
<td>2022</td>
<td>ConvNeXt</td>
<td>Vision Transformerのアイデアを取り入れた畳み込みネットワークの進化版.</td>
<td>畳み込みベースのモデルが再び最先端性能を達成できることを示す.</td>
</tr>
</tbody>
</table>
<p>今回は,事例としてConvNeXtを利用した画像認識を実行してみます.</p>
<p><a href="https://github.com/facebookresearch/ConvNeXt">ConvNeXt</a>は,Meta(旧Facebook)によって発表されたモデルで,Swin Transformer を参考にしつつResNet（Residual Network）を基盤として作られたCNNです.</p>
<p>ConvNeXtでは畳み込み層に<code>Depthwise Convolution</code>を用いています. これは畳み込み処理を入力画像のチャンネル事に独立して計算する手法です.通常の畳み込みでは,入力画像の複数チャンネルを同時に処理するため計算コストが大きくなります.一方, Depthwise Convolutionでは, 1つのチャンネルに対して1つのフィルタで畳み込みを行い, それを全チャンネル分繰り返した後に, 別の1x1畳み込み(これをPointwise Convolutionと呼ぶことが多い)でチャネル間情報を組み合わせます. これにより演算コストと性能向上を両立したのがConvNeXtの大きな特徴になります.</p>
<p>Pooling層では,<code>Adaptive Average Pooling</code>(アダプティブ平均プーリング)を採用しています.
普通の平均プーリングでは, プーリング領域の大きさを固定して画素を平均化しますが, Adaptive Average Poolingは, 「最終的に出力したいサイズ」を指定します. すると, 入力画像がどんなサイズであっても, そのサイズに合わせて自動的に区切り方を調整し, 均等に平均をとってくれます. これにより, 入力画像の解像度が変わっても, ネットワークの最終的な出力ベクトルの大きさを一定に保ちやすくなります.</p>
<p>また,活性化関数として<code>RELU</code>の発展形である<code>GELU(Gaussian Error Linear Unit)</code>を採用しています.</p>
<p><span class="math display">
GELU(x) = \frac{x}{2} \left[ 1 + erf(\frac{x}{\sqrt{2}}) \right]
</span>
ここで<span class="math inline">erf(x)</span>は<strong><code>誤差関数(error function)</code></strong>と呼ばれる関数です.</p>
<p><span class="math display">
erf(x) = \frac{2}{\sqrt{x}}\int_{0}^{x} e^{-t^2} dt
</span></p>
<p><code>GELU</code>は, 入力が小さい(特に0より負側)場合には出力を小さく抑え, 入力が大きくなるにつれて徐々に出力を増やしていく, なめらかな活性化関数です. <code>ReLU</code>と比較すると, 入力が0付近で緩やかに変化するため, 勾配が急に0になることがなく, 学習を安定させる効果が期待できます. つまり, 「入力値がある程度以上大きい場合は強く反応し, 入力値が小さい場合はあまり反応しない」ことをなめらかに表現する非線形関数です.</p>
<figure>
<img src="/images/ch14-GELU.png" alt="GELU" />
<figcaption aria-hidden="true">GELU</figcaption>
</figure>
<p>PythonのCNNのライブラリはいくつか存在しますが,ConvNeXtは,Metaによって開発された<code>PyTorch</code>上で実装されています.</p>
<h2 data-number="2.6" id="顔による年齢識別"><span class="header-section-number">2.6</span> 顔による年齢識別</h2>
<p>事例として顔画像からの年齢識別を行ってみましょう. データとして,16歳から62歳までの2,000人の有名人の160,000以上の画像が含まれるデータセット<a href="http://bcsiriuschen.github.io/CARC/">Cross-Age Celebrity Dataset (CACD)</a>を用います.</p>
<figure>
<img src="/images/CACD.png" alt="The dataset metadata" />
<figcaption aria-hidden="true">The dataset metadata</figcaption>
</figure>
<p><code>The dataset metadata only can be downloaded</code>をクリックしてメタデータを, <code>Original face images (detected and croped by openCV face detector) can be downloaded</code>をクリックして画像データをダウンロードしてください(3Gあるので通信環境に注意).</p>
<p><code>CACD2000.tar.gz</code>は展開して,<code>celebrity2000_meta.mat</code>とともにプログラムを配置するディレクトリ内の<code>data</code>ディレクトリに保存しておきましょう.</p>
<h3 data-number="2.6.1" id="画像ファイルの形式"><span class="header-section-number">2.6.1</span> 画像ファイルの形式</h3>
<p>機械学習において利用されるラベル付き画像データの形式はいくつかあるが,CACDのような<code>.mat</code>ファイル,画像とCSVなどのラベルの組み合わせ,ラベル名フォルダ別の画像ファイルなどのパターンが存在する. いずれにも対応できるようにしておく必要があるが, この資料では最も単純な最後のラベル別に名前がつけられたフォルダに保存された画像ファイルを扱う.</p>
<p>先ほどダウンロードした<code>celebrity2000_meta.mat</code>は,メタデータのみが含まれており,画像は別になっています.メタデータに従って,年齢別に画像をフォルダに保存してみましょう.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> ls</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="ex">face_image.py</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="ex">data</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> ls <span class="ex">data</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="ex">CACD2000</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a><span class="ex">celebrity2000_meta.mat</span></span></code></pre></div>
<div class="note">
<ul>
<li><h2 id="matファイル"><code>.mat</code>ファイル</h2>
<ul>
<li>MATLABのファイル</li>
<li>基本的には <code>scipy</code> を利用して読み込む.</li>
<li>フォーマット形式がMATLAB <code>v7.3</code>の場合には,<code>HDF5</code>を扱うライブラリ<code>h5py</code>を利用する.</li>
<li><code>HDF5(Hierarchical Data Froamt version 5)</code>はディレクトリ構造に似た階層型のデータフォーマット</li>
</ul></li>
</ul>
</div>
<p>まずは,<code>h5py</code>を利用して<code>celebrity2000_meta.mat</code>を読み込み,中身を確認してみましょう.</p>
<div class="warn">
<p>以下のライブラリが必要になるので <code>pip install</code>しておいてください.</p>
<ul>
<li><code>pytorch</code>
<ul>
<li>CNN用ライブラリ(PyTorch)</li>
</ul></li>
<li><code>torchvision</code>
<ul>
<li>PyTorchの画像,動画処理用ライブラリ</li>
</ul></li>
<li><code>scipy</code></li>
<li><code>h5py</code></li>
<li><code>pillow</code>
<ul>
<li>画像処理用ライブラリ</li>
</ul></li>
<li><code>shutil</code>
<ul>
<li>ファイル操作用ライブラリ</li>
</ul></li>
</ul>
</div>
<div class="sourceCode" id="cb13"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> h5py <span class="co">#HDF5を扱うライブラリ</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> PIL <span class="im">import</span> Image <span class="co">#画像の表示/保存/書き込みなどを扱うライブラリ</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> scipy.io</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="co">#画像データの保存先</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>image_dir <span class="op">=</span> <span class="st">&#39;data/CACD2000&#39;</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="co"># .matファイルの読み込み（古い形式の場合）</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a><span class="co">## 辞書型として読み込まれる</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a><span class="bu">file</span> <span class="op">=</span> scipy.io.loadmat(<span class="st">&#39;data/celebrity2000_meta.mat&#39;</span>)</span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a><span class="co"># 辞書のKeyを表示する</span></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;keys:&#39;</span>,<span class="bu">file</span>.keys())</span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a><span class="co"># &gt;&gt;&gt; dict_keys([&#39;__header__&#39;, &#39;__version__&#39;, &#39;__globals__&#39;, &#39;celebrityData&#39;, &#39;celebrityImageData&#39;])</span></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a><span class="co">#celebrityImageDataの確認</span></span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="bu">file</span>[<span class="st">&#39;celebrityImageData&#39;</span>])</span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a><span class="co">[[(array([[53],</span></span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a><span class="co">         [53],</span></span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a><span class="co">         [53],</span></span>
<span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a><span class="co">         ...,</span></span>
<span id="cb13-26"><a href="#cb13-26" aria-hidden="true" tabindex="-1"></a><span class="co">         [23],</span></span>
<span id="cb13-27"><a href="#cb13-27" aria-hidden="true" tabindex="-1"></a><span class="co">         [23],</span></span>
<span id="cb13-28"><a href="#cb13-28" aria-hidden="true" tabindex="-1"></a><span class="co">         [23]], dtype=uint8), array([[   1],</span></span>
<span id="cb13-29"><a href="#cb13-29" aria-hidden="true" tabindex="-1"></a><span class="co">         [   1],</span></span>
<span id="cb13-30"><a href="#cb13-30" aria-hidden="true" tabindex="-1"></a><span class="co">         [   1],</span></span>
<span id="cb13-31"><a href="#cb13-31" aria-hidden="true" tabindex="-1"></a><span class="co">         ...,</span></span>
<span id="cb13-32"><a href="#cb13-32" aria-hidden="true" tabindex="-1"></a><span class="co">         [2000],</span></span>
<span id="cb13-33"><a href="#cb13-33" aria-hidden="true" tabindex="-1"></a><span class="co">         [2000],</span></span>
<span id="cb13-34"><a href="#cb13-34" aria-hidden="true" tabindex="-1"></a><span class="co">         [2000]], dtype=uint16), array([[2004],</span></span>
<span id="cb13-35"><a href="#cb13-35" aria-hidden="true" tabindex="-1"></a><span class="co">         [2004],</span></span>
<span id="cb13-36"><a href="#cb13-36" aria-hidden="true" tabindex="-1"></a><span class="co">         [2004],</span></span>
<span id="cb13-37"><a href="#cb13-37" aria-hidden="true" tabindex="-1"></a><span class="co">         ...,</span></span>
<span id="cb13-38"><a href="#cb13-38" aria-hidden="true" tabindex="-1"></a><span class="co">         [2013],</span></span>
<span id="cb13-39"><a href="#cb13-39" aria-hidden="true" tabindex="-1"></a><span class="co">         [2013],</span></span>
<span id="cb13-40"><a href="#cb13-40" aria-hidden="true" tabindex="-1"></a><span class="co">         [2013]], dtype=uint16), array([], shape=(0, 0), dtype=uint8), array([[ 1],</span></span>
<span id="cb13-41"><a href="#cb13-41" aria-hidden="true" tabindex="-1"></a><span class="co">         [ 1],</span></span>
<span id="cb13-42"><a href="#cb13-42" aria-hidden="true" tabindex="-1"></a><span class="co">         [ 1],</span></span>
<span id="cb13-43"><a href="#cb13-43" aria-hidden="true" tabindex="-1"></a><span class="co">         ...,</span></span>
<span id="cb13-44"><a href="#cb13-44" aria-hidden="true" tabindex="-1"></a><span class="co">         [50],</span></span>
<span id="cb13-45"><a href="#cb13-45" aria-hidden="true" tabindex="-1"></a><span class="co">         [50],</span></span>
<span id="cb13-46"><a href="#cb13-46" aria-hidden="true" tabindex="-1"></a><span class="co">         [50]], dtype=uint8), array([[1],</span></span>
<span id="cb13-47"><a href="#cb13-47" aria-hidden="true" tabindex="-1"></a><span class="co">         [1],</span></span>
<span id="cb13-48"><a href="#cb13-48" aria-hidden="true" tabindex="-1"></a><span class="co">         [1],</span></span>
<span id="cb13-49"><a href="#cb13-49" aria-hidden="true" tabindex="-1"></a><span class="co">         ...,</span></span>
<span id="cb13-50"><a href="#cb13-50" aria-hidden="true" tabindex="-1"></a><span class="co">         [0],</span></span>
<span id="cb13-51"><a href="#cb13-51" aria-hidden="true" tabindex="-1"></a><span class="co">         [0],</span></span>
<span id="cb13-52"><a href="#cb13-52" aria-hidden="true" tabindex="-1"></a><span class="co">         [0]], dtype=uint8), array([[1951],</span></span>
<span id="cb13-53"><a href="#cb13-53" aria-hidden="true" tabindex="-1"></a><span class="co">         [1951],</span></span>
<span id="cb13-54"><a href="#cb13-54" aria-hidden="true" tabindex="-1"></a><span class="co">         [1951],</span></span>
<span id="cb13-55"><a href="#cb13-55" aria-hidden="true" tabindex="-1"></a><span class="co">         ...,</span></span>
<span id="cb13-56"><a href="#cb13-56" aria-hidden="true" tabindex="-1"></a><span class="co">         [1990],</span></span>
<span id="cb13-57"><a href="#cb13-57" aria-hidden="true" tabindex="-1"></a><span class="co">         [1990],</span></span>
<span id="cb13-58"><a href="#cb13-58" aria-hidden="true" tabindex="-1"></a><span class="co">         [1990]], dtype=uint16), array([[array([&#39;53_Robin_Williams_0001.jpg&#39;], dtype=&#39;&lt;U26&#39;)],</span></span>
<span id="cb13-59"><a href="#cb13-59" aria-hidden="true" tabindex="-1"></a><span class="co">         [array([&#39;53_Robin_Williams_0002.jpg&#39;], dtype=&#39;&lt;U26&#39;)],</span></span>
<span id="cb13-60"><a href="#cb13-60" aria-hidden="true" tabindex="-1"></a><span class="co">         [array([&#39;53_Robin_Williams_0003.jpg&#39;], dtype=&#39;&lt;U26&#39;)],</span></span>
<span id="cb13-61"><a href="#cb13-61" aria-hidden="true" tabindex="-1"></a><span class="co">         ...,</span></span>
<span id="cb13-62"><a href="#cb13-62" aria-hidden="true" tabindex="-1"></a><span class="co">         [array([&#39;23_Katie_Findlay_0011.jpg&#39;], dtype=&#39;&lt;U25&#39;)],</span></span>
<span id="cb13-63"><a href="#cb13-63" aria-hidden="true" tabindex="-1"></a><span class="co">         [array([&#39;23_Katie_Findlay_0012.jpg&#39;], dtype=&#39;&lt;U25&#39;)],</span></span>
<span id="cb13-64"><a href="#cb13-64" aria-hidden="true" tabindex="-1"></a><span class="co">         [array([&#39;23_Katie_Findlay_0013.jpg&#39;], dtype=&#39;&lt;U25&#39;)]], dtype=object))                ]]</span></span>
<span id="cb13-65"><a href="#cb13-65" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb13-66"><a href="#cb13-66" aria-hidden="true" tabindex="-1"></a><span class="co"># 7個目に画像のファイル名が入っているので</span></span>
<span id="cb13-67"><a href="#cb13-67" aria-hidden="true" tabindex="-1"></a><span class="co"># celebrityImageDataから画像ファイル名を抽出</span></span>
<span id="cb13-68"><a href="#cb13-68" aria-hidden="true" tabindex="-1"></a>image_data <span class="op">=</span> <span class="bu">file</span>[<span class="st">&#39;celebrityImageData&#39;</span>]</span>
<span id="cb13-69"><a href="#cb13-69" aria-hidden="true" tabindex="-1"></a>jpg_files <span class="op">=</span> [<span class="bu">str</span>(image_name[<span class="dv">0</span>][<span class="dv">0</span>]) <span class="cf">for</span> image_name <span class="kw">in</span> image_data[<span class="dv">0</span>][<span class="dv">0</span>][<span class="dv">7</span>]]</span>
<span id="cb13-70"><a href="#cb13-70" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-71"><a href="#cb13-71" aria-hidden="true" tabindex="-1"></a><span class="co"># 抽出された.jpgファイル名のリストを上から10個表示</span></span>
<span id="cb13-72"><a href="#cb13-72" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(jpg_files[:<span class="dv">10</span>])</span>
<span id="cb13-73"><a href="#cb13-73" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-74"><a href="#cb13-74" aria-hidden="true" tabindex="-1"></a><span class="co"># 画像データの取得と表示</span></span>
<span id="cb13-75"><a href="#cb13-75" aria-hidden="true" tabindex="-1"></a><span class="co">## 名前データを利用して画像をいくつか開いてみます.</span></span>
<span id="cb13-76"><a href="#cb13-76" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> n <span class="kw">in</span> jpg_files[:<span class="dv">10</span>]:</span>
<span id="cb13-77"><a href="#cb13-77" aria-hidden="true" tabindex="-1"></a>    img_path <span class="op">=</span> os.path.join(image_dir, n)  <span class="co"># パスを結合し,ファイル名を取得</span></span>
<span id="cb13-78"><a href="#cb13-78" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-79"><a href="#cb13-79" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> os.path.exists(img_path):</span>
<span id="cb13-80"><a href="#cb13-80" aria-hidden="true" tabindex="-1"></a>        img <span class="op">=</span> Image.<span class="bu">open</span>(img_path)  <span class="co"># 画像ファイルを開く</span></span>
<span id="cb13-81"><a href="#cb13-81" aria-hidden="true" tabindex="-1"></a>        img.show()  <span class="co"># 画像を表示</span></span>
<span id="cb13-82"><a href="#cb13-82" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb13-83"><a href="#cb13-83" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="ss">f&quot;Image file not found: </span><span class="sc">{</span>img_path<span class="sc">}</span><span class="ss">&quot;</span>)</span>
<span id="cb13-84"><a href="#cb13-84" aria-hidden="true" tabindex="-1"></a>    <span class="co">#&gt;&gt;&gt; 画像が表示されます</span></span></code></pre></div>
<div class="warn">
<ul>
<li>HDF5の利用例</li>
</ul>
<p><code>CACD</code>データのうち一番上の<code>The dataset metadata and features used in this paper</code>からダウンロードできる<code>celebrity2000.mat</code>は,<code>HDF5</code>のデータとなっているため,<code>scipy</code>で読み込んでみるとエラーが出ます.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="bu">file</span> <span class="op">=</span> scipy.io.loadmat(<span class="st">&#39;data/celebrity2000.mat&#39;</span>)</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="co">Traceback (most recent call last):</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="co">  File &quot;/Users/akagi/Desktop/face_image.py&quot;, line 86, in &lt;module&gt;</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a><span class="co">    file = scipy.io.loadmat(&#39;data/celebrity2000.mat&#39;)</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a><span class="co">           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a><span class="co">  File &quot;/Users/akagi/.pyenv/versions/3.12.3/lib/python3.12/site-packages/scipy/io/matlab/_mio.py&quot;, line 226, in loadmat</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="co">    MR, _ = mat_reader_factory(f, **kwargs)</span></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a><span class="co">            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a><span class="co">  File &quot;/Users/akagi/.pyenv/versions/3.12.3/lib/python3.12/site-packages/scipy/io/matlab/_mio.py&quot;, line 80, in mat_reader_factory</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a><span class="co">    raise NotImplementedError(&#39;Please use HDF reader for matlab v7.3 &#39;</span></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a><span class="co">NotImplementedError: Please use HDF reader for matlab v7.3 files, e.g. h5py</span></span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>今回は<code>celebrity2000_meta.mat</code>を利用するので必要ありませんが,試しに同じように画像を表示してみましょう.</p>
<p><code>HDF5</code>は多重の辞書型ような構造をしており,<code>key</code>によってデータにアクセスできます.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> h5py <span class="co">#HDF5を扱うライブラリ</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> PIL <span class="im">import</span> Image <span class="co">#画像の表示/保存/書き込みなどを扱うライブラリ</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a><span class="co"># .matファイル(HDF5)の読み込み</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a><span class="cf">with</span> h5py.File(<span class="st">&#39;data/celebrity2000.mat&#39;</span>, <span class="st">&#39;r&#39;</span>) <span class="im">as</span> <span class="bu">file</span>:</span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a>    <span class="co"># List all keys in the .mat file</span></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;keys:&#39;</span>,<span class="bu">list</span>(<span class="bu">file</span>.keys()))</span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a>    <span class="co"># &gt;&gt;&gt; keys: [&#39;#refs#&#39;, &#39;celebrityData&#39;, &#39;celebrityImageData&#39;]</span></span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a>    <span class="co">## ラベルの確認</span></span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;DataKeys:&#39;</span>,<span class="bu">file</span>[<span class="st">&#39;celebrityImageData&#39;</span>].keys())</span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true" tabindex="-1"></a>    <span class="co"># &gt;&gt;&gt; DataKeys: &lt;KeysViewHDF5 [&#39;age&#39;, &#39;birth&#39;, &#39;feature&#39;, &#39;identity&#39;, &#39;lfw&#39;, &#39;name&#39;, &#39;rank&#39;, &#39;year&#39;]&gt;</span></span>
<span id="cb15-15"><a href="#cb15-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-16"><a href="#cb15-16" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 年齢データの確認</span></span>
<span id="cb15-17"><a href="#cb15-17" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;age:&#39;</span>,<span class="bu">file</span>[<span class="st">&#39;celebrityImageData&#39;</span>][<span class="st">&#39;age&#39;</span>])</span>
<span id="cb15-18"><a href="#cb15-18" aria-hidden="true" tabindex="-1"></a>    <span class="co"># &gt;&gt;&gt; age: &lt;HDF5 dataset &quot;age&quot;: shape (1, 163446), type &quot;&lt;f8&quot;&gt;</span></span>
<span id="cb15-19"><a href="#cb15-19" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;age:&#39;</span>,<span class="bu">file</span>[<span class="st">&#39;celebrityImageData&#39;</span>][<span class="st">&#39;age&#39;</span>][<span class="dv">0</span>])</span>
<span id="cb15-20"><a href="#cb15-20" aria-hidden="true" tabindex="-1"></a>    <span class="co"># &gt;&gt;&gt; age: [53. 53. 53. ... 23. 23. 23.]</span></span>
<span id="cb15-21"><a href="#cb15-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-22"><a href="#cb15-22" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 名前データの確認</span></span>
<span id="cb15-23"><a href="#cb15-23" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;name:&#39;</span>,<span class="bu">file</span>[<span class="st">&#39;celebrityImageData&#39;</span>][<span class="st">&#39;name&#39;</span>])</span>
<span id="cb15-24"><a href="#cb15-24" aria-hidden="true" tabindex="-1"></a>    <span class="co"># &gt;&gt;&gt; name: &lt;HDF5 dataset &quot;name&quot;: shape (1, 163446), type &quot;|O&quot;&gt;</span></span>
<span id="cb15-25"><a href="#cb15-25" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;name:&#39;</span>,<span class="bu">file</span>[<span class="st">&#39;celebrityImageData&#39;</span>][<span class="st">&#39;name&#39;</span>][<span class="dv">0</span>])</span>
<span id="cb15-26"><a href="#cb15-26" aria-hidden="true" tabindex="-1"></a>    <span class="co"># &gt;&gt;&gt; name: [&lt;HDF5 object reference&gt; &lt;HDF5 object reference&gt; &lt;HDF5 object reference&gt;</span></span>
<span id="cb15-27"><a href="#cb15-27" aria-hidden="true" tabindex="-1"></a>    <span class="co">#... &lt;HDF5 object reference&gt; &lt;HDF5 object reference&gt;</span></span>
<span id="cb15-28"><a href="#cb15-28" aria-hidden="true" tabindex="-1"></a>    <span class="co">#&lt;HDF5 object reference&gt;]</span></span>
<span id="cb15-29"><a href="#cb15-29" aria-hidden="true" tabindex="-1"></a>    <span class="co"># ↑ &lt;HDF5 object reference&gt;は他のHDF5オブジェクトへの参照 #refs#に入っている.</span></span>
<span id="cb15-30"><a href="#cb15-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-31"><a href="#cb15-31" aria-hidden="true" tabindex="-1"></a>    <span class="co"># nameデータを参照して表示</span></span>
<span id="cb15-32"><a href="#cb15-32" aria-hidden="true" tabindex="-1"></a>    name_references <span class="op">=</span> <span class="bu">file</span>[<span class="st">&#39;celebrityImageData&#39;</span>][<span class="st">&#39;name&#39;</span>][<span class="dv">0</span>]</span>
<span id="cb15-33"><a href="#cb15-33" aria-hidden="true" tabindex="-1"></a>    names <span class="op">=</span> []</span>
<span id="cb15-34"><a href="#cb15-34" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> ref <span class="kw">in</span> name_references:</span>
<span id="cb15-35"><a href="#cb15-35" aria-hidden="true" tabindex="-1"></a>        name <span class="op">=</span> <span class="bu">file</span>[ref][()].tobytes().decode(<span class="st">&#39;utf-16&#39;</span>)  <span class="co"># utf-16でデコード</span></span>
<span id="cb15-36"><a href="#cb15-36" aria-hidden="true" tabindex="-1"></a>        names.append(name)</span>
<span id="cb15-37"><a href="#cb15-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-38"><a href="#cb15-38" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 最初の10件の名前を表示</span></span>
<span id="cb15-39"><a href="#cb15-39" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;names:&#39;</span>, names[:<span class="dv">10</span>])</span>
<span id="cb15-40"><a href="#cb15-40" aria-hidden="true" tabindex="-1"></a>    <span class="co"># names: [&#39;53_Robin_Williams_0001.jpg&#39;</span></span>
<span id="cb15-41"><a href="#cb15-41" aria-hidden="true" tabindex="-1"></a>    <span class="co"># , &#39;53_Robin_Williams_0002.jpg&#39;</span></span>
<span id="cb15-42"><a href="#cb15-42" aria-hidden="true" tabindex="-1"></a>    <span class="co"># , &#39;53_Robin_Williams_0003.jpg&#39;</span></span>
<span id="cb15-43"><a href="#cb15-43" aria-hidden="true" tabindex="-1"></a>    <span class="co"># , &#39;53_Robin_Williams_0004.jpg&#39;</span></span>
<span id="cb15-44"><a href="#cb15-44" aria-hidden="true" tabindex="-1"></a>    <span class="co"># , &#39;53_Robin_Williams_0005.jpg&#39;</span></span>
<span id="cb15-45"><a href="#cb15-45" aria-hidden="true" tabindex="-1"></a>    <span class="co"># , &#39;53_Robin_Williams_0006.jpg&#39;</span></span>
<span id="cb15-46"><a href="#cb15-46" aria-hidden="true" tabindex="-1"></a>    <span class="co"># , &#39;53_Robin_Williams_0007.jpg&#39;</span></span>
<span id="cb15-47"><a href="#cb15-47" aria-hidden="true" tabindex="-1"></a>    <span class="co"># , &#39;53_Robin_Williams_0009.jpg&#39;</span></span>
<span id="cb15-48"><a href="#cb15-48" aria-hidden="true" tabindex="-1"></a>    <span class="co"># , &#39;53_Robin_Williams_0010.jpg&#39;</span></span>
<span id="cb15-49"><a href="#cb15-49" aria-hidden="true" tabindex="-1"></a>    <span class="co"># , &#39;53_Robin_Williams_0011.jpg&#39;]</span></span>
<span id="cb15-50"><a href="#cb15-50" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-51"><a href="#cb15-51" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 画像データの取得と表示</span></span>
<span id="cb15-52"><a href="#cb15-52" aria-hidden="true" tabindex="-1"></a>    <span class="co">## 名前データを利用して画像をいくつか開いてみます.</span></span>
<span id="cb15-53"><a href="#cb15-53" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> n <span class="kw">in</span> names[:<span class="dv">10</span>]:</span>
<span id="cb15-54"><a href="#cb15-54" aria-hidden="true" tabindex="-1"></a>        img_path <span class="op">=</span> os.path.join(image_dir, n)  <span class="co"># パスを結合し,ファイル名を取得</span></span>
<span id="cb15-55"><a href="#cb15-55" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-56"><a href="#cb15-56" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> os.path.exists(img_path):</span>
<span id="cb15-57"><a href="#cb15-57" aria-hidden="true" tabindex="-1"></a>            img <span class="op">=</span> Image.<span class="bu">open</span>(img_path)  <span class="co"># 画像ファイルを開く</span></span>
<span id="cb15-58"><a href="#cb15-58" aria-hidden="true" tabindex="-1"></a>            img.show()  <span class="co"># 画像を表示</span></span>
<span id="cb15-59"><a href="#cb15-59" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span>
<span id="cb15-60"><a href="#cb15-60" aria-hidden="true" tabindex="-1"></a>            <span class="bu">print</span>(<span class="ss">f&quot;Image file not found: </span><span class="sc">{</span>img_path<span class="sc">}</span><span class="ss">&quot;</span>)</span>
<span id="cb15-61"><a href="#cb15-61" aria-hidden="true" tabindex="-1"></a>    <span class="co"># &gt;&gt;&gt; 画像が表示される</span></span></code></pre></div>
<p>同じ用にデータを抽出できることが確認できます.</p>
</div>
<p>それでは,<code>celebrity2000_meta.mat</code>から年齢別にフォルダを分けて画像を保存してみます.年齢区分は,<code>10</code>,<code>20</code>,…,<code>100</code>としてみましょう. 画像ファイル名の先頭の数字が年齢を表しているので,そちらを利用しても構いませんが,せっかくなのでメタデータを利用してみましょう. 年齢は<code>image_data[0][0][0]</code>に入っているようです.</p>
<p>研究であれば画像データの枚数は多いほど良いですが, 今回は一通りの流れを体験してみることが目的なので学生の環境でも利用しやすいように各年代200枚だけコピーします.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> shutil</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> scipy.io</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> collections <span class="im">import</span> defaultdict</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> random</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a><span class="co"># 画像ディレクトリの設定</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>image_dir <span class="op">=</span> <span class="st">&#39;data/CACD2000&#39;</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>output_dir <span class="op">=</span> <span class="st">&#39;data/sorted_images&#39;</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a><span class="co"># .matファイルの読み込み</span></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a><span class="bu">file</span> <span class="op">=</span> scipy.io.loadmat(<span class="st">&#39;data/celebrity2000_meta.mat&#39;</span>)</span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-14"><a href="#cb16-14" aria-hidden="true" tabindex="-1"></a><span class="co"># celebrityImageDataから年齢と画像ファイル名を抽出</span></span>
<span id="cb16-15"><a href="#cb16-15" aria-hidden="true" tabindex="-1"></a>image_data <span class="op">=</span> <span class="bu">file</span>[<span class="st">&#39;celebrityImageData&#39;</span>]</span>
<span id="cb16-16"><a href="#cb16-16" aria-hidden="true" tabindex="-1"></a><span class="co"># 年齢情報</span></span>
<span id="cb16-17"><a href="#cb16-17" aria-hidden="true" tabindex="-1"></a>ages <span class="op">=</span> image_data[<span class="dv">0</span>][<span class="dv">0</span>][<span class="dv">0</span>].flatten()</span>
<span id="cb16-18"><a href="#cb16-18" aria-hidden="true" tabindex="-1"></a><span class="co"># 画像ファイル名</span></span>
<span id="cb16-19"><a href="#cb16-19" aria-hidden="true" tabindex="-1"></a>jpg_files <span class="op">=</span> [<span class="bu">str</span>(image_name[<span class="dv">0</span>][<span class="dv">0</span>]) <span class="cf">for</span> image_name <span class="kw">in</span> image_data[<span class="dv">0</span>][<span class="dv">0</span>][<span class="dv">7</span>]]</span>
<span id="cb16-20"><a href="#cb16-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-21"><a href="#cb16-21" aria-hidden="true" tabindex="-1"></a><span class="co"># 年齢と画像ファイルをペアにする</span></span>
<span id="cb16-22"><a href="#cb16-22" aria-hidden="true" tabindex="-1"></a>age_image_pairs <span class="op">=</span> <span class="bu">list</span>(<span class="bu">zip</span>(ages, jpg_files))</span>
<span id="cb16-23"><a href="#cb16-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-24"><a href="#cb16-24" aria-hidden="true" tabindex="-1"></a><span class="co"># 年代ごとの画像カウント</span></span>
<span id="cb16-25"><a href="#cb16-25" aria-hidden="true" tabindex="-1"></a>age_group_counts <span class="op">=</span> defaultdict(<span class="bu">int</span>)</span>
<span id="cb16-26"><a href="#cb16-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-27"><a href="#cb16-27" aria-hidden="true" tabindex="-1"></a><span class="co"># 年齢別に画像をシャッフル</span></span>
<span id="cb16-28"><a href="#cb16-28" aria-hidden="true" tabindex="-1"></a>random.shuffle(age_image_pairs)</span>
<span id="cb16-29"><a href="#cb16-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-30"><a href="#cb16-30" aria-hidden="true" tabindex="-1"></a><span class="co"># 年齢別のフォルダに画像をコピー（各年代最大200枚）</span></span>
<span id="cb16-31"><a href="#cb16-31" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> age, jpg_file <span class="kw">in</span> age_image_pairs:</span>
<span id="cb16-32"><a href="#cb16-32" aria-hidden="true" tabindex="-1"></a>    age_group <span class="op">=</span> (age <span class="op">//</span> <span class="dv">10</span>) <span class="op">*</span> <span class="dv">10</span></span>
<span id="cb16-33"><a href="#cb16-33" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> age_group <span class="op">&gt;</span> <span class="dv">100</span>:</span>
<span id="cb16-34"><a href="#cb16-34" aria-hidden="true" tabindex="-1"></a>        age_group <span class="op">=</span> <span class="dv">100</span>  <span class="co"># 100代以上は100代フォルダに保存</span></span>
<span id="cb16-35"><a href="#cb16-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-36"><a href="#cb16-36" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 各年代ごとに200枚までコピー</span></span>
<span id="cb16-37"><a href="#cb16-37" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> age_group_counts[age_group] <span class="op">&lt;</span> <span class="dv">200</span>:</span>
<span id="cb16-38"><a href="#cb16-38" aria-hidden="true" tabindex="-1"></a>        folder_path <span class="op">=</span> os.path.join(output_dir, <span class="ss">f&#39;</span><span class="sc">{</span>age_group<span class="sc">}</span><span class="ss">s&#39;</span>)</span>
<span id="cb16-39"><a href="#cb16-39" aria-hidden="true" tabindex="-1"></a>        os.makedirs(folder_path, exist_ok<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb16-40"><a href="#cb16-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-41"><a href="#cb16-41" aria-hidden="true" tabindex="-1"></a>        src_path <span class="op">=</span> os.path.join(image_dir, jpg_file)</span>
<span id="cb16-42"><a href="#cb16-42" aria-hidden="true" tabindex="-1"></a>        dst_path <span class="op">=</span> os.path.join(folder_path, jpg_file)</span>
<span id="cb16-43"><a href="#cb16-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-44"><a href="#cb16-44" aria-hidden="true" tabindex="-1"></a>        shutil.copy(src_path, dst_path)</span>
<span id="cb16-45"><a href="#cb16-45" aria-hidden="true" tabindex="-1"></a>        age_group_counts[age_group] <span class="op">+=</span> <span class="dv">1</span></span></code></pre></div>
<p>結果を確認してみます.</p>
<div class="warn">
<p>Shell コマンドにおける<code>|</code> は<code>パイプ</code>といって <code>head -20</code>は先頭20個のみ
<code>|</code> の左側のコマンドによる標準出力を右側のコマンドに渡すことができます.</p>
<p>今回は<code>ls data/sorted_images/10s</code>で表示される結果の,先頭20個のみを表示しています.</p>
</div>
<div class="sourceCode" id="cb17"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> ls <span class="ex">data/sorted_images</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="ex">10s</span> 20s 30s 40s 50s 60s</span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> ls <span class="ex">data/sorted_images/10s</span> <span class="kw">|</span><span class="fu">head</span> <span class="at">-20</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Alison_Pill_0001.jpg</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Alison_Pill_0002.jpg</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Alison_Pill_0003.jpg</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Alison_Pill_0005.jpg</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Alison_Pill_0006.jpg</span></span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Alison_Pill_0007.jpg</span></span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Alison_Pill_0009.jpg</span></span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Alison_Pill_0011.jpg</span></span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Amanda_Seyfried_0001.jpg</span></span>
<span id="cb17-13"><a href="#cb17-13" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Amanda_Seyfried_0002.jpg</span></span>
<span id="cb17-14"><a href="#cb17-14" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Amanda_Seyfried_0004.jpg</span></span>
<span id="cb17-15"><a href="#cb17-15" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Amanda_Seyfried_0005.jpg</span></span>
<span id="cb17-16"><a href="#cb17-16" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Amanda_Seyfried_0007.jpg</span></span>
<span id="cb17-17"><a href="#cb17-17" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Amanda_Seyfried_0008.jpg</span></span>
<span id="cb17-18"><a href="#cb17-18" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Amanda_Seyfried_0010.jpg</span></span>
<span id="cb17-19"><a href="#cb17-19" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Amanda_Seyfried_0011.jpg</span></span>
<span id="cb17-20"><a href="#cb17-20" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Amanda_Seyfried_0013.jpg</span></span>
<span id="cb17-21"><a href="#cb17-21" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Amanda_Seyfried_0014.jpg</span></span>
<span id="cb17-22"><a href="#cb17-22" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Anna_Kendrick_0002.jpg</span></span>
<span id="cb17-23"><a href="#cb17-23" aria-hidden="true" tabindex="-1"></a><span class="ex">19_Anna_Kendrick_0008.jpg</span></span></code></pre></div>
<p>データには10代から60代までのみが含まれていたようです. 各フォルダの中身を確認してもちゃんと保存できていることがわかりますね.</p>
<p>機械学習モデルの性能を評価するためには,学習に利用する訓練用データと,学習の結果を判定するテスト用データに分ける必要があります. 続いて,学習用とテスト用でフォルダに分割してみましょう.</p>
<p>今回は200枚の画像のうち8割(160枚)を学習用,2割(40枚)をテスト用のデータとして利用します.</p>
<p>学習データの分割には, 指定した割合でデータを分割してくれる<code>sklearn</code>の<code>train_test_split</code>を用います.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> shutil</span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.model_selection <span class="im">import</span> train_test_split</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>data_dir <span class="op">=</span> <span class="st">&#39;data/sorted_images&#39;</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>output_dir <span class="op">=</span> <span class="st">&#39;data/sorted_images_split&#39;</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a><span class="co"># 画像ファイルのパスを収集し,年齢別に分類</span></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a>age_groups <span class="op">=</span> [<span class="st">&#39;10s&#39;</span>, <span class="st">&#39;20s&#39;</span>, <span class="st">&#39;30s&#39;</span>, <span class="st">&#39;40s&#39;</span>, <span class="st">&#39;50s&#39;</span>, <span class="st">&#39;60s&#39;</span>]</span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> age_group <span class="kw">in</span> age_groups:</span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a>    images <span class="op">=</span> os.listdir(os.path.join(data_dir, age_group))</span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a>    train_images, val_images <span class="op">=</span> train_test_split(images</span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a>                                               ,test_size<span class="op">=</span><span class="fl">0.2</span> <span class="co">#2割をテスト用データにする</span></span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a>                                               , random_state<span class="op">=</span><span class="dv">42</span>)</span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a>    train_dir <span class="op">=</span> os.path.join(output_dir, <span class="st">&#39;train&#39;</span>, age_group)</span>
<span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a>    val_dir <span class="op">=</span> os.path.join(output_dir, <span class="st">&#39;val&#39;</span>, age_group)</span>
<span id="cb18-18"><a href="#cb18-18" aria-hidden="true" tabindex="-1"></a>    os.makedirs(train_dir, exist_ok<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb18-19"><a href="#cb18-19" aria-hidden="true" tabindex="-1"></a>    os.makedirs(val_dir, exist_ok<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb18-20"><a href="#cb18-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-21"><a href="#cb18-21" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> image <span class="kw">in</span> train_images:</span>
<span id="cb18-22"><a href="#cb18-22" aria-hidden="true" tabindex="-1"></a>        shutil.copy(os.path.join(data_dir, age_group, image), os.path.join(train_dir, image))</span>
<span id="cb18-23"><a href="#cb18-23" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> image <span class="kw">in</span> val_images:</span>
<span id="cb18-24"><a href="#cb18-24" aria-hidden="true" tabindex="-1"></a>        shutil.copy(os.path.join(data_dir, age_group, image), os.path.join(val_dir, image))</span></code></pre></div>
<p>以下のような形でデータが保存されていることを確認しましょう.</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="ex">data/sorted_images_split</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="ex">├──</span> train</span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="ex">│</span>      ├── 10s</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a><span class="ex">│</span>      ├── 20s</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a><span class="ex">│</span>      ├── 30s</span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a><span class="ex">│</span>      ├── 40s</span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a><span class="ex">│</span>      ├── 50s</span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a><span class="ex">│</span>      └── 60s</span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a><span class="ex">└──</span> val</span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a>        <span class="ex">├──</span> 10s</span>
<span id="cb19-11"><a href="#cb19-11" aria-hidden="true" tabindex="-1"></a>        <span class="ex">├──</span> 20s</span>
<span id="cb19-12"><a href="#cb19-12" aria-hidden="true" tabindex="-1"></a>        <span class="ex">├──</span> 30s</span>
<span id="cb19-13"><a href="#cb19-13" aria-hidden="true" tabindex="-1"></a>        <span class="ex">├──</span> 40s</span>
<span id="cb19-14"><a href="#cb19-14" aria-hidden="true" tabindex="-1"></a>        <span class="ex">├──</span> 50s</span>
<span id="cb19-15"><a href="#cb19-15" aria-hidden="true" tabindex="-1"></a>        <span class="ex">└──</span> 60s</span></code></pre></div>
<h3 data-number="2.6.2" id="画像認識の実施"><span class="header-section-number">2.6.2</span> 画像認識の実施</h3>
<p>CNNを利用した学習を行うにあたって,コード内で扱われる基本的な概念を説明します.</p>
<div class="note">
<ul>
<li><h2 id="ハイパーパラメータ"><strong>ハイパーパラメータ</strong></h2>
機械学習では,プログラムが自動で学習を進めてくれますが,良い性能を達成するためには人間がいくつかのパラメータを設定する必要があります. また,様々な改善手法があるため,モデルが上手く学習できない場合には,それらを経験によって調整していく必要があります.</li>
</ul>
<p>本資料では,それらの細かな内容にはあまり踏み込みませんが,以下,基本的な処理やパラメータに関して説明します.</p>
<ul>
<li><h2 id="前処理data-augmentation"><strong>前処理(Data Augmentation)</strong></h2>
<p>学習を行うために,画像サイズや色の内容と無関係の情報を減らし,画像を統一のフォーマットに揃えます.</p>
<ul>
<li><strong>リサイズ (Resize)</strong></li>
</ul>
<p>画像のサイズを揃えます.今回は224 × 224 ピクセルに統一します.</p>
<ul>
<li><strong>画像反転 (Horizontal Flip)</strong></li>
</ul>
<p>水平方向に画像を反転させることで,データに多様性を加えます.</p>
<ul>
<li><strong>テンソル(Tensor)変換</strong></li>
</ul>
<p>データの多次元配列を<strong>Tensor</strong>と呼びます. データを,複数の行列によるテンソルに変換することで効率的に学習を行います.
例えば,画像の場合は,高さ,幅,チャンネル数(RGBカラー等の色)の3次元テンソルとして表現します.</p>
<ul>
<li><strong>正規化(Normalize)</strong></li>
</ul>
<p>画像データを特定の範囲や分布に変換してモデルが効率的に学習できるようにする手法を正規化といいます. CNNで学習される画像データは,0から255の範囲のピクセル値(色や濃淡の数値)で表現されますが,ばらつきが大きすぎると学習が不安定になるため,0から1の範囲に変換します.</p></li>
</ul>
<div class="warn">
<p>なお,正規化に利用されてい平均や標準偏差の値(<code>[0.485, 0.456, 0.406]</code>)などは,ConvNeXtの学習に用いられている,大規模画像データベース<a href="https://www.image-net.org">ImageNet</a>の平均及び標準偏差です.</p>
<p>実際には,<strong>使用するデータの</strong>平均及び標準偏差を用いる必要がありますが今回はあくまで事例の紹介であり利用する画像データ毎に変更する必要があるので,便宜的にこの値を利用しています.</p>
<p>テスト用の実装などでは,すべて<code>0.5</code>にするなどもよく行われていますが,本来は変更すべき値であることに注意しましょう.</p>
</div>
<p>該当部分(全体のインデントは省略)</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="co"># データ変換（前処理）</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>data_transforms <span class="op">=</span> {</span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>    <span class="st">&#39;train&#39;</span>: transforms.Compose([</span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a>        transforms.Resize((<span class="dv">224</span>, <span class="dv">224</span>)),     <span class="co">#画像のリサイズ</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a>        transforms.RandomHorizontalFlip(), <span class="co">#画像をランダムに反転</span></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a>        transforms.ToTensor(),             <span class="co">#テンソル(多次元配列)に変換</span></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a>        transforms.Normalize(mean<span class="op">=</span>[<span class="fl">0.485</span>, <span class="fl">0.456</span>, <span class="fl">0.406</span>]</span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a>                            ,std<span class="op">=</span>[<span class="fl">0.229</span>, <span class="fl">0.224</span>, <span class="fl">0.225</span>]), <span class="co">#正規化(本来は値を変更する必要あり.</span></span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a>    ]),</span>
<span id="cb20-10"><a href="#cb20-10" aria-hidden="true" tabindex="-1"></a>    <span class="st">&#39;val&#39;</span>: transforms.Compose([</span>
<span id="cb20-11"><a href="#cb20-11" aria-hidden="true" tabindex="-1"></a>        transforms.Resize((<span class="dv">224</span>, <span class="dv">224</span>)),</span>
<span id="cb20-12"><a href="#cb20-12" aria-hidden="true" tabindex="-1"></a>        transforms.ToTensor(),</span>
<span id="cb20-13"><a href="#cb20-13" aria-hidden="true" tabindex="-1"></a>        transforms.Normalize([<span class="fl">0.485</span>, <span class="fl">0.456</span>, <span class="fl">0.406</span>]</span>
<span id="cb20-14"><a href="#cb20-14" aria-hidden="true" tabindex="-1"></a>                            ,[<span class="fl">0.229</span>, <span class="fl">0.224</span>, <span class="fl">0.225</span>]),</span>
<span id="cb20-15"><a href="#cb20-15" aria-hidden="true" tabindex="-1"></a>    ]),</span>
<span id="cb20-16"><a href="#cb20-16" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>この他にも画像の彩度や光度の調整, ランダム回転,スケーリングなど,様々な前処理手法があり,状況に応じて使い分ける必要があります.</p>
<ul>
<li><h2 id="バッチbatch処理"><strong>バッチ(batch)処理</strong></h2></li>
</ul>
<p>CNNでは学習用のデータ全てを一度に学習するとメモリを大量に消費するため,データを分割して学習を行います. そのような分割処理を<strong>バッチ処理</strong>といいます.</p>
<p>分割された一つあたりのデータの数を<strong>バッチサイズ</strong>といいます. バッチサイズが32個の場合は32個の(今回の場合は画像ファイル)を同時に処理します.</p>
<p>また,バッチ処理ではバッチ毎に並列処理を行うため速度面でも,効率的な学習が行えます.</p>
<ul>
<li><h2 id="エポックepoch数"><strong>エポック(epoch)数</strong></h2></li>
</ul>
<p>CNNではモデルの性能を高めるために同じデータセットを何度も繰り返して学習することがあります.その際に,データを1巡して学習する回数を,<strong>エポック数</strong>といいます. 例えば, 10エポックの場合は,160枚の画像を10回学習することになります.</p>
<p>エポック数を増やすと一般的に性能が高まりすが,多すぎる場合には<strong>過学習</strong>が起きるので,エポック数を変更してある程度誤差がが安定する適切なエポック数を見つけることが重要です.</p>
<p>また,本資料では利用していませんが,PyTorchには自動で過学習を防ぐために途中で学習を打ち切る<code>Early Stopping</code>用の機能などもあります.</p>
<p>以下のコードでは,エポック数ごとの誤差を記録して,グラフを出力するようになっています.</p>
<ul>
<li><h2 id="損失関数loss-function"><strong>損失関数(Loss Function)</strong></h2>
学習したモデルの性能を調べるために, モデルの予測と実際のラベルとの誤差(損失)を計算するための関数を<strong>損失関数</strong>といいます.
基本的に, 損失関数で求められた誤差が大きいほど,モデルの正確性が劣っていることを示します.</li>
</ul>
<p>損失関数にはいくつかの種類がありますが,今回は<strong>クロスエントロピー損失(Coross-Entoropy Loss)</strong>を利用します. これは,予測された確率分布と実際のラベルの分布の不一致度を計測しています.</p>
<ul>
<li><h2 id="オプティマイザoptimizer"><strong>オプティマイザ(Optimizer)</strong></h2>
損失関数の値を最小化するために,どのようにモデルのパラメータを更新するかを決定するアルゴリズムを<strong>オプティマイザ</strong>といいます.</li>
</ul>
<p>基本的には,損失関数によって求められた誤差の勾配(パラメータに対する誤差の微分)を計算してエポック毎に誤差が減る方向にパラメータを調整します.</p>
<p>よく使われるアルゴリズムには,<strong>SGD(Stochastic Gradient Descent)</strong>や,<strong>Adam(Adaptive Moment Estimation)</strong>などがあります.</p>
<p>特定のオプティマイザで上手くいかない場合はパラメータや,アルゴリズムを変更します.</p>
<p>該当部分(全体のインデントは省略)</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 損失関数とオプティマイザ</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>    criterion <span class="op">=</span> nn.CrossEntropyLoss() <span class="co">#クロスエントロピー損失</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>    optimizer <span class="op">=</span> optim.Adam(model.parameters() <span class="co">#Adam</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a>                          ,lr<span class="op">=</span><span class="fl">0.0001</span>) <span class="co">#Learning rate (学習率)</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">#SGDを利用する場合</span></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">#optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)</span></span></code></pre></div>
<ul>
<li><h2 id="学習率learning-rate"><strong>学習率(learning rate)</strong></h2>
機械学習モデルが重み（パラメータ）を更新する際に,その更新幅を決めるハイパーパラメータを<strong>学習率(learning rate)</strong>といいます. モデルの訓練時に,誤差（損失）を最小化するために重みを調整していきますが,学習率はその調整量を決定します.</li>
</ul>
<p>学習率が大きい場合には1回の更新で重みが大きく変わるため,学習が速く進むことがありますが,最適な解にたどり着く前に振動してしまったり,安定せずに解に収束しないことがあります.</p>
<p>学習率が小さい場合には,更新幅が小さいので,安定して最適解に近づく可能性が高まりますが,学習に時間がかかりすぎてしまい,訓練が遅くなることがあります.</p>
<p>一般的には<code>0.001</code>程度から初めて変更していくのが良いとされていますが,以下の事例では調整の結果<code>0.0001</code>を採用しています.</p>
<p>このような特性から<strong>SGD</strong>などのオプティマイザでは学習率の設定が非常に重要であり,オプティマイザとは別に学習率を調整するスケジューリングなどの技法が利用されることがあります. 一方で,<strong>Adam</strong>は,ある程度学習率を自動で調整するため,SGDほど,学習率の初期値が結果に影響しないという特徴があります.</p>
<ul>
<li><h2 id="ランダムシードrandom-seed"><strong>ランダムシード(Random Seed)</strong></h2>
CNNは,初期値(重みの設定),学習データのシャッフル,オプティマイザなどで乱数(ランダムな値)を利用しているので,実行毎に異なる結果が出てくることが一般的です.</li>
</ul>
<p>毎回異なる値が生成されるように乱数は,通常CPU時間(プログラムを実行したときのPC内部の時間)などの外部の情報を利用します.</p>
<p>従って, 通常この資料と同じデータを利用して,同じコードを実行しても結果は異なります.
ただし,それでは検証などにおいて不便な場合があります.
また,講義用資料としても不便なので,同じ乱数を利用してできるだけ同じ結果を再現する必要があります.</p>
<p>そこで,以下のコードでは利用する乱数を固定するために,乱数を生成するための情報<strong>ランダムシード</strong>を固定しています.</p>
<p>シード値は適当な数値で構いません. 西暦(<code>2024</code>)や,適当な連番(<code>1234</code>など),特定のミームの数字(<code>42</code>など)が用いられます.</p>
<p>(ただし,実行環境などの違いにより,ランダムシードを固定しても完全に同じ値にはなりません.)</p>
<p><code>set_seed()</code>行をコメントアウトすることで,通常の乱数が利用できるようになるので,研究に利用する場合などには適宜変更してください.</p>
<p>該当部分(全体のインデントは省略)</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 乱数シードを設定</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> set_seed(seed):</span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a>    torch.manual_seed(seed)</span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a>    np.random.seed(seed)              <span class="co"># Numpy用の乱数シードを設定</span></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a>    random.seed(seed)                 <span class="co"># Pythonの標準乱数シードを設定</span></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 再現性を完全に保証するために以下も設定（ただし、若干のパフォーマンス低下の可能性あり）</span></span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true" tabindex="-1"></a>    torch.backends.cudnn.deterministic <span class="op">=</span> <span class="va">True</span></span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true" tabindex="-1"></a>    torch.backends.cudnn.benchmark <span class="op">=</span> <span class="va">False</span></span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-11"><a href="#cb22-11" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main():</span>
<span id="cb22-12"><a href="#cb22-12" aria-hidden="true" tabindex="-1"></a>    <span class="co"># シードを設定する</span></span>
<span id="cb22-13"><a href="#cb22-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">#(自分の研究でやる場合は以下の行は消しても問題ない.)</span></span>
<span id="cb22-14"><a href="#cb22-14" aria-hidden="true" tabindex="-1"></a>    set_seed(<span class="dv">42</span>)</span></code></pre></div>
<ul>
<li><h2 id="cuda-compute-unified-device-architecture"><strong>CUDA (Compute Unified Device Architecture)</strong></h2>
機械学習では, GPUを用いた計算を行うことが一般的です. 特にPyTorchなどでは,NVIDIAが開発したGPU向けの並列コンピューティングプラットフォームである<strong>CUDA (Compute Unified Device Architecture)</strong>を前提にライブラリが開発されています.
従って, <strong>CUDA</strong>が搭載されたPCでは,<strong>CUDA</strong>を利用することが望ましいです.</li>
</ul>
<p>しかし,例えば現在のMacOSは<strong>CUDA</strong>に対応しておらず, WindowsPCでもコストなどの観点から異なるGPUが搭載されている場合があります.</p>
<p>M1〜M3などのApple Siliconを搭載したMacでは,PyTorchの実行にあたり<strong>CUDA</strong>の代わりに<strong>MPS (Metal Performance Shaders)</strong>が利用可能です.</p>
<p>PyTorchでは<code>torch.device()</code>で利用するデバイスを設定できますが,以下のコードでは, CUDA, MPSが利用できる場合にはそれらを利用し,利用できない場合にはCPUを利用しています.</p>
<p>該当部分(全体のインデントは省略)</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> torch.backends.mps.is_available():</span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>    device <span class="op">=</span> torch.device(<span class="st">&quot;mps&quot;</span>) <span class="co">#Mac GPU</span></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a><span class="cf">elif</span> torch.cuda.is_available():</span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a>    device <span class="op">=</span> torch.device(<span class="st">&quot;cuda:0&quot;</span>) <span class="co">#Win GPU</span></span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a><span class="cf">else</span>:</span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true" tabindex="-1"></a>    device <span class="op">=</span> torch.device(<span class="st">&quot;cpu&quot;</span>) <span class="co">#CPU</span></span></code></pre></div>
</div>
<p>これから,先程分割した画像を利用してConvNeXtによる学習を行い, PCAとt-sneで2次元へ次元削減した後,ラベルごとの特徴を可視化してみます.</p>
<div class="warn">
<p>以下のコードを実行すると,PCのスペックによっては10分以上ほぼ全てのCPU/GPUが使用されます.
他の不必要なアプリを閉じて,時間に余裕があるときに電源に繋いだ状態で実行しましょう.
このコードは学生のローカル環境でも動くようになっていますが,上手くいかない場合はGoogle Colaboratory上で試してみましょう.</p>
</div>
<div class="warn">
<p>コードを実行して以下のようなWarningが表示される場合,個別の環境によって対処が異なるので教員に
相談してください.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="ex">Found</span> Intel OpenMP <span class="er">(</span><span class="st">&#39;libiomp&#39;</span><span class="kw">)</span> <span class="ex">and</span> LLVM OpenMP <span class="er">(</span><span class="st">&#39;libomp&#39;</span><span class="kw">)</span> <span class="ex">loaded</span> at</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="ex">the</span> same time. Both libraries are known to be incompatible and this</span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a><span class="ex">can</span> cause random crashes or deadlocks on Linux when loaded in the</span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a><span class="ex">same</span> Python program.</span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a><span class="ex">Using</span> threadpoolctl may cause crashes or deadlocks. For more</span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a><span class="ex">information</span> and possible workarounds, please see</span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a>    <span class="ex">https://github.com/joblib/threadpoolctl/blob/master/multiple_openmp.md</span></span></code></pre></div>
</div>
<p>出力されている<code>convnext_loss.png</code>と<code>convnext_acc.png</code>は<code>epoch</code>ごとの<code>loss</code>と<code>acc</code>の推移を表しています. <code>acc</code>は,モデルが予測したラベルの実際のラベルに対する正答率であり,<code>1</code>であれば予測が完全にラベルと一致していることを示しています. 今回は10代から60代までの6ラベルなので,完全にランダムにラベルを予測しても<code>0.16</code>程度はラベルと予測が一致します.</p>
<figure>
<img src="/images/convnext_loss_epoch20.png" alt="lossの推移" />
<figcaption aria-hidden="true">lossの推移</figcaption>
</figure>
<figure>
<img src="/images/convnext_acc_epoch20.png" alt="accの推移" />
<figcaption aria-hidden="true">accの推移</figcaption>
</figure>
<p>グラフを確認してみると<code>epoch</code>が<code>5</code>をピークとして<code>loss</code>も<code>acc</code>も低下していることがわかります. そこで, もう一度,<code>num_epochs</code>を<code>5</code>に変更して,学習してみましょう. <code>random_seed</code>が固定されているので,基本的には同じ値が出力されるはずです.</p>
<figure>
<img src="/images/convnext_acc_epoch5.png" alt="accの推移(epoch 5)" />
<figcaption aria-hidden="true">accの推移(epoch 5)</figcaption>
</figure>
<p>最終的に今回は, テストデータでの正答率が,<code>0.4</code>程度になりました. それほど高い値ではありませんが,ランダムに選択するよりはかなり良い値になったので,今回はこのくらいで良しとします. 実際の研究などでは,データ数を増やす,ハイパーパラメータやアルゴリズムを変更するなどして,もう少し良い値を目指したほうが良いでしょう.</p>
<p>出力されている<code>pred_acctual_heatmap.png</code>は, テストデータにおける実際のラベルに対する予測値を予測値のラベル毎にカウントしたものを相対度数として表現したヒートマップです.すべて正確に予測されていた場合,度数は対角線上に集中します.
このように可視化することで,モデルが何をどのように予測しているのかを確認できます.</p>
<figure>
<img src="/images/pred_acctual_heatmap.png" alt="accの推移(epoch 5)" />
<figcaption aria-hidden="true">accの推移(epoch 5)</figcaption>
</figure>
<p>ヒートマップを確認すると概ね対角線上に度数が集中していることがわかります. 特に10,20代(y軸の0,1)を50,60代と予測した数は0であり,年齢が離れるほど正確に識別されていることがわかります.</p>
<p>一方で,実際のラベルが10,20,40代であるときに,30代であると誤って予測する確率が高く,30代以前はあまり上手く識別できないことがわかります.</p>
<p>続いて,<code>PCA</code>と<code>t-sne</code>の結果を確認してみましょう.</p>
<figure>
<img src="/images/convnext_pca.png" alt="PCA" />
<figcaption aria-hidden="true">PCA</figcaption>
</figure>
<figure>
<img src="/images/convnext_tsne.png" alt="t-sne" />
<figcaption aria-hidden="true">t-sne</figcaption>
</figure>
<p>いずれも左から右に行くにつれて,年齢が高くなっており,ある程度識別できていることがわかります.一方で,30代の緑色が広い範囲に分布しているために識別が困難であること,50代と60代が左右とは別の特徴量で識別されていることなどがわかります.</p>
<p>このように,学習されたモデルの特徴量を分析することで,それぞれのクラスの特徴がある程度見えてきます.</p>
<h3 data-number="2.6.3" id="特徴マップ"><span class="header-section-number">2.6.3</span> 特徴マップ</h3>
<p>機械学習がどのような基準で判断を行っているかを説明することはこんなんですが,いくつかの方法があります. まずは,基本的な手法として各学習層でどのような特徴を抽出しているかを可視化する<strong>特徴マップ</strong>を見てみましょう.</p>
<p>今回は,畳み込み層をそれぞれ年代(10s~60s)事に可視化してみましょう.
特徴マップは最初の層から最終層に近づくにつれて,抽象度が上がり解釈が困難になります.
今回は <code>target_layers_indices = [0,5,-1]</code>で指定している,<code>0</code>層,<code>5</code>層,最終層(<code>-1</code>)を対象にしていますが,必要であれば可視化する層を増やしてみましょう.</p>
<p>画像は以下のようなフォルダ構成で保存されます.</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> tree <span class="at">-d</span> data/result</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a><span class="ex">data/result</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a><span class="ex">├──</span> feature_maps</span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> ├── 10s</span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> │   ├── features_-1</span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> │   ├── features_0</span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> │   ├── features_5</span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> │   └── last_conv</span>
<span id="cb25-9"><a href="#cb25-9" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> ├── 20s</span>
<span id="cb25-10"><a href="#cb25-10" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> │   ├── features_-1</span>
<span id="cb25-11"><a href="#cb25-11" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> │   ├── features_0</span>
<span id="cb25-12"><a href="#cb25-12" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> │   ├── features_5</span>
<span id="cb25-13"><a href="#cb25-13" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> │   └── last_conv</span>
<span id="cb25-14"><a href="#cb25-14" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> ├── 30s</span>
<span id="cb25-15"><a href="#cb25-15" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> │   ├── features_-1</span>
<span id="cb25-16"><a href="#cb25-16" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> │   ├── features_0</span>
<span id="cb25-17"><a href="#cb25-17" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> │   ├── features_5</span>
<span id="cb25-18"><a href="#cb25-18" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> │   └── last_conv</span>
<span id="cb25-19"><a href="#cb25-19" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> ├── 40s</span>
<span id="cb25-20"><a href="#cb25-20" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> │   ├── features_-1</span>
<span id="cb25-21"><a href="#cb25-21" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> │   ├── features_0</span>
<span id="cb25-22"><a href="#cb25-22" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> │   ├── features_5</span>
<span id="cb25-23"><a href="#cb25-23" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> │   └── last_conv</span>
<span id="cb25-24"><a href="#cb25-24" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> ├── 50s</span>
<span id="cb25-25"><a href="#cb25-25" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> │   ├── features_-1</span>
<span id="cb25-26"><a href="#cb25-26" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> │   ├── features_0</span>
<span id="cb25-27"><a href="#cb25-27" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> │   ├── features_5</span>
<span id="cb25-28"><a href="#cb25-28" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> │   └── last_conv</span>
<span id="cb25-29"><a href="#cb25-29" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span> └── 60s</span>
<span id="cb25-30"><a href="#cb25-30" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span>     ├── features_-1</span>
<span id="cb25-31"><a href="#cb25-31" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span>     ├── features_0</span>
<span id="cb25-32"><a href="#cb25-32" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span>     ├── features_5</span>
<span id="cb25-33"><a href="#cb25-33" aria-hidden="true" tabindex="-1"></a><span class="ex">│  </span>     └── last_conv</span></code></pre></div>
<p>コードは以下になります.</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="co">#------------------------------------------------------------------</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a><span class="co">#特徴マップの描画</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="co">#------------------------------------------------------------------</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a><span class="co"># 中間層のフックを設定する層リストの設定例</span></span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a>target_layers_indices <span class="op">=</span> [<span class="dv">0</span>, <span class="dv">5</span>, <span class="op">-</span><span class="dv">1</span>]  <span class="co"># お好みで変更可能</span></span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a><span class="co"># フックで取り出した特徴マップを保持する辞書</span></span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true" tabindex="-1"></a>intermediate_feature_maps <span class="op">=</span> {}</span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-10"><a href="#cb26-10" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> get_intermediate_hook(name):</span>
<span id="cb26-11"><a href="#cb26-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> hook_fn(m, <span class="bu">input</span>, output):</span>
<span id="cb26-12"><a href="#cb26-12" aria-hidden="true" tabindex="-1"></a>        <span class="co"># output: [B, C, H, W]</span></span>
<span id="cb26-13"><a href="#cb26-13" aria-hidden="true" tabindex="-1"></a>        intermediate_feature_maps[name] <span class="op">=</span> output.detach().cpu()</span>
<span id="cb26-14"><a href="#cb26-14" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> hook_fn</span>
<span id="cb26-15"><a href="#cb26-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-16"><a href="#cb26-16" aria-hidden="true" tabindex="-1"></a><span class="co"># 対象層にフックを登録</span></span>
<span id="cb26-17"><a href="#cb26-17" aria-hidden="true" tabindex="-1"></a>hooks <span class="op">=</span> []</span>
<span id="cb26-18"><a href="#cb26-18" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> idx <span class="kw">in</span> target_layers_indices:</span>
<span id="cb26-19"><a href="#cb26-19" aria-hidden="true" tabindex="-1"></a>    layer_name <span class="op">=</span> <span class="ss">f&quot;features_</span><span class="sc">{</span>idx<span class="sc">}</span><span class="ss">&quot;</span></span>
<span id="cb26-20"><a href="#cb26-20" aria-hidden="true" tabindex="-1"></a>    h <span class="op">=</span> model.features[idx].register_forward_hook(get_intermediate_hook(layer_name))</span>
<span id="cb26-21"><a href="#cb26-21" aria-hidden="true" tabindex="-1"></a>    hooks.append(h)</span>
<span id="cb26-22"><a href="#cb26-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-23"><a href="#cb26-23" aria-hidden="true" tabindex="-1"></a><span class="co"># --- 最後の畳み込み層のフック ---</span></span>
<span id="cb26-24"><a href="#cb26-24" aria-hidden="true" tabindex="-1"></a>feature_maps_last_conv <span class="op">=</span> []</span>
<span id="cb26-25"><a href="#cb26-25" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> get_feature_map_hook_conv(<span class="va">self</span>, <span class="bu">input</span>, output):</span>
<span id="cb26-26"><a href="#cb26-26" aria-hidden="true" tabindex="-1"></a>    feature_maps_last_conv.append(output.detach().cpu())</span>
<span id="cb26-27"><a href="#cb26-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-28"><a href="#cb26-28" aria-hidden="true" tabindex="-1"></a>hook_conv <span class="op">=</span> model.features[<span class="op">-</span><span class="dv">1</span>].register_forward_hook(get_feature_map_hook_conv)</span>
<span id="cb26-29"><a href="#cb26-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-30"><a href="#cb26-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-31"><a href="#cb26-31" aria-hidden="true" tabindex="-1"></a><span class="co"># 抽出したいクラス (0:10s,1:20s,...,5:60s)</span></span>
<span id="cb26-32"><a href="#cb26-32" aria-hidden="true" tabindex="-1"></a>target_classes <span class="op">=</span> [<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>]</span>
<span id="cb26-33"><a href="#cb26-33" aria-hidden="true" tabindex="-1"></a><span class="co"># 各クラスから9枚ずつ取得するためのカウンタ</span></span>
<span id="cb26-34"><a href="#cb26-34" aria-hidden="true" tabindex="-1"></a>images_per_class <span class="op">=</span> <span class="dv">9</span></span>
<span id="cb26-35"><a href="#cb26-35" aria-hidden="true" tabindex="-1"></a>extracted_counts <span class="op">=</span> {cls: <span class="dv">0</span> <span class="cf">for</span> cls <span class="kw">in</span> target_classes}</span>
<span id="cb26-36"><a href="#cb26-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-37"><a href="#cb26-37" aria-hidden="true" tabindex="-1"></a><span class="co"># 保存ディレクトリの用意</span></span>
<span id="cb26-38"><a href="#cb26-38" aria-hidden="true" tabindex="-1"></a>base_dir <span class="op">=</span> <span class="st">&#39;data/result/feature_maps&#39;</span></span>
<span id="cb26-39"><a href="#cb26-39" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="kw">not</span> os.path.exists(base_dir):</span>
<span id="cb26-40"><a href="#cb26-40" aria-hidden="true" tabindex="-1"></a>    os.makedirs(base_dir)</span>
<span id="cb26-41"><a href="#cb26-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-42"><a href="#cb26-42" aria-hidden="true" tabindex="-1"></a><span class="co"># クラスごとのフォルダを作成 (10s～60s)</span></span>
<span id="cb26-43"><a href="#cb26-43" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> cls <span class="kw">in</span> target_classes:</span>
<span id="cb26-44"><a href="#cb26-44" aria-hidden="true" tabindex="-1"></a>    class_label_str <span class="op">=</span> <span class="ss">f&quot;</span><span class="sc">{</span>(cls<span class="op">+</span><span class="dv">1</span>)<span class="op">*</span><span class="dv">10</span><span class="sc">}</span><span class="ss">s&quot;</span></span>
<span id="cb26-45"><a href="#cb26-45" aria-hidden="true" tabindex="-1"></a>    class_dir <span class="op">=</span> os.path.join(base_dir, class_label_str)</span>
<span id="cb26-46"><a href="#cb26-46" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="kw">not</span> os.path.exists(class_dir):</span>
<span id="cb26-47"><a href="#cb26-47" aria-hidden="true" tabindex="-1"></a>        os.makedirs(class_dir)</span>
<span id="cb26-48"><a href="#cb26-48" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 中間層用のサブフォルダを用意</span></span>
<span id="cb26-49"><a href="#cb26-49" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> idx <span class="kw">in</span> target_layers_indices:</span>
<span id="cb26-50"><a href="#cb26-50" aria-hidden="true" tabindex="-1"></a>        layer_name <span class="op">=</span> <span class="ss">f&quot;features_</span><span class="sc">{</span>idx<span class="sc">}</span><span class="ss">&quot;</span></span>
<span id="cb26-51"><a href="#cb26-51" aria-hidden="true" tabindex="-1"></a>        layer_dir <span class="op">=</span> os.path.join(class_dir, layer_name)</span>
<span id="cb26-52"><a href="#cb26-52" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="kw">not</span> os.path.exists(layer_dir):</span>
<span id="cb26-53"><a href="#cb26-53" aria-hidden="true" tabindex="-1"></a>            os.makedirs(layer_dir)</span>
<span id="cb26-54"><a href="#cb26-54" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-55"><a href="#cb26-55" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 最終Conv層用のフォルダ</span></span>
<span id="cb26-56"><a href="#cb26-56" aria-hidden="true" tabindex="-1"></a>    last_conv_dir <span class="op">=</span> os.path.join(class_dir, <span class="st">&#39;last_conv&#39;</span>)</span>
<span id="cb26-57"><a href="#cb26-57" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="kw">not</span> os.path.exists(last_conv_dir):</span>
<span id="cb26-58"><a href="#cb26-58" aria-hidden="true" tabindex="-1"></a>        os.makedirs(last_conv_dir)</span>
<span id="cb26-59"><a href="#cb26-59" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-60"><a href="#cb26-60" aria-hidden="true" tabindex="-1"></a>model.<span class="bu">eval</span>()</span>
<span id="cb26-61"><a href="#cb26-61" aria-hidden="true" tabindex="-1"></a>val_iter <span class="op">=</span> <span class="bu">iter</span>(dataloaders[<span class="st">&#39;val&#39;</span>])</span>
<span id="cb26-62"><a href="#cb26-62" aria-hidden="true" tabindex="-1"></a><span class="cf">with</span> torch.no_grad():</span>
<span id="cb26-63"><a href="#cb26-63" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 全クラスが指定枚数分揃うまで繰り返す</span></span>
<span id="cb26-64"><a href="#cb26-64" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="kw">not</span> <span class="bu">all</span>(count <span class="op">==</span> images_per_class <span class="cf">for</span> count <span class="kw">in</span> extracted_counts.values()):</span>
<span id="cb26-65"><a href="#cb26-65" aria-hidden="true" tabindex="-1"></a>        <span class="cf">try</span>:</span>
<span id="cb26-66"><a href="#cb26-66" aria-hidden="true" tabindex="-1"></a>            inputs, labels <span class="op">=</span> <span class="bu">next</span>(val_iter)</span>
<span id="cb26-67"><a href="#cb26-67" aria-hidden="true" tabindex="-1"></a>        <span class="cf">except</span> <span class="pp">StopIteration</span>:</span>
<span id="cb26-68"><a href="#cb26-68" aria-hidden="true" tabindex="-1"></a>            <span class="co"># データがなくなったら終了</span></span>
<span id="cb26-69"><a href="#cb26-69" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span></span>
<span id="cb26-70"><a href="#cb26-70" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-71"><a href="#cb26-71" aria-hidden="true" tabindex="-1"></a>        inputs <span class="op">=</span> inputs.to(device)</span>
<span id="cb26-72"><a href="#cb26-72" aria-hidden="true" tabindex="-1"></a>        <span class="co"># フック用リストをクリア</span></span>
<span id="cb26-73"><a href="#cb26-73" aria-hidden="true" tabindex="-1"></a>        feature_maps_last_conv.clear()</span>
<span id="cb26-74"><a href="#cb26-74" aria-hidden="true" tabindex="-1"></a>        intermediate_feature_maps.clear()</span>
<span id="cb26-75"><a href="#cb26-75" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-76"><a href="#cb26-76" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 順伝播：フックで特徴マップ取得</span></span>
<span id="cb26-77"><a href="#cb26-77" aria-hidden="true" tabindex="-1"></a>        outputs <span class="op">=</span> model(inputs)</span>
<span id="cb26-78"><a href="#cb26-78" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-79"><a href="#cb26-79" aria-hidden="true" tabindex="-1"></a>        fm_batch <span class="op">=</span> feature_maps_last_conv[<span class="dv">0</span>]   <span class="co"># [B, C, H, W] 最終Conv層出力</span></span>
<span id="cb26-80"><a href="#cb26-80" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-81"><a href="#cb26-81" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(inputs.size(<span class="dv">0</span>)):</span>
<span id="cb26-82"><a href="#cb26-82" aria-hidden="true" tabindex="-1"></a>            cls <span class="op">=</span> labels[i].item()</span>
<span id="cb26-83"><a href="#cb26-83" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> cls <span class="kw">in</span> target_classes <span class="kw">and</span> extracted_counts[cls] <span class="op">&lt;</span> images_per_class:</span>
<span id="cb26-84"><a href="#cb26-84" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-85"><a href="#cb26-85" aria-hidden="true" tabindex="-1"></a>                class_label_str <span class="op">=</span> <span class="ss">f&quot;</span><span class="sc">{</span>(cls<span class="op">+</span><span class="dv">1</span>)<span class="op">*</span><span class="dv">10</span><span class="sc">}</span><span class="ss">s&quot;</span></span>
<span id="cb26-86"><a href="#cb26-86" aria-hidden="true" tabindex="-1"></a>                class_dir <span class="op">=</span> os.path.join(base_dir, class_label_str)</span>
<span id="cb26-87"><a href="#cb26-87" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-88"><a href="#cb26-88" aria-hidden="true" tabindex="-1"></a>                <span class="co"># 中間層特徴マップ可視化</span></span>
<span id="cb26-89"><a href="#cb26-89" aria-hidden="true" tabindex="-1"></a>                <span class="cf">for</span> idx <span class="kw">in</span> target_layers_indices:</span>
<span id="cb26-90"><a href="#cb26-90" aria-hidden="true" tabindex="-1"></a>                    layer_name <span class="op">=</span> <span class="ss">f&quot;features_</span><span class="sc">{</span>idx<span class="sc">}</span><span class="ss">&quot;</span></span>
<span id="cb26-91"><a href="#cb26-91" aria-hidden="true" tabindex="-1"></a>                    fm_intermediate <span class="op">=</span> intermediate_feature_maps[layer_name][i] <span class="co"># shape: [C, H, W]</span></span>
<span id="cb26-92"><a href="#cb26-92" aria-hidden="true" tabindex="-1"></a>                    num_channels_to_plot <span class="op">=</span> <span class="bu">min</span>(<span class="dv">8</span>, fm_intermediate.shape[<span class="dv">0</span>])</span>
<span id="cb26-93"><a href="#cb26-93" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-94"><a href="#cb26-94" aria-hidden="true" tabindex="-1"></a>                    fig, axes <span class="op">=</span> plt.subplots(<span class="dv">2</span>, <span class="dv">4</span>, figsize<span class="op">=</span>(<span class="dv">12</span>, <span class="dv">6</span>))</span>
<span id="cb26-95"><a href="#cb26-95" aria-hidden="true" tabindex="-1"></a>                    axes <span class="op">=</span> axes.flatten()</span>
<span id="cb26-96"><a href="#cb26-96" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">for</span> ch <span class="kw">in</span> <span class="bu">range</span>(num_channels_to_plot):</span>
<span id="cb26-97"><a href="#cb26-97" aria-hidden="true" tabindex="-1"></a>                        ax <span class="op">=</span> axes[ch]</span>
<span id="cb26-98"><a href="#cb26-98" aria-hidden="true" tabindex="-1"></a>                        ax.imshow(fm_intermediate[ch].numpy(), cmap<span class="op">=</span><span class="st">&#39;viridis&#39;</span>)</span>
<span id="cb26-99"><a href="#cb26-99" aria-hidden="true" tabindex="-1"></a>                        ax.axis(<span class="st">&#39;off&#39;</span>)</span>
<span id="cb26-100"><a href="#cb26-100" aria-hidden="true" tabindex="-1"></a>                    plt.suptitle(<span class="ss">f&#39;Intermediate Layer </span><span class="sc">{</span>layer_name<span class="sc">}</span><span class="ss"> Feature Maps: Class </span><span class="sc">{</span>(cls<span class="op">+</span><span class="dv">1</span>)<span class="op">*</span><span class="dv">10</span><span class="sc">}</span><span class="ss">s (Image </span><span class="sc">{</span>extracted_counts[cls]<span class="op">+</span><span class="dv">1</span><span class="sc">}</span><span class="ss">)&#39;</span>)</span>
<span id="cb26-101"><a href="#cb26-101" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-102"><a href="#cb26-102" aria-hidden="true" tabindex="-1"></a>                    layer_dir <span class="op">=</span> os.path.join(class_dir, layer_name)</span>
<span id="cb26-103"><a href="#cb26-103" aria-hidden="true" tabindex="-1"></a>                    out_path <span class="op">=</span> os.path.join(layer_dir, <span class="ss">f&#39;feature_map_</span><span class="sc">{</span>extracted_counts[cls]<span class="op">+</span><span class="dv">1</span><span class="sc">}</span><span class="ss">.png&#39;</span>)</span>
<span id="cb26-104"><a href="#cb26-104" aria-hidden="true" tabindex="-1"></a>                    plt.savefig(out_path)</span>
<span id="cb26-105"><a href="#cb26-105" aria-hidden="true" tabindex="-1"></a>                    plt.close()</span>
<span id="cb26-106"><a href="#cb26-106" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-107"><a href="#cb26-107" aria-hidden="true" tabindex="-1"></a>                <span class="co"># 最終Conv層特徴マップ可視化</span></span>
<span id="cb26-108"><a href="#cb26-108" aria-hidden="true" tabindex="-1"></a>                fm <span class="op">=</span> fm_batch[i]  <span class="co"># shape: [C, H, W]</span></span>
<span id="cb26-109"><a href="#cb26-109" aria-hidden="true" tabindex="-1"></a>                num_channels_to_plot <span class="op">=</span> <span class="bu">min</span>(<span class="dv">8</span>, fm.shape[<span class="dv">0</span>])</span>
<span id="cb26-110"><a href="#cb26-110" aria-hidden="true" tabindex="-1"></a>                fig, axes <span class="op">=</span> plt.subplots(<span class="dv">2</span>, <span class="dv">4</span>, figsize<span class="op">=</span>(<span class="dv">12</span>, <span class="dv">6</span>))</span>
<span id="cb26-111"><a href="#cb26-111" aria-hidden="true" tabindex="-1"></a>                axes <span class="op">=</span> axes.flatten()</span>
<span id="cb26-112"><a href="#cb26-112" aria-hidden="true" tabindex="-1"></a>                <span class="cf">for</span> ch <span class="kw">in</span> <span class="bu">range</span>(num_channels_to_plot):</span>
<span id="cb26-113"><a href="#cb26-113" aria-hidden="true" tabindex="-1"></a>                    ax <span class="op">=</span> axes[ch]</span>
<span id="cb26-114"><a href="#cb26-114" aria-hidden="true" tabindex="-1"></a>                    ax.imshow(fm[ch].numpy(), cmap<span class="op">=</span><span class="st">&#39;viridis&#39;</span>)</span>
<span id="cb26-115"><a href="#cb26-115" aria-hidden="true" tabindex="-1"></a>                    ax.axis(<span class="st">&#39;off&#39;</span>)</span>
<span id="cb26-116"><a href="#cb26-116" aria-hidden="true" tabindex="-1"></a>                plt.suptitle(<span class="ss">f&#39;Last Conv Feature Maps: Class </span><span class="sc">{</span>(cls<span class="op">+</span><span class="dv">1</span>)<span class="op">*</span><span class="dv">10</span><span class="sc">}</span><span class="ss">s (Image </span><span class="sc">{</span>extracted_counts[cls]<span class="op">+</span><span class="dv">1</span><span class="sc">}</span><span class="ss">)&#39;</span>)</span>
<span id="cb26-117"><a href="#cb26-117" aria-hidden="true" tabindex="-1"></a>                last_conv_dir <span class="op">=</span> os.path.join(class_dir, <span class="st">&#39;last_conv&#39;</span>)</span>
<span id="cb26-118"><a href="#cb26-118" aria-hidden="true" tabindex="-1"></a>                out_path <span class="op">=</span> os.path.join(last_conv_dir, <span class="ss">f&#39;feature_map_</span><span class="sc">{</span>extracted_counts[cls]<span class="op">+</span><span class="dv">1</span><span class="sc">}</span><span class="ss">.png&#39;</span>)</span>
<span id="cb26-119"><a href="#cb26-119" aria-hidden="true" tabindex="-1"></a>                plt.savefig(out_path)</span>
<span id="cb26-120"><a href="#cb26-120" aria-hidden="true" tabindex="-1"></a>                plt.close()</span>
<span id="cb26-121"><a href="#cb26-121" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-122"><a href="#cb26-122" aria-hidden="true" tabindex="-1"></a>                extracted_counts[cls] <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb26-123"><a href="#cb26-123" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-124"><a href="#cb26-124" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="bu">all</span>(count <span class="op">==</span> images_per_class <span class="cf">for</span> count <span class="kw">in</span> extracted_counts.values()):</span>
<span id="cb26-125"><a href="#cb26-125" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">break</span></span>
<span id="cb26-126"><a href="#cb26-126" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-127"><a href="#cb26-127" aria-hidden="true" tabindex="-1"></a><span class="co"># フックを削除</span></span>
<span id="cb26-128"><a href="#cb26-128" aria-hidden="true" tabindex="-1"></a>hook_conv.remove()</span>
<span id="cb26-129"><a href="#cb26-129" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> h <span class="kw">in</span> hooks:</span>
<span id="cb26-130"><a href="#cb26-130" aria-hidden="true" tabindex="-1"></a>    h.remove()</span>
<span id="cb26-131"><a href="#cb26-131" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;特徴マップ描画完了&#39;</span>)</span></code></pre></div>
<p>生成した画像のうち,10代(10s)と60代(60s)の特徴マップを確認してみましょう.</p>
<p><img src="/images/ch14_10s_0_6.png" alt="10s 0層" />
<img src="/images/ch14_60s_0_8.png" alt="60s 0層" /></p>
<p>初期段階の特徴マップでは,抽象化が進んでおらず入力画像に近い計上や明暗が捉えられています.この段階ではまだ「顔」や「目」「鼻」などの明確な概念は捉えられておらず, 画素レベルでの色・輝度・エッジなど, 低レベルな特徴(輪郭や縞模様, 明るい部分や暗い部分など)を抽出している段階に見えます.</p>
<p><img src="/images/ch14_10s_5_6.png" alt="10s 5層" />
<img src="/images/ch14_60s_5_8.png" alt="60s 5層" /></p>
<p>第5層では,人物の顔そのものが明示的に分かるわけではありませんが,明暗や模様の分布がより粗い粒度(低い解像度)で表現され,モザイク状に見える特徴マップが示唆するように,特定の領域に強く反応するフィルタも存在しています.</p>
<p><img src="/images/ch14_10s_last_6.png" alt="10s 最終層" />
<img src="/images/ch14_60s_last_8.png" alt="60s 5層" /></p>
<p>最終層になると,抽象化が進み人間の目が見ても元の画像との直接的な対応は難しくなりますが, ネットワークにとって意味のある特徴(特定の配置や模様, 対象物の概形など)がチャネルごとに表現されていると考えられます. このレベルでは,すでに「顔」のような意味的な概念へのマッピングが進み,分類タスクで役立つ特徴が凝縮されている段階です.</p>
<p>特徴マップによって学習したCNNがどのような判断を行っているかを可視化することができました.しかし,特徴マップ自体を人間が解釈することによって,CNNの判断基準を説明することは困難です.そのような問題を解決するための手法として,人間がCNNの判断を説明できるように特徴マップの情報を画像にマッピングするいくつかの技法があります.</p>
<div class="note">
<ol type="1">
<li><p><code>Grad-CAM(Gradient-weighted Class Activation Mapping)</code>
Grad-CAMは, 最終的な予測クラスに対する勾配情報を, CNNの中間層(通常は最後の畳み込み層)における特徴マップに結びつけることで,画像のどの領域が最もクラス識別に寄与しているかを可視化する手法です.
具体的には,対象クラスに対する損失の勾配を特徴マップに逆伝播させ,各チャネルごとの重みを算出し, その重みを特徴マップ上で合計することで,元画像上にクラス特有の関心領域を示すヒートマップを得ます.これにより,ネットワークが最終判断の際に注目した入力画像内の箇所が視覚的に明確になります.</p></li>
<li><p><code>Guided Backpropagation</code>
Guided Backpropagationは,ネットワーク内部の勾配情報を「正方向のみ」通過できるように制約することで, 入力画像に対してどの画素が予測へ大きく寄与しているかを可視化する手法です. これにより, ネットワーク内部を通る勾配経路を強制的に正の影響のみ残すため,予測クラスを支持する特徴に焦点を当てられます.</p></li>
<li><p><code>Guided Grad CAM</code>
Grad-CAMとGuided Backpropagationを組み合わせた手法です. CNNモデルが出力した予測に対し, どのピクセルがどの程度そのクラス予測に貢献しているのかをより詳細かつ直感的に可視化することを目指した手法となります.</p></li>
</ol>
</div>
<p>ここでは10sと60sに限定して,これらの手法を実行してみましょう.</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="co">#------------------------------------------------------------------</span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a><span class="co"># Grad-CAM, Guided Backprop, Guided Grad-CAM の実行 (10s, 60sに限定)</span></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a><span class="co">#------------------------------------------------------------------</span></span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> cv2</span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true" tabindex="-1"></a><span class="co"># 対象クラスIDとクラス名</span></span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true" tabindex="-1"></a>target_cam_classes <span class="op">=</span> {<span class="dv">0</span>:<span class="st">&#39;10s&#39;</span>, <span class="dv">5</span>:<span class="st">&#39;60s&#39;</span>}</span>
<span id="cb27-8"><a href="#cb27-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-9"><a href="#cb27-9" aria-hidden="true" tabindex="-1"></a><span class="co"># valデータからサンプル画像を取得</span></span>
<span id="cb27-10"><a href="#cb27-10" aria-hidden="true" tabindex="-1"></a>base_val_dir <span class="op">=</span> os.path.join(data_dir, <span class="st">&#39;val&#39;</span>)</span>
<span id="cb27-11"><a href="#cb27-11" aria-hidden="true" tabindex="-1"></a>sample_images <span class="op">=</span> {}</span>
<span id="cb27-12"><a href="#cb27-12" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> cls_id, cls_name <span class="kw">in</span> target_cam_classes.items():</span>
<span id="cb27-13"><a href="#cb27-13" aria-hidden="true" tabindex="-1"></a>    cls_dir <span class="op">=</span> os.path.join(base_val_dir, cls_name)</span>
<span id="cb27-14"><a href="#cb27-14" aria-hidden="true" tabindex="-1"></a>    img_name <span class="op">=</span> os.listdir(cls_dir)[<span class="dv">0</span>]</span>
<span id="cb27-15"><a href="#cb27-15" aria-hidden="true" tabindex="-1"></a>    img_path <span class="op">=</span> os.path.join(cls_dir, img_name)</span>
<span id="cb27-16"><a href="#cb27-16" aria-hidden="true" tabindex="-1"></a>    sample_images[cls_id] <span class="op">=</span> img_path</span>
<span id="cb27-17"><a href="#cb27-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-18"><a href="#cb27-18" aria-hidden="true" tabindex="-1"></a><span class="co"># Grad-CAM用フック設定</span></span>
<span id="cb27-19"><a href="#cb27-19" aria-hidden="true" tabindex="-1"></a>target_layer <span class="op">=</span> model.features[<span class="op">-</span><span class="dv">1</span>]</span>
<span id="cb27-20"><a href="#cb27-20" aria-hidden="true" tabindex="-1"></a>features <span class="op">=</span> <span class="va">None</span></span>
<span id="cb27-21"><a href="#cb27-21" aria-hidden="true" tabindex="-1"></a>gradients <span class="op">=</span> <span class="va">None</span></span>
<span id="cb27-22"><a href="#cb27-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-23"><a href="#cb27-23" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> forward_hook(module, <span class="bu">input</span>, output):</span>
<span id="cb27-24"><a href="#cb27-24" aria-hidden="true" tabindex="-1"></a>    <span class="kw">nonlocal</span> features</span>
<span id="cb27-25"><a href="#cb27-25" aria-hidden="true" tabindex="-1"></a>    features <span class="op">=</span> output</span>
<span id="cb27-26"><a href="#cb27-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-27"><a href="#cb27-27" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> backward_hook(module, grad_input, grad_output):</span>
<span id="cb27-28"><a href="#cb27-28" aria-hidden="true" tabindex="-1"></a>    <span class="kw">nonlocal</span> gradients</span>
<span id="cb27-29"><a href="#cb27-29" aria-hidden="true" tabindex="-1"></a>    gradients <span class="op">=</span> grad_output[<span class="dv">0</span>]</span>
<span id="cb27-30"><a href="#cb27-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-31"><a href="#cb27-31" aria-hidden="true" tabindex="-1"></a>forward_h <span class="op">=</span> target_layer.register_forward_hook(forward_hook)</span>
<span id="cb27-32"><a href="#cb27-32" aria-hidden="true" tabindex="-1"></a>backward_h <span class="op">=</span> target_layer.register_full_backward_hook(backward_hook)</span>
<span id="cb27-33"><a href="#cb27-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-34"><a href="#cb27-34" aria-hidden="true" tabindex="-1"></a><span class="co"># Guided Backprop用：ConvNeXtはGELUを使用, そのためGELUに対するGuided Backpropを実装</span></span>
<span id="cb27-35"><a href="#cb27-35" aria-hidden="true" tabindex="-1"></a><span class="co"># 出力が正の部分のみ勾配を通す</span></span>
<span id="cb27-36"><a href="#cb27-36" aria-hidden="true" tabindex="-1"></a>gelu_outputs <span class="op">=</span> {}  <span class="co"># moduleをキーにしてforward出力を保存</span></span>
<span id="cb27-37"><a href="#cb27-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-38"><a href="#cb27-38" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> gelu_forward_hook(module, <span class="bu">input</span>, output):</span>
<span id="cb27-39"><a href="#cb27-39" aria-hidden="true" tabindex="-1"></a>    gelu_outputs[module] <span class="op">=</span> output</span>
<span id="cb27-40"><a href="#cb27-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-41"><a href="#cb27-41" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> gelu_backward_hook(module, grad_input, grad_output):</span>
<span id="cb27-42"><a href="#cb27-42" aria-hidden="true" tabindex="-1"></a>    <span class="co"># grad_input: tuple of gradients wrt input of gelu</span></span>
<span id="cb27-43"><a href="#cb27-43" aria-hidden="true" tabindex="-1"></a>    <span class="co"># grad_output: tuple of gradients wrt output of gelu</span></span>
<span id="cb27-44"><a href="#cb27-44" aria-hidden="true" tabindex="-1"></a>    <span class="co"># guided backprop: 出力が正の位置のみ勾配を通す</span></span>
<span id="cb27-45"><a href="#cb27-45" aria-hidden="true" tabindex="-1"></a>    out <span class="op">=</span> gelu_outputs[module]</span>
<span id="cb27-46"><a href="#cb27-46" aria-hidden="true" tabindex="-1"></a>    <span class="co"># outと同じ形状で, out&gt;0のとこだけ1, それ以外0</span></span>
<span id="cb27-47"><a href="#cb27-47" aria-hidden="true" tabindex="-1"></a>    positive_mask <span class="op">=</span> (out <span class="op">&gt;</span> <span class="dv">0</span>).<span class="bu">float</span>()</span>
<span id="cb27-48"><a href="#cb27-48" aria-hidden="true" tabindex="-1"></a>    <span class="co"># grad_output[0]に対して, positive_maskをかけて負の領域をカット</span></span>
<span id="cb27-49"><a href="#cb27-49" aria-hidden="true" tabindex="-1"></a>    guided_grad <span class="op">=</span> grad_output[<span class="dv">0</span>] <span class="op">*</span> positive_mask</span>
<span id="cb27-50"><a href="#cb27-50" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> (guided_grad,)</span>
<span id="cb27-51"><a href="#cb27-51" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-52"><a href="#cb27-52" aria-hidden="true" tabindex="-1"></a><span class="co"># GELU層にフックを登録</span></span>
<span id="cb27-53"><a href="#cb27-53" aria-hidden="true" tabindex="-1"></a>guided_hooks <span class="op">=</span> []</span>
<span id="cb27-54"><a href="#cb27-54" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> m <span class="kw">in</span> model.modules():</span>
<span id="cb27-55"><a href="#cb27-55" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="bu">isinstance</span>(m, nn.GELU):</span>
<span id="cb27-56"><a href="#cb27-56" aria-hidden="true" tabindex="-1"></a>        fh <span class="op">=</span> m.register_forward_hook(gelu_forward_hook)</span>
<span id="cb27-57"><a href="#cb27-57" aria-hidden="true" tabindex="-1"></a>        bh <span class="op">=</span> m.register_backward_hook(gelu_backward_hook)</span>
<span id="cb27-58"><a href="#cb27-58" aria-hidden="true" tabindex="-1"></a>        guided_hooks.append(fh)</span>
<span id="cb27-59"><a href="#cb27-59" aria-hidden="true" tabindex="-1"></a>        guided_hooks.append(bh)</span>
<span id="cb27-60"><a href="#cb27-60" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-61"><a href="#cb27-61" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> preprocess_image(img_path):</span>
<span id="cb27-62"><a href="#cb27-62" aria-hidden="true" tabindex="-1"></a>    img <span class="op">=</span> Image.<span class="bu">open</span>(img_path).convert(<span class="st">&#39;RGB&#39;</span>)</span>
<span id="cb27-63"><a href="#cb27-63" aria-hidden="true" tabindex="-1"></a>    img <span class="op">=</span> img.resize((<span class="dv">224</span>, <span class="dv">224</span>))</span>
<span id="cb27-64"><a href="#cb27-64" aria-hidden="true" tabindex="-1"></a>    img_tensor <span class="op">=</span> data_transforms[<span class="st">&#39;val&#39;</span>](img).unsqueeze(<span class="dv">0</span>).to(device)</span>
<span id="cb27-65"><a href="#cb27-65" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> img, img_tensor</span>
<span id="cb27-66"><a href="#cb27-66" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-67"><a href="#cb27-67" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> generate_gradcam():</span>
<span id="cb27-68"><a href="#cb27-68" aria-hidden="true" tabindex="-1"></a>    pooled_gradients <span class="op">=</span> torch.mean(gradients, dim<span class="op">=</span>[<span class="dv">0</span>,<span class="dv">2</span>,<span class="dv">3</span>])</span>
<span id="cb27-69"><a href="#cb27-69" aria-hidden="true" tabindex="-1"></a>    cam <span class="op">=</span> torch.zeros(features.shape[<span class="dv">2</span>:], dtype<span class="op">=</span>features.dtype, device<span class="op">=</span>features.device)</span>
<span id="cb27-70"><a href="#cb27-70" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(features.shape[<span class="dv">1</span>]):</span>
<span id="cb27-71"><a href="#cb27-71" aria-hidden="true" tabindex="-1"></a>        cam <span class="op">+=</span> pooled_gradients[i] <span class="op">*</span> features[<span class="dv">0</span>,i,:,:]</span>
<span id="cb27-72"><a href="#cb27-72" aria-hidden="true" tabindex="-1"></a>    cam <span class="op">=</span> cam.cpu().data.numpy()</span>
<span id="cb27-73"><a href="#cb27-73" aria-hidden="true" tabindex="-1"></a>    cam <span class="op">=</span> np.maximum(cam, <span class="dv">0</span>)</span>
<span id="cb27-74"><a href="#cb27-74" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> np.<span class="bu">max</span>(cam) <span class="op">!=</span> <span class="dv">0</span>:</span>
<span id="cb27-75"><a href="#cb27-75" aria-hidden="true" tabindex="-1"></a>        cam <span class="op">=</span> cam <span class="op">/</span> np.<span class="bu">max</span>(cam)</span>
<span id="cb27-76"><a href="#cb27-76" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> cam</span>
<span id="cb27-77"><a href="#cb27-77" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-78"><a href="#cb27-78" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> do_guided_backprop(model, img_tensor, target_class):</span>
<span id="cb27-79"><a href="#cb27-79" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 勾配リセット</span></span>
<span id="cb27-80"><a href="#cb27-80" aria-hidden="true" tabindex="-1"></a>    model.zero_grad()</span>
<span id="cb27-81"><a href="#cb27-81" aria-hidden="true" tabindex="-1"></a>    img_tensor.grad <span class="op">=</span> <span class="va">None</span></span>
<span id="cb27-82"><a href="#cb27-82" aria-hidden="true" tabindex="-1"></a>    <span class="co"># forward</span></span>
<span id="cb27-83"><a href="#cb27-83" aria-hidden="true" tabindex="-1"></a>    output <span class="op">=</span> model(img_tensor)</span>
<span id="cb27-84"><a href="#cb27-84" aria-hidden="true" tabindex="-1"></a>    loss <span class="op">=</span> output[<span class="dv">0</span>, target_class]</span>
<span id="cb27-85"><a href="#cb27-85" aria-hidden="true" tabindex="-1"></a>    model.zero_grad()</span>
<span id="cb27-86"><a href="#cb27-86" aria-hidden="true" tabindex="-1"></a>    loss.backward()</span>
<span id="cb27-87"><a href="#cb27-87" aria-hidden="true" tabindex="-1"></a>    guided_grad <span class="op">=</span> img_tensor.grad.data[<span class="dv">0</span>].cpu().numpy().transpose(<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">0</span>)</span>
<span id="cb27-88"><a href="#cb27-88" aria-hidden="true" tabindex="-1"></a>    guided_grad <span class="op">=</span> guided_grad <span class="op">-</span> guided_grad.<span class="bu">min</span>()</span>
<span id="cb27-89"><a href="#cb27-89" aria-hidden="true" tabindex="-1"></a>    guided_grad <span class="op">=</span> guided_grad <span class="op">/</span> (guided_grad.<span class="bu">max</span>() <span class="op">+</span> <span class="fl">1e-8</span>)</span>
<span id="cb27-90"><a href="#cb27-90" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> guided_grad</span>
<span id="cb27-91"><a href="#cb27-91" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-92"><a href="#cb27-92" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> apply_colormap_on_image(org_img, cam, alpha<span class="op">=</span><span class="fl">0.5</span>):</span>
<span id="cb27-93"><a href="#cb27-93" aria-hidden="true" tabindex="-1"></a>    H_org, W_org, _ <span class="op">=</span> org_img.shape</span>
<span id="cb27-94"><a href="#cb27-94" aria-hidden="true" tabindex="-1"></a>    cam_resized <span class="op">=</span> cv2.resize(cam, (W_org, H_org))</span>
<span id="cb27-95"><a href="#cb27-95" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-96"><a href="#cb27-96" aria-hidden="true" tabindex="-1"></a>    heatmap <span class="op">=</span> cv2.applyColorMap(np.uint8(<span class="dv">255</span><span class="op">*</span>cam_resized), cv2.COLORMAP_JET)</span>
<span id="cb27-97"><a href="#cb27-97" aria-hidden="true" tabindex="-1"></a>    heatmap <span class="op">=</span> np.float32(heatmap)<span class="op">/</span><span class="fl">255.0</span></span>
<span id="cb27-98"><a href="#cb27-98" aria-hidden="true" tabindex="-1"></a>    org_img <span class="op">=</span> np.float32(org_img)<span class="op">/</span><span class="fl">255.0</span></span>
<span id="cb27-99"><a href="#cb27-99" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-100"><a href="#cb27-100" aria-hidden="true" tabindex="-1"></a>    cam_img <span class="op">=</span> heatmap <span class="op">*</span> alpha <span class="op">+</span> org_img</span>
<span id="cb27-101"><a href="#cb27-101" aria-hidden="true" tabindex="-1"></a>    cam_img <span class="op">=</span> cam_img <span class="op">/</span> np.<span class="bu">max</span>(cam_img)</span>
<span id="cb27-102"><a href="#cb27-102" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> np.uint8(<span class="dv">255</span><span class="op">*</span>cam_img)</span>
<span id="cb27-103"><a href="#cb27-103" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-104"><a href="#cb27-104" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> guided_gradcam(guided_grad, cam):</span>
<span id="cb27-105"><a href="#cb27-105" aria-hidden="true" tabindex="-1"></a>    H, W, _ <span class="op">=</span> guided_grad.shape</span>
<span id="cb27-106"><a href="#cb27-106" aria-hidden="true" tabindex="-1"></a>    cam_resized <span class="op">=</span> cv2.resize(cam, (W, H))</span>
<span id="cb27-107"><a href="#cb27-107" aria-hidden="true" tabindex="-1"></a>    guided_gradcam <span class="op">=</span> guided_grad <span class="op">*</span> cam_resized[..., np.newaxis]</span>
<span id="cb27-108"><a href="#cb27-108" aria-hidden="true" tabindex="-1"></a>    guided_gradcam <span class="op">=</span> guided_gradcam <span class="op">-</span> guided_gradcam.<span class="bu">min</span>()</span>
<span id="cb27-109"><a href="#cb27-109" aria-hidden="true" tabindex="-1"></a>    guided_gradcam <span class="op">=</span> guided_gradcam <span class="op">/</span> (guided_gradcam.<span class="bu">max</span>()<span class="op">+</span><span class="fl">1e-8</span>)</span>
<span id="cb27-110"><a href="#cb27-110" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> guided_gradcam</span>
<span id="cb27-111"><a href="#cb27-111" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-112"><a href="#cb27-112" aria-hidden="true" tabindex="-1"></a>gradcam_dir <span class="op">=</span> <span class="st">&#39;data/result/gradcam_guided&#39;</span></span>
<span id="cb27-113"><a href="#cb27-113" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="kw">not</span> os.path.exists(gradcam_dir):</span>
<span id="cb27-114"><a href="#cb27-114" aria-hidden="true" tabindex="-1"></a>    os.makedirs(gradcam_dir)</span>
<span id="cb27-115"><a href="#cb27-115" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-116"><a href="#cb27-116" aria-hidden="true" tabindex="-1"></a>model.<span class="bu">eval</span>()</span>
<span id="cb27-117"><a href="#cb27-117" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> PIL <span class="im">import</span> Image</span>
<span id="cb27-118"><a href="#cb27-118" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> cls_id, img_path <span class="kw">in</span> sample_images.items():</span>
<span id="cb27-119"><a href="#cb27-119" aria-hidden="true" tabindex="-1"></a>    <span class="co"># original画像読み込み</span></span>
<span id="cb27-120"><a href="#cb27-120" aria-hidden="true" tabindex="-1"></a>    org_img, img_tensor <span class="op">=</span> preprocess_image(img_path)</span>
<span id="cb27-121"><a href="#cb27-121" aria-hidden="true" tabindex="-1"></a>    org_img_np <span class="op">=</span> np.array(org_img)  <span class="co"># RGB, 224x224</span></span>
<span id="cb27-122"><a href="#cb27-122" aria-hidden="true" tabindex="-1"></a>    img_tensor.requires_grad <span class="op">=</span> <span class="va">True</span></span>
<span id="cb27-123"><a href="#cb27-123" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-124"><a href="#cb27-124" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Grad-CAM</span></span>
<span id="cb27-125"><a href="#cb27-125" aria-hidden="true" tabindex="-1"></a>    model.zero_grad()</span>
<span id="cb27-126"><a href="#cb27-126" aria-hidden="true" tabindex="-1"></a>    output <span class="op">=</span> model(img_tensor)</span>
<span id="cb27-127"><a href="#cb27-127" aria-hidden="true" tabindex="-1"></a>    target_score <span class="op">=</span> output[<span class="dv">0</span>, cls_id]</span>
<span id="cb27-128"><a href="#cb27-128" aria-hidden="true" tabindex="-1"></a>    target_score.backward()</span>
<span id="cb27-129"><a href="#cb27-129" aria-hidden="true" tabindex="-1"></a>    cam <span class="op">=</span> generate_gradcam()</span>
<span id="cb27-130"><a href="#cb27-130" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-131"><a href="#cb27-131" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Grad-CAM画像</span></span>
<span id="cb27-132"><a href="#cb27-132" aria-hidden="true" tabindex="-1"></a>    org_img_cv <span class="op">=</span> org_img_np[:,:,::<span class="op">-</span><span class="dv">1</span>].copy()</span>
<span id="cb27-133"><a href="#cb27-133" aria-hidden="true" tabindex="-1"></a>    gradcam_img <span class="op">=</span> apply_colormap_on_image(org_img_cv, cam)</span>
<span id="cb27-134"><a href="#cb27-134" aria-hidden="true" tabindex="-1"></a>    gradcam_img_rgb <span class="op">=</span> gradcam_img[:,:,::<span class="op">-</span><span class="dv">1</span>]</span>
<span id="cb27-135"><a href="#cb27-135" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-136"><a href="#cb27-136" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Guided Backprop</span></span>
<span id="cb27-137"><a href="#cb27-137" aria-hidden="true" tabindex="-1"></a>    gb <span class="op">=</span> do_guided_backprop(model, img_tensor, cls_id) <span class="co"># 0-1 float</span></span>
<span id="cb27-138"><a href="#cb27-138" aria-hidden="true" tabindex="-1"></a>    g_gradcam <span class="op">=</span> guided_gradcam(gb, cam) <span class="co"># 0-1 float</span></span>
<span id="cb27-139"><a href="#cb27-139" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-140"><a href="#cb27-140" aria-hidden="true" tabindex="-1"></a>    original_uint8 <span class="op">=</span> org_img_np</span>
<span id="cb27-141"><a href="#cb27-141" aria-hidden="true" tabindex="-1"></a>    gradcam_uint8 <span class="op">=</span> gradcam_img_rgb</span>
<span id="cb27-142"><a href="#cb27-142" aria-hidden="true" tabindex="-1"></a>    gb_uint8 <span class="op">=</span> (gb<span class="op">*</span><span class="dv">255</span>).astype(np.uint8)</span>
<span id="cb27-143"><a href="#cb27-143" aria-hidden="true" tabindex="-1"></a>    g_gradcam_uint8 <span class="op">=</span> (g_gradcam<span class="op">*</span><span class="dv">255</span>).astype(np.uint8)</span>
<span id="cb27-144"><a href="#cb27-144" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-145"><a href="#cb27-145" aria-hidden="true" tabindex="-1"></a>    combined <span class="op">=</span> np.hstack([original_uint8, gradcam_uint8, gb_uint8, g_gradcam_uint8])</span>
<span id="cb27-146"><a href="#cb27-146" aria-hidden="true" tabindex="-1"></a>    plt.imsave(os.path.join(gradcam_dir, <span class="ss">f&#39;class_</span><span class="sc">{</span>cls_id<span class="sc">}</span><span class="ss">_combined.png&#39;</span>), combined)</span>
<span id="cb27-147"><a href="#cb27-147" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-148"><a href="#cb27-148" aria-hidden="true" tabindex="-1"></a>forward_h.remove()</span>
<span id="cb27-149"><a href="#cb27-149" aria-hidden="true" tabindex="-1"></a>backward_h.remove()</span>
<span id="cb27-150"><a href="#cb27-150" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> h <span class="kw">in</span> guided_hooks:</span>
<span id="cb27-151"><a href="#cb27-151" aria-hidden="true" tabindex="-1"></a>    h.remove()</span>
<span id="cb27-152"><a href="#cb27-152" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-153"><a href="#cb27-153" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;Grad-CAM, Guided Backprop, Guided Grad-CAM 完了&quot;</span>)</span></code></pre></div>
<p>10代の写真と,60代の写真を適当に選んで,手法を適用した画像が以下になります.左から元画像,<code>Grad-CAM</code>,<code>Guided Backpropagation</code>,<code>Guided Grad CAM</code>の順に結合されています.</p>
<p><img src="/images/ch14-gradcam_10s.png" /></p>
<p><img src="/images/ch14-gradcam_60s.png" /></p>
<div class="warn">
<p><code>Guided Backpropagation</code>が上手くできていませんが,これは学習が上手くいっていない(6割程度の正答率であること)によるか,コードのミスによるか判断できていません.後ほど確認します.</p>
</div>
<p>この結果を見ると,今回の学習済みモデルは,10代では鼻や首,60代では画像の顎や首部分に注目していることが分かります. 現実世界でも女性の年齢などを判断する際に首を見るというのはよく聞く話なので,それなりに説得力がありそうです.
実際の研究では,多くの画像を比較してよりモデルが何に注目しているかを分析することで,多くの示唆を得ることができます.</p>
<p>これまでのコードの全体は以下になります.
特徴マップ以降のために毎回学習するのは大変なので,初回以降は学習をスキップして保存された重みを利用するように分岐が入っています.</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.pyplot <span class="im">as</span> plt</span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> seaborn <span class="im">as</span> sns</span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> random</span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-8"><a href="#cb28-8" aria-hidden="true" tabindex="-1"></a><span class="co"># 次元削減用</span></span>
<span id="cb28-9"><a href="#cb28-9" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.manifold <span class="im">import</span> TSNE</span>
<span id="cb28-10"><a href="#cb28-10" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.decomposition <span class="im">import</span> PCA</span>
<span id="cb28-11"><a href="#cb28-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-12"><a href="#cb28-12" aria-hidden="true" tabindex="-1"></a><span class="co"># CNN用</span></span>
<span id="cb28-13"><a href="#cb28-13" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> torch</span>
<span id="cb28-14"><a href="#cb28-14" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> torch.nn <span class="im">as</span> nn</span>
<span id="cb28-15"><a href="#cb28-15" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> torch.optim <span class="im">as</span> optim</span>
<span id="cb28-16"><a href="#cb28-16" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> torchvision <span class="im">import</span> datasets, transforms, models</span>
<span id="cb28-17"><a href="#cb28-17" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> torch.utils.data <span class="im">import</span> DataLoader</span>
<span id="cb28-18"><a href="#cb28-18" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> torchvision.models <span class="im">import</span> ConvNeXt_Tiny_Weights</span>
<span id="cb28-19"><a href="#cb28-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-20"><a href="#cb28-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-21"><a href="#cb28-21" aria-hidden="true" tabindex="-1"></a><span class="co">#学習した特徴量を抽出する</span></span>
<span id="cb28-22"><a href="#cb28-22" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> extract_features(model, dataloader, device):</span>
<span id="cb28-23"><a href="#cb28-23" aria-hidden="true" tabindex="-1"></a>    model.<span class="bu">eval</span>()</span>
<span id="cb28-24"><a href="#cb28-24" aria-hidden="true" tabindex="-1"></a>    features <span class="op">=</span> []</span>
<span id="cb28-25"><a href="#cb28-25" aria-hidden="true" tabindex="-1"></a>    labels_list <span class="op">=</span> []</span>
<span id="cb28-26"><a href="#cb28-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-27"><a href="#cb28-27" aria-hidden="true" tabindex="-1"></a>    <span class="cf">with</span> torch.no_grad():</span>
<span id="cb28-28"><a href="#cb28-28" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> inputs, labels <span class="kw">in</span> dataloader:</span>
<span id="cb28-29"><a href="#cb28-29" aria-hidden="true" tabindex="-1"></a>            inputs <span class="op">=</span> inputs.to(device)</span>
<span id="cb28-30"><a href="#cb28-30" aria-hidden="true" tabindex="-1"></a>            labels <span class="op">=</span> labels.to(device)</span>
<span id="cb28-31"><a href="#cb28-31" aria-hidden="true" tabindex="-1"></a>            outputs <span class="op">=</span> model(inputs)</span>
<span id="cb28-32"><a href="#cb28-32" aria-hidden="true" tabindex="-1"></a>            features.append(outputs.cpu())</span>
<span id="cb28-33"><a href="#cb28-33" aria-hidden="true" tabindex="-1"></a>            labels_list.append(labels.cpu())</span>
<span id="cb28-34"><a href="#cb28-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-35"><a href="#cb28-35" aria-hidden="true" tabindex="-1"></a>    features <span class="op">=</span> torch.cat(features, dim<span class="op">=</span><span class="dv">0</span>)</span>
<span id="cb28-36"><a href="#cb28-36" aria-hidden="true" tabindex="-1"></a>    labels <span class="op">=</span> torch.cat(labels_list, dim<span class="op">=</span><span class="dv">0</span>)</span>
<span id="cb28-37"><a href="#cb28-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-38"><a href="#cb28-38" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> features, labels</span>
<span id="cb28-39"><a href="#cb28-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-40"><a href="#cb28-40" aria-hidden="true" tabindex="-1"></a><span class="co"># t-SNEによる次元圧縮と散布図の描画</span></span>
<span id="cb28-41"><a href="#cb28-41" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> plot_tsne(train_features, train_labels, path):</span>
<span id="cb28-42"><a href="#cb28-42" aria-hidden="true" tabindex="-1"></a>    <span class="co"># train_featuresとtrain_labelsをnumpyに変換</span></span>
<span id="cb28-43"><a href="#cb28-43" aria-hidden="true" tabindex="-1"></a>    features_np <span class="op">=</span> train_features.numpy()</span>
<span id="cb28-44"><a href="#cb28-44" aria-hidden="true" tabindex="-1"></a>    labels_np <span class="op">=</span> train_labels.numpy()</span>
<span id="cb28-45"><a href="#cb28-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-46"><a href="#cb28-46" aria-hidden="true" tabindex="-1"></a>    <span class="co"># t-SNEによる次元圧縮 (2次元)</span></span>
<span id="cb28-47"><a href="#cb28-47" aria-hidden="true" tabindex="-1"></a>    tsne <span class="op">=</span> TSNE(n_components<span class="op">=</span><span class="dv">2</span>, random_state<span class="op">=</span><span class="dv">42</span>)</span>
<span id="cb28-48"><a href="#cb28-48" aria-hidden="true" tabindex="-1"></a>    features_2d <span class="op">=</span> tsne.fit_transform(features_np)</span>
<span id="cb28-49"><a href="#cb28-49" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-50"><a href="#cb28-50" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 散布図の描画</span></span>
<span id="cb28-51"><a href="#cb28-51" aria-hidden="true" tabindex="-1"></a>    plt.figure(figsize<span class="op">=</span>(<span class="dv">10</span>, <span class="dv">8</span>))</span>
<span id="cb28-52"><a href="#cb28-52" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-53"><a href="#cb28-53" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 各ラベルに基づいて色分けしてプロット</span></span>
<span id="cb28-54"><a href="#cb28-54" aria-hidden="true" tabindex="-1"></a>    num_classes <span class="op">=</span> <span class="bu">len</span>(np.unique(labels_np))  <span class="co"># クラス数を取得</span></span>
<span id="cb28-55"><a href="#cb28-55" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> label <span class="kw">in</span> np.unique(labels_np):</span>
<span id="cb28-56"><a href="#cb28-56" aria-hidden="true" tabindex="-1"></a>        indices <span class="op">=</span> np.where(labels_np <span class="op">==</span> label)</span>
<span id="cb28-57"><a href="#cb28-57" aria-hidden="true" tabindex="-1"></a>        plt.scatter(features_2d[indices, <span class="dv">0</span>]</span>
<span id="cb28-58"><a href="#cb28-58" aria-hidden="true" tabindex="-1"></a>                   ,features_2d[indices, <span class="dv">1</span>]</span>
<span id="cb28-59"><a href="#cb28-59" aria-hidden="true" tabindex="-1"></a>                   ,label<span class="op">=</span><span class="ss">f&#39;</span><span class="sc">{</span>(label <span class="op">+</span> <span class="dv">1</span>) <span class="op">*</span> <span class="dv">10</span><span class="sc">}</span><span class="ss">s&#39;</span></span>
<span id="cb28-60"><a href="#cb28-60" aria-hidden="true" tabindex="-1"></a>                   ,alpha<span class="op">=</span><span class="fl">0.6</span>)</span>
<span id="cb28-61"><a href="#cb28-61" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-62"><a href="#cb28-62" aria-hidden="true" tabindex="-1"></a>    plt.title(<span class="st">&#39;t-SNE of Train Features&#39;</span>)</span>
<span id="cb28-63"><a href="#cb28-63" aria-hidden="true" tabindex="-1"></a>    plt.xlabel(<span class="st">&#39;t-SNE Component 1&#39;</span>)</span>
<span id="cb28-64"><a href="#cb28-64" aria-hidden="true" tabindex="-1"></a>    plt.ylabel(<span class="st">&#39;t-SNE Component 2&#39;</span>)</span>
<span id="cb28-65"><a href="#cb28-65" aria-hidden="true" tabindex="-1"></a>    plt.legend(title<span class="op">=</span><span class="st">&quot;Age Group&quot;</span>)</span>
<span id="cb28-66"><a href="#cb28-66" aria-hidden="true" tabindex="-1"></a>    plt.grid(<span class="va">True</span>)</span>
<span id="cb28-67"><a href="#cb28-67" aria-hidden="true" tabindex="-1"></a>    plt.savefig(path)</span>
<span id="cb28-68"><a href="#cb28-68" aria-hidden="true" tabindex="-1"></a>    plt.close()</span>
<span id="cb28-69"><a href="#cb28-69" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-70"><a href="#cb28-70" aria-hidden="true" tabindex="-1"></a><span class="co"># PCAによる次元圧縮と散布図の描画</span></span>
<span id="cb28-71"><a href="#cb28-71" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> plot_pca(train_features, train_labels, path):</span>
<span id="cb28-72"><a href="#cb28-72" aria-hidden="true" tabindex="-1"></a>    <span class="co"># train_featuresとtrain_labelsをnumpyに変換</span></span>
<span id="cb28-73"><a href="#cb28-73" aria-hidden="true" tabindex="-1"></a>    features_np <span class="op">=</span> train_features.numpy()</span>
<span id="cb28-74"><a href="#cb28-74" aria-hidden="true" tabindex="-1"></a>    labels_np <span class="op">=</span> train_labels.numpy()</span>
<span id="cb28-75"><a href="#cb28-75" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-76"><a href="#cb28-76" aria-hidden="true" tabindex="-1"></a>    <span class="co"># PCAによる次元圧縮 (2次元)</span></span>
<span id="cb28-77"><a href="#cb28-77" aria-hidden="true" tabindex="-1"></a>    pca <span class="op">=</span> PCA(n_components<span class="op">=</span><span class="dv">2</span>)</span>
<span id="cb28-78"><a href="#cb28-78" aria-hidden="true" tabindex="-1"></a>    features_2d <span class="op">=</span> pca.fit_transform(features_np)</span>
<span id="cb28-79"><a href="#cb28-79" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-80"><a href="#cb28-80" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 散布図の描画</span></span>
<span id="cb28-81"><a href="#cb28-81" aria-hidden="true" tabindex="-1"></a>    plt.figure(figsize<span class="op">=</span>(<span class="dv">10</span>, <span class="dv">8</span>))</span>
<span id="cb28-82"><a href="#cb28-82" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-83"><a href="#cb28-83" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 各ラベルに基づいて色分けしてプロット</span></span>
<span id="cb28-84"><a href="#cb28-84" aria-hidden="true" tabindex="-1"></a>    num_classes <span class="op">=</span> <span class="bu">len</span>(np.unique(labels_np))  <span class="co"># クラス数を取得</span></span>
<span id="cb28-85"><a href="#cb28-85" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> label <span class="kw">in</span> np.unique(labels_np):</span>
<span id="cb28-86"><a href="#cb28-86" aria-hidden="true" tabindex="-1"></a>        indices <span class="op">=</span> np.where(labels_np <span class="op">==</span> label)</span>
<span id="cb28-87"><a href="#cb28-87" aria-hidden="true" tabindex="-1"></a>        plt.scatter(features_2d[indices, <span class="dv">0</span>]</span>
<span id="cb28-88"><a href="#cb28-88" aria-hidden="true" tabindex="-1"></a>                   ,features_2d[indices, <span class="dv">1</span>]</span>
<span id="cb28-89"><a href="#cb28-89" aria-hidden="true" tabindex="-1"></a>                   ,label<span class="op">=</span><span class="ss">f&#39;</span><span class="sc">{</span>(label <span class="op">+</span> <span class="dv">1</span>) <span class="op">*</span> <span class="dv">10</span><span class="sc">}</span><span class="ss">s&#39;</span></span>
<span id="cb28-90"><a href="#cb28-90" aria-hidden="true" tabindex="-1"></a>                   ,alpha<span class="op">=</span><span class="fl">0.6</span>)</span>
<span id="cb28-91"><a href="#cb28-91" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-92"><a href="#cb28-92" aria-hidden="true" tabindex="-1"></a>    plt.title(<span class="st">&#39;PCA of Train Features&#39;</span>)</span>
<span id="cb28-93"><a href="#cb28-93" aria-hidden="true" tabindex="-1"></a>    plt.xlabel(<span class="st">&#39;PCA Component 1&#39;</span>)</span>
<span id="cb28-94"><a href="#cb28-94" aria-hidden="true" tabindex="-1"></a>    plt.ylabel(<span class="st">&#39;PCA Component 2&#39;</span>)</span>
<span id="cb28-95"><a href="#cb28-95" aria-hidden="true" tabindex="-1"></a>    plt.legend(title<span class="op">=</span><span class="st">&quot;Age Group&quot;</span>)</span>
<span id="cb28-96"><a href="#cb28-96" aria-hidden="true" tabindex="-1"></a>    plt.grid(<span class="va">True</span>)</span>
<span id="cb28-97"><a href="#cb28-97" aria-hidden="true" tabindex="-1"></a>    plt.savefig(path)</span>
<span id="cb28-98"><a href="#cb28-98" aria-hidden="true" tabindex="-1"></a>    plt.close()</span>
<span id="cb28-99"><a href="#cb28-99" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-100"><a href="#cb28-100" aria-hidden="true" tabindex="-1"></a><span class="co"># 乱数シードを設定</span></span>
<span id="cb28-101"><a href="#cb28-101" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> set_seed(seed):</span>
<span id="cb28-102"><a href="#cb28-102" aria-hidden="true" tabindex="-1"></a>    torch.manual_seed(seed)</span>
<span id="cb28-103"><a href="#cb28-103" aria-hidden="true" tabindex="-1"></a>    np.random.seed(seed)              <span class="co"># Numpy用の乱数シードを設定</span></span>
<span id="cb28-104"><a href="#cb28-104" aria-hidden="true" tabindex="-1"></a>    random.seed(seed)                 <span class="co"># Pythonの標準乱数シードを設定</span></span>
<span id="cb28-105"><a href="#cb28-105" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-106"><a href="#cb28-106" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 再現性を完全に保証するために以下も設定（ただし、若干のパフォーマンス低下の可能性あり）</span></span>
<span id="cb28-107"><a href="#cb28-107" aria-hidden="true" tabindex="-1"></a>    torch.backends.cudnn.deterministic <span class="op">=</span> <span class="va">True</span></span>
<span id="cb28-108"><a href="#cb28-108" aria-hidden="true" tabindex="-1"></a>    torch.backends.cudnn.benchmark <span class="op">=</span> <span class="va">False</span></span>
<span id="cb28-109"><a href="#cb28-109" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-110"><a href="#cb28-110" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main():</span>
<span id="cb28-111"><a href="#cb28-111" aria-hidden="true" tabindex="-1"></a>    <span class="co"># シードを設定する</span></span>
<span id="cb28-112"><a href="#cb28-112" aria-hidden="true" tabindex="-1"></a>    <span class="co">#(自分の研究でやる場合は以下の行は消しても問題ない.)</span></span>
<span id="cb28-113"><a href="#cb28-113" aria-hidden="true" tabindex="-1"></a>    set_seed(<span class="dv">2024</span>)</span>
<span id="cb28-114"><a href="#cb28-114" aria-hidden="true" tabindex="-1"></a>    <span class="co"># データのディレクトリ設定</span></span>
<span id="cb28-115"><a href="#cb28-115" aria-hidden="true" tabindex="-1"></a>    data_dir <span class="op">=</span> <span class="st">&#39;data/sorted_images_split&#39;</span></span>
<span id="cb28-116"><a href="#cb28-116" aria-hidden="true" tabindex="-1"></a>    batch_size <span class="op">=</span> <span class="dv">32</span></span>
<span id="cb28-117"><a href="#cb28-117" aria-hidden="true" tabindex="-1"></a>    num_epochs <span class="op">=</span> <span class="dv">5</span></span>
<span id="cb28-118"><a href="#cb28-118" aria-hidden="true" tabindex="-1"></a>    num_classes <span class="op">=</span> <span class="dv">6</span>  <span class="co"># 10代, 20代, ..., 60代</span></span>
<span id="cb28-119"><a href="#cb28-119" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-120"><a href="#cb28-120" aria-hidden="true" tabindex="-1"></a>    <span class="co"># デバイス設定</span></span>
<span id="cb28-121"><a href="#cb28-121" aria-hidden="true" tabindex="-1"></a>    <span class="co">#GPUが利用できる場合はGPUを使う,そうでない場合はCPUを計算に利用します.</span></span>
<span id="cb28-122"><a href="#cb28-122" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> torch.backends.mps.is_available():</span>
<span id="cb28-123"><a href="#cb28-123" aria-hidden="true" tabindex="-1"></a>        device <span class="op">=</span> torch.device(<span class="st">&quot;mps&quot;</span>) <span class="co">#Mac GPU</span></span>
<span id="cb28-124"><a href="#cb28-124" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> torch.cuda.is_available():</span>
<span id="cb28-125"><a href="#cb28-125" aria-hidden="true" tabindex="-1"></a>        device <span class="op">=</span> torch.device(<span class="st">&quot;cuda:0&quot;</span>) <span class="co">#Win GPU</span></span>
<span id="cb28-126"><a href="#cb28-126" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb28-127"><a href="#cb28-127" aria-hidden="true" tabindex="-1"></a>        device <span class="op">=</span> torch.device(<span class="st">&quot;cpu&quot;</span>) <span class="co">#CPU</span></span>
<span id="cb28-128"><a href="#cb28-128" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-129"><a href="#cb28-129" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f&#39;Using device: </span><span class="sc">{</span>device<span class="sc">}</span><span class="ss">&#39;</span>)</span>
<span id="cb28-130"><a href="#cb28-130" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-131"><a href="#cb28-131" aria-hidden="true" tabindex="-1"></a>    <span class="co"># モデル定義</span></span>
<span id="cb28-132"><a href="#cb28-132" aria-hidden="true" tabindex="-1"></a>    <span class="co"># ConvNextモデルの読み込みとカスタマイズ</span></span>
<span id="cb28-133"><a href="#cb28-133" aria-hidden="true" tabindex="-1"></a>    weights <span class="op">=</span> ConvNeXt_Tiny_Weights.IMAGENET1K_V1  <span class="co"># 最新の重みを指定</span></span>
<span id="cb28-134"><a href="#cb28-134" aria-hidden="true" tabindex="-1"></a>    model <span class="op">=</span> models.convnext_tiny(weights<span class="op">=</span>weights)  <span class="co"># ConvNextの小さいモデルを使用</span></span>
<span id="cb28-135"><a href="#cb28-135" aria-hidden="true" tabindex="-1"></a>    <span class="co">#モデル分類層の最終層(第3層(0,1,2番目))の入力特徴量を取得</span></span>
<span id="cb28-136"><a href="#cb28-136" aria-hidden="true" tabindex="-1"></a>    num_ftrs <span class="op">=</span> model.classifier[<span class="dv">2</span>].in_features</span>
<span id="cb28-137"><a href="#cb28-137" aria-hidden="true" tabindex="-1"></a>    <span class="co">#既に学習されたモデルではクラス数がことなるので ,入力特徴量の数(num_ftrs)はそのまま</span></span>
<span id="cb28-138"><a href="#cb28-138" aria-hidden="true" tabindex="-1"></a>    <span class="co">#出力をクラス数に変更</span></span>
<span id="cb28-139"><a href="#cb28-139" aria-hidden="true" tabindex="-1"></a>    model.classifier[<span class="dv">2</span>] <span class="op">=</span> nn.Linear(num_ftrs, num_classes)</span>
<span id="cb28-140"><a href="#cb28-140" aria-hidden="true" tabindex="-1"></a>    model <span class="op">=</span> model.to(device)</span>
<span id="cb28-141"><a href="#cb28-141" aria-hidden="true" tabindex="-1"></a>    <span class="co"># データ変換（前処理）</span></span>
<span id="cb28-142"><a href="#cb28-142" aria-hidden="true" tabindex="-1"></a>    data_transforms <span class="op">=</span> {</span>
<span id="cb28-143"><a href="#cb28-143" aria-hidden="true" tabindex="-1"></a>        <span class="st">&#39;train&#39;</span>: transforms.Compose([</span>
<span id="cb28-144"><a href="#cb28-144" aria-hidden="true" tabindex="-1"></a>            transforms.Resize((<span class="dv">224</span>, <span class="dv">224</span>)),     <span class="co">#画像のリサイズ</span></span>
<span id="cb28-145"><a href="#cb28-145" aria-hidden="true" tabindex="-1"></a>            transforms.RandomHorizontalFlip(), <span class="co">#画像をランダムに反転</span></span>
<span id="cb28-146"><a href="#cb28-146" aria-hidden="true" tabindex="-1"></a>            transforms.ColorJitter(brightness<span class="op">=</span><span class="fl">0.2</span>, contrast<span class="op">=</span><span class="fl">0.2</span>),  <span class="co"># 色調変化</span></span>
<span id="cb28-147"><a href="#cb28-147" aria-hidden="true" tabindex="-1"></a>            transforms.ToTensor(),             <span class="co">#テンソル(多次元配列)に変換</span></span>
<span id="cb28-148"><a href="#cb28-148" aria-hidden="true" tabindex="-1"></a>            transforms.Normalize(mean<span class="op">=</span>[<span class="fl">0.485</span>, <span class="fl">0.456</span>, <span class="fl">0.406</span>]</span>
<span id="cb28-149"><a href="#cb28-149" aria-hidden="true" tabindex="-1"></a>                                ,std<span class="op">=</span>[<span class="fl">0.229</span>, <span class="fl">0.224</span>, <span class="fl">0.225</span>]), <span class="co">#正規化(本来は値を変更する必要あり.</span></span>
<span id="cb28-150"><a href="#cb28-150" aria-hidden="true" tabindex="-1"></a>        ]),</span>
<span id="cb28-151"><a href="#cb28-151" aria-hidden="true" tabindex="-1"></a>        <span class="st">&#39;val&#39;</span>: transforms.Compose([</span>
<span id="cb28-152"><a href="#cb28-152" aria-hidden="true" tabindex="-1"></a>            transforms.Resize((<span class="dv">224</span>, <span class="dv">224</span>)),</span>
<span id="cb28-153"><a href="#cb28-153" aria-hidden="true" tabindex="-1"></a>            transforms.ToTensor(),</span>
<span id="cb28-154"><a href="#cb28-154" aria-hidden="true" tabindex="-1"></a>            transforms.Normalize([<span class="fl">0.485</span>, <span class="fl">0.456</span>, <span class="fl">0.406</span>]</span>
<span id="cb28-155"><a href="#cb28-155" aria-hidden="true" tabindex="-1"></a>                                ,[<span class="fl">0.229</span>, <span class="fl">0.224</span>, <span class="fl">0.225</span>]),</span>
<span id="cb28-156"><a href="#cb28-156" aria-hidden="true" tabindex="-1"></a>        ]),</span>
<span id="cb28-157"><a href="#cb28-157" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb28-158"><a href="#cb28-158" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-159"><a href="#cb28-159" aria-hidden="true" tabindex="-1"></a>    <span class="co"># データセットの読み込み</span></span>
<span id="cb28-160"><a href="#cb28-160" aria-hidden="true" tabindex="-1"></a>    image_datasets <span class="op">=</span> {x: datasets.ImageFolder(os.path.join(data_dir, x),</span>
<span id="cb28-161"><a href="#cb28-161" aria-hidden="true" tabindex="-1"></a>                                              data_transforms[x])</span>
<span id="cb28-162"><a href="#cb28-162" aria-hidden="true" tabindex="-1"></a>                      <span class="cf">for</span> x <span class="kw">in</span> [<span class="st">&#39;train&#39;</span>, <span class="st">&#39;val&#39;</span>]}</span>
<span id="cb28-163"><a href="#cb28-163" aria-hidden="true" tabindex="-1"></a>    dataloaders <span class="op">=</span> {x: DataLoader(image_datasets[x]</span>
<span id="cb28-164"><a href="#cb28-164" aria-hidden="true" tabindex="-1"></a>                                ,batch_size<span class="op">=</span>batch_size</span>
<span id="cb28-165"><a href="#cb28-165" aria-hidden="true" tabindex="-1"></a>                                ,shuffle<span class="op">=</span><span class="va">True</span></span>
<span id="cb28-166"><a href="#cb28-166" aria-hidden="true" tabindex="-1"></a>                                ,num_workers<span class="op">=</span><span class="dv">4</span>) <span class="co">#使用するCore数</span></span>
<span id="cb28-167"><a href="#cb28-167" aria-hidden="true" tabindex="-1"></a>                   <span class="cf">for</span> x <span class="kw">in</span> [<span class="st">&#39;train&#39;</span>, <span class="st">&#39;val&#39;</span>]}</span>
<span id="cb28-168"><a href="#cb28-168" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-169"><a href="#cb28-169" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 毎回学習するの大変なので,学習済みの場合は結果を読み込む</span></span>
<span id="cb28-170"><a href="#cb28-170" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> os.path.exists(<span class="st">&#39;data/result/trained_model_weights.pth&#39;</span>):</span>
<span id="cb28-171"><a href="#cb28-171" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;学習済みデータのロード中&quot;</span>)</span>
<span id="cb28-172"><a href="#cb28-172" aria-hidden="true" tabindex="-1"></a>        model.load_state_dict(torch.load(<span class="st">&#39;data/result/trained_model_weights.pth&#39;</span>, map_location<span class="op">=</span>device))</span>
<span id="cb28-173"><a href="#cb28-173" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb28-174"><a href="#cb28-174" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;学習開始&quot;</span>)</span>
<span id="cb28-175"><a href="#cb28-175" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 損失関数とオプティマイザ</span></span>
<span id="cb28-176"><a href="#cb28-176" aria-hidden="true" tabindex="-1"></a>        criterion <span class="op">=</span> nn.CrossEntropyLoss() <span class="co">#クロスエントロピー損失</span></span>
<span id="cb28-177"><a href="#cb28-177" aria-hidden="true" tabindex="-1"></a>        optimizer <span class="op">=</span> optim.Adam(model.parameters() <span class="co">#Adam</span></span>
<span id="cb28-178"><a href="#cb28-178" aria-hidden="true" tabindex="-1"></a>                              ,lr<span class="op">=</span><span class="fl">0.0001</span>) <span class="co">#Learning rate (学習率)</span></span>
<span id="cb28-179"><a href="#cb28-179" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-180"><a href="#cb28-180" aria-hidden="true" tabindex="-1"></a>        <span class="co">#SGDを利用する場合</span></span>
<span id="cb28-181"><a href="#cb28-181" aria-hidden="true" tabindex="-1"></a>        <span class="co">#optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)</span></span>
<span id="cb28-182"><a href="#cb28-182" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-183"><a href="#cb28-183" aria-hidden="true" tabindex="-1"></a>        <span class="co">#結果の記録用</span></span>
<span id="cb28-184"><a href="#cb28-184" aria-hidden="true" tabindex="-1"></a>        train_losses <span class="op">=</span> []</span>
<span id="cb28-185"><a href="#cb28-185" aria-hidden="true" tabindex="-1"></a>        train_accuracies <span class="op">=</span> []</span>
<span id="cb28-186"><a href="#cb28-186" aria-hidden="true" tabindex="-1"></a>        val_losses <span class="op">=</span> []</span>
<span id="cb28-187"><a href="#cb28-187" aria-hidden="true" tabindex="-1"></a>        val_accuracies <span class="op">=</span> []</span>
<span id="cb28-188"><a href="#cb28-188" aria-hidden="true" tabindex="-1"></a>        results <span class="op">=</span> []</span>
<span id="cb28-189"><a href="#cb28-189" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-190"><a href="#cb28-190" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 学習ループ</span></span>
<span id="cb28-191"><a href="#cb28-191" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> epoch <span class="kw">in</span> <span class="bu">range</span>(num_epochs):</span>
<span id="cb28-192"><a href="#cb28-192" aria-hidden="true" tabindex="-1"></a>            <span class="bu">print</span>(<span class="ss">f&#39;Epoch </span><span class="sc">{</span>epoch<span class="op">+</span><span class="dv">1</span><span class="sc">}</span><span class="ss">/</span><span class="sc">{</span>num_epochs<span class="sc">}</span><span class="ss">&#39;</span>)</span>
<span id="cb28-193"><a href="#cb28-193" aria-hidden="true" tabindex="-1"></a>            <span class="bu">print</span>(<span class="st">&#39;-&#39;</span> <span class="op">*</span> <span class="dv">10</span>)</span>
<span id="cb28-194"><a href="#cb28-194" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-195"><a href="#cb28-195" aria-hidden="true" tabindex="-1"></a>            <span class="cf">for</span> phase <span class="kw">in</span> [<span class="st">&#39;train&#39;</span>, <span class="st">&#39;val&#39;</span>]:</span>
<span id="cb28-196"><a href="#cb28-196" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> phase <span class="op">==</span> <span class="st">&#39;train&#39;</span>:</span>
<span id="cb28-197"><a href="#cb28-197" aria-hidden="true" tabindex="-1"></a>                    model.train()</span>
<span id="cb28-198"><a href="#cb28-198" aria-hidden="true" tabindex="-1"></a>                <span class="cf">else</span>:</span>
<span id="cb28-199"><a href="#cb28-199" aria-hidden="true" tabindex="-1"></a>                    model.<span class="bu">eval</span>()</span>
<span id="cb28-200"><a href="#cb28-200" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-201"><a href="#cb28-201" aria-hidden="true" tabindex="-1"></a>                running_loss <span class="op">=</span> <span class="fl">0.0</span></span>
<span id="cb28-202"><a href="#cb28-202" aria-hidden="true" tabindex="-1"></a>                running_corrects <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb28-203"><a href="#cb28-203" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-204"><a href="#cb28-204" aria-hidden="true" tabindex="-1"></a>                <span class="cf">for</span> inputs, labels <span class="kw">in</span> dataloaders[phase]:</span>
<span id="cb28-205"><a href="#cb28-205" aria-hidden="true" tabindex="-1"></a>                    inputs <span class="op">=</span> inputs.to(device)</span>
<span id="cb28-206"><a href="#cb28-206" aria-hidden="true" tabindex="-1"></a>                    labels <span class="op">=</span> labels.to(device)</span>
<span id="cb28-207"><a href="#cb28-207" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-208"><a href="#cb28-208" aria-hidden="true" tabindex="-1"></a>                    optimizer.zero_grad()</span>
<span id="cb28-209"><a href="#cb28-209" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-210"><a href="#cb28-210" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">with</span> torch.set_grad_enabled(phase <span class="op">==</span> <span class="st">&#39;train&#39;</span>):</span>
<span id="cb28-211"><a href="#cb28-211" aria-hidden="true" tabindex="-1"></a>                        outputs <span class="op">=</span> model(inputs)</span>
<span id="cb28-212"><a href="#cb28-212" aria-hidden="true" tabindex="-1"></a>                        _, preds <span class="op">=</span> torch.<span class="bu">max</span>(outputs, <span class="dv">1</span>)</span>
<span id="cb28-213"><a href="#cb28-213" aria-hidden="true" tabindex="-1"></a>                        loss <span class="op">=</span> criterion(outputs, labels)</span>
<span id="cb28-214"><a href="#cb28-214" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-215"><a href="#cb28-215" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">if</span> phase <span class="op">==</span> <span class="st">&#39;train&#39;</span>:</span>
<span id="cb28-216"><a href="#cb28-216" aria-hidden="true" tabindex="-1"></a>                            loss.backward()</span>
<span id="cb28-217"><a href="#cb28-217" aria-hidden="true" tabindex="-1"></a>                            optimizer.step()</span>
<span id="cb28-218"><a href="#cb28-218" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-219"><a href="#cb28-219" aria-hidden="true" tabindex="-1"></a>                    running_loss <span class="op">+=</span> loss.item() <span class="op">*</span> inputs.size(<span class="dv">0</span>)</span>
<span id="cb28-220"><a href="#cb28-220" aria-hidden="true" tabindex="-1"></a>                    running_corrects <span class="op">+=</span> torch.<span class="bu">sum</span>(preds <span class="op">==</span> labels.data)</span>
<span id="cb28-221"><a href="#cb28-221" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">if</span> phase <span class="op">==</span> <span class="st">&#39;val&#39;</span>:  <span class="co"># バリデーション時に予測と実際のラベルを保存</span></span>
<span id="cb28-222"><a href="#cb28-222" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="bu">len</span>(labels)):</span>
<span id="cb28-223"><a href="#cb28-223" aria-hidden="true" tabindex="-1"></a>                            results.append({</span>
<span id="cb28-224"><a href="#cb28-224" aria-hidden="true" tabindex="-1"></a>                                <span class="st">&#39;epoch&#39;</span>: epoch <span class="op">+</span> <span class="dv">1</span>,</span>
<span id="cb28-225"><a href="#cb28-225" aria-hidden="true" tabindex="-1"></a>                                <span class="st">&#39;pred&#39;</span>: preds[i].item(),</span>
<span id="cb28-226"><a href="#cb28-226" aria-hidden="true" tabindex="-1"></a>                                <span class="st">&#39;acctual&#39;</span>: labels[i].item()</span>
<span id="cb28-227"><a href="#cb28-227" aria-hidden="true" tabindex="-1"></a>                            })</span>
<span id="cb28-228"><a href="#cb28-228" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-229"><a href="#cb28-229" aria-hidden="true" tabindex="-1"></a>                epoch_loss <span class="op">=</span> running_loss <span class="op">/</span> <span class="bu">len</span>(image_datasets[phase])</span>
<span id="cb28-230"><a href="#cb28-230" aria-hidden="true" tabindex="-1"></a>                epoch_acc <span class="op">=</span> running_corrects.<span class="bu">float</span>() <span class="op">/</span> <span class="bu">len</span>(image_datasets[phase])</span>
<span id="cb28-231"><a href="#cb28-231" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-232"><a href="#cb28-232" aria-hidden="true" tabindex="-1"></a>                <span class="bu">print</span>(<span class="ss">f&#39;</span><span class="sc">{</span>phase<span class="sc">}</span><span class="ss"> Loss: </span><span class="sc">{</span>epoch_loss<span class="sc">:.4f}</span><span class="ss"> Acc: </span><span class="sc">{</span>epoch_acc<span class="sc">:.4f}</span><span class="ss">&#39;</span>)</span>
<span id="cb28-233"><a href="#cb28-233" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> phase <span class="op">==</span> <span class="st">&#39;train&#39;</span>:</span>
<span id="cb28-234"><a href="#cb28-234" aria-hidden="true" tabindex="-1"></a>                    train_losses.append(epoch_loss)</span>
<span id="cb28-235"><a href="#cb28-235" aria-hidden="true" tabindex="-1"></a>                    train_accuracies.append(epoch_acc.item())</span>
<span id="cb28-236"><a href="#cb28-236" aria-hidden="true" tabindex="-1"></a>                <span class="cf">else</span>:</span>
<span id="cb28-237"><a href="#cb28-237" aria-hidden="true" tabindex="-1"></a>                    val_losses.append(epoch_loss)</span>
<span id="cb28-238"><a href="#cb28-238" aria-hidden="true" tabindex="-1"></a>                    val_accuracies.append(epoch_acc.item())</span>
<span id="cb28-239"><a href="#cb28-239" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-240"><a href="#cb28-240" aria-hidden="true" tabindex="-1"></a>        <span class="co">#------------------------------------------------------------------</span></span>
<span id="cb28-241"><a href="#cb28-241" aria-hidden="true" tabindex="-1"></a>        <span class="co">#結果の表示</span></span>
<span id="cb28-242"><a href="#cb28-242" aria-hidden="true" tabindex="-1"></a>        <span class="co">#------------------------------------------------------------------</span></span>
<span id="cb28-243"><a href="#cb28-243" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-244"><a href="#cb28-244" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&#39;Training complete&#39;</span>)</span>
<span id="cb28-245"><a href="#cb28-245" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;Training Losses: &quot;</span>, train_losses)</span>
<span id="cb28-246"><a href="#cb28-246" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;Training Accuracies: &quot;</span>, train_accuracies)</span>
<span id="cb28-247"><a href="#cb28-247" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;Validation Losses: &quot;</span>, val_losses)</span>
<span id="cb28-248"><a href="#cb28-248" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;Validation Accuracies: &quot;</span>, val_accuracies)</span>
<span id="cb28-249"><a href="#cb28-249" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-250"><a href="#cb28-250" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 結果を可視化してCSVファイルに保存</span></span>
<span id="cb28-251"><a href="#cb28-251" aria-hidden="true" tabindex="-1"></a>        loss_acc <span class="op">=</span> pd.DataFrame({<span class="st">&#39;train_losses&#39;</span>:train_losses</span>
<span id="cb28-252"><a href="#cb28-252" aria-hidden="true" tabindex="-1"></a>                                ,<span class="st">&#39;train_accuracies&#39;</span>:train_accuracies</span>
<span id="cb28-253"><a href="#cb28-253" aria-hidden="true" tabindex="-1"></a>                                ,<span class="st">&#39;val_losses&#39;</span>:val_losses</span>
<span id="cb28-254"><a href="#cb28-254" aria-hidden="true" tabindex="-1"></a>                                ,<span class="st">&#39;val_accuracies&#39;</span>:val_accuracies})</span>
<span id="cb28-255"><a href="#cb28-255" aria-hidden="true" tabindex="-1"></a>        plt.title(<span class="st">&#39;Losses&#39;</span>)</span>
<span id="cb28-256"><a href="#cb28-256" aria-hidden="true" tabindex="-1"></a>        plt.xlabel(<span class="st">&#39;Epoch&#39;</span>)</span>
<span id="cb28-257"><a href="#cb28-257" aria-hidden="true" tabindex="-1"></a>        plt.ylabel(<span class="st">&#39;Losses&#39;</span>)</span>
<span id="cb28-258"><a href="#cb28-258" aria-hidden="true" tabindex="-1"></a>        plt.plot(np.arange(num_epochs),loss_acc[<span class="st">&#39;train_losses&#39;</span>],c<span class="op">=</span><span class="st">&#39;r&#39;</span>,label<span class="op">=</span><span class="st">&#39;train_losses&#39;</span>)</span>
<span id="cb28-259"><a href="#cb28-259" aria-hidden="true" tabindex="-1"></a>        plt.plot(np.arange(num_epochs),loss_acc[<span class="st">&#39;val_losses&#39;</span>],c<span class="op">=</span><span class="st">&#39;b&#39;</span>,label<span class="op">=</span><span class="st">&#39;val_losses&#39;</span>)</span>
<span id="cb28-260"><a href="#cb28-260" aria-hidden="true" tabindex="-1"></a>        plt.grid(<span class="va">True</span>)</span>
<span id="cb28-261"><a href="#cb28-261" aria-hidden="true" tabindex="-1"></a>        plt.legend()</span>
<span id="cb28-262"><a href="#cb28-262" aria-hidden="true" tabindex="-1"></a>        plt.savefig(<span class="st">&#39;data/result/convnext_loss.png&#39;</span>)</span>
<span id="cb28-263"><a href="#cb28-263" aria-hidden="true" tabindex="-1"></a>        plt.close()</span>
<span id="cb28-264"><a href="#cb28-264" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-265"><a href="#cb28-265" aria-hidden="true" tabindex="-1"></a>        plt.title(<span class="st">&#39;Accuracies&#39;</span>)</span>
<span id="cb28-266"><a href="#cb28-266" aria-hidden="true" tabindex="-1"></a>        plt.xlabel(<span class="st">&#39;Epoch&#39;</span>)</span>
<span id="cb28-267"><a href="#cb28-267" aria-hidden="true" tabindex="-1"></a>        plt.ylabel(<span class="st">&#39;Accuracies&#39;</span>)</span>
<span id="cb28-268"><a href="#cb28-268" aria-hidden="true" tabindex="-1"></a>        plt.plot(np.arange(num_epochs),loss_acc[<span class="st">&#39;train_accuracies&#39;</span>],c<span class="op">=</span><span class="st">&#39;r&#39;</span>,label<span class="op">=</span><span class="st">&#39;train_accuracies&#39;</span>)</span>
<span id="cb28-269"><a href="#cb28-269" aria-hidden="true" tabindex="-1"></a>        plt.plot(np.arange(num_epochs),loss_acc[<span class="st">&#39;val_accuracies&#39;</span>],c<span class="op">=</span><span class="st">&#39;b&#39;</span>,label<span class="op">=</span><span class="st">&#39;val_accuracies&#39;</span>)</span>
<span id="cb28-270"><a href="#cb28-270" aria-hidden="true" tabindex="-1"></a>        plt.grid(<span class="va">True</span>)</span>
<span id="cb28-271"><a href="#cb28-271" aria-hidden="true" tabindex="-1"></a>        plt.legend()</span>
<span id="cb28-272"><a href="#cb28-272" aria-hidden="true" tabindex="-1"></a>        plt.savefig(<span class="st">&#39;data/result/convnext_acc.png&#39;</span>)</span>
<span id="cb28-273"><a href="#cb28-273" aria-hidden="true" tabindex="-1"></a>        plt.close()</span>
<span id="cb28-274"><a href="#cb28-274" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-275"><a href="#cb28-275" aria-hidden="true" tabindex="-1"></a>        loss_acc.to_csv(<span class="st">&#39;data/result/convnext_loss_acc.csv&#39;</span></span>
<span id="cb28-276"><a href="#cb28-276" aria-hidden="true" tabindex="-1"></a>                       ,encoding<span class="op">=</span><span class="st">&#39;utf_8_sig&#39;</span>)</span>
<span id="cb28-277"><a href="#cb28-277" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-278"><a href="#cb28-278" aria-hidden="true" tabindex="-1"></a>        results_df <span class="op">=</span> pd.DataFrame(results)</span>
<span id="cb28-279"><a href="#cb28-279" aria-hidden="true" tabindex="-1"></a>        result_max_epochs <span class="op">=</span> results_df[results_df[<span class="st">&#39;epoch&#39;</span>] <span class="op">==</span> num_epochs]</span>
<span id="cb28-280"><a href="#cb28-280" aria-hidden="true" tabindex="-1"></a>        result_heatmap <span class="op">=</span> pd.DataFrame(index<span class="op">=</span>np.arange(<span class="dv">6</span>)</span>
<span id="cb28-281"><a href="#cb28-281" aria-hidden="true" tabindex="-1"></a>                                     ,columns<span class="op">=</span>np.arange(<span class="dv">6</span>)</span>
<span id="cb28-282"><a href="#cb28-282" aria-hidden="true" tabindex="-1"></a>                                     ,data<span class="op">=</span><span class="dv">0</span>)</span>
<span id="cb28-283"><a href="#cb28-283" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-284"><a href="#cb28-284" aria-hidden="true" tabindex="-1"></a>        <span class="co">#実際のラベルに対する予測された回数をカウント</span></span>
<span id="cb28-285"><a href="#cb28-285" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> i <span class="kw">in</span> result_max_epochs.index:</span>
<span id="cb28-286"><a href="#cb28-286" aria-hidden="true" tabindex="-1"></a>            p <span class="op">=</span> result_max_epochs.at[i,<span class="st">&#39;pred&#39;</span>]</span>
<span id="cb28-287"><a href="#cb28-287" aria-hidden="true" tabindex="-1"></a>            a <span class="op">=</span> result_max_epochs.at[i,<span class="st">&#39;acctual&#39;</span>]</span>
<span id="cb28-288"><a href="#cb28-288" aria-hidden="true" tabindex="-1"></a>            result_heatmap.at[p,a] <span class="op">+=</span><span class="dv">1</span></span>
<span id="cb28-289"><a href="#cb28-289" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-290"><a href="#cb28-290" aria-hidden="true" tabindex="-1"></a>        <span class="co">#列相対度数に変換</span></span>
<span id="cb28-291"><a href="#cb28-291" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> c <span class="kw">in</span> result_heatmap:</span>
<span id="cb28-292"><a href="#cb28-292" aria-hidden="true" tabindex="-1"></a>            result_heatmap[c] <span class="op">=</span> result_heatmap[c] <span class="op">/</span> result_heatmap[c].<span class="bu">sum</span>()</span>
<span id="cb28-293"><a href="#cb28-293" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-294"><a href="#cb28-294" aria-hidden="true" tabindex="-1"></a>        <span class="co">#ヒートマップとして表現</span></span>
<span id="cb28-295"><a href="#cb28-295" aria-hidden="true" tabindex="-1"></a>        sns.heatmap(result_heatmap</span>
<span id="cb28-296"><a href="#cb28-296" aria-hidden="true" tabindex="-1"></a>                   ,annot<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb28-297"><a href="#cb28-297" aria-hidden="true" tabindex="-1"></a>        plt.ylabel(<span class="st">&#39;pred&#39;</span>)</span>
<span id="cb28-298"><a href="#cb28-298" aria-hidden="true" tabindex="-1"></a>        plt.xlabel(<span class="st">&#39;acctual&#39;</span>)</span>
<span id="cb28-299"><a href="#cb28-299" aria-hidden="true" tabindex="-1"></a>        plt.savefig(<span class="st">&#39;data/result/pred_acctual_heatmap.png&#39;</span>)</span>
<span id="cb28-300"><a href="#cb28-300" aria-hidden="true" tabindex="-1"></a>        plt.close()</span>
<span id="cb28-301"><a href="#cb28-301" aria-hidden="true" tabindex="-1"></a>        results_df.to_csv(<span class="st">&#39;data/result/pred_acctual.csv&#39;</span></span>
<span id="cb28-302"><a href="#cb28-302" aria-hidden="true" tabindex="-1"></a>                         ,encoding<span class="op">=</span><span class="st">&#39;utf_8_sig&#39;</span>)</span>
<span id="cb28-303"><a href="#cb28-303" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-304"><a href="#cb28-304" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 特徴量を取得する</span></span>
<span id="cb28-305"><a href="#cb28-305" aria-hidden="true" tabindex="-1"></a>        train_features, train_labels <span class="op">=</span> extract_features(model, dataloaders[<span class="st">&#39;train&#39;</span>], device)</span>
<span id="cb28-306"><a href="#cb28-306" aria-hidden="true" tabindex="-1"></a>        val_features, val_labels <span class="op">=</span> extract_features(model, dataloaders[<span class="st">&#39;val&#39;</span>], device)</span>
<span id="cb28-307"><a href="#cb28-307" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-308"><a href="#cb28-308" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-309"><a href="#cb28-309" aria-hidden="true" tabindex="-1"></a>        <span class="co">#散布図の描画</span></span>
<span id="cb28-310"><a href="#cb28-310" aria-hidden="true" tabindex="-1"></a>        plot_tsne(train_features, train_labels,<span class="st">&#39;data/result/convnext_tsne.png&#39;</span>)</span>
<span id="cb28-311"><a href="#cb28-311" aria-hidden="true" tabindex="-1"></a>        plot_pca(train_features, train_labels,<span class="st">&#39;data/result/convnext_pca.png&#39;</span>)</span>
<span id="cb28-312"><a href="#cb28-312" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-313"><a href="#cb28-313" aria-hidden="true" tabindex="-1"></a>        <span class="co"># (毎回学習するのは大変なので)特徴量を表示または保存しておく</span></span>
<span id="cb28-314"><a href="#cb28-314" aria-hidden="true" tabindex="-1"></a>        torch.save(model.state_dict(), <span class="st">&#39;data/result/trained_model_weights.pth&#39;</span>)</span>
<span id="cb28-315"><a href="#cb28-315" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-316"><a href="#cb28-316" aria-hidden="true" tabindex="-1"></a>    <span class="co">#------------------------------------------------------------------</span></span>
<span id="cb28-317"><a href="#cb28-317" aria-hidden="true" tabindex="-1"></a>    <span class="co">#特徴マップの描画</span></span>
<span id="cb28-318"><a href="#cb28-318" aria-hidden="true" tabindex="-1"></a>    <span class="co">#------------------------------------------------------------------</span></span>
<span id="cb28-319"><a href="#cb28-319" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 中間層のフックを設定する層リストの設定例</span></span>
<span id="cb28-320"><a href="#cb28-320" aria-hidden="true" tabindex="-1"></a>    target_layers_indices <span class="op">=</span> [<span class="dv">0</span>, <span class="dv">5</span>, <span class="op">-</span><span class="dv">1</span>]  <span class="co"># お好みで変更可能</span></span>
<span id="cb28-321"><a href="#cb28-321" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-322"><a href="#cb28-322" aria-hidden="true" tabindex="-1"></a>    <span class="co"># フックで取り出した特徴マップを保持する辞書</span></span>
<span id="cb28-323"><a href="#cb28-323" aria-hidden="true" tabindex="-1"></a>    intermediate_feature_maps <span class="op">=</span> {}</span>
<span id="cb28-324"><a href="#cb28-324" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-325"><a href="#cb28-325" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> get_intermediate_hook(name):</span>
<span id="cb28-326"><a href="#cb28-326" aria-hidden="true" tabindex="-1"></a>        <span class="kw">def</span> hook_fn(m, <span class="bu">input</span>, output):</span>
<span id="cb28-327"><a href="#cb28-327" aria-hidden="true" tabindex="-1"></a>            <span class="co"># output: [B, C, H, W]</span></span>
<span id="cb28-328"><a href="#cb28-328" aria-hidden="true" tabindex="-1"></a>            intermediate_feature_maps[name] <span class="op">=</span> output.detach().cpu()</span>
<span id="cb28-329"><a href="#cb28-329" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> hook_fn</span>
<span id="cb28-330"><a href="#cb28-330" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-331"><a href="#cb28-331" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 対象層にフックを登録</span></span>
<span id="cb28-332"><a href="#cb28-332" aria-hidden="true" tabindex="-1"></a>    hooks <span class="op">=</span> []</span>
<span id="cb28-333"><a href="#cb28-333" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> idx <span class="kw">in</span> target_layers_indices:</span>
<span id="cb28-334"><a href="#cb28-334" aria-hidden="true" tabindex="-1"></a>        layer_name <span class="op">=</span> <span class="ss">f&quot;features_</span><span class="sc">{</span>idx<span class="sc">}</span><span class="ss">&quot;</span></span>
<span id="cb28-335"><a href="#cb28-335" aria-hidden="true" tabindex="-1"></a>        h <span class="op">=</span> model.features[idx].register_forward_hook(get_intermediate_hook(layer_name))</span>
<span id="cb28-336"><a href="#cb28-336" aria-hidden="true" tabindex="-1"></a>        hooks.append(h)</span>
<span id="cb28-337"><a href="#cb28-337" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-338"><a href="#cb28-338" aria-hidden="true" tabindex="-1"></a>    <span class="co"># --- 最後の畳み込み層のフック ---</span></span>
<span id="cb28-339"><a href="#cb28-339" aria-hidden="true" tabindex="-1"></a>    feature_maps_last_conv <span class="op">=</span> []</span>
<span id="cb28-340"><a href="#cb28-340" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> get_feature_map_hook_conv(<span class="va">self</span>, <span class="bu">input</span>, output):</span>
<span id="cb28-341"><a href="#cb28-341" aria-hidden="true" tabindex="-1"></a>        feature_maps_last_conv.append(output.detach().cpu())</span>
<span id="cb28-342"><a href="#cb28-342" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-343"><a href="#cb28-343" aria-hidden="true" tabindex="-1"></a>    hook_conv <span class="op">=</span> model.features[<span class="op">-</span><span class="dv">1</span>].register_forward_hook(get_feature_map_hook_conv)</span>
<span id="cb28-344"><a href="#cb28-344" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-345"><a href="#cb28-345" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-346"><a href="#cb28-346" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 抽出したいクラス (0:10s,1:20s,...,5:60s)</span></span>
<span id="cb28-347"><a href="#cb28-347" aria-hidden="true" tabindex="-1"></a>    target_classes <span class="op">=</span> [<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>]</span>
<span id="cb28-348"><a href="#cb28-348" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 各クラスから9枚ずつ取得するためのカウンタ</span></span>
<span id="cb28-349"><a href="#cb28-349" aria-hidden="true" tabindex="-1"></a>    images_per_class <span class="op">=</span> <span class="dv">9</span></span>
<span id="cb28-350"><a href="#cb28-350" aria-hidden="true" tabindex="-1"></a>    extracted_counts <span class="op">=</span> {cls: <span class="dv">0</span> <span class="cf">for</span> cls <span class="kw">in</span> target_classes}</span>
<span id="cb28-351"><a href="#cb28-351" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-352"><a href="#cb28-352" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 保存ディレクトリの用意</span></span>
<span id="cb28-353"><a href="#cb28-353" aria-hidden="true" tabindex="-1"></a>    base_dir <span class="op">=</span> <span class="st">&#39;data/result/feature_maps&#39;</span></span>
<span id="cb28-354"><a href="#cb28-354" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="kw">not</span> os.path.exists(base_dir):</span>
<span id="cb28-355"><a href="#cb28-355" aria-hidden="true" tabindex="-1"></a>        os.makedirs(base_dir)</span>
<span id="cb28-356"><a href="#cb28-356" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-357"><a href="#cb28-357" aria-hidden="true" tabindex="-1"></a>    <span class="co"># クラスごとのフォルダを作成 (10s～60s)</span></span>
<span id="cb28-358"><a href="#cb28-358" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> cls <span class="kw">in</span> target_classes:</span>
<span id="cb28-359"><a href="#cb28-359" aria-hidden="true" tabindex="-1"></a>        class_label_str <span class="op">=</span> <span class="ss">f&quot;</span><span class="sc">{</span>(cls<span class="op">+</span><span class="dv">1</span>)<span class="op">*</span><span class="dv">10</span><span class="sc">}</span><span class="ss">s&quot;</span></span>
<span id="cb28-360"><a href="#cb28-360" aria-hidden="true" tabindex="-1"></a>        class_dir <span class="op">=</span> os.path.join(base_dir, class_label_str)</span>
<span id="cb28-361"><a href="#cb28-361" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="kw">not</span> os.path.exists(class_dir):</span>
<span id="cb28-362"><a href="#cb28-362" aria-hidden="true" tabindex="-1"></a>            os.makedirs(class_dir)</span>
<span id="cb28-363"><a href="#cb28-363" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 中間層用のサブフォルダを用意</span></span>
<span id="cb28-364"><a href="#cb28-364" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> idx <span class="kw">in</span> target_layers_indices:</span>
<span id="cb28-365"><a href="#cb28-365" aria-hidden="true" tabindex="-1"></a>            layer_name <span class="op">=</span> <span class="ss">f&quot;features_</span><span class="sc">{</span>idx<span class="sc">}</span><span class="ss">&quot;</span></span>
<span id="cb28-366"><a href="#cb28-366" aria-hidden="true" tabindex="-1"></a>            layer_dir <span class="op">=</span> os.path.join(class_dir, layer_name)</span>
<span id="cb28-367"><a href="#cb28-367" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="kw">not</span> os.path.exists(layer_dir):</span>
<span id="cb28-368"><a href="#cb28-368" aria-hidden="true" tabindex="-1"></a>                os.makedirs(layer_dir)</span>
<span id="cb28-369"><a href="#cb28-369" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-370"><a href="#cb28-370" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 最終Conv層用のフォルダ</span></span>
<span id="cb28-371"><a href="#cb28-371" aria-hidden="true" tabindex="-1"></a>        last_conv_dir <span class="op">=</span> os.path.join(class_dir, <span class="st">&#39;last_conv&#39;</span>)</span>
<span id="cb28-372"><a href="#cb28-372" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="kw">not</span> os.path.exists(last_conv_dir):</span>
<span id="cb28-373"><a href="#cb28-373" aria-hidden="true" tabindex="-1"></a>            os.makedirs(last_conv_dir)</span>
<span id="cb28-374"><a href="#cb28-374" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-375"><a href="#cb28-375" aria-hidden="true" tabindex="-1"></a>    model.<span class="bu">eval</span>()</span>
<span id="cb28-376"><a href="#cb28-376" aria-hidden="true" tabindex="-1"></a>    val_iter <span class="op">=</span> <span class="bu">iter</span>(dataloaders[<span class="st">&#39;val&#39;</span>])</span>
<span id="cb28-377"><a href="#cb28-377" aria-hidden="true" tabindex="-1"></a>    <span class="cf">with</span> torch.no_grad():</span>
<span id="cb28-378"><a href="#cb28-378" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 全クラスが指定枚数分揃うまで繰り返す</span></span>
<span id="cb28-379"><a href="#cb28-379" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span> <span class="kw">not</span> <span class="bu">all</span>(count <span class="op">==</span> images_per_class <span class="cf">for</span> count <span class="kw">in</span> extracted_counts.values()):</span>
<span id="cb28-380"><a href="#cb28-380" aria-hidden="true" tabindex="-1"></a>            <span class="cf">try</span>:</span>
<span id="cb28-381"><a href="#cb28-381" aria-hidden="true" tabindex="-1"></a>                inputs, labels <span class="op">=</span> <span class="bu">next</span>(val_iter)</span>
<span id="cb28-382"><a href="#cb28-382" aria-hidden="true" tabindex="-1"></a>            <span class="cf">except</span> <span class="pp">StopIteration</span>:</span>
<span id="cb28-383"><a href="#cb28-383" aria-hidden="true" tabindex="-1"></a>                <span class="co"># データがなくなったら終了</span></span>
<span id="cb28-384"><a href="#cb28-384" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span></span>
<span id="cb28-385"><a href="#cb28-385" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-386"><a href="#cb28-386" aria-hidden="true" tabindex="-1"></a>            inputs <span class="op">=</span> inputs.to(device)</span>
<span id="cb28-387"><a href="#cb28-387" aria-hidden="true" tabindex="-1"></a>            <span class="co"># フック用リストをクリア</span></span>
<span id="cb28-388"><a href="#cb28-388" aria-hidden="true" tabindex="-1"></a>            feature_maps_last_conv.clear()</span>
<span id="cb28-389"><a href="#cb28-389" aria-hidden="true" tabindex="-1"></a>            intermediate_feature_maps.clear()</span>
<span id="cb28-390"><a href="#cb28-390" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-391"><a href="#cb28-391" aria-hidden="true" tabindex="-1"></a>            <span class="co"># 順伝播：フックで特徴マップ取得</span></span>
<span id="cb28-392"><a href="#cb28-392" aria-hidden="true" tabindex="-1"></a>            outputs <span class="op">=</span> model(inputs)</span>
<span id="cb28-393"><a href="#cb28-393" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-394"><a href="#cb28-394" aria-hidden="true" tabindex="-1"></a>            fm_batch <span class="op">=</span> feature_maps_last_conv[<span class="dv">0</span>]   <span class="co"># [B, C, H, W] 最終Conv層出力</span></span>
<span id="cb28-395"><a href="#cb28-395" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-396"><a href="#cb28-396" aria-hidden="true" tabindex="-1"></a>            <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(inputs.size(<span class="dv">0</span>)):</span>
<span id="cb28-397"><a href="#cb28-397" aria-hidden="true" tabindex="-1"></a>                cls <span class="op">=</span> labels[i].item()</span>
<span id="cb28-398"><a href="#cb28-398" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> cls <span class="kw">in</span> target_classes <span class="kw">and</span> extracted_counts[cls] <span class="op">&lt;</span> images_per_class:</span>
<span id="cb28-399"><a href="#cb28-399" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-400"><a href="#cb28-400" aria-hidden="true" tabindex="-1"></a>                    class_label_str <span class="op">=</span> <span class="ss">f&quot;</span><span class="sc">{</span>(cls<span class="op">+</span><span class="dv">1</span>)<span class="op">*</span><span class="dv">10</span><span class="sc">}</span><span class="ss">s&quot;</span></span>
<span id="cb28-401"><a href="#cb28-401" aria-hidden="true" tabindex="-1"></a>                    class_dir <span class="op">=</span> os.path.join(base_dir, class_label_str)</span>
<span id="cb28-402"><a href="#cb28-402" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-403"><a href="#cb28-403" aria-hidden="true" tabindex="-1"></a>                    <span class="co"># 中間層特徴マップ可視化</span></span>
<span id="cb28-404"><a href="#cb28-404" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">for</span> idx <span class="kw">in</span> target_layers_indices:</span>
<span id="cb28-405"><a href="#cb28-405" aria-hidden="true" tabindex="-1"></a>                        layer_name <span class="op">=</span> <span class="ss">f&quot;features_</span><span class="sc">{</span>idx<span class="sc">}</span><span class="ss">&quot;</span></span>
<span id="cb28-406"><a href="#cb28-406" aria-hidden="true" tabindex="-1"></a>                        fm_intermediate <span class="op">=</span> intermediate_feature_maps[layer_name][i] <span class="co"># shape: [C, H, W]</span></span>
<span id="cb28-407"><a href="#cb28-407" aria-hidden="true" tabindex="-1"></a>                        num_channels_to_plot <span class="op">=</span> <span class="bu">min</span>(<span class="dv">8</span>, fm_intermediate.shape[<span class="dv">0</span>])</span>
<span id="cb28-408"><a href="#cb28-408" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-409"><a href="#cb28-409" aria-hidden="true" tabindex="-1"></a>                        fig, axes <span class="op">=</span> plt.subplots(<span class="dv">2</span>, <span class="dv">4</span>, figsize<span class="op">=</span>(<span class="dv">12</span>, <span class="dv">6</span>))</span>
<span id="cb28-410"><a href="#cb28-410" aria-hidden="true" tabindex="-1"></a>                        axes <span class="op">=</span> axes.flatten()</span>
<span id="cb28-411"><a href="#cb28-411" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">for</span> ch <span class="kw">in</span> <span class="bu">range</span>(num_channels_to_plot):</span>
<span id="cb28-412"><a href="#cb28-412" aria-hidden="true" tabindex="-1"></a>                            ax <span class="op">=</span> axes[ch]</span>
<span id="cb28-413"><a href="#cb28-413" aria-hidden="true" tabindex="-1"></a>                            ax.imshow(fm_intermediate[ch].numpy(), cmap<span class="op">=</span><span class="st">&#39;viridis&#39;</span>)</span>
<span id="cb28-414"><a href="#cb28-414" aria-hidden="true" tabindex="-1"></a>                            ax.axis(<span class="st">&#39;off&#39;</span>)</span>
<span id="cb28-415"><a href="#cb28-415" aria-hidden="true" tabindex="-1"></a>                        plt.suptitle(<span class="ss">f&#39;Intermediate Layer </span><span class="sc">{</span>layer_name<span class="sc">}</span><span class="ss"> Feature Maps: Class </span><span class="sc">{</span>(cls<span class="op">+</span><span class="dv">1</span>)<span class="op">*</span><span class="dv">10</span><span class="sc">}</span><span class="ss">s (Image </span><span class="sc">{</span>extracted_counts[cls]<span class="op">+</span><span class="dv">1</span><span class="sc">}</span><span class="ss">)&#39;</span>)</span>
<span id="cb28-416"><a href="#cb28-416" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-417"><a href="#cb28-417" aria-hidden="true" tabindex="-1"></a>                        layer_dir <span class="op">=</span> os.path.join(class_dir, layer_name)</span>
<span id="cb28-418"><a href="#cb28-418" aria-hidden="true" tabindex="-1"></a>                        out_path <span class="op">=</span> os.path.join(layer_dir, <span class="ss">f&#39;feature_map_</span><span class="sc">{</span>extracted_counts[cls]<span class="op">+</span><span class="dv">1</span><span class="sc">}</span><span class="ss">.png&#39;</span>)</span>
<span id="cb28-419"><a href="#cb28-419" aria-hidden="true" tabindex="-1"></a>                        plt.savefig(out_path)</span>
<span id="cb28-420"><a href="#cb28-420" aria-hidden="true" tabindex="-1"></a>                        plt.close()</span>
<span id="cb28-421"><a href="#cb28-421" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-422"><a href="#cb28-422" aria-hidden="true" tabindex="-1"></a>                    <span class="co"># 最終Conv層特徴マップ可視化</span></span>
<span id="cb28-423"><a href="#cb28-423" aria-hidden="true" tabindex="-1"></a>                    fm <span class="op">=</span> fm_batch[i]  <span class="co"># shape: [C, H, W]</span></span>
<span id="cb28-424"><a href="#cb28-424" aria-hidden="true" tabindex="-1"></a>                    num_channels_to_plot <span class="op">=</span> <span class="bu">min</span>(<span class="dv">8</span>, fm.shape[<span class="dv">0</span>])</span>
<span id="cb28-425"><a href="#cb28-425" aria-hidden="true" tabindex="-1"></a>                    fig, axes <span class="op">=</span> plt.subplots(<span class="dv">2</span>, <span class="dv">4</span>, figsize<span class="op">=</span>(<span class="dv">12</span>, <span class="dv">6</span>))</span>
<span id="cb28-426"><a href="#cb28-426" aria-hidden="true" tabindex="-1"></a>                    axes <span class="op">=</span> axes.flatten()</span>
<span id="cb28-427"><a href="#cb28-427" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">for</span> ch <span class="kw">in</span> <span class="bu">range</span>(num_channels_to_plot):</span>
<span id="cb28-428"><a href="#cb28-428" aria-hidden="true" tabindex="-1"></a>                        ax <span class="op">=</span> axes[ch]</span>
<span id="cb28-429"><a href="#cb28-429" aria-hidden="true" tabindex="-1"></a>                        ax.imshow(fm[ch].numpy(), cmap<span class="op">=</span><span class="st">&#39;viridis&#39;</span>)</span>
<span id="cb28-430"><a href="#cb28-430" aria-hidden="true" tabindex="-1"></a>                        ax.axis(<span class="st">&#39;off&#39;</span>)</span>
<span id="cb28-431"><a href="#cb28-431" aria-hidden="true" tabindex="-1"></a>                    plt.suptitle(<span class="ss">f&#39;Last Conv Feature Maps: Class </span><span class="sc">{</span>(cls<span class="op">+</span><span class="dv">1</span>)<span class="op">*</span><span class="dv">10</span><span class="sc">}</span><span class="ss">s (Image </span><span class="sc">{</span>extracted_counts[cls]<span class="op">+</span><span class="dv">1</span><span class="sc">}</span><span class="ss">)&#39;</span>)</span>
<span id="cb28-432"><a href="#cb28-432" aria-hidden="true" tabindex="-1"></a>                    last_conv_dir <span class="op">=</span> os.path.join(class_dir, <span class="st">&#39;last_conv&#39;</span>)</span>
<span id="cb28-433"><a href="#cb28-433" aria-hidden="true" tabindex="-1"></a>                    out_path <span class="op">=</span> os.path.join(last_conv_dir, <span class="ss">f&#39;feature_map_</span><span class="sc">{</span>extracted_counts[cls]<span class="op">+</span><span class="dv">1</span><span class="sc">}</span><span class="ss">.png&#39;</span>)</span>
<span id="cb28-434"><a href="#cb28-434" aria-hidden="true" tabindex="-1"></a>                    plt.savefig(out_path)</span>
<span id="cb28-435"><a href="#cb28-435" aria-hidden="true" tabindex="-1"></a>                    plt.close()</span>
<span id="cb28-436"><a href="#cb28-436" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-437"><a href="#cb28-437" aria-hidden="true" tabindex="-1"></a>                    extracted_counts[cls] <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb28-438"><a href="#cb28-438" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-439"><a href="#cb28-439" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">if</span> <span class="bu">all</span>(count <span class="op">==</span> images_per_class <span class="cf">for</span> count <span class="kw">in</span> extracted_counts.values()):</span>
<span id="cb28-440"><a href="#cb28-440" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">break</span></span>
<span id="cb28-441"><a href="#cb28-441" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-442"><a href="#cb28-442" aria-hidden="true" tabindex="-1"></a>    <span class="co"># フックを削除</span></span>
<span id="cb28-443"><a href="#cb28-443" aria-hidden="true" tabindex="-1"></a>    hook_conv.remove()</span>
<span id="cb28-444"><a href="#cb28-444" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> h <span class="kw">in</span> hooks:</span>
<span id="cb28-445"><a href="#cb28-445" aria-hidden="true" tabindex="-1"></a>        h.remove()</span>
<span id="cb28-446"><a href="#cb28-446" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;特徴マップ描画完了&#39;</span>)</span>
<span id="cb28-447"><a href="#cb28-447" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-448"><a href="#cb28-448" aria-hidden="true" tabindex="-1"></a>    <span class="co">#------------------------------------------------------------------</span></span>
<span id="cb28-449"><a href="#cb28-449" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Grad-CAM, Guided Backprop, Guided Grad-CAM の実行 (10s, 60sに限定)</span></span>
<span id="cb28-450"><a href="#cb28-450" aria-hidden="true" tabindex="-1"></a>    <span class="co">#------------------------------------------------------------------</span></span>
<span id="cb28-451"><a href="#cb28-451" aria-hidden="true" tabindex="-1"></a>    <span class="im">import</span> cv2</span>
<span id="cb28-452"><a href="#cb28-452" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-453"><a href="#cb28-453" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 対象クラスIDとクラス名</span></span>
<span id="cb28-454"><a href="#cb28-454" aria-hidden="true" tabindex="-1"></a>    target_cam_classes <span class="op">=</span> {<span class="dv">0</span>:<span class="st">&#39;10s&#39;</span>, <span class="dv">5</span>:<span class="st">&#39;60s&#39;</span>}</span>
<span id="cb28-455"><a href="#cb28-455" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-456"><a href="#cb28-456" aria-hidden="true" tabindex="-1"></a>    <span class="co"># valデータからサンプル画像を取得</span></span>
<span id="cb28-457"><a href="#cb28-457" aria-hidden="true" tabindex="-1"></a>    base_val_dir <span class="op">=</span> os.path.join(data_dir, <span class="st">&#39;val&#39;</span>)</span>
<span id="cb28-458"><a href="#cb28-458" aria-hidden="true" tabindex="-1"></a>    sample_images <span class="op">=</span> {}</span>
<span id="cb28-459"><a href="#cb28-459" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> cls_id, cls_name <span class="kw">in</span> target_cam_classes.items():</span>
<span id="cb28-460"><a href="#cb28-460" aria-hidden="true" tabindex="-1"></a>        cls_dir <span class="op">=</span> os.path.join(base_val_dir, cls_name)</span>
<span id="cb28-461"><a href="#cb28-461" aria-hidden="true" tabindex="-1"></a>        img_name <span class="op">=</span> os.listdir(cls_dir)[<span class="dv">0</span>]</span>
<span id="cb28-462"><a href="#cb28-462" aria-hidden="true" tabindex="-1"></a>        img_path <span class="op">=</span> os.path.join(cls_dir, img_name)</span>
<span id="cb28-463"><a href="#cb28-463" aria-hidden="true" tabindex="-1"></a>        sample_images[cls_id] <span class="op">=</span> img_path</span>
<span id="cb28-464"><a href="#cb28-464" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-465"><a href="#cb28-465" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Grad-CAM用フック設定</span></span>
<span id="cb28-466"><a href="#cb28-466" aria-hidden="true" tabindex="-1"></a>    target_layer <span class="op">=</span> model.features[<span class="op">-</span><span class="dv">1</span>]</span>
<span id="cb28-467"><a href="#cb28-467" aria-hidden="true" tabindex="-1"></a>    features <span class="op">=</span> <span class="va">None</span></span>
<span id="cb28-468"><a href="#cb28-468" aria-hidden="true" tabindex="-1"></a>    gradients <span class="op">=</span> <span class="va">None</span></span>
<span id="cb28-469"><a href="#cb28-469" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-470"><a href="#cb28-470" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> forward_hook(module, <span class="bu">input</span>, output):</span>
<span id="cb28-471"><a href="#cb28-471" aria-hidden="true" tabindex="-1"></a>        <span class="kw">nonlocal</span> features</span>
<span id="cb28-472"><a href="#cb28-472" aria-hidden="true" tabindex="-1"></a>        features <span class="op">=</span> output</span>
<span id="cb28-473"><a href="#cb28-473" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-474"><a href="#cb28-474" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> backward_hook(module, grad_input, grad_output):</span>
<span id="cb28-475"><a href="#cb28-475" aria-hidden="true" tabindex="-1"></a>        <span class="kw">nonlocal</span> gradients</span>
<span id="cb28-476"><a href="#cb28-476" aria-hidden="true" tabindex="-1"></a>        gradients <span class="op">=</span> grad_output[<span class="dv">0</span>]</span>
<span id="cb28-477"><a href="#cb28-477" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-478"><a href="#cb28-478" aria-hidden="true" tabindex="-1"></a>    forward_h <span class="op">=</span> target_layer.register_forward_hook(forward_hook)</span>
<span id="cb28-479"><a href="#cb28-479" aria-hidden="true" tabindex="-1"></a>    backward_h <span class="op">=</span> target_layer.register_full_backward_hook(backward_hook)</span>
<span id="cb28-480"><a href="#cb28-480" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-481"><a href="#cb28-481" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Guided Backprop用：ConvNeXtはGELUを使用, そのためGELUに対するGuided Backpropを実装</span></span>
<span id="cb28-482"><a href="#cb28-482" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 出力が正の部分のみ勾配を通す</span></span>
<span id="cb28-483"><a href="#cb28-483" aria-hidden="true" tabindex="-1"></a>    gelu_outputs <span class="op">=</span> {}  <span class="co"># moduleをキーにしてforward出力を保存</span></span>
<span id="cb28-484"><a href="#cb28-484" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-485"><a href="#cb28-485" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> gelu_forward_hook(module, <span class="bu">input</span>, output):</span>
<span id="cb28-486"><a href="#cb28-486" aria-hidden="true" tabindex="-1"></a>        gelu_outputs[module] <span class="op">=</span> output</span>
<span id="cb28-487"><a href="#cb28-487" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-488"><a href="#cb28-488" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> gelu_backward_hook(module, grad_input, grad_output):</span>
<span id="cb28-489"><a href="#cb28-489" aria-hidden="true" tabindex="-1"></a>        <span class="co"># grad_input: tuple of gradients wrt input of gelu</span></span>
<span id="cb28-490"><a href="#cb28-490" aria-hidden="true" tabindex="-1"></a>        <span class="co"># grad_output: tuple of gradients wrt output of gelu</span></span>
<span id="cb28-491"><a href="#cb28-491" aria-hidden="true" tabindex="-1"></a>        <span class="co"># guided backprop: 出力が正の位置のみ勾配を通す</span></span>
<span id="cb28-492"><a href="#cb28-492" aria-hidden="true" tabindex="-1"></a>        out <span class="op">=</span> gelu_outputs[module]</span>
<span id="cb28-493"><a href="#cb28-493" aria-hidden="true" tabindex="-1"></a>        <span class="co"># outと同じ形状で, out&gt;0のとこだけ1, それ以外0</span></span>
<span id="cb28-494"><a href="#cb28-494" aria-hidden="true" tabindex="-1"></a>        positive_mask <span class="op">=</span> (out <span class="op">&gt;</span> <span class="dv">0</span>).<span class="bu">float</span>()</span>
<span id="cb28-495"><a href="#cb28-495" aria-hidden="true" tabindex="-1"></a>        <span class="co"># grad_output[0]に対して, positive_maskをかけて負の領域をカット</span></span>
<span id="cb28-496"><a href="#cb28-496" aria-hidden="true" tabindex="-1"></a>        guided_grad <span class="op">=</span> grad_output[<span class="dv">0</span>] <span class="op">*</span> positive_mask</span>
<span id="cb28-497"><a href="#cb28-497" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> (guided_grad,)</span>
<span id="cb28-498"><a href="#cb28-498" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-499"><a href="#cb28-499" aria-hidden="true" tabindex="-1"></a>    <span class="co"># GELU層にフックを登録</span></span>
<span id="cb28-500"><a href="#cb28-500" aria-hidden="true" tabindex="-1"></a>    guided_hooks <span class="op">=</span> []</span>
<span id="cb28-501"><a href="#cb28-501" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> m <span class="kw">in</span> model.modules():</span>
<span id="cb28-502"><a href="#cb28-502" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="bu">isinstance</span>(m, nn.GELU):</span>
<span id="cb28-503"><a href="#cb28-503" aria-hidden="true" tabindex="-1"></a>            fh <span class="op">=</span> m.register_forward_hook(gelu_forward_hook)</span>
<span id="cb28-504"><a href="#cb28-504" aria-hidden="true" tabindex="-1"></a>            bh <span class="op">=</span> m.register_backward_hook(gelu_backward_hook)</span>
<span id="cb28-505"><a href="#cb28-505" aria-hidden="true" tabindex="-1"></a>            guided_hooks.append(fh)</span>
<span id="cb28-506"><a href="#cb28-506" aria-hidden="true" tabindex="-1"></a>            guided_hooks.append(bh)</span>
<span id="cb28-507"><a href="#cb28-507" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-508"><a href="#cb28-508" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> preprocess_image(img_path):</span>
<span id="cb28-509"><a href="#cb28-509" aria-hidden="true" tabindex="-1"></a>        img <span class="op">=</span> Image.<span class="bu">open</span>(img_path).convert(<span class="st">&#39;RGB&#39;</span>)</span>
<span id="cb28-510"><a href="#cb28-510" aria-hidden="true" tabindex="-1"></a>        img <span class="op">=</span> img.resize((<span class="dv">224</span>, <span class="dv">224</span>))</span>
<span id="cb28-511"><a href="#cb28-511" aria-hidden="true" tabindex="-1"></a>        img_tensor <span class="op">=</span> data_transforms[<span class="st">&#39;val&#39;</span>](img).unsqueeze(<span class="dv">0</span>).to(device)</span>
<span id="cb28-512"><a href="#cb28-512" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> img, img_tensor</span>
<span id="cb28-513"><a href="#cb28-513" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-514"><a href="#cb28-514" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> generate_gradcam():</span>
<span id="cb28-515"><a href="#cb28-515" aria-hidden="true" tabindex="-1"></a>        pooled_gradients <span class="op">=</span> torch.mean(gradients, dim<span class="op">=</span>[<span class="dv">0</span>,<span class="dv">2</span>,<span class="dv">3</span>])</span>
<span id="cb28-516"><a href="#cb28-516" aria-hidden="true" tabindex="-1"></a>        cam <span class="op">=</span> torch.zeros(features.shape[<span class="dv">2</span>:], dtype<span class="op">=</span>features.dtype, device<span class="op">=</span>features.device)</span>
<span id="cb28-517"><a href="#cb28-517" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(features.shape[<span class="dv">1</span>]):</span>
<span id="cb28-518"><a href="#cb28-518" aria-hidden="true" tabindex="-1"></a>            cam <span class="op">+=</span> pooled_gradients[i] <span class="op">*</span> features[<span class="dv">0</span>,i,:,:]</span>
<span id="cb28-519"><a href="#cb28-519" aria-hidden="true" tabindex="-1"></a>        cam <span class="op">=</span> cam.cpu().data.numpy()</span>
<span id="cb28-520"><a href="#cb28-520" aria-hidden="true" tabindex="-1"></a>        cam <span class="op">=</span> np.maximum(cam, <span class="dv">0</span>)</span>
<span id="cb28-521"><a href="#cb28-521" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> np.<span class="bu">max</span>(cam) <span class="op">!=</span> <span class="dv">0</span>:</span>
<span id="cb28-522"><a href="#cb28-522" aria-hidden="true" tabindex="-1"></a>            cam <span class="op">=</span> cam <span class="op">/</span> np.<span class="bu">max</span>(cam)</span>
<span id="cb28-523"><a href="#cb28-523" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> cam</span>
<span id="cb28-524"><a href="#cb28-524" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-525"><a href="#cb28-525" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> do_guided_backprop(model, img_tensor, target_class):</span>
<span id="cb28-526"><a href="#cb28-526" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 勾配リセット</span></span>
<span id="cb28-527"><a href="#cb28-527" aria-hidden="true" tabindex="-1"></a>        model.zero_grad()</span>
<span id="cb28-528"><a href="#cb28-528" aria-hidden="true" tabindex="-1"></a>        img_tensor.grad <span class="op">=</span> <span class="va">None</span></span>
<span id="cb28-529"><a href="#cb28-529" aria-hidden="true" tabindex="-1"></a>        <span class="co"># forward</span></span>
<span id="cb28-530"><a href="#cb28-530" aria-hidden="true" tabindex="-1"></a>        output <span class="op">=</span> model(img_tensor)</span>
<span id="cb28-531"><a href="#cb28-531" aria-hidden="true" tabindex="-1"></a>        loss <span class="op">=</span> output[<span class="dv">0</span>, target_class]</span>
<span id="cb28-532"><a href="#cb28-532" aria-hidden="true" tabindex="-1"></a>        model.zero_grad()</span>
<span id="cb28-533"><a href="#cb28-533" aria-hidden="true" tabindex="-1"></a>        loss.backward()</span>
<span id="cb28-534"><a href="#cb28-534" aria-hidden="true" tabindex="-1"></a>        guided_grad <span class="op">=</span> img_tensor.grad.data[<span class="dv">0</span>].cpu().numpy().transpose(<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">0</span>)</span>
<span id="cb28-535"><a href="#cb28-535" aria-hidden="true" tabindex="-1"></a>        guided_grad <span class="op">=</span> guided_grad <span class="op">-</span> guided_grad.<span class="bu">min</span>()</span>
<span id="cb28-536"><a href="#cb28-536" aria-hidden="true" tabindex="-1"></a>        guided_grad <span class="op">=</span> guided_grad <span class="op">/</span> (guided_grad.<span class="bu">max</span>() <span class="op">+</span> <span class="fl">1e-8</span>)</span>
<span id="cb28-537"><a href="#cb28-537" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> guided_grad</span>
<span id="cb28-538"><a href="#cb28-538" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-539"><a href="#cb28-539" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> apply_colormap_on_image(org_img, cam, alpha<span class="op">=</span><span class="fl">0.5</span>):</span>
<span id="cb28-540"><a href="#cb28-540" aria-hidden="true" tabindex="-1"></a>        H_org, W_org, _ <span class="op">=</span> org_img.shape</span>
<span id="cb28-541"><a href="#cb28-541" aria-hidden="true" tabindex="-1"></a>        cam_resized <span class="op">=</span> cv2.resize(cam, (W_org, H_org))</span>
<span id="cb28-542"><a href="#cb28-542" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-543"><a href="#cb28-543" aria-hidden="true" tabindex="-1"></a>        heatmap <span class="op">=</span> cv2.applyColorMap(np.uint8(<span class="dv">255</span><span class="op">*</span>cam_resized), cv2.COLORMAP_JET)</span>
<span id="cb28-544"><a href="#cb28-544" aria-hidden="true" tabindex="-1"></a>        heatmap <span class="op">=</span> np.float32(heatmap)<span class="op">/</span><span class="fl">255.0</span></span>
<span id="cb28-545"><a href="#cb28-545" aria-hidden="true" tabindex="-1"></a>        org_img <span class="op">=</span> np.float32(org_img)<span class="op">/</span><span class="fl">255.0</span></span>
<span id="cb28-546"><a href="#cb28-546" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-547"><a href="#cb28-547" aria-hidden="true" tabindex="-1"></a>        cam_img <span class="op">=</span> heatmap <span class="op">*</span> alpha <span class="op">+</span> org_img</span>
<span id="cb28-548"><a href="#cb28-548" aria-hidden="true" tabindex="-1"></a>        cam_img <span class="op">=</span> cam_img <span class="op">/</span> np.<span class="bu">max</span>(cam_img)</span>
<span id="cb28-549"><a href="#cb28-549" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> np.uint8(<span class="dv">255</span><span class="op">*</span>cam_img)</span>
<span id="cb28-550"><a href="#cb28-550" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-551"><a href="#cb28-551" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> guided_gradcam(guided_grad, cam):</span>
<span id="cb28-552"><a href="#cb28-552" aria-hidden="true" tabindex="-1"></a>        H, W, _ <span class="op">=</span> guided_grad.shape</span>
<span id="cb28-553"><a href="#cb28-553" aria-hidden="true" tabindex="-1"></a>        cam_resized <span class="op">=</span> cv2.resize(cam, (W, H))</span>
<span id="cb28-554"><a href="#cb28-554" aria-hidden="true" tabindex="-1"></a>        guided_gradcam <span class="op">=</span> guided_grad <span class="op">*</span> cam_resized[..., np.newaxis]</span>
<span id="cb28-555"><a href="#cb28-555" aria-hidden="true" tabindex="-1"></a>        guided_gradcam <span class="op">=</span> guided_gradcam <span class="op">-</span> guided_gradcam.<span class="bu">min</span>()</span>
<span id="cb28-556"><a href="#cb28-556" aria-hidden="true" tabindex="-1"></a>        guided_gradcam <span class="op">=</span> guided_gradcam <span class="op">/</span> (guided_gradcam.<span class="bu">max</span>()<span class="op">+</span><span class="fl">1e-8</span>)</span>
<span id="cb28-557"><a href="#cb28-557" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> guided_gradcam</span>
<span id="cb28-558"><a href="#cb28-558" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-559"><a href="#cb28-559" aria-hidden="true" tabindex="-1"></a>    gradcam_dir <span class="op">=</span> <span class="st">&#39;data/result/gradcam_guided&#39;</span></span>
<span id="cb28-560"><a href="#cb28-560" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="kw">not</span> os.path.exists(gradcam_dir):</span>
<span id="cb28-561"><a href="#cb28-561" aria-hidden="true" tabindex="-1"></a>        os.makedirs(gradcam_dir)</span>
<span id="cb28-562"><a href="#cb28-562" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-563"><a href="#cb28-563" aria-hidden="true" tabindex="-1"></a>    model.<span class="bu">eval</span>()</span>
<span id="cb28-564"><a href="#cb28-564" aria-hidden="true" tabindex="-1"></a>    <span class="im">from</span> PIL <span class="im">import</span> Image</span>
<span id="cb28-565"><a href="#cb28-565" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> cls_id, img_path <span class="kw">in</span> sample_images.items():</span>
<span id="cb28-566"><a href="#cb28-566" aria-hidden="true" tabindex="-1"></a>        <span class="co"># original画像読み込み</span></span>
<span id="cb28-567"><a href="#cb28-567" aria-hidden="true" tabindex="-1"></a>        org_img, img_tensor <span class="op">=</span> preprocess_image(img_path)</span>
<span id="cb28-568"><a href="#cb28-568" aria-hidden="true" tabindex="-1"></a>        org_img_np <span class="op">=</span> np.array(org_img)  <span class="co"># RGB, 224x224</span></span>
<span id="cb28-569"><a href="#cb28-569" aria-hidden="true" tabindex="-1"></a>        img_tensor.requires_grad <span class="op">=</span> <span class="va">True</span></span>
<span id="cb28-570"><a href="#cb28-570" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-571"><a href="#cb28-571" aria-hidden="true" tabindex="-1"></a>        <span class="co"># Grad-CAM</span></span>
<span id="cb28-572"><a href="#cb28-572" aria-hidden="true" tabindex="-1"></a>        model.zero_grad()</span>
<span id="cb28-573"><a href="#cb28-573" aria-hidden="true" tabindex="-1"></a>        output <span class="op">=</span> model(img_tensor)</span>
<span id="cb28-574"><a href="#cb28-574" aria-hidden="true" tabindex="-1"></a>        target_score <span class="op">=</span> output[<span class="dv">0</span>, cls_id]</span>
<span id="cb28-575"><a href="#cb28-575" aria-hidden="true" tabindex="-1"></a>        target_score.backward()</span>
<span id="cb28-576"><a href="#cb28-576" aria-hidden="true" tabindex="-1"></a>        cam <span class="op">=</span> generate_gradcam()</span>
<span id="cb28-577"><a href="#cb28-577" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-578"><a href="#cb28-578" aria-hidden="true" tabindex="-1"></a>        <span class="co"># Grad-CAM画像</span></span>
<span id="cb28-579"><a href="#cb28-579" aria-hidden="true" tabindex="-1"></a>        org_img_cv <span class="op">=</span> org_img_np[:,:,::<span class="op">-</span><span class="dv">1</span>].copy()</span>
<span id="cb28-580"><a href="#cb28-580" aria-hidden="true" tabindex="-1"></a>        gradcam_img <span class="op">=</span> apply_colormap_on_image(org_img_cv, cam)</span>
<span id="cb28-581"><a href="#cb28-581" aria-hidden="true" tabindex="-1"></a>        gradcam_img_rgb <span class="op">=</span> gradcam_img[:,:,::<span class="op">-</span><span class="dv">1</span>]</span>
<span id="cb28-582"><a href="#cb28-582" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-583"><a href="#cb28-583" aria-hidden="true" tabindex="-1"></a>        <span class="co"># Guided Backprop</span></span>
<span id="cb28-584"><a href="#cb28-584" aria-hidden="true" tabindex="-1"></a>        gb <span class="op">=</span> do_guided_backprop(model, img_tensor, cls_id) <span class="co"># 0-1 float</span></span>
<span id="cb28-585"><a href="#cb28-585" aria-hidden="true" tabindex="-1"></a>        g_gradcam <span class="op">=</span> guided_gradcam(gb, cam) <span class="co"># 0-1 float</span></span>
<span id="cb28-586"><a href="#cb28-586" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-587"><a href="#cb28-587" aria-hidden="true" tabindex="-1"></a>        original_uint8 <span class="op">=</span> org_img_np</span>
<span id="cb28-588"><a href="#cb28-588" aria-hidden="true" tabindex="-1"></a>        gradcam_uint8 <span class="op">=</span> gradcam_img_rgb</span>
<span id="cb28-589"><a href="#cb28-589" aria-hidden="true" tabindex="-1"></a>        gb_uint8 <span class="op">=</span> (gb<span class="op">*</span><span class="dv">255</span>).astype(np.uint8)</span>
<span id="cb28-590"><a href="#cb28-590" aria-hidden="true" tabindex="-1"></a>        g_gradcam_uint8 <span class="op">=</span> (g_gradcam<span class="op">*</span><span class="dv">255</span>).astype(np.uint8)</span>
<span id="cb28-591"><a href="#cb28-591" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-592"><a href="#cb28-592" aria-hidden="true" tabindex="-1"></a>        combined <span class="op">=</span> np.hstack([original_uint8, gradcam_uint8, gb_uint8, g_gradcam_uint8])</span>
<span id="cb28-593"><a href="#cb28-593" aria-hidden="true" tabindex="-1"></a>        plt.imsave(os.path.join(gradcam_dir, <span class="ss">f&#39;class_</span><span class="sc">{</span>cls_id<span class="sc">}</span><span class="ss">_combined.png&#39;</span>), combined)</span>
<span id="cb28-594"><a href="#cb28-594" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-595"><a href="#cb28-595" aria-hidden="true" tabindex="-1"></a>    forward_h.remove()</span>
<span id="cb28-596"><a href="#cb28-596" aria-hidden="true" tabindex="-1"></a>    backward_h.remove()</span>
<span id="cb28-597"><a href="#cb28-597" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> h <span class="kw">in</span> guided_hooks:</span>
<span id="cb28-598"><a href="#cb28-598" aria-hidden="true" tabindex="-1"></a>        h.remove()</span>
<span id="cb28-599"><a href="#cb28-599" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-600"><a href="#cb28-600" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&quot;Grad-CAM, Guided Backprop, Guided Grad-CAM 完了&quot;</span>)</span>
<span id="cb28-601"><a href="#cb28-601" aria-hidden="true" tabindex="-1"></a><span class="co">#------------------------------------------------------------------</span></span>
<span id="cb28-602"><a href="#cb28-602" aria-hidden="true" tabindex="-1"></a><span class="co">#スクリプトとして実行された場合(python convnext.py)で実行された場合に,</span></span>
<span id="cb28-603"><a href="#cb28-603" aria-hidden="true" tabindex="-1"></a><span class="co"># if __name__ == &#39;__main__&#39;: 以下のみが実行される.</span></span>
<span id="cb28-604"><a href="#cb28-604" aria-hidden="true" tabindex="-1"></a><span class="co"># 並列処理(multiprocessing)を行う場合にこのようにしないと,</span></span>
<span id="cb28-605"><a href="#cb28-605" aria-hidden="true" tabindex="-1"></a><span class="co"># 各処理ですべて同じコードが実行されるため,無限ループなどが起きる.</span></span>
<span id="cb28-606"><a href="#cb28-606" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">&#39;__main__&#39;</span>:</span>
<span id="cb28-607"><a href="#cb28-607" aria-hidden="true" tabindex="-1"></a>    main()</span></code></pre></div>
<p>yakagika</p>
]]></description>
    <pubDate>Sat, 28 Sep 2024 00:00:00 UT</pubDate>
    <guid>/lectures/slds14.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>ベイズ統計学</title>
    <link>/lectures/2024-07-12-bayesian-statistics.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#ベイズの基礎" id="toc-ベイズの基礎"><span class="toc-section-number">1</span> ベイズの基礎</a></li>
<li><a href="#一般化線形モデル" id="toc-一般化線形モデル"><span class="toc-section-number">2</span> 一般化線形モデル</a></li>
<li><a href="#pymc環境構築" id="toc-pymc環境構築"><span class="toc-section-number">3</span> pymc環境構築</a>
<ul>
<li><a href="#pyenv" id="toc-pyenv"><span class="toc-section-number">3.1</span> pyenv</a></li>
<li><a href="#anaconoda" id="toc-anaconoda"><span class="toc-section-number">3.2</span> anaconoda</a></li>
</ul></li>
<li><a href="#bambiについて" id="toc-bambiについて"><span class="toc-section-number">4</span> Bambiについて</a></li>
</ul>
</div>
<h1 data-number="1" id="ベイズの基礎"><span class="header-section-number">1</span> ベイズの基礎</h1>
<h1 data-number="2" id="一般化線形モデル"><span class="header-section-number">2</span> 一般化線形モデル</h1>
<h1 data-number="3" id="pymc環境構築"><span class="header-section-number">3</span> pymc環境構築</h1>
<h2 data-number="3.1" id="pyenv"><span class="header-section-number">3.1</span> pyenv</h2>
<h2 data-number="3.2" id="anaconoda"><span class="header-section-number">3.2</span> anaconoda</h2>
<h1 data-number="4" id="bambiについて"><span class="header-section-number">4</span> Bambiについて</h1>
]]></description>
    <pubDate>Fri, 12 Jul 2024 00:00:00 UT</pubDate>
    <guid>/lectures/2024-07-12-bayesian-statistics.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>特別講義DS Ch9 データの数値化</title>
    <link>/lectures/slds9.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#データの数値化" id="toc-データの数値化"><span class="toc-section-number">1</span> データの数値化</a>
<ul>
<li><a href="#基本統計量" id="toc-基本統計量"><span class="toc-section-number">1.1</span> 基本統計量</a></li>
<li><a href="#中心を表す基本統計量" id="toc-中心を表す基本統計量"><span class="toc-section-number">1.2</span> 中心を表す基本統計量</a></li>
<li><a href="#データの広がりを表す統計量" id="toc-データの広がりを表す統計量"><span class="toc-section-number">1.3</span> データの広がりを表す統計量</a></li>
<li><a href="#相関" id="toc-相関"><span class="toc-section-number">1.4</span> 相関</a>
<ul>
<li><a href="#ピアソンの積率相関係数" id="toc-ピアソンの積率相関係数"><span class="toc-section-number">1.4.1</span> ピアソンの積率相関係数</a></li>
<li><a href="#スピアマンの順位相関係数" id="toc-スピアマンの順位相関係数"><span class="toc-section-number">1.4.2</span> スピアマンの順位相関係数</a></li>
<li><a href="#相関係数のヒートマップ" id="toc-相関係数のヒートマップ"><span class="toc-section-number">1.4.3</span> 相関係数のヒートマップ</a></li>
<li><a href="#chi2統計量" id="toc-chi2統計量"><span class="toc-section-number">1.4.4</span> <span class="math inline">\Chi^2</span>統計量</a></li>
<li><a href="#因果関係と相関" id="toc-因果関係と相関"><span class="toc-section-number">1.4.5</span> 因果関係と相関</a></li>
<li><a href="#発展偏相関係数" id="toc-発展偏相関係数"><span class="toc-section-number">1.4.6</span> 発展:偏相関係数</a></li>
</ul></li>
<li><a href="#距離と類似度" id="toc-距離と類似度"><span class="toc-section-number">1.5</span> 距離と類似度</a></li>
</ul></li>
</ul>
</div>
<h1 data-number="1" id="データの数値化"><span class="header-section-number">1</span> データの数値化</h1>
<p>データを可視化することで,データの大まかな傾向はつかめます. しかし,グラフではデータの特徴を大まかにしか捉えることが出来ません.
実際に,データの特徴に関して言及するためにはそれを数値にする必要があります.</p>
<p>例えば,以下のヒストグラム(<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/histogram_A_B_data.csv">データ</a>)を見てみましょう.</p>
<figure>
<img src="/images/histogram_compare.png" alt="ヒストグラムの比較" />
<figcaption aria-hidden="true">ヒストグラムの比較</figcaption>
</figure>
<p>ヒストグラムAと比較して,Bはデータの<strong>中心が右</strong>にあり,データの<strong>散らばりが大きい</strong>ように見えます. しかし,それらが具体的にどの程度右にあり,どの程度散らばりが大きいのでしょうか.
このように,グラフによる比較では,抽象的な印象しか語ることができないため,データの中心や,散らばりを数値で表すことが必要です.</p>
<p>数値化の対象となる量は,データの種類や分析の目的によって様々ですが,大まかに以下のような分類が可能です.</p>
<div class="note">
<ul>
<li><h2 id="データの数値化-1">データの数値化</h2></li>
</ul>
<table>
<colgroup>
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">データの数</th>
<th style="text-align: center;">データの種類</th>
<th style="text-align: center;">求める数値</th>
<th style="text-align: center;">目的</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">量的変数</td>
<td style="text-align: center;">基本統計量</td>
<td style="text-align: center;">データの特徴を知る</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">量的変数</td>
<td style="text-align: center;">ピアソンの積率相関係数</td>
<td style="text-align: center;">データの関係を知る</td>
</tr>
<tr class="odd">
<td style="text-align: center;">2</td>
<td style="text-align: center;">質的変数</td>
<td style="text-align: center;">ピアソンのΧ二乗統計量 <br> スピアマンの順位相関係数</td>
<td style="text-align: center;">データの関係を知る</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">混在</td>
<td style="text-align: center;">寄与率,相関比</td>
<td style="text-align: center;">データの関係を知る</td>
</tr>
<tr class="odd">
<td style="text-align: center;">3以上</td>
<td style="text-align: center;"></td>
<td style="text-align: center;">次元削減,多変量解析など多数</td>
<td style="text-align: center;"></td>
</tr>
</tbody>
</table>
</div>
<h2 data-number="1.1" id="基本統計量"><span class="header-section-number">1.1</span> 基本統計量</h2>
<p>量的データを客観的に評価するために,分布の特徴を数値で表したものを<strong>基本統計量(代表値)</strong>といいます.</p>
<div class="note">
<ul>
<li>基本統計量</li>
</ul>
<table>
<colgroup>
<col style="width: 55%" />
<col style="width: 44%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">名称</th>
<th style="text-align: left;">概要</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">平均 (Mean)</td>
<td style="text-align: left;">データの平均値.量的データの分布の中心傾向を示す</td>
</tr>
<tr class="even">
<td style="text-align: center;">中央値 (Median)</td>
<td style="text-align: left;">データの順位における中央.量的データの分布の中心傾向を示す</td>
</tr>
<tr class="odd">
<td style="text-align: center;">最頻値 (Mode)</td>
<td style="text-align: left;">最も度数の多い値.量的データの分布の中心傾向を示す</td>
</tr>
<tr class="even">
<td style="text-align: center;">標準偏差 (Standard Deviation)</td>
<td style="text-align: left;">データのばらつき具合を示す.</td>
</tr>
<tr class="odd">
<td style="text-align: center;">分散 (Variance)</td>
<td style="text-align: left;">データのばらつき具合を示す.</td>
</tr>
<tr class="even">
<td style="text-align: center;">尖度 (Kurtosis)</td>
<td style="text-align: left;">外れ値の度合い</td>
</tr>
<tr class="odd">
<td style="text-align: center;">歪度 (Skewness)</td>
<td style="text-align: left;">分布の歪み</td>
</tr>
</tbody>
</table>
</div>
<p>Pythonでは, pandasのDataFrameに対して, <code>.describe()</code>メソッドを適用すると, データ数(<code>count</code>),平均値(<code>mean</code>),中央値(<code>50%</code>),四分位数(<code>24%,75%</code>),標準偏差(<code>std</code>),最大値(<code>max</code>),最小値(<code>min</code>)などが求まります.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/histogram_A_B_data.csv&#39;</span>)</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.describe())</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="co">python quantify.py</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="co">       Histogram_A  Histogram_B</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="co">count  1000.000000  1000.000000</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="co">mean     60.289981    50.708362</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="co">std      14.688239     9.974544</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="co">min      11.380990    20.596114</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="co">25%      50.286145    43.937583</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="co">50%      60.379509    50.630771</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="co">75%      69.719158    57.288822</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="co">max     117.790972    81.931076</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>それぞれの統計量の意味を順番に見ていきましょう.</p>
<h2 data-number="1.2" id="中心を表す基本統計量"><span class="header-section-number">1.2</span> 中心を表す基本統計量</h2>
<p>ヒストグラムにおける峰のある位置,分布の中心がどこにあるかを表す統計量には,<strong>平均値</strong>,<strong>中央値</strong>,<strong>最頻値</strong>などがあります. この3つは,いずれも分布の中心を表す統計量ですが,分布の歪みによって意味が異なり,使い分けが必要となります.</p>
<ul>
<li><h2 id="算術平均-mean"><strong>算術平均 (mean)</strong></h2>
分布の中心を表す統計量としてもっとも一般的なものに,平均値があります. しかし, 一言に平均といっても,いくつかの種類があるので注意しましょう. 分布の中心を表す場合に用いられる平均は基本的に算術平均ですが, ここでは異なる定義の平均として, <strong>幾何平均</strong>と<strong>調和平均</strong>も紹介します.</li>
</ul>
<p>一般に「平均」といった時にイメージされる,すべてのデータの和をデータの個数で割った値を<strong>算術平均</strong>といいます.</p>
<p>算術平均は対象とするデータを足し合わせることによって基準となる値が算出される場合に使用します.</p>
<div class="note">
<p>n個の観測値 $ x_1, x_2, …, x_n $ の時,平均値 $ {x} $ は</p>
<p><span class="math display"> \bar{x} = \frac{1}{n} (x_1 + ... + x_n) = \frac{1}{n} \sum_{i=1}^{n} x_i </span></p>
</div>
<p>例： 165,171,189の算術平均は</p>
<p><span class="math display"> \bar{x} = \frac{1}{3} (165 + 171 + 189) = 175 </span></p>
<p>となります.</p>
<p><code>pandas</code>で平均を求めるには, <code>.mean()</code>を利用します.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame({<span class="st">&#39;x&#39;</span>:[<span class="dv">165</span>,<span class="dv">171</span>,<span class="dv">189</span>]})</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;x&#39;</span>].mean()) <span class="co">#&gt;&gt;&gt;175</span></span></code></pre></div>
<ul>
<li><h2 id="幾何平均geometric-mean"><strong>幾何平均(geometric mean)</strong></h2></li>
</ul>
<p>すべてのデータを乗じて,データの数で根を取った値を<strong>幾何平均</strong>といいます. 増加率,減少率など対象とするデータを相互に乗じることによって基準となる値が算出される場合に使用します.</p>
<div class="note">
<p><span class="math inline">n</span>個の観測値 <span class="math inline">x_1, x_2, ..., x_n</span> の時,幾何平均 <span class="math inline">x_G</span> は
<span class="math display"> x_G = \sqrt[n]{x_1 \cdot x_2 \cdot ... \cdot x_n} = (\prod_{i}^{n} x_i)^{\frac{1}{n}} </span></p>
</div>
<p>例：各年の売上と,その増加率が以下のように表されるとき,平均何%売上が伸びているかを考える.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">年度</th>
<th style="text-align: center;">売上</th>
<th style="text-align: center;">増加率</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">300</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">350</td>
<td style="text-align: center;">117%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">3</td>
<td style="text-align: center;">600</td>
<td style="text-align: center;">171%</td>
</tr>
<tr class="even">
<td style="text-align: center;">4</td>
<td style="text-align: center;">1000</td>
<td style="text-align: center;">167%</td>
</tr>
</tbody>
</table>
<p>このとき算術平均を用いると,
<span class="math display"> 算術平均 = \frac{1.17 + 1.71 + 1.67}{3} \approx 1.52 </span> となり,</p>
<p><span class="math display"> 300 \cdot 1.52^3 \approx 1045 </span></p>
<p>平均的な伸び率を3回乗じても4年目の売上の値になりません. これは,毎年度の値に増加率を<strong>掛ける</strong>ことで次の年度の値が求まるのに対して,算術平均は毎年度足す操作をしたばあいの平均値を求めているからです.</p>
<p>そこで,幾何平均を求めてみると.</p>
<p><span class="math display"> 幾何平均 = \sqrt[3]{1.17 \cdot 1.71 \cdot 1.67} \approx 1.49, \\
300 \cdot 1.49^3 \approx 1000 </span>
となり, 正確に4年目の値が計算できていることが分かります.</p>
<ul>
<li><h2 id="調和平均harmonic-mean"><strong>調和平均(harmonic mean)</strong></h2>
先程の幾何平均が掛け算の平均値だったのに対して,割り算の平均値を<strong>調和平均</strong>といい,速度などの定義に割り算が含まれている計算で用います.</li>
</ul>
<p>調和平均は対象とするデータに別の値を除して足し合わせることによって基準となる値が算出される場合に使用します.</p>
<div class="note">
<p><span class="math inline">n</span>個の観測値 <span class="math inline">x_1, x_2, ..., x_n</span> の時,調和平均 <span class="math inline">x_H</span> は
<span class="math display"> \frac{1}{x_H} = \frac{1}{n} \left( \frac{1}{x_1} + ... + \frac{1}{x_n} \right) \\
\iff \\
x_H = \frac{n}{\frac{1}{x_1} + ... + \frac{1}{x_n}}  = \frac{n}{\sum_{i=1}^{n} \frac{1}{x_i}}</span></p>
</div>
<p>例：平均速度</p>
<p>100kmの道のりを行きは車 (60km/h),帰りは自転車 (30km/h) で移動した場合,算術平均は 45km/hとなります. しかし,</p>
<p>かかった時間は <span class="math inline">\frac{距離}{速度}</span>で求まるので,
車は <span class="math inline">\frac{100}{60}</span>, 自転車 は <span class="math inline">\frac{100}{30}</span> となり,速度は <span class="math inline">\frac{距離}{時間}</span> で求まるので</p>
<p>平均速度は,
<span class="math display"> \frac{200}{\frac{200}{60} + \frac{200}{30}} = \frac{2}{\frac{1}{30} + \frac{1}{60}} = 40 </span></p>
<p>となります. 算術平均では正確に計算できていないことが分かります.</p>
<p>この <span class="math display">\frac{200}{\frac{200}{60} + \frac{200}{30}} </span>
が調和平均です.</p>
<ul>
<li><h2 id="中央値median"><strong>中央値(median)</strong></h2></li>
</ul>
<p>中心を表す統計量として,データを昇順に並び替えて,そのちょうど真ん中の数を表す<strong>中央値</strong>も良く利用されます.</p>
<div class="note">
<p><span class="math inline">n</span>個の観測値を大きさの順に並べ替えて <span class="math inline">x_1, x_2, ..., x_n</span> とした時,
中央値 <span class="math inline">\tilde{x}</span> は</p>
<p><span class="math display"> \tilde{x} =
\begin{cases}
x_{\frac{n+1}{2}}, ~~&amp; if ~~ n \mod 2 \neq 0 \\
\frac{x_{ \frac{n}{2}} + x_{\frac{n}{2} + 1 }}{2}, ~~ &amp; if~~ n \mod 2 = 0
\end{cases}
</span></p>
</div>
<p>例：観測値が <span class="math inline">3, 4, 7, 9, 11, 12, 15</span> の時 中央値は
<span class="math display"> \tilde{x} = x_{\frac{n+1}{2}} = x_{\frac{8}{2}} = x_4 = 9 </span></p>
<p>となります.</p>
<p>また,観測値が <span class="math inline">4, 5, 6, 10, 14, 17</span> のように偶数個の場合は
<span class="math display"> \tilde{x} = \frac{x_{ \frac{n}{2}} + x_{\frac{n}{2} + 1 }}{2} = \frac{6 + 10}{2} = 8 </span></p>
<p>となります.</p>
<p><code>pandas</code>では,中央値は<code>.median()</code>で求めることができます.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame({<span class="st">&#39;x&#39;</span>:[<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">7</span>,<span class="dv">9</span>,<span class="dv">11</span>,<span class="dv">12</span>,<span class="dv">15</span>]})</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;x&#39;</span>].median()) <span class="co">#9.0</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame({<span class="st">&#39;x&#39;</span>:[<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">10</span>,<span class="dv">14</span>,<span class="dv">17</span>]})</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;x&#39;</span>].median()) <span class="co">#8.0</span></span></code></pre></div>
<ul>
<li><h2 id="四分位数-quartiles">四分位数 (quartiles)</h2></li>
</ul>
<p><strong>中央値:</strong> データを小さい順に並べた時に観測数が50%となる点</p>
<p><strong>四分位数:</strong>
データを小さい順に並べた時に,観測数が25%, 50%, 75%となる点.
第一四分位数 (25%),第二四分位数 (50%),第三四分位数 (75%)</p>
<p><strong>四分位範囲:</strong>
四分位範囲 = 第一四分位数から第三四分位数の範囲</p>
<figure>
<img src="/images/quartiles.png" alt="四分位数" />
<figcaption aria-hidden="true">四分位数</figcaption>
</figure>
<p><code>pandas</code>で四分位数を用いるには, <code>.quantile(q=%点の数値,interpolation='nearest')</code>で求めることができます.
<code>interpolation</code> (補間) は,値がインデックス<code>i</code>と<code>j</code>の間にある場合に補間する方法を指定する引数で以下のような設定が可能です.</p>
<p><code>.quantile()</code>では, データの最大インデックス掛ける<code>q</code>で必要な値を求めます. なので例えば<code>xs=[2,5,8,9,11,13,15,16,19,22,24]</code>の25%点は,<code>10*0.25=2.5</code>となり<code>xs[2.5]</code>となるような点を求めます.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">引数</th>
<th style="text-align: left;">効果</th>
<th style="text-align: left;">25%点の場合の計算</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>'linear'</code></td>
<td style="text-align: left;">線形補間</td>
<td style="text-align: left;"><code>xs[2] + (xs[2] - xs[3]) * 0.5 = 8.5</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>'lower'</code></td>
<td style="text-align: left;">小さい方</td>
<td style="text-align: left;"><code>xs[2] = 8</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>'higher'</code></td>
<td style="text-align: left;">大きい方</td>
<td style="text-align: left;"><code>xs[3] = 9</code></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>'midpoint'</code></td>
<td style="text-align: left;">中間</td>
<td style="text-align: left;"><code>(xs[2] + xs[3])/2 = 8.5</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>'nearest'</code></td>
<td style="text-align: left;">近い方</td>
<td style="text-align: left;"><code>xs[2] = 8</code></td>
</tr>
</tbody>
</table>
<div class="sourceCode" id="cb4"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>xs <span class="op">=</span> [<span class="dv">2</span>,<span class="dv">5</span>,<span class="dv">8</span>,<span class="dv">9</span>,<span class="dv">11</span>,<span class="dv">13</span>,<span class="dv">15</span>,<span class="dv">16</span>,<span class="dv">19</span>,<span class="dv">22</span>,<span class="dv">24</span>]</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame({<span class="st">&#39;x&#39;</span>:xs})</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;25%点:&#39;</span>,df[<span class="st">&#39;x&#39;</span>].quantile(q<span class="op">=</span><span class="fl">0.25</span>, interpolation<span class="op">=</span><span class="st">&#39;linear&#39;</span>))</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;25%点:&#39;</span>,df[<span class="st">&#39;x&#39;</span>].quantile(q<span class="op">=</span><span class="fl">0.25</span>, interpolation<span class="op">=</span><span class="st">&#39;nearest&#39;</span>))</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;50%点:&#39;</span>,df[<span class="st">&#39;x&#39;</span>].quantile(q<span class="op">=</span><span class="fl">0.5</span>, interpolation<span class="op">=</span><span class="st">&#39;nearest&#39;</span>))</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;75%点:&#39;</span>,df[<span class="st">&#39;x&#39;</span>].quantile(q<span class="op">=</span><span class="fl">0.75</span>, interpolation<span class="op">=</span><span class="st">&#39;nearest&#39;</span>))</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="co">25%点: 8.5</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="co">25%点: 8</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="co">50%点: 13</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="co">75%点: 19</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<ul>
<li><h2 id="最頻値-mode">最頻値 (mode)</h2></li>
</ul>
<p>中心を表す統計量の最後は,最も頻繁にあらわれる値,すなわち度数分布表において最も度数の高い階級を表す<strong>最頻値</strong>です.</p>
<div class="note">
<p>最頻値はデータの種類に応じて,意味が異なるので注意が必要です.
(※ 質的データの平均値などは定義できません)</p>
<ul>
<li><p>質的データの場合</p>
<ul>
<li>最大度数のカテゴリー</li>
</ul></li>
<li><p>量的データの場合</p>
<ul>
<li><p>最大度数の階級 = 最頻階級 (modal class)</p></li>
<li><p>長さや気温など同じ間隔で値が存在するもの</p></li>
</ul></li>
</ul>
</div>
<p><code>pandas</code>で最頻値を求める方法は色々ありますが, 単純に同じデータが最も多い値を探す場合には<code>.mode()</code>が利用できます. <code>.mode()</code>は最頻値が複数ある場合に対応するために<code>DataSeries</code>Objectを返すので,<code>[0]</code>で最初の値を取っています.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame({<span class="st">&#39;x&#39;</span>:[<span class="st">&#39;A&#39;</span>,<span class="st">&#39;A&#39;</span>,<span class="st">&#39;B&#39;</span>,<span class="st">&#39;C&#39;</span>]})</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;x&#39;</span>].mode()[<span class="dv">0</span>]) <span class="co"># A</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame({<span class="st">&#39;x&#39;</span>:[<span class="dv">1</span>,<span class="dv">3</span>,<span class="dv">2</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">3</span>]})</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;x&#39;</span>].mode()[<span class="dv">0</span>]) <span class="co"># 3</span></span></code></pre></div>
<p>しかし,この方法では連続値の数値などにおける定義での最頻値は求められません. 特定の区間の最頻値を求めたい場合は<code>value_count()</code>などを利用して求めましょう.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co"># ランダムな1から100までのデータの生成</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>np.random.seed(<span class="dv">0</span>)  <span class="co"># 再現性のためにシードを設定</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame({<span class="st">&#39;x&#39;</span>:np.random.randint(<span class="dv">0</span>, <span class="dv">101</span>, size<span class="op">=</span><span class="dv">1000</span>)})</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="co">#10区切りで度数を求める</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>bins <span class="op">=</span> [<span class="dv">0</span>,<span class="dv">10</span>,<span class="dv">20</span>,<span class="dv">30</span>,<span class="dv">40</span>,<span class="dv">50</span>,<span class="dv">60</span>,<span class="dv">70</span>,<span class="dv">80</span>,<span class="dv">90</span>,<span class="dv">100</span>]</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>freq <span class="op">=</span> df[<span class="st">&#39;x&#39;</span>].value_counts(bins <span class="op">=</span>bins, sort<span class="op">=</span><span class="va">False</span>)</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(freq)</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="co">#最大の度数のindexを取得</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(freq.idxmax())</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a><span class="co">      x</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a><span class="co">0    44</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a><span class="co">1    47</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a><span class="co">2    64</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a><span class="co">3    67</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a><span class="co">4    67</span></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a><span class="co">..   ..</span></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a><span class="co">995  79</span></span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a><span class="co">996  41</span></span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a><span class="co">997  17</span></span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a><span class="co">998  80</span></span>
<span id="cb6-25"><a href="#cb6-25" aria-hidden="true" tabindex="-1"></a><span class="co">999  43</span></span>
<span id="cb6-26"><a href="#cb6-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-27"><a href="#cb6-27" aria-hidden="true" tabindex="-1"></a><span class="co">[1000 rows x 1 columns]</span></span>
<span id="cb6-28"><a href="#cb6-28" aria-hidden="true" tabindex="-1"></a><span class="co">(-0.001, 10.0]    121</span></span>
<span id="cb6-29"><a href="#cb6-29" aria-hidden="true" tabindex="-1"></a><span class="co">(10.0, 20.0]       87</span></span>
<span id="cb6-30"><a href="#cb6-30" aria-hidden="true" tabindex="-1"></a><span class="co">(20.0, 30.0]       96</span></span>
<span id="cb6-31"><a href="#cb6-31" aria-hidden="true" tabindex="-1"></a><span class="co">(30.0, 40.0]      107</span></span>
<span id="cb6-32"><a href="#cb6-32" aria-hidden="true" tabindex="-1"></a><span class="co">(40.0, 50.0]       94</span></span>
<span id="cb6-33"><a href="#cb6-33" aria-hidden="true" tabindex="-1"></a><span class="co">(50.0, 60.0]       92</span></span>
<span id="cb6-34"><a href="#cb6-34" aria-hidden="true" tabindex="-1"></a><span class="co">(60.0, 70.0]       97</span></span>
<span id="cb6-35"><a href="#cb6-35" aria-hidden="true" tabindex="-1"></a><span class="co">(70.0, 80.0]      103</span></span>
<span id="cb6-36"><a href="#cb6-36" aria-hidden="true" tabindex="-1"></a><span class="co">(80.0, 90.0]      103</span></span>
<span id="cb6-37"><a href="#cb6-37" aria-hidden="true" tabindex="-1"></a><span class="co">(90.0, 100.0]     100</span></span>
<span id="cb6-38"><a href="#cb6-38" aria-hidden="true" tabindex="-1"></a><span class="co">Name: count, dtype: int64</span></span>
<span id="cb6-39"><a href="#cb6-39" aria-hidden="true" tabindex="-1"></a><span class="co">(-0.001, 10.0]</span></span>
<span id="cb6-40"><a href="#cb6-40" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<div class="note">
<ul>
<li><h2 id="中心を表す代表値の使い分け">中心を表す代表値の使い分け</h2></li>
</ul>
<p>中心を表す基本統計量である,<strong>算術平均</strong>,<strong>中央値</strong>,<strong>最頻値</strong>は,ヒストグラムが<strong>単峰で左右対称</strong>である場合一致します. したがってヒストグラムを作成して単峰で左右対称である場合には,どの値を利用しても大きな違いは生まれません.</p>
<p>一方で,分布が歪んでいる場合には,それぞれの統計量の値が変わります. 中心を表す統計量として,何も考えずに算術平均を利用する人がいますが,分布が歪んでいる場合には目的に応じて最頻値や中央値の方が適当である場合があります.</p>
<figure>
<img src="/images/mean_median_mode.png" alt="分布の歪みと中心" />
<figcaption aria-hidden="true">分布の歪みと中心</figcaption>
</figure>
<p>例えば,以下の図は,日本人の平均所得を表したヒストグラムです.</p>
<figure>
<img src="/images/mean_median_mode2.png" alt="https://www.mhlw.go.jp/toukei/saikin/hw/k-tyosa/k-tyosa09/2-2.html" />
<figcaption aria-hidden="true"><a href="https://www.mhlw.go.jp/toukei/saikin/hw/k-tyosa/k-tyosa09/2-2.html">https://www.mhlw.go.jp/toukei/saikin/hw/k-tyosa/k-tyosa09/2-2.html</a></figcaption>
</figure>
<p>この図では,分布が大きく右に歪んでいるため平均値,中央値,最頻値の値が異なっています.それぞれの値が何を意味するのかを考えてみましょう.</p>
<ul>
<li>平均値: 547万円
<ul>
<li>全員の所得を足して一人あたりで割る(仮に全員平等にもらえるならこの金額)</li>
</ul></li>
<li>中央値: 427万円
<ul>
<li>下から所得の低い順に並んだときに真ん中の人(これ以上なら真ん中より上の所得)</li>
</ul></li>
<li>最頻値: 250万円
<ul>
<li>一番多い(街で適当に声をかけるとコレくらいである可能性が高い)</li>
</ul></li>
</ul>
<p>このようなときに, 世間一般の人の感覚を表す値として平均値を利用することは適当ではないでしょう. 平均値は,分布が歪んでいる場合には少数のデータに大きく引っ張られるため全体の傾向を表せない場合があります.</p>
<p>例えば,年収300万円の人が100人いる村に年収50億円の野球選手が引っ越してくると,平均年収は5000万円,中央値,最頻値は300万円になります.</p>
<p>統計量はそれぞれの意味を把握したうえで, 目的に応じて使い分けるようにしましょう.</p>
</div>
<h2 data-number="1.3" id="データの広がりを表す統計量"><span class="header-section-number">1.3</span> データの広がりを表す統計量</h2>
<p>分布の中心がどこかという点の他に,データがどのように広がっているかもデータの特徴を記述するうえでは重要です.</p>
<figure>
<img src="/images/histogram_compare.png" alt="ヒストグラムの比較" />
<figcaption aria-hidden="true">ヒストグラムの比較</figcaption>
</figure>
<p>データの広がり具合を<strong>散布度</strong>といいますが,散布度を表す統計量として代表的なものに<strong>分散</strong>と<strong>標準偏差</strong>があります.</p>
<p>データの散らばり具合を数値化するために,どのように考えるかを順におって見ましょう.
データがどの程度散らばっているかを考える際の基準の一つが算術平均 <span class="math inline">\bar{x}</span> です.
各データ <span class="math inline">x_i</span> が,データの算術平均からどの程度離れているのかを考えてみましょう.</p>
<figure>
<img src="/images/deviation.png" alt="偏差" />
<figcaption aria-hidden="true">偏差</figcaption>
</figure>
<div class="note">
<ul>
<li><strong>偏差(deviation)</strong></li>
</ul>
<p><span class="math display"> \text{観測値} x_i  \text{と平均} \bar{x} \text{の差} = x_i - \bar{x} </span></p>
</div>
<p>この偏差がデータ全体でどのくらい大きいのかを考えるために<strong>偏差の平均</strong>を取ります.
ただし,平均からの差は,すべて足し合わせると0になるため,絶対値を取ります.これを<strong>平均偏差</strong>と呼びます.</p>
<div class="note">
<ul>
<li><strong>平均偏差(mean deviation)</strong></li>
</ul>
<p>各観測値が平均からどれだけ離れているかの絶対値平均</p>
<p><span class="math display"> d = \frac{1}{n} \sum_{i=1}^{n} |x_i - \bar{x}| </span></p>
</div>
<p>絶対値の計算は面倒なので,値が大きくはなるけれど2乗してみることにします. これが<strong>分散</strong>です.</p>
<div class="note">
<ul>
<li><strong>分散(variance)</strong></li>
</ul>
<p>各観測値の偏差の2乗の平均</p>
<p><span class="math display"> S^2 = \frac{1}{n} \sum_{i=1}^{n} (x_i - \bar{x})^2 </span></p>
</div>
<p>2乗すると値が大きくなるので,単位をもとのデータに合わせるために分散の平方根をとります(例えば, <span class="math inline">x_i</span> の単位がKgのとき, <span class="math inline">S^2</span> の単位は <span class="math inline">Kg^2</span> となってしまう).これを標準偏差といいます.</p>
<div class="note">
<ul>
<li><strong>標準偏差(standard deviation)</strong></li>
</ul>
<p><span class="math display"> S = \sqrt{S^2} </span></p>
</div>
<p>例えば, データが<code>[9,6,12,18,10]</code>の場合を考えてみましょう. 何を計算しているのか,イメージしながら順番に計算していきましょう.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>data <span class="op">=</span> [<span class="dv">9</span>,<span class="dv">6</span>,<span class="dv">12</span>,<span class="dv">18</span>,<span class="dv">10</span>]</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame({<span class="st">&#39;data&#39;</span>:data})</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="co">  data</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="co">0     9</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="co">1     6</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="co">2    12</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="co">3    18</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="co">4    10</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>まずは平均からの差(偏差)を求めてみます.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co">#平均</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>barx <span class="op">=</span> df[<span class="st">&#39;data&#39;</span>].mean()</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(barx) <span class="co">#11.0</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="co"># 偏差</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;dev&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;data&#39;</span>] <span class="op">-</span> barx</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="co">   data  dev</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="co">0     9 -2.0</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="co">1     6 -5.0</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="co">2    12  1.0</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a><span class="co">3    18  7.0</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a><span class="co">4    10 -1.0</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>次に偏差の2乗とその平均(分散)を求めます.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co">#偏差の2乗</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;dev2&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;dev&#39;</span>] <span class="op">*</span> df[<span class="st">&#39;dev&#39;</span>]</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="co">   data  dev  dev2</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="co">0     9 -2.0   4.0</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="co">1     6 -5.0  25.0</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="co">2    12  1.0   1.0</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a><span class="co">3    18  7.0  49.0</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="co">4    10 -1.0   1.0</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a><span class="co">#偏差の2乗の平均(分散)</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;dev2&#39;</span>].mean()) <span class="co">#16.0</span></span></code></pre></div>
<p>最後に分散の累乗根をとって,標準偏差を求めます.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">#偏差の2乗の平均の累乗根(標準偏差)</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(np.sqrt(df[<span class="st">&#39;dev2&#39;</span>].mean())) <span class="co">#4.0</span></span></code></pre></div>
<p>計算から,このデータの分散は<code>16</code>,標準偏差は<code>4</code>であることが分かりました.</p>
<p><code>pandas</code>では,分散は<code>.var(ddof=0)</code>,標準偏差は<code>.std(ddof=0)</code>で求めることができます.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;分散:&#39;</span>,df[<span class="st">&#39;data&#39;</span>].var(ddof<span class="op">=</span><span class="dv">0</span>)) <span class="co">#16.0</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;標準偏差:&#39;</span>,df[<span class="st">&#39;data&#39;</span>].std(ddof<span class="op">=</span><span class="dv">0</span>)) <span class="co">#4.0</span></span></code></pre></div>
<div class="warn">
<ul>
<li>不偏分散,不偏標準偏差</li>
</ul>
<p><code>.var()</code>と<code>.std()</code>における引数<code>ddof=0</code>とはなんでしょうか.これは,分散を求める際の分母の値から引く数を表しています(引いた後の値を自由度といいます).</p>
<p>デフォルトの値は,<code>ddof=1</code>となっており,</p>
<p><span class="math display">\frac{1}{n-1} \sum_{i=1}^{n} (x_i - \bar{x})^2</span> を求めています.</p>
<p>このような分母が <span class="math inline">n-1</span>となっている分散を<strong>不偏分散</strong>といいます. 一方で,これまで計算してきた値を<strong>標本分散</strong>といいます.</p>
<p>不偏分散の意味に関しては, 統計学入門で学習していただくとして,ここでは一言に分散や標準偏差といっても,
細かくは<strong>標本分散</strong>,<strong>不偏分散</strong>,<strong>母分散</strong>などの異なる概念があることに注意しましょう.
特にプログラムにおいて, 分散や標準偏差を求める際には,それがなんの値なのかに注意が必要です.
ネット上の記事などにおいても混同していることが多いので, 実際に自分で計算して確かめることをおすすめします.</p>
<p>例えば,<code>pandas</code>における<code>describe()</code>で表示される<code>std</code>は不偏標準偏差であり,<code>std(ddof=0)</code>の値とは異なります.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;data&#39;</span>].describe())</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="co">count     5.000000</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="co">mean     11.000000</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="co">std       4.472136</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="co">min       6.000000</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a><span class="co">25%       9.000000</span></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a><span class="co">50%      10.000000</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a><span class="co">75%      12.000000</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a><span class="co">max      18.000000</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a><span class="co">Name: data, dtype: float64</span></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
</div>
<div class="note">
<ul>
<li><p>演習</p></li>
<li><p>算術平均,幾何平均, 調和平均,標本標準偏差を計算する関数をそれぞれ作成してください.</p></li>
<li><p><a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/histogram_A_B_data.csv">こちら</a>のデータの列ごとの算術平均,中央値,最頻値,標本分散,標本標準偏差を求めよ</p></li>
</ul>
</div>
<h2 data-number="1.4" id="相関"><span class="header-section-number">1.4</span> 相関</h2>
<p>基本統計量は,一つの観測項目に対する数値化の手法でしたが,可視化における散布図のように,2つの観測項目間の関係を数値で表すことが可能です.</p>
<p>散布図の節で扱った<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/scatter.csv">事例</a>についてもう一度考えてみましょう.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>     <span class="ex">AI</span>  Python</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>    34      27</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>    40      26</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>    59      28</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>    46      29</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>    36      29</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="ex">..</span>   ..     ...</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="ex">255</span>  58      83</span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="ex">256</span>  69      87</span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="ex">257</span>  59      82</span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a><span class="ex">258</span>  62      84</span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a><span class="ex">259</span>  59      87</span></code></pre></div>
<div class="sourceCode" id="cb14"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/scatter.csv&#39;</span>)</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="co">#散布図のx軸を指定</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>x_column <span class="op">=</span> <span class="st">&#39;AI&#39;</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="co">#散布図のy軸を指定</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>y_column <span class="op">=</span> <span class="st">&#39;Python&#39;</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>x_value <span class="op">=</span> df[x_column]</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>y_value <span class="op">=</span> df[y_column]</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>plt.scatter(x_value, y_value)</span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>plt.ylabel(y_column)</span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>plt.xlabel(x_column)</span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/scatter.png" alt="散布図" />
<figcaption aria-hidden="true">散布図</figcaption>
</figure>
<p>Google Trendの <code>AI</code>と<code>Python</code>の検索数から散布図を作成すると, AIの検索数が増えるにつれて<code>Python</code>の検索数が増えていることが分かります.</p>
<div class="note">
<ul>
<li><h2 id="相関関係">相関関係</h2></li>
</ul>
<p>このような関係を<strong>相関関係(correlation)</strong>といい,2つの変数の間に直線関係に近い傾向が見られるときに｢<strong>相関関係がある</strong>｣といいます.</p>
<p>直線的であるほど<strong>強い相関</strong>,逆を<strong>弱い相関</strong>といいます.</p>
<p>また,</p>
<ul>
<li>一方が増加したとき,他方が増加する関係を <strong>正の相関関係</strong></li>
<li>一方が増加したとき,他方が減少する関係を <strong>負の相関関係</strong></li>
</ul>
<p>といいます.</p>
<p>このような相関関係があるかないかは,散布図を見ただけである程度判断が可能ですが, 相関が<strong>ある/ない</strong>,<strong>強い/弱い</strong>というのは抽象的な表現なので, 厳密に判断する場合にはそれらを数値として表す必要があります.</p>
<figure>
<img src="/images/corre1.png" alt="相関関係" />
<figcaption aria-hidden="true">相関関係</figcaption>
</figure>
<p>相関関係を数値化したものを<strong>相関係数(correlation coefficient)</strong>といい,データの尺度に応じて,以下のような種類が存在します.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">尺度</th>
<th style="text-align: center;">係数</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">量的変数 <span class="math inline">\times</span> 量的変数</td>
<td style="text-align: center;">ピアソンの積率相関係数</td>
</tr>
<tr class="even">
<td style="text-align: center;">順位尺度 <span class="math inline">\times</span> 順位尺度</td>
<td style="text-align: center;">スピアマンの順位相関係数</td>
</tr>
<tr class="odd">
<td style="text-align: center;">名義尺度 <span class="math inline">\times</span> 質的変数</td>
<td style="text-align: center;">ピアソンの <span class="math inline">\Chi^2</span> 統計量</td>
</tr>
</tbody>
</table>
</div>
<h3 data-number="1.4.1" id="ピアソンの積率相関係数"><span class="header-section-number">1.4.1</span> ピアソンの積率相関係数</h3>
<p>2つの量的変数に利用される相関係数を<strong>ピアソンの積率相関係数(product moment correlation coefficient)</strong>といいます.</p>
<p>データが <span class="math inline">(x_1, y_1), (x_2, y_2), ..., (x_n, y_n)</span> の時,</p>
<p><span class="math display">
\begin{align*}
r_{xy} &amp;= \frac{\sum (x_i - \bar{x})(y_i - \bar{y}) / n}{\sqrt{\sum (x_i - \bar{x})^2 / n} \sqrt{\sum (y_i - \bar{y})^2 / n}} \\
&amp; = \frac{\sum (x_i - \bar{x})(y_i - \bar{y})}{\sqrt{\sum (x_i - \bar{x})^2} \sqrt{\sum (y_i - \bar{y})^2}} \\
&amp;= \frac{s_{xy}}{s_x s_y}
\end{align*}
</span></p>
<p>なお,
<span class="math display">
\quad s_{xy} = \frac{1}{n} \sum (x_i - \bar{x})(y_i - \bar{y})
</span>
を <span class="math inline">x</span> と <span class="math inline">y</span> の共分散といい,相関係数は <span class="math inline">\frac{xとyの共分散}{xの標準偏差 \times yの標準偏差}</span>の形で表されます.</p>
<p><img src="/images/corre2.png" alt="ピアソンの積率相関係数のイメージ" />
<img src="/images/corre3.png" alt="ピアソンの積率相関係数のイメージ" />
<img src="/images/corre4.png" alt="ピアソンの積率相関係数のイメージ" /></p>
<p><span class="math inline">x_i, y_i</span> を標準化し <span class="math inline">z_i = \frac{x_i - \bar{x}}{s_x}, w_i = \frac{y_i - \bar{y}}{s_y}</span> とすると,</p>
<p><span class="math display">
\begin{align*}
r_{zw} &amp;= \frac{1}{n} \sum z_i w_i \\
&amp;= \frac{1}{n S_z S_w} \sum (x_i - \bar{x})(y_i - \bar{y}) \\
&amp;= \frac{1}{n} \sum \left( \frac{x_i - \bar{x}}{S_x} \right) \left( \frac{y_i - \bar{y}}{S_y} \right) \\
&amp;= \frac{\sum (x_i - \bar{x})(y_i - \bar{y})}{n S_x S_y} \\
&amp;= r_{xy}
\end{align*}
</span></p>
<p>このとき,証明の為に <span class="math inline">\frac{1}{n} \sum (z_i \pm w_i)^2</span> を考える.</p>
<p><span class="math display">
\begin{align*}
\frac{1}{n} \sum (z_i \pm w_i)^2 &amp;\geq 0 \\
\frac{1}{n} \sum (z_i^2 \pm 2z_i w_i + w_i^2) &amp;\geq 0 \\
\frac{1}{n} \sum z_i^2 \pm \frac{2}{n} \sum z_i w_i + \frac{1}{n} \sum w_i^2 &amp;\geq 0 \\
\frac{1}{n S_x^2} \sum (x_i - \bar{x})^2 \pm \frac{2}{n} \sum z_i w_i + \frac{1}{n S_y^2} \sum (y_i - \bar{y})^2 &amp;\geq 0  \\
\frac{S_x^2}{S_x^2} + \frac{2}{n} \sum z_i w_i + \frac{S_y^2}{S_y^2}  &amp;\geq 0 \\
1 \pm \frac{2}{n} \sum z_i w_i + 1 &amp;\geq 0 \\
2 (1 \pm r_{xy}) &amp;\geq 0 \\
-1 \leq r_{xy} \leq 1
\end{align*}
</span></p>
<p>このように相関係数は常に <span class="math inline">-1 \leq r_{xy} \leq 1</span> を取ります.</p>
<p>また, <span class="math inline">c</span>を<span class="math inline">c &gt; 0</span>の定数として$すべての点で <span class="math inline">x_i = c y_i</span> が成り立つとき, <span class="math inline">\bar{x} = c \bar{y_i}</span> が成り立ち,</p>
<p><span class="math display">
\begin{align*}
S_y &amp;= \sqrt{\frac{1}{n} \sum (y_i - \bar{y})^2} \\
    &amp;= \sqrt{\frac{1}{n} \sum (c x_i  - c \bar{y})^2} \\
    &amp;= \sqrt{\frac{c^2}{n} \sum (x_i - \bar{x})}
\end{align*}
</span></p>
<p>となります.
したがって,</p>
<p><span class="math display">
\begin{align*}
r &amp;= \frac{\frac{1}{n} \sum (x_i - \bar{x})(y_i - \bar{y})}{S_x \times S_y} \\
  &amp;= \frac{\frac{c}{n} \sum (x_i - \bar{x})(x_i - \bar{x})}{S_x \times S_x} \\
  &amp;= \frac{c S_x^2}{c S_x^2} = 1
\end{align*}
</span></p>
<p>となり,<code>1</code>となります. また, <span class="math inline">c &lt; 0</span> の場合は, <span class="math inline">S_x \times S_y = -c S_x^2</span>となるので,<code>-1</code>になります.</p>
<p>このように<span class="math inline">x_i</span>と<span class="math inline">y_i</span>が同じ比率で増減するとき,</p>
<ul>
<li><span class="math inline">r_{xy} = 1</span> となり,正の完全相関</li>
<li><span class="math inline">r_{xy} = -1</span> となり,負の完全相関</li>
</ul>
<p>といいます.</p>
<p>なお, 相関が「ある/ない」の目安は以下のようになっています.</p>
<table>
<thead>
<tr class="header">
<th>相関係数</th>
<th>関連性の程度</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0.0～0.4 ,0.0～-0.4</td>
<td>ほとんど相関がない</td>
</tr>
<tr class="even">
<td>0.4～0.7 ,-0.4～-0.7</td>
<td>弱い相関がある</td>
</tr>
<tr class="odd">
<td>0.7～0.9 ,-0.7～-0.9</td>
<td>強い相関がある</td>
</tr>
<tr class="even">
<td>0.9～1.0 ,-0.9～-1.0</td>
<td>きわめて強い相関がある</td>
</tr>
</tbody>
</table>
<p>Pythonで積率相関係数を求めるには <code>numpy</code>の<code>np.corrcoef(xのデータ,yのデータ)</code>あるいは,<code>scipy.stats.pearsonr(xのデータ,yのデータ)</code>を利用します. <code>scipy</code>がインストールされていない人は <code>pip install scipy</code>をしておきましょう.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas               <span class="im">as</span> pd</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.pyplot    <span class="im">as</span> plt</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> japanize_matplotlib</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> scipy.stats <span class="im">as</span> st</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a><span class="co">#データの読み込み</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a><span class="co">#データの位置を指定しよう</span></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;Data/scatter.csv&#39;</span>)</span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a><span class="co">#散布図のx軸を指定</span></span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a>x_column <span class="op">=</span> <span class="st">&#39;AI&#39;</span></span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true" tabindex="-1"></a><span class="co">#散布図のy軸を指定</span></span>
<span id="cb15-15"><a href="#cb15-15" aria-hidden="true" tabindex="-1"></a>y_column <span class="op">=</span> <span class="st">&#39;Python&#39;</span></span>
<span id="cb15-16"><a href="#cb15-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-17"><a href="#cb15-17" aria-hidden="true" tabindex="-1"></a>x_value <span class="op">=</span> df[x_column]</span>
<span id="cb15-18"><a href="#cb15-18" aria-hidden="true" tabindex="-1"></a>y_value <span class="op">=</span> df[y_column]</span>
<span id="cb15-19"><a href="#cb15-19" aria-hidden="true" tabindex="-1"></a>plt.scatter(x_value, y_value)</span>
<span id="cb15-20"><a href="#cb15-20" aria-hidden="true" tabindex="-1"></a>plt.ylabel(y_column)</span>
<span id="cb15-21"><a href="#cb15-21" aria-hidden="true" tabindex="-1"></a>plt.xlabel(x_column)</span>
<span id="cb15-22"><a href="#cb15-22" aria-hidden="true" tabindex="-1"></a>plt.show()</span>
<span id="cb15-23"><a href="#cb15-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-24"><a href="#cb15-24" aria-hidden="true" tabindex="-1"></a><span class="co"># numpyで相関係数を求める</span></span>
<span id="cb15-25"><a href="#cb15-25" aria-hidden="true" tabindex="-1"></a><span class="co"># 返り値が [[xとxの相関係数=1, xとyの相関係数]</span></span>
<span id="cb15-26"><a href="#cb15-26" aria-hidden="true" tabindex="-1"></a><span class="co"># ,[yとxの相関係数, yとyの相関係数=1]]</span></span>
<span id="cb15-27"><a href="#cb15-27" aria-hidden="true" tabindex="-1"></a><span class="co"># となっている</span></span>
<span id="cb15-28"><a href="#cb15-28" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(np.corrcoef(df[x_column],df[y_column]))</span>
<span id="cb15-29"><a href="#cb15-29" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb15-30"><a href="#cb15-30" aria-hidden="true" tabindex="-1"></a><span class="co">[[1.         0.83281294]</span></span>
<span id="cb15-31"><a href="#cb15-31" aria-hidden="true" tabindex="-1"></a><span class="co"> [0.83281294 1.        ]]</span></span>
<span id="cb15-32"><a href="#cb15-32" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb15-33"><a href="#cb15-33" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(np.corrcoef(df[x_column],df[y_column])[<span class="dv">0</span>][<span class="dv">1</span>])</span>
<span id="cb15-34"><a href="#cb15-34" aria-hidden="true" tabindex="-1"></a><span class="co"># 0.83281294</span></span>
<span id="cb15-35"><a href="#cb15-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-36"><a href="#cb15-36" aria-hidden="true" tabindex="-1"></a><span class="co">#scipy.stats.pearsonr でも計算可能</span></span>
<span id="cb15-37"><a href="#cb15-37" aria-hidden="true" tabindex="-1"></a><span class="co"># 返り値が (相関係数, p値)の形に成っている</span></span>
<span id="cb15-38"><a href="#cb15-38" aria-hidden="true" tabindex="-1"></a><span class="co"># p値に関しては, 検定の章で扱います.</span></span>
<span id="cb15-39"><a href="#cb15-39" aria-hidden="true" tabindex="-1"></a>r, p <span class="op">=</span> st.pearsonr(df[x_column],df[y_column])</span>
<span id="cb15-40"><a href="#cb15-40" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(r) <span class="co">#0.8328129378961621</span></span></code></pre></div>
<h3 data-number="1.4.2" id="スピアマンの順位相関係数"><span class="header-section-number">1.4.2</span> スピアマンの順位相関係数</h3>
<p>積率相関係数は量的変数にしか利用できませんが,質的変数のうち順序尺度データに関しては,<strong>スピアマンの順位相関係数(rank correlation coefficient)</strong>が利用できます.</p>
<p>スピアマンの順位相関係数は, 順序尺度データを順位に変換して,順位の間の相関係数を求めたものになります.</p>
<figure>
<img src="/images/corre5.png" alt="ピアソンの積率相関係数のイメージ" />
<figcaption aria-hidden="true">ピアソンの積率相関係数のイメージ</figcaption>
</figure>
<p>データを小さい順に並べ替えた順位 <span class="math inline">x_i, ..., x_n</span> がある時,</p>
<p><span class="math display">
r_{xy} = \frac{\frac{1}{n} \sum (x_i - \bar{x})(y_i - \bar{y})}{\sqrt{\frac{1}{n} \sum (x_i - \bar{x})^2} \sqrt{\frac{1}{n} \sum (y_i - \bar{y})^2}}
</span>
がどの様になるかを考える.</p>
<p>順位相関係数は,</p>
<p><span class="math display">
\sum x_i = \sum y_i = \frac{n(n+1)}{2}
</span></p>
<p><span class="math display">
\sum x_i^2 = \sum y_i^2 = \frac{1}{6} n(n+1)(2n+1)
</span></p>
<p><span class="math display">
\bar{x} = \bar{y} = \frac{\sum x_i}{n} = \frac{n(n+1)}{2n} = \frac{n+1}{2}
</span></p>
<p>なので, 分子に関して,</p>
<p><span class="math display">
\begin{align*}
&amp; \frac{1}{n}\sum(x_i - \bar{x})(y_i - \bar{y}) \\
&amp;= \frac{1}{n}\sum \{x_iy_i - x_i \bar{y} - \bar{x}y_i + \bar{x}\bar{y}\} \\
&amp;= \frac{1}{n}\sum x_i y_i - \frac{1}{n}\sum x_i\bar{y} - \frac{1}{n}\sum \bar{x}y_i + \frac{1}{n}\sum  \bar{x}\bar{y} \\
&amp;= \frac{1}{n}\sum x_i y_i - \frac{\bar{y}}{n}\sum x_i - \frac{\bar{x}}{n}\sum y_i + \bar{x}\bar{y} \\
&amp;= \frac{1}{n}\sum x_i y_i - \bar{x}\bar{y} \\
&amp;= \frac{1}{2n}\sum \{x_i^2 + y_i^2 - (x_i - y_i)^2\} - \bar{x}\bar{y} \\
\end{align*}
</span></p>
<p><span class="math display">
\begin{align*}
\because (x_i - y_i)^2 = x_i^2 -2x_i y_i + y_i^2  \\
x_i y_i = \frac{1}{2} \{ x_i^2 + y_i^2 - (x_i - y_i)^2 \}
\end{align*}
</span></p>
<p><span class="math display">
\begin{align*}
&amp; \frac{1}{2n}\sum \{x_i^2 + y_i^2 - (x_i - y_i)^2\} - \bar{x}\bar{y} \\
&amp;= \frac{1}{2n}\sum x_i^2 + \frac{1}{2n}\sum y_i^2 - \frac{1}{2n}\sum (x_i - y_i)^2 - \bar{x}\bar{y} \\
&amp; = \frac{1}{6} (n+1)(2n+1) - \frac{(n+1)^2}{4} - \frac{1}{2n}\sum (x_i - y_i)^2 \\
&amp; = \frac{1}{12}(n+1)(n-1) - \frac{1}{2n}\sum (x_i - y_i)^2
\end{align*}
</span></p>
<p>また, 分母に関して,
<span class="math display">
\begin{align*}
&amp; \frac{1}{n}\sum (x_i - \bar{x})^2 \\
&amp;= \frac{1}{n}\sum x_i^2 - n \bar{x}^2 \\
&amp;= \frac{1}{n} \{ \sum x_i^2 -2n \bar{x}^2 + \bar{x}^2 \} \\
&amp;= \frac{1}{n} \{\sum x_i^2 - n\bar{x}^2\} \\
&amp;= \frac{1}{6}(n+1)(2n+1) - \frac{1}{4}(n+1)^2 \\
&amp;= \frac{1}{12}(n+1)(n-1)
\end{align*}
</span></p>
<p>なので</p>
<p><span class="math display">
r_{xy} = \frac{\frac{1}{n} \sum (x_i - \bar{x})(y_i - \bar{y})}{\sqrt{\frac{1}{n} \sum (x_i - \bar{x})^2} \sqrt{\frac{1}{n} \sum (y_i - \bar{y})^2}}
</span></p>
<p>に代入して,
<span class="math display">
\begin{align*}
r_{xy} = \frac{\frac{1}{n} \sum (x_i - \bar{x})(y_i - \bar{y})}{\sqrt{\frac{1}{n} \sum (x_i - \bar{x})^2} \sqrt{\frac{1}{n} \sum (y_i - \bar{y})^2}} &amp;= \frac{\frac{1}{12}(n+1)(n-1) - \frac{1}{2} \sum (x_i - y_i)^2}{\frac{1}{12}(n+1)(n-1)}\\
&amp;=  1 - \frac{6}{n^3 - n} \sum (x_i - y_i)^2
\end{align*}
</span></p>
<p>となる.</p>
<p>スピアマンの順位相関係数は,Pythonでは, <code>scipy.stats.spearmanr(xのデータ,yのデータ)</code>で求めることができます.</p>
<p><a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/spearman.csv">こちら</a>のデータは,国別(A~J)のサッカー(FIFA)と野球(WBSC)のランキングのダミーデータです.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>    <span class="ex">rank</span> FIFA WBSC</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>     1    A    A</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>     2    B    E</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>     3    C    G</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>     4    D    I</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>     5    E    D</span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>     6    F    C</span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>     7    G    B</span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>     8    H    F</span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>     9    I    H</span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>    10    J    J</span></code></pre></div>
<p>こちらの順位の相関係数を求めてみましょう.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;Data/spearman.csv&#39;</span>)</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="co"># sciypyで相関係数を求める</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>correlation, pvalue <span class="op">=</span> st.spearmanr(df[<span class="st">&quot;FIFA&quot;</span>], df[<span class="st">&quot;WBSC&quot;</span>])</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;相関係数:&quot;</span>,correlation) <span class="co">#0.4545</span></span></code></pre></div>
<p><code>0.45</code>なので弱い正の相関があることが分かります.</p>
<h3 data-number="1.4.3" id="相関係数のヒートマップ"><span class="header-section-number">1.4.3</span> 相関係数のヒートマップ</h3>
<p>相関係数はデータの関係を探るために非常に便利な数値であり, 複数の観測項目からなるデータを扱う場合には,最初に相関係数をとってそれぞれにどのような関係があるのかを確認するようにしましょう.</p>
<p><a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/coeff_multi.csv">こちら</a>のデータは,e-statから取得した,県別の身長,体重,食費,睡眠の平均時間,スポーツの平均時間に関するデータです.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="ex">python</span> coeff.py</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>    <span class="ex">pref</span>  height  weight   food  sleep  sports</span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>    北海道   170.4    63.7  65739    477      15</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>    青森県   169.8    62.8  64889    490      13</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>    岩手県   170.6    63.7  70156    489      13</span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>    宮城県   169.8    63.4  73337    482      15</span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>    秋田県   170.6    66.1  74560    493      14</span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>    山形県   170.9    63.9  76000    497      12</span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>    福島県   170.2    63.9  71074    480      13</span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>    茨城県   169.7    62.4  74341    467      17</span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>    栃木県   169.8    63.3  74387    472      16</span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>    群馬県   170.5    62.7  71701    475      15</span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>   埼玉県   170.4    61.1  76663    463      15</span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>   千葉県   170.3    62.4  77639    458      15</span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>   東京都   170.5    61.3  83506    461      16</span>
<span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>  神奈川県   170.9    62.5  77510    456      17</span>
<span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a><span class="ex">14</span>   新潟県   170.9    62.0  75937    479      13</span>
<span id="cb18-18"><a href="#cb18-18" aria-hidden="true" tabindex="-1"></a><span class="ex">15</span>   富山県   170.8    63.5  73589    471      15</span>
<span id="cb18-19"><a href="#cb18-19" aria-hidden="true" tabindex="-1"></a><span class="ex">16</span>   石川県   170.8    62.9  76256    470      16</span>
<span id="cb18-20"><a href="#cb18-20" aria-hidden="true" tabindex="-1"></a><span class="ex">17</span>   福井県   170.4    62.5  79478    476      14</span>
<span id="cb18-21"><a href="#cb18-21" aria-hidden="true" tabindex="-1"></a><span class="ex">18</span>   山梨県   170.1    61.7  71294    481      16</span>
<span id="cb18-22"><a href="#cb18-22" aria-hidden="true" tabindex="-1"></a><span class="ex">19</span>   長野県   169.5    61.0  72228    474      17</span>
<span id="cb18-23"><a href="#cb18-23" aria-hidden="true" tabindex="-1"></a><span class="ex">20</span>   岐阜県   169.9    60.6  69527    469      13</span>
<span id="cb18-24"><a href="#cb18-24" aria-hidden="true" tabindex="-1"></a><span class="ex">21</span>   静岡県   170.1    61.9  75833    474      19</span>
<span id="cb18-25"><a href="#cb18-25" aria-hidden="true" tabindex="-1"></a><span class="ex">22</span>   愛知県   169.6    60.9  74694    463      14</span>
<span id="cb18-26"><a href="#cb18-26" aria-hidden="true" tabindex="-1"></a><span class="ex">23</span>   三重県   170.4    62.1  75721    473      16</span>
<span id="cb18-27"><a href="#cb18-27" aria-hidden="true" tabindex="-1"></a><span class="ex">24</span>   滋賀県   170.6    62.9  77978    470      18</span>
<span id="cb18-28"><a href="#cb18-28" aria-hidden="true" tabindex="-1"></a><span class="ex">25</span>   京都府   170.5    62.0  76904    464      16</span>
<span id="cb18-29"><a href="#cb18-29" aria-hidden="true" tabindex="-1"></a><span class="ex">26</span>   大阪府   170.2    62.2  74015    469      18</span>
<span id="cb18-30"><a href="#cb18-30" aria-hidden="true" tabindex="-1"></a><span class="ex">27</span>   兵庫県   169.6    60.6  72847    466      15</span>
<span id="cb18-31"><a href="#cb18-31" aria-hidden="true" tabindex="-1"></a><span class="ex">28</span>   奈良県   169.9    61.8  74888    461      18</span>
<span id="cb18-32"><a href="#cb18-32" aria-hidden="true" tabindex="-1"></a><span class="ex">29</span>  和歌山県   170.0    62.6  69858    479      15</span>
<span id="cb18-33"><a href="#cb18-33" aria-hidden="true" tabindex="-1"></a><span class="ex">30</span>   鳥取県   170.4    62.7  73321    475      14</span>
<span id="cb18-34"><a href="#cb18-34" aria-hidden="true" tabindex="-1"></a><span class="ex">31</span>   島根県   169.7    60.7  72160    483      16</span>
<span id="cb18-35"><a href="#cb18-35" aria-hidden="true" tabindex="-1"></a><span class="ex">32</span>   岡山県   169.6    61.7  69060    475      17</span>
<span id="cb18-36"><a href="#cb18-36" aria-hidden="true" tabindex="-1"></a><span class="ex">33</span>   広島県   168.8    60.8  69061    473      15</span>
<span id="cb18-37"><a href="#cb18-37" aria-hidden="true" tabindex="-1"></a><span class="ex">34</span>   山口県   169.2    60.2  69882    472      17</span>
<span id="cb18-38"><a href="#cb18-38" aria-hidden="true" tabindex="-1"></a><span class="ex">35</span>   徳島県   169.9    64.4  67102    472      18</span>
<span id="cb18-39"><a href="#cb18-39" aria-hidden="true" tabindex="-1"></a><span class="ex">36</span>   香川県   169.9    62.7  68400    469      18</span>
<span id="cb18-40"><a href="#cb18-40" aria-hidden="true" tabindex="-1"></a><span class="ex">37</span>   愛媛県   168.8    61.8  67274    474      16</span>
<span id="cb18-41"><a href="#cb18-41" aria-hidden="true" tabindex="-1"></a><span class="ex">38</span>   高知県   169.1    61.8  70188    484      16</span>
<span id="cb18-42"><a href="#cb18-42" aria-hidden="true" tabindex="-1"></a><span class="ex">39</span>   福岡県   169.7    60.9  70135    471      14</span>
<span id="cb18-43"><a href="#cb18-43" aria-hidden="true" tabindex="-1"></a><span class="ex">40</span>   佐賀県   169.2    62.2  68749    473      16</span>
<span id="cb18-44"><a href="#cb18-44" aria-hidden="true" tabindex="-1"></a><span class="ex">41</span>   長崎県   170.1    63.3  66641    473      18</span>
<span id="cb18-45"><a href="#cb18-45" aria-hidden="true" tabindex="-1"></a><span class="ex">42</span>   熊本県   169.5    61.8  66184    482      20</span>
<span id="cb18-46"><a href="#cb18-46" aria-hidden="true" tabindex="-1"></a><span class="ex">43</span>   大分県   169.3    62.5  69255    479      18</span>
<span id="cb18-47"><a href="#cb18-47" aria-hidden="true" tabindex="-1"></a><span class="ex">44</span>   宮崎県   168.7    61.8  65165    477      19</span>
<span id="cb18-48"><a href="#cb18-48" aria-hidden="true" tabindex="-1"></a><span class="ex">45</span>  鹿児島県   169.7    61.4  65377    479      18</span>
<span id="cb18-49"><a href="#cb18-49" aria-hidden="true" tabindex="-1"></a><span class="ex">46</span>   沖縄県   168.7    60.6  56298    482      20</span></code></pre></div>
<p>データの取得過程に興味がある人は,以下の手順を自分で行い,データを作ってみましょう.</p>
<details>
<summary>
e-statのデータ表示機能を使ってデータを自分で作る (開く/閉じる)
</summary>
<div class="note">
<p>e-statで県別の身長,体重,睡眠時間等のデータを集めます.
地域別のデータは｢地域｣から選択できます.</p>
<figure>
<img src="/images/coeff_multi1.png" alt="e-stat 地域" />
<figcaption aria-hidden="true">e-stat 地域</figcaption>
</figure>
<p>｢都道府県データ｣を選択し,｢データ表示｣をクリックします.</p>
<figure>
<img src="/images/coeff_multi2.png" alt="e-stat 地域" />
<figcaption aria-hidden="true">e-stat 地域</figcaption>
</figure>
<p>データを集める,地域,表示項目,表示方法の順に選択します.
今回はすべての県を利用するので,｢全て選択｣をクリックしたあと｢確定｣をクリックします.</p>
<figure>
<img src="/images/coeff_multi3.png" alt="e-stat 地域" />
<figcaption aria-hidden="true">e-stat 地域</figcaption>
</figure>
<p>次に項目をきめます.
分野をクリックして｢I健康･医療｣を選ぶと,項目候補に健康・医療に関わる項目が表示されます.
そこから,</p>
<pre><code>- I411301_身長（高校2年）（男）【ｃｍ】
- I412301_体重（高校2年）（男）【ｋｇ】</code></pre>
<p>を順番に選んで,｢項目を選択｣をクリックします.</p>
<figure>
<img src="/images/coeff_multi4.png" alt="e-stat 地域" />
<figcaption aria-hidden="true">e-stat 地域</figcaption>
</figure>
<p>同様に
｢L 家計｣から</p>
<pre><code>- L421101_食料費（二人以上の世帯のうち勤労者世帯）（全国消費実態調査結果）【円】</code></pre>
<p>｢M 生活時間｣から</p>
<pre><code>- M1101_睡眠の平均時間（10歳以上）（男）【分】
- M360100_スポーツの平均時間（15歳以上）（男）【分】</code></pre>
<p>を順番に選んで,｢項目を選択｣をクリックします.</p>
<figure>
<img src="/images/coeff_multi5.png" alt="e-stat 地域" />
<figcaption aria-hidden="true">e-stat 地域</figcaption>
</figure>
<p>最後にどのデータを表示するかレイアウトを決めます.</p>
<pre><code>- 調査年を列に配置
- 表示年度を2000から2010まで
- 設定して表示を更新</code></pre>
<figure>
<img src="/images/coeff_multi6.png" alt="e-stat 地域" />
<figcaption aria-hidden="true">e-stat 地域</figcaption>
</figure>
<p>データをダウンロードします.</p>
<figure>
<img src="/images/coeff_multi7.png" alt="e-stat 地域" />
<figcaption aria-hidden="true">e-stat 地域</figcaption>
</figure>
<p>ダウンロードしたデータを読み込めるcsvに編集します.</p>
<pre><code>- 2006年以外の列を削除
- 数値として新しいシートにコピー
- ヘッダー名をつける
    - 県名 pref (prefectureの略)
    - 身長 height
    - 体重 weight
    - 食費 food
    - 睡眠 sleep
    - スポーツ sports
- utf-8のcsvで保存
- ファイル名: coeff_multi.csv
- 作業ディレクトリのDataフォルダに保存</code></pre>
<figure>
<img src="/images/coeff_multi8.png" alt="e-stat 地域" />
<figcaption aria-hidden="true">e-stat 地域</figcaption>
</figure>
</div>
</details>
<p>データのどの観測項目間に関連があるのかを確かめるために,作成したデータのすべての組み合わせの相関係数を見てみましょう. 今までのように一つ一つ散布図を作成して,相関係数を求めていると,<span class="math inline">\text{観測項目数} \times \text{観測項目数}</span> のグラフを作成することになります.
そこで, 与えられた観測項目すべての組み合わせで図示する<strong>ペアプロット</strong>と<strong>ヒートマップ</strong>を活用してみます.</p>
<p><code>DataFrame</code>に含まれるデータのペアプロットには, <code>pandas</code>の<code>.plotting</code>メソッドを利用します. <code>pd.plotting.scatter_matrix(ペアプロットを求めるDataFrame)</code>で,散布図のペアプロットが作成できます.</p>
<p>また, 各項目の相関係数も<code>pandas</code>の<code>.corr()</code>メソッドで取得することが出来ます.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="co"># CSVファイルを読み込んでデータフレームに格納</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="co"># Dataフォルダを作成し,そこにデータを入れておきましょう</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;Data/coeff.csv&#39;</span>)</span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a><span class="co"># データの表示</span></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true" tabindex="-1"></a><span class="co">#分析するデータの選択</span></span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true" tabindex="-1"></a>labels <span class="op">=</span> [<span class="st">&#39;height&#39;</span>, <span class="st">&#39;weight&#39;</span>, <span class="st">&#39;food&#39;</span>, <span class="st">&#39;sports&#39;</span>, <span class="st">&#39;sleep&#39;</span>]</span>
<span id="cb24-10"><a href="#cb24-10" aria-hidden="true" tabindex="-1"></a>X <span class="op">=</span> df[labels]</span>
<span id="cb24-11"><a href="#cb24-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-12"><a href="#cb24-12" aria-hidden="true" tabindex="-1"></a><span class="co">#散布図行列を作成してみる</span></span>
<span id="cb24-13"><a href="#cb24-13" aria-hidden="true" tabindex="-1"></a>pd.plotting.scatter_matrix(X, range_padding<span class="op">=</span><span class="fl">0.2</span>)</span>
<span id="cb24-14"><a href="#cb24-14" aria-hidden="true" tabindex="-1"></a>plt.show()</span>
<span id="cb24-15"><a href="#cb24-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-16"><a href="#cb24-16" aria-hidden="true" tabindex="-1"></a><span class="co">#相関係数の組み合わせを確認</span></span>
<span id="cb24-17"><a href="#cb24-17" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(X.corr())</span>
<span id="cb24-18"><a href="#cb24-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-19"><a href="#cb24-19" aria-hidden="true" tabindex="-1"></a><span class="co">#ヒートマップで確認</span></span>
<span id="cb24-20"><a href="#cb24-20" aria-hidden="true" tabindex="-1"></a><span class="co">#ヒートマップで確認</span></span>
<span id="cb24-21"><a href="#cb24-21" aria-hidden="true" tabindex="-1"></a>sns.heatmap(X.corr()</span>
<span id="cb24-22"><a href="#cb24-22" aria-hidden="true" tabindex="-1"></a>           ,vmax<span class="op">=</span><span class="dv">1</span>     <span class="co">#ヒートマップの最大値</span></span>
<span id="cb24-23"><a href="#cb24-23" aria-hidden="true" tabindex="-1"></a>           ,vmin<span class="op">=-</span><span class="dv">1</span>    <span class="co">#最小値</span></span>
<span id="cb24-24"><a href="#cb24-24" aria-hidden="true" tabindex="-1"></a>           ,center <span class="op">=</span><span class="dv">0</span>  <span class="co">#中心</span></span>
<span id="cb24-25"><a href="#cb24-25" aria-hidden="true" tabindex="-1"></a>           ,annot<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb24-26"><a href="#cb24-26" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<p><img src="/images/pair_plot.png" alt="散布図のペアプロット" />
各項目の組み合わせごとに,散布図が作成されています. 自交点にはヒストグラムが作成されます.</p>
<figure>
<img src="/images/coeff_multi9.png" alt="相関係数のヒートマップ" />
<figcaption aria-hidden="true">相関係数のヒートマップ</figcaption>
</figure>
<p>食費と体重,体重と身長などに正の相関があることが分かります.
このように複数の観測項目から関係があるデータを探したい場合には,ペアプロットや,相関係数のヒートマップを作成することで,関係性がわかりやすくなります.</p>
<h3 data-number="1.4.4" id="chi2統計量"><span class="header-section-number">1.4.4</span> <span class="math inline">\Chi^2</span>統計量</h3>
<p>量的データには積率相関係数, 順位尺度データに対しては,順位相関係数を求めることで2つのデータの関連性を確かめることができました. では,名義尺度データの場合はどのようにすれば良いのでしょうか.</p>
<p>名義尺度を含めた質的変数の関係性を可視化するには,同時度数分布表が利用できました. 数値化においても,同時度数分布表を用いることができます.</p>
<figure>
<img src="/images/cross_table2.png" alt="同時度数分布表" />
<figcaption aria-hidden="true">同時度数分布表</figcaption>
</figure>
<p>質的変数間の関連度合いは,同時度数分布表の数値を利用した <strong>ピアソンの<span class="math inline">\Chi^2</span>統計量(かいじじょうとうけいりょう)</strong>で表すことができます. 可視化の節では, 同時度数分布表から列相対度数を求めましたが,ここでは相対度数ではなく,度数なので注意してください.</p>
<p><span class="math display">
\Chi_o^2 = \sum_{i=0}^{r} \sum_{j=0}^{c} \frac{(n_{ij} - E_ij)^2}{E_{ij}} (r:行数,c:列数)
</span></p>
<p>このとき,<span class="math inline">E_{ij}</span>を期待度数といい, <span class="math inline">\frac{行の合計 \times 列の合計}{総数}</span></p>
<p><span class="math display">
E_{ij} = \frac{\sum_{i}^r n_{ij} \times \sum_{j}^c n_{ij}}{\sum_{i}^{r}\sum_{j}^c n_{ij}}
</span></p>
<p>で求められます.</p>
<p>この<span class="math inline">\Chi_o^2</span>が大きいほど,2つの変数の間の関連が強いと言え,この値を利用して行と列のデータが独立であるかを検定する <strong><span class="math inline">\Chi^2</span>検定(独立性の検定)</strong> を行うことができます. ** <span class="math inline">\Chi^2</span> 検定** に関しては後ほど扱うとして,ここではこの値を利用して2つのデータの関連の度合いを判断する方法に関して見ていきましょう.</p>
<p><span class="math inline">\Chi_o^2</span>の値は, 同時度数分布表の行数や列数に依存して値が変わるため,相関係数のように,｢特定の値から関連があるといえる｣といった利用方には適しません.</p>
<p>そこで, 異なるデータを比較するためには, <span class="math inline">0 \leq V \leq 1</span>の値を取る,<strong>クラメールの連関係数V</strong>に変換します.</p>
<p><span class="math display">
V = \sqrt{\frac{\Chi_o^2}{n \times min(r - 1,c - 1)}}
</span></p>
<p>クラメールの連関係数は,相関係数よりも高い値が出にくいので,以下のような基準で判断します.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">V</th>
<th style="text-align: left;">判断</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">0 ~ 0.1</td>
<td style="text-align: left;">関連なし</td>
</tr>
<tr class="even">
<td style="text-align: left;">0.1 ~ 0.25</td>
<td style="text-align: left;">弱い関連がある</td>
</tr>
<tr class="odd">
<td style="text-align: left;">0.25 ~ 0.5</td>
<td style="text-align: left;">関連がある</td>
</tr>
<tr class="even">
<td style="text-align: left;">0.5 ~ 1.0</td>
<td style="text-align: left;">強い関連がある</td>
</tr>
</tbody>
</table>
<p><span class="math inline">\Chi_o^2</span>は <code>scipy.stats</code>の<code>chi2_contingency(度数分布表,correction=False)</code>で求めることが出来ます.
返り値が, <span class="math inline">\Chi_o^2</span>,p値,自由度,期待度数の4つあるので,注意しましょう.</p>
<p>同時度数分布表の節で扱った時限と成績の関係を記録した<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/cross_table_data.csv">データ</a>を利用して,クラメールの連関係数Vを求めてみましょう.</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a>     <span class="ex">Period</span> Grade</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>         2     B</span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>         5     A</span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>         4     A</span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>         3     C</span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>         1     C</span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true" tabindex="-1"></a><span class="ex">..</span>      ...   ...</span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true" tabindex="-1"></a><span class="ex">195</span>       2     C</span>
<span id="cb25-9"><a href="#cb25-9" aria-hidden="true" tabindex="-1"></a><span class="ex">196</span>       4     C</span>
<span id="cb25-10"><a href="#cb25-10" aria-hidden="true" tabindex="-1"></a><span class="ex">197</span>       5     C</span>
<span id="cb25-11"><a href="#cb25-11" aria-hidden="true" tabindex="-1"></a><span class="ex">198</span>       5     F</span>
<span id="cb25-12"><a href="#cb25-12" aria-hidden="true" tabindex="-1"></a><span class="ex">199</span>       4     C</span></code></pre></div>
<figure>
<img src="/images/heatmap.png" alt="ヒートマップ" />
<figcaption aria-hidden="true">ヒートマップ</figcaption>
</figure>
<div class="sourceCode" id="cb26"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.pyplot <span class="im">as</span> plt</span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> seaborn <span class="im">as</span> sns</span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> scipy.stats <span class="im">as</span> st</span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/cross_table_data.csv&#39;</span>)</span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true" tabindex="-1"></a><span class="co">#クロス表の作成</span></span>
<span id="cb26-10"><a href="#cb26-10" aria-hidden="true" tabindex="-1"></a>cross <span class="op">=</span> pd.crosstab(df[<span class="st">&#39;Grade&#39;</span>],df[<span class="st">&#39;Period&#39;</span>])</span>
<span id="cb26-11"><a href="#cb26-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-12"><a href="#cb26-12" aria-hidden="true" tabindex="-1"></a><span class="co">#表示順の設定</span></span>
<span id="cb26-13"><a href="#cb26-13" aria-hidden="true" tabindex="-1"></a>cross <span class="op">=</span> cross.reindex([<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>],axis<span class="op">=</span><span class="st">&#39;columns&#39;</span>)</span>
<span id="cb26-14"><a href="#cb26-14" aria-hidden="true" tabindex="-1"></a>cross <span class="op">=</span> cross.reindex([<span class="st">&#39;S&#39;</span>,<span class="st">&#39;A&#39;</span>,<span class="st">&#39;B&#39;</span>,<span class="st">&#39;C&#39;</span>,<span class="st">&#39;F&#39;</span>],axis<span class="op">=</span><span class="st">&#39;index&#39;</span>)</span>
<span id="cb26-15"><a href="#cb26-15" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(cross)</span>
<span id="cb26-16"><a href="#cb26-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-17"><a href="#cb26-17" aria-hidden="true" tabindex="-1"></a><span class="co">#列相対度数に変更する</span></span>
<span id="cb26-18"><a href="#cb26-18" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> c <span class="kw">in</span> cross.columns:</span>
<span id="cb26-19"><a href="#cb26-19" aria-hidden="true" tabindex="-1"></a>    cross[c] <span class="op">=</span> cross[c] <span class="op">/</span> cross[c].<span class="bu">sum</span>()</span>
<span id="cb26-20"><a href="#cb26-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-21"><a href="#cb26-21" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(cross)</span>
<span id="cb26-22"><a href="#cb26-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-23"><a href="#cb26-23" aria-hidden="true" tabindex="-1"></a>sns.heatmap( cross  <span class="co">#ヒートマップを作成したいテーブル</span></span>
<span id="cb26-24"><a href="#cb26-24" aria-hidden="true" tabindex="-1"></a>           , cmap<span class="op">=</span>plt.get_cmap(<span class="st">&#39;Reds&#39;</span>) <span class="co">#カラーマップ(省略可)</span></span>
<span id="cb26-25"><a href="#cb26-25" aria-hidden="true" tabindex="-1"></a>           , linewidths<span class="op">=</span><span class="fl">.5</span> <span class="co">#線の太さを指定することでセルを囲う線を表示</span></span>
<span id="cb26-26"><a href="#cb26-26" aria-hidden="true" tabindex="-1"></a>           , annot<span class="op">=</span><span class="va">True</span>  <span class="co">#セルに数値を表示</span></span>
<span id="cb26-27"><a href="#cb26-27" aria-hidden="true" tabindex="-1"></a>           )</span>
<span id="cb26-28"><a href="#cb26-28" aria-hidden="true" tabindex="-1"></a>plt.show()</span>
<span id="cb26-29"><a href="#cb26-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-30"><a href="#cb26-30" aria-hidden="true" tabindex="-1"></a><span class="co">#χ二乗統計量を求める</span></span>
<span id="cb26-31"><a href="#cb26-31" aria-hidden="true" tabindex="-1"></a>x2, p, dof, e <span class="op">=</span> st.chi2_contingency(cross,correction<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb26-32"><a href="#cb26-32" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(x2) <span class="co">#1.1342960955202308</span></span>
<span id="cb26-33"><a href="#cb26-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-34"><a href="#cb26-34" aria-hidden="true" tabindex="-1"></a><span class="co">#クラメールの連関係数Vを求める</span></span>
<span id="cb26-35"><a href="#cb26-35" aria-hidden="true" tabindex="-1"></a>v <span class="op">=</span> np.sqrt(x2<span class="op">/</span>(cross.<span class="bu">sum</span>().<span class="bu">sum</span>() <span class="op">*</span> <span class="bu">min</span>(cross.shape[<span class="dv">0</span>]<span class="op">-</span><span class="dv">1</span>,cross.shape[<span class="dv">1</span>] <span class="op">-</span><span class="dv">1</span>)))</span>
<span id="cb26-36"><a href="#cb26-36" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(v) <span class="co">#0.2381487030743849</span></span></code></pre></div>
<p>クラメールの連関係数Vの値は,0.28となり,弱い関連があることが分かりました.</p>
<h3 data-number="1.4.5" id="因果関係と相関"><span class="header-section-number">1.4.5</span> 因果関係と相関</h3>
<p>相関関係は, 2つの観測項目間の関係を表していますが, 観測項目Aの変化によって,観測項目Bの変化が起きているという<strong>因果関係(causality)</strong>を示しているものではありません.</p>
<p>論理学における因果関係は, <strong>AならばB <span class="math inline">(A \Rightarrow B)</span></strong> という関係として示されます.</p>
<pre><code>- 例: 人間ならば死ぬ</code></pre>
<p>このとき,Aを<strong>十分条件</strong>, Bを<strong>必要条件</strong> といいます.</p>
<p>しかし,統計学における因果関係は,このような関係では表せません.
例えば, <strong>喫煙をすると肺がんになる</strong>という関係は, 喫煙をしても肺がんにならない場合があるので,倫理学における因果関係ではありません. 統計学における因果関係は, <strong>Aが,Bの一部を説明するための,あるいはBが起きる確率を高めるための十分条件となっている</strong>ことを表します.</p>
<p>したがって,統計学における因果関係は, ** AによってBの一部が説明できる** あるいは, ** AによってBが起きる確率が高まる** という形で示され,これを<strong>統計的因果関係</strong>といいます.</p>
<div class="note">
<p>統計的因果関係が認められる条件は,簡単には以下のように示されます.</p>
<ol type="1">
<li><p>AとBの間に明瞭な関係が認められる</p></li>
<li><p>Aが時間的に,あるいは意味的にBより選考している</p></li>
<li><p>AとBの共通要因となりうる要因を統制して(影響を取り除いて)も,両者に関係が見出される.</p></li>
</ol>
</div>
<p>これらの因果関係を示すには, 特に3.に関して, A以外の条件を揃えてBの発生確率を確かめる<strong>対照実験</strong>などの手法によって明らかにされますが,本資料では実験に関しては扱いません. AによってBを説明する,という関係に関しては,後の回帰の章で少し扱います.</p>
<p>このように, 相関関係と因果関係は異なる概念として理解する必要があります.</p>
<p>例えば, 因果関係があっても相関関係がない有名な例として, <strong>チーズの消費量と,ベッドシーツに絡まって死ぬ人の数</strong>や,<strong>プールで溺れた人の数と,ニコラス･ケイジの映画出演数</strong>などがあります(こちらのサイト(<a href="https://www.tylervigen.com/spurious-correlations">https://www.tylervigen.com/spurious-correlations</a>)にこういった例が沢山まとめられているので興味のある人は見てみましょう.)</p>
<figure>
<img src="/images/cheese_cinsumption.png" alt="spurious correlations" />
<figcaption aria-hidden="true"><a href="https://www.tylervigen.com/spurious-correlations">spurious correlations</a></figcaption>
</figure>
<figure>
<img src="/images/nicolas_cage.png" alt="spurious correlations" />
<figcaption aria-hidden="true"><a href="https://www.tylervigen.com/spurious-correlations">spurious correlations</a></figcaption>
</figure>
<p>このように,全く因果関係のないものでも現れる相関関係を<strong>偽相関(Spurious Correlation)</strong>といいます.</p>
<p>また,反対に$ y = (x-8)^2 $ という関係においては, yの値は完全にxによって決まるため,xとyの間に因果関係は認められますが,相関係数は0となります.</p>
<figure>
<img src="/images/y_x_8.png" alt="因果があっても相関がない例" />
<figcaption aria-hidden="true">因果があっても相関がない例</figcaption>
</figure>
<h3 data-number="1.4.6" id="発展偏相関係数"><span class="header-section-number">1.4.6</span> 発展:偏相関係数</h3>
<p>因果関係を検証する方法に関しては後の章に譲るとして, ここでは,相関における類似概念である<strong>偏相関</strong>について見てみましょう.</p>
<p><strong>偏相関係数(partial correlation coefficient)</strong> とは, 3つの変数がある場合に, <strong>1つの変数の影響を除いた</strong>残り2つの変数間の相関係数となります.</p>
<p>変数,<span class="math inline">x,y,z</span>があるとき,<span class="math inline">z</span>の影響を除いた, <span class="math inline">x,y</span>の間の偏相関係数は以下のように求められます.</p>
<p><span class="math display">
r_{xy \dot z} = \frac{r_{xy} - r_{xz}r_yz}{\sqrt{1 - r_{xz}^2}\sqrt{1 - r_{yz}^2}}
</span></p>
<p>式を見てみると,分子では, xとyの相関係数から,zに関する相関係数を引いていることが分かります.</p>
<p>偏相関係数の具体例を見てみましょう. <a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/partial_coeff.csv">こちら</a>のデータは米国における<code>x:小麦の1日あたりの消費量</code>,<code>y:米の一日あたりの消費量</code>,<code>z:肥満度</code>を表しています.なお, いずれの列も最大を1,最小を0に変換してあります.</p>
<p>この3変数の相関係数を取ってみます.</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/partial_coeff.csv&#39;</span>)</span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> df[<span class="st">&#39;x&#39;</span>]</span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> df[<span class="st">&#39;y&#39;</span>]</span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a>z <span class="op">=</span> df[<span class="st">&#39;z&#39;</span>]</span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true" tabindex="-1"></a><span class="co">#散布図行列を作成してみる</span></span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true" tabindex="-1"></a>pd.plotting.scatter_matrix(df, range_padding<span class="op">=</span><span class="fl">0.2</span>)</span>
<span id="cb28-8"><a href="#cb28-8" aria-hidden="true" tabindex="-1"></a>plt.savefig(<span class="st">&#39;partial_coeff_scatter_matrix.png&#39;</span>)</span>
<span id="cb28-9"><a href="#cb28-9" aria-hidden="true" tabindex="-1"></a>plt.close()</span>
<span id="cb28-10"><a href="#cb28-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-11"><a href="#cb28-11" aria-hidden="true" tabindex="-1"></a><span class="co">#ヒートマップで確認</span></span>
<span id="cb28-12"><a href="#cb28-12" aria-hidden="true" tabindex="-1"></a>sns.heatmap(df.corr()</span>
<span id="cb28-13"><a href="#cb28-13" aria-hidden="true" tabindex="-1"></a>           ,vmax<span class="op">=</span><span class="dv">1</span>     <span class="co">#ヒートマップの最大値</span></span>
<span id="cb28-14"><a href="#cb28-14" aria-hidden="true" tabindex="-1"></a>           ,vmin<span class="op">=-</span><span class="dv">1</span>    <span class="co">#最小値</span></span>
<span id="cb28-15"><a href="#cb28-15" aria-hidden="true" tabindex="-1"></a>           ,center <span class="op">=</span><span class="dv">0</span>  <span class="co">#中心</span></span>
<span id="cb28-16"><a href="#cb28-16" aria-hidden="true" tabindex="-1"></a>           ,annot<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb28-17"><a href="#cb28-17" aria-hidden="true" tabindex="-1"></a>plt.savefig(<span class="st">&#39;partial_coeff_heatmap.png&#39;</span>)</span>
<span id="cb28-18"><a href="#cb28-18" aria-hidden="true" tabindex="-1"></a>plt.close()</span>
<span id="cb28-19"><a href="#cb28-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-20"><a href="#cb28-20" aria-hidden="true" tabindex="-1"></a>rxy <span class="op">=</span> np.corrcoef(x, y)[<span class="dv">0</span>, <span class="dv">1</span>]</span>
<span id="cb28-21"><a href="#cb28-21" aria-hidden="true" tabindex="-1"></a>rxz <span class="op">=</span> np.corrcoef(x,z)[<span class="dv">0</span>, <span class="dv">1</span>]</span>
<span id="cb28-22"><a href="#cb28-22" aria-hidden="true" tabindex="-1"></a>ryz <span class="op">=</span> np.corrcoef(y,z)[<span class="dv">0</span>, <span class="dv">1</span>]</span>
<span id="cb28-23"><a href="#cb28-23" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;x-y:&#39;</span>,rxy) <span class="co">#x-y: -0.6001681728315631</span></span>
<span id="cb28-24"><a href="#cb28-24" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;x-z:&#39;</span>,rxz) <span class="co">#x-z: 0.8000777549807391</span></span>
<span id="cb28-25"><a href="#cb28-25" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;y-z:&#39;</span>,ryz) <span class="co">#y-z: -0.4740072261555343</span></span>
<span id="cb28-26"><a href="#cb28-26" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;ryzx:&#39;</span>,ryzx)</span></code></pre></div>
<figure>
<img src="/images/partial_coeff_scatter_matrix.png" alt="partial_coeff_scatter_matrix.png" />
<figcaption aria-hidden="true">partial_coeff_scatter_matrix.png</figcaption>
</figure>
<figure>
<img src="/images/partial_coeff_heatmap.png" alt="partial_coeff_heatmap.png" />
<figcaption aria-hidden="true">partial_coeff_heatmap.png</figcaption>
</figure>
<p>相関係数を見ると,</p>
<ul>
<li><p><span class="math inline">r_{xy}\approx-0.60</span>: 小麦を食べる量が多いと米を食べる量が少ない</p></li>
<li><p><span class="math inline">r_{xz}\approx0.80</span>:小麦を食べる量が多いほど太っている</p></li>
<li><p><span class="math inline">r_{yz}\approx-0.47</span>:米を食べる量が多いほど痩せている</p></li>
</ul>
<p>となっています.</p>
<p>小麦を食べるほど,米を食べる量が少ないというのは米国において,米を主食とする人が少ないことから,普段小麦粉を利用した食事をしているほど,米を食べる機会が少ないということで理解ができます. また,小麦を食べる量が多いほど太っているというのも,炭水化物をたくさん食べるほど太っているということで理解できます. 一方で, 米を食べる量が多いほど痩せているという関係は, あまり自然ではありません.</p>
<p>これは, 一般的に小麦を食べる文化圏の人のほうが,アジア系よりも太っていることに影響されていそうです. yとzの散布図に,xで色をつけることで,xの影響を確認してみましょう.</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a>plt.scatter(y,z,c<span class="op">=</span>x)</span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a>plt.xlabel(<span class="st">&#39;米の消費量&#39;</span>)</span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&#39;肥満度&#39;</span>)</span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true" tabindex="-1"></a>plt.xlim(<span class="op">-</span><span class="fl">0.1</span>,<span class="fl">1.1</span>)</span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true" tabindex="-1"></a>plt.ylim(<span class="op">-</span><span class="fl">0.1</span>,<span class="fl">1.1</span>)</span>
<span id="cb29-6"><a href="#cb29-6" aria-hidden="true" tabindex="-1"></a>plt.grid()</span>
<span id="cb29-7"><a href="#cb29-7" aria-hidden="true" tabindex="-1"></a>plt.colorbar()</span>
<span id="cb29-8"><a href="#cb29-8" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;ryz=&#39;</span><span class="op">+</span><span class="bu">str</span>(ryz)[:<span class="dv">5</span>])</span>
<span id="cb29-9"><a href="#cb29-9" aria-hidden="true" tabindex="-1"></a>plt.savefig(<span class="st">&#39;partial_coeff1.png&#39;</span>)</span>
<span id="cb29-10"><a href="#cb29-10" aria-hidden="true" tabindex="-1"></a>plt.close()</span></code></pre></div>
<figure>
<img src="/images/partial_coeff1.png" alt="r_{yz}に対するxの影響" />
<figcaption aria-hidden="true"><span class="math inline">r_{yz}</span>に対するxの影響</figcaption>
</figure>
<p>左上に行くほど,xの値を表す色が明るくなっており, xの影響で<span class="math inline">r_{yz}</span>が負の相関となっていることが分かります.</p>
<p>それでは, 小麦の影響を除いた米の肥満への影響 <span class="math inline">r_{yz \dor x}</span> を計算してみましょう.</p>
<p><span class="math display">
\begin{align*}
r_{yz \dot x} &amp;= \frac{r_{yz} - r_{xy}r_xz}{\sqrt{1 - r_{xz}^2}\sqrt{1 - r_{xy}^2}}
&amp;\approx \frac{-0.47 + 0.8 \times 0.6}{\sqrt{1 - 0.8^2}\sqrt{1 - 0.6^2}}
&amp;\approx 0.02
\end{align*}
</span></p>
<p>Pythonでも計算してみます.</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a>ryzx <span class="op">=</span> (ryz <span class="op">-</span> (rxy <span class="op">*</span> rxz)) <span class="op">/</span> (np.sqrt(<span class="dv">1</span><span class="op">-</span>rxy<span class="op">**</span><span class="dv">2</span>)<span class="op">*</span>np.sqrt(<span class="dv">1</span><span class="op">-</span>rxz<span class="op">**</span><span class="dv">2</span>))</span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;ryzx:&#39;</span>,ryzx) <span class="co">#0.012866706738387962</span></span></code></pre></div>
<p>実際にはほとんど,米の消費量と,肥満度に相関はないことが分かります.</p>
<p>最後に,xの影響を打ち消した,yとzの関係をプロットしてみましょう. これは,この後扱う回帰を利用していますので, コードは理解できなくても問題ありません.</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="co">#の影響を除いたyとzの散布図</span></span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.linear_model <span class="im">import</span> LinearRegression</span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true" tabindex="-1"></a><span class="co">#yとzのxによる回帰式をたてて,その残渣をプロットすることで,</span></span>
<span id="cb31-4"><a href="#cb31-4" aria-hidden="true" tabindex="-1"></a><span class="co">#xの効果を打ち消したyとzの関係を表現</span></span>
<span id="cb31-5"><a href="#cb31-5" aria-hidden="true" tabindex="-1"></a>model_y <span class="op">=</span> LinearRegression().fit(df[[<span class="st">&#39;x&#39;</span>]], y)</span>
<span id="cb31-6"><a href="#cb31-6" aria-hidden="true" tabindex="-1"></a>residual_y <span class="op">=</span> y <span class="op">-</span> model_y.predict(df[[<span class="st">&#39;x&#39;</span>]])</span>
<span id="cb31-7"><a href="#cb31-7" aria-hidden="true" tabindex="-1"></a>model_z <span class="op">=</span> LinearRegression().fit(df[[<span class="st">&#39;x&#39;</span>]], z)</span>
<span id="cb31-8"><a href="#cb31-8" aria-hidden="true" tabindex="-1"></a>residual_z <span class="op">=</span> z <span class="op">-</span> model_z.predict(df[[<span class="st">&#39;x&#39;</span>]])</span>
<span id="cb31-9"><a href="#cb31-9" aria-hidden="true" tabindex="-1"></a>(<span class="op">-</span><span class="fl">0.47</span> <span class="op">+</span> <span class="fl">0.8</span> <span class="op">*</span> <span class="fl">0.6</span>) <span class="op">/</span> (np.sqrt(<span class="dv">1</span> <span class="op">-</span> <span class="fl">0.8</span><span class="op">**</span><span class="dv">2</span>) <span class="op">*</span> np.sqrt(<span class="dv">1</span> <span class="op">-</span> <span class="fl">0.6</span><span class="op">**</span><span class="dv">2</span>))</span>
<span id="cb31-10"><a href="#cb31-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-11"><a href="#cb31-11" aria-hidden="true" tabindex="-1"></a>plt.scatter(residual_z,residual_y,c<span class="op">=</span>x)</span>
<span id="cb31-12"><a href="#cb31-12" aria-hidden="true" tabindex="-1"></a>plt.xlabel(<span class="st">&#39;米の消費量&#39;</span>)</span>
<span id="cb31-13"><a href="#cb31-13" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&#39;肥満度&#39;</span>)</span>
<span id="cb31-14"><a href="#cb31-14" aria-hidden="true" tabindex="-1"></a>plt.grid()</span>
<span id="cb31-15"><a href="#cb31-15" aria-hidden="true" tabindex="-1"></a>plt.colorbar()</span>
<span id="cb31-16"><a href="#cb31-16" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;ryz=&#39;</span><span class="op">+</span><span class="bu">str</span>(ryzx)[:<span class="dv">5</span>])</span>
<span id="cb31-17"><a href="#cb31-17" aria-hidden="true" tabindex="-1"></a>plt.savefig(<span class="st">&#39;partial_coeff2.png&#39;</span>)</span>
<span id="cb31-18"><a href="#cb31-18" aria-hidden="true" tabindex="-1"></a>plt.close()</span></code></pre></div>
<figure>
<img src="/images/partial_coeff2.png" alt="partial_coeff2.png" />
<figcaption aria-hidden="true">partial_coeff2.png</figcaption>
</figure>
<p>もとのyとzの散布図における,xの広がりの影響が打ち消されて,ほとんど相関がなくなっていることが分かります.</p>
<h2 data-number="1.5" id="距離と類似度"><span class="header-section-number">1.5</span> 距離と類似度</h2>
<p>ユークリッド距離,コサイン距離</p>
]]></description>
    <pubDate>Fri, 29 Mar 2024 00:00:00 UT</pubDate>
    <guid>/lectures/slds9.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>特別講義DS Ch8 データの可視化</title>
    <link>/lectures/slds8.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#データの可視化" id="toc-データの可視化"><span class="toc-section-number">1</span> データの可視化</a>
<ul>
<li><a href="#基礎的なグラフ棒グラフ円グラフ折れ線グラフ" id="toc-基礎的なグラフ棒グラフ円グラフ折れ線グラフ"><span class="toc-section-number">1.1</span> 基礎的なグラフ(棒グラフ,円グラフ,折れ線グラフ)</a>
<ul>
<li><a href="#棒グラフの作成" id="toc-棒グラフの作成"><span class="toc-section-number">1.1.1</span> 棒グラフの作成</a></li>
<li><a href="#色の変更" id="toc-色の変更"><span class="toc-section-number">1.1.2</span> 色の変更</a></li>
<li><a href="#スタイルの変更" id="toc-スタイルの変更"><span class="toc-section-number">1.1.3</span> スタイルの変更</a></li>
<li><a href="#要素の追加" id="toc-要素の追加"><span class="toc-section-number">1.1.4</span> 要素の追加</a></li>
</ul></li>
<li><a href="#円グラフ" id="toc-円グラフ"><span class="toc-section-number">1.2</span> 円グラフ</a></li>
<li><a href="#for文を利用したグラフ" id="toc-for文を利用したグラフ"><span class="toc-section-number">1.3</span> for文を利用したグラフ</a></li>
<li><a href="#グラフの分割" id="toc-グラフの分割"><span class="toc-section-number">1.4</span> グラフの分割</a></li>
<li><a href="#度数分布表とヒストグラム" id="toc-度数分布表とヒストグラム"><span class="toc-section-number">1.5</span> 度数分布表とヒストグラム</a>
<ul>
<li><a href="#度数分布表" id="toc-度数分布表"><span class="toc-section-number">1.5.1</span> 度数分布表</a></li>
<li><a href="#度数分布表の可視化ヒストグラム" id="toc-度数分布表の可視化ヒストグラム"><span class="toc-section-number">1.5.2</span> 度数分布表の可視化:<strong>ヒストグラム</strong></a></li>
</ul></li>
<li><a href="#箱ひげ図" id="toc-箱ひげ図"><span class="toc-section-number">1.6</span> 箱ひげ図</a></li>
<li><a href="#発展密度プロット" id="toc-発展密度プロット"><span class="toc-section-number">1.7</span> 発展:密度プロット</a></li>
<li><a href="#発展sinaplot" id="toc-発展sinaplot"><span class="toc-section-number">1.8</span> 発展:sinaplot</a></li>
<li><a href="#発展バイオリンプロット" id="toc-発展バイオリンプロット"><span class="toc-section-number">1.9</span> 発展:バイオリンプロット</a></li>
<li><a href="#散布図" id="toc-散布図"><span class="toc-section-number">1.10</span> 散布図</a>
<ul>
<li><a href="#観測項目が複数ある場合の散布図" id="toc-観測項目が複数ある場合の散布図"><span class="toc-section-number">1.10.1</span> 観測項目が複数ある場合の散布図</a></li>
<li><a href="#クラスタリングにおける散布図" id="toc-クラスタリングにおける散布図"><span class="toc-section-number">1.10.2</span> クラスタリングにおける散布図</a></li>
</ul></li>
<li><a href="#同時度数分布表" id="toc-同時度数分布表"><span class="toc-section-number">1.11</span> 同時度数分布表</a></li>
<li><a href="#ヒートマップ" id="toc-ヒートマップ"><span class="toc-section-number">1.12</span> ヒートマップ</a></li>
</ul></li>
</ul>
</div>
<h1 data-number="1" id="データの可視化"><span class="header-section-number">1</span> データの可視化</h1>
<p>ここまでで,プログラミングを利用してデータを読み込み,編集ができるようになりました. これから,データを分析する手法を学習しましょう. データ分析の第一歩は,データの<strong>可視化</strong>です.</p>
<p>統計データはテーブル形式のまま,眺めても理解できません. データを可視化することで,データの特徴や意味を理解する助けになります. ここでは,データを可視化するいくつかの方法を学びましょう.</p>
<div class="note">
<ul>
<li><h2 id="ライブラリのインストール">ライブラリのインストール</h2></li>
</ul>
<p>Pythonにおけるグラフ作成の,代表的なライブラリには,<a href="https://matplotlib.org"><code>matplotlib</code></a>や<a href="https://seaborn.pydata.org"><code>seaborn</code></a>があります.
それぞれ, <code>pip install</code>しておきましょう.</p>
<p><code>matplotlib</code>,<code>seaborn</code>はそれぞれ以下のようにインポートするのが一般的です.</p>
<ul>
<li><p><code>import matplotlib.pyplot as plt</code></p></li>
<li><p><code>import searborn as sns</code></p></li>
</ul>
</div>
<div class="warn">
<ul>
<li><h2 id="matplotlibにおける日本語表示"><code>matplotlib</code>における日本語表示</h2>
<code>matplotlib</code>は日本語などのマルチバイト文字に対応しておらず,日本語を使用すると日本語部分が日本語部分が, □(通称豆腐)に変わります.</li>
</ul>
<p>例: ｢Hello こんにちは｣ → ｢Hello □ □ □ □ □ ｣</p>
<p><code>matplotlib</code>で日本語を利用する方法として一番簡単なものに, <code>japanize-matplotlib</code>の利用があります.
<code>pip install</code> したあとに, <code>import japanize_matplotlib</code> をしましょう(<code>pip</code> では <code>'-'</code>(ハイフン)ですが,<code>import</code>文では,<code>'_'</code>(アンダーバー)なので注意してください.)</p>
</div>
<div class="warn">
<ul>
<li>Python 3.12 における<code>japanize_matplotlib</code></li>
</ul>
<p>Python3.12では,<code>japanize_matplotlib</code>を読み込もうとすると,<code>ModuleNotFoundError: No module named 'distutils'</code> と表示されます.</p>
<p>これは,<code>japanize_matplotlib</code>内で利用されている<code>distutils</code>というモジュールが廃止されたことによります. こちらのエラーは, <code>distutils</code>の代替である<code>setuptools</code>を <code>pip install</code>することで消えます.</p>
<p>参考: <a href="https://qiita.com/pitao/items/1740a62ddee797aed807">【inshellisense】ModuleNotFoundError: No module named ’distutils’の対処法</a></p>
</div>
<p>本章におけるコードは以下, 先頭に以下のような記述があることが前提となります.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.pyplot <span class="im">as</span> plt</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> japanize_matplotlib</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> seaborn <span class="im">as</span> sns</span></code></pre></div>
<h2 data-number="1.1" id="基礎的なグラフ棒グラフ円グラフ折れ線グラフ"><span class="header-section-number">1.1</span> 基礎的なグラフ(棒グラフ,円グラフ,折れ線グラフ)</h2>
<p><code>matplotlib</code>を利用して,グラフを作成する大まかな手順は以下のようになります.</p>
<div class="note">
<ol type="1">
<li><p>データを準備する.
BOMなしのCSVを作りましょう</p></li>
<li><p><code>pandas</code>でプログラムでCSVを読み込みましょう</p></li>
<li><p>グラフにしたい部分を抽出します.</p>
<p>グラフを作るために何が必要かはグラフの種類によります.</p></li>
<li><p><code>matplotlib</code>のメソッドを利用してグラフを生成します.</p>
<p>基本的なメソッドは以下のとおりです.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">グラフの種類</th>
<th style="text-align: center;">メソッド</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">棒グラフ</td>
<td style="text-align: center;"><code>plt.bar(x軸のリスト,y軸のリスト)</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">円グラフ</td>
<td style="text-align: center;"><code>plt.pie(カテゴリー別のデータのリスト,label=ラベル)</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">折れ線グラフ</td>
<td style="text-align: center;"><code>plt.plot(x軸のリスト,y軸のリスト)</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">散布図</td>
<td style="text-align: center;"><code>plt.scatter(x軸のリスト,y軸のリスト)</code></td>
</tr>
</tbody>
</table>
<p>これら以外の,グラフに関しては個別に扱います.</p></li>
<li><p>グラフの見た目を整えます.</p>
<p>ある程度自動で設定されますが,色,メモリ,形,軸などを個別に設定できます.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">グラフの要素</th>
<th style="text-align: center;">メソッド</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">タイトル</td>
<td style="text-align: center;"><code>plt.title('タイトル')</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">判例</td>
<td style="text-align: center;"><code>plt.legend()</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">y軸</td>
<td style="text-align: center;"><code>plt.yticks(軸の目盛のリスト)</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">x軸</td>
<td style="text-align: center;"><code>plt.xticks(軸の目盛のリスト)</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">y軸ラベル</td>
<td style="text-align: center;"><code>plt.ylabel('ラベル')</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">x軸ラベル</td>
<td style="text-align: center;"><code>plt.xlabel('ラベル')</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">補助線の追加</td>
<td style="text-align: center;"><code>plt.minorticks_on()</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"><code>plt.grid(which='both')</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">表示領域</td>
<td style="text-align: center;"><code>plt.ylim(min,max)</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"><code>plt.xlim(min,max)</code></td>
</tr>
</tbody>
</table></li>
<li><p><code>plt.show()</code>でグラフを出力.</p></li>
</ol>
<p>ポップアップウィンドウでグラフが表示されます.</p>
<ol start="8" type="1">
<li>グラフの保存</li>
</ol>
<p>ポップアップウィンドウの保存ボタンを押すことで画像に名前をつけて保存することが可能です.</p>
<figure>
<img src="/images/graph_size_setting.png" alt="画像の表示" />
<figcaption aria-hidden="true">画像の表示</figcaption>
</figure>
</div>
<p>例えば,以下のコードで次のグラフが表示されます.
<code>np.arange(0,100,1)</code>は,<code>0</code>から<code>100</code>までの数値を<code>1</code>ずつ増える<code>numpy</code>の配列を生成しています.
<code>[x for x in range(0,101,1)]</code> でも同様の結果となります.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>plt.plot(np.arange(<span class="dv">0</span>,<span class="dv">100</span>,<span class="dv">1</span>)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>        ,np.arange(<span class="dv">0</span>,<span class="dv">100</span>,<span class="dv">1</span>)</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>        ,color<span class="op">=</span><span class="st">&#39;red&#39;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        ,label<span class="op">=</span><span class="st">&#39;sample&#39;</span>)</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;title&#39;</span>)</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>plt.ylim(<span class="dv">0</span>,<span class="dv">100</span>)</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>plt.xlim(<span class="dv">0</span>,<span class="dv">100</span>)</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>plt.xticks(np.arange(<span class="dv">0</span>,<span class="dv">100</span>,<span class="dv">10</span>))</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>plt.yticks(np.arange(<span class="dv">0</span>,<span class="dv">100</span>,<span class="dv">10</span>))</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>plt.minorticks_on()</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>plt.grid(which<span class="op">=</span><span class="st">&#39;both&#39;</span>)</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>plt.xlabel(<span class="st">&#39;x_label&#39;</span>)</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&#39;y_label&#39;</span>)</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>plt.legend()</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/python_graph_elem.png" alt="グラフの要素" />
<figcaption aria-hidden="true">グラフの要素</figcaption>
</figure>
<div class="warn">
<p>画像は<code>plt.show()</code>で表示されるポップアップウィンドウを立ち上げなくても,<code>plt.savefig('figure.png')</code>と記述することで保存することができます.</p>
<p>ただし,<code>plt.show()</code>をして自分でポップアップウィンドウを閉じないと,<code>plt.</code>による設定がメモリに保存されたままになります.</p>
<p><code>plt.show()</code>を実行しない場合は必ず最後に<code>plt.close()</code>を追加してメモリを開放しましょう.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>plt.plot(np.arange(<span class="dv">0</span>,<span class="dv">100</span>,<span class="dv">1</span>)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>        ,np.arange(<span class="dv">0</span>,<span class="dv">100</span>,<span class="dv">1</span>)</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>        ,color<span class="op">=</span><span class="st">&#39;red&#39;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>        ,label<span class="op">=</span><span class="st">&#39;sample&#39;</span>)</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>plt.savefig(<span class="st">&#39;figure.png&#39;</span>)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>plt.close()</span></code></pre></div>
</div>
<h3 data-number="1.1.1" id="棒グラフの作成"><span class="header-section-number">1.1.1</span> 棒グラフの作成</h3>
<p><a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/bar_pie.csv">こちら</a>からデータをダウンロードし,棒グラフを作成してみましょう.</p>
<p>まずはデータを確認します.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co"># import 部分は省略されています</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="co"># dataフォルダにあるbar_pie.csvというファイルを読み込みます.</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&quot;data/bar_pie.csv&quot;</span>)</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="co"># 読み込んだファイルの中身を見てみます.</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="co">    cat dog bird</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="co">0    10  12   20</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>プログラムは読み込むデータと,作りたいグラフの形によって変化します.
どのようなデータが必要かを意識して,データを抽出しましょう.</p>
<div class="note">
<p>棒グラフの作成に必要なデータは,</p>
<ul>
<li><code>棒毎のラベル</code></li>
</ul>
<p>それぞれの棒の名前です.文字列で指定します.
今回は<code>'cat'</code>,<code>'dog'</code>,<code>'bird'</code>とします.</p>
<ul>
<li><code>棒毎のx軸の位置</code></li>
</ul>
<p>棒グラフの位置は,<code>0</code>から始まる整数の列として指定します.
今回は,<code>0</code>,<code>1</code>,<code>2</code>を指定します.</p>
<ul>
<li><code>棒毎の高さ</code>になります.</li>
</ul>
<p>高さに<code>10</code>,<code>12</code>,<code>20</code>を指定します.</p>
</div>
<div class="sourceCode" id="cb5"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 棒グラフのラベルを抽出します</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="co"># df.columns でDataFrameからHeaderを抽出し,</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="co"># list()関数でDataFrameからlist型に変換しています</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>labels <span class="op">=</span> <span class="bu">list</span>(df.columns)</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="co"># 棒グラフのx軸のどこに置くのかを指定しています.</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="co"># np.arange(x) は [0,1,..,x]というarrayを作ります.</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>x_position <span class="op">=</span> np.arange(<span class="bu">len</span>(labels))</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="co">#棒グラフの高さを抽出します</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="co"># メソッド icloc[x]はDataFrameのx行目を抽出します.</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>values <span class="op">=</span> <span class="bu">list</span>(df.iloc[<span class="dv">0</span>])</span></code></pre></div>
<p>抽出した情報を元に,棒グラフを作成します.
<code>plt.bar(X軸のリスト,Y軸のリスト)</code>の形で,データを指定します.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 棒グラフを作成します.</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="co"># x 軸 にx_position</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="co"># それぞれの棒グラフの高さにvaluesを与えています.</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="co"># その他にも沢山の引数があります.</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>plt.bar(x<span class="op">=</span>x_position, height<span class="op">=</span>values)</span></code></pre></div>
<p>このままだと,X軸のラベルに何も記述されないので,
<code>plt.xticks(ラベルの位置のリスト,ラベルのリスト)</code>で,ラベルを指定します.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">#ラベルの位置を指定します.</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>plt.xticks(ticks<span class="op">=</span>x_position,labels<span class="op">=</span>labels)</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="co"># Y軸ラベルを指定します</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&quot;number&quot;</span>)</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="co"># タイトルを指名します</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&quot;kind&quot;</span>)</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="co"># グラフの表示</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/bar_graph.png" alt="棒グラフの表示" />
<figcaption aria-hidden="true">棒グラフの表示</figcaption>
</figure>
<p>表示されたグラフは, 保存ボタンで画像として保存できます.</p>
<p>グラフ作成の基本は,これで終わりです.あとは,それぞれのグラフ毎に<code>plt.bar()</code>の部分を使い分け,グラフのデザインを変更することで,様々なグラフが作成できます.</p>
<p>グラフのデザインに関する要素は,無数にあるためこの講義ですべてを扱うことはできませんが,いくつかの要素を実際に変更してみましょう.</p>
<h3 data-number="1.1.2" id="色の変更"><span class="header-section-number">1.1.2</span> 色の変更</h3>
<p>matplotlibではグラフの各部に以下の色を指定できます.
これ以外の指定の仕方もあります.色の変え方は,それぞれのグラフで異なります.</p>
<figure>
<img src="/images/graph_color.png" alt="グラフの色" />
<figcaption aria-hidden="true">グラフの色</figcaption>
</figure>
<p>棒グラフは<code>plt.bar(color=棒毎の色のリスト)</code>の形で棒ごとに色を指定することができます.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 棒グラフの色を指定します.</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="co"># 1つ目 red</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="co"># 2つ目 blue</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="co"># 3つ目 yellow</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>color_list <span class="op">=</span> [<span class="st">&quot;red&quot;</span>, <span class="st">&quot;blue&quot;</span>, <span class="st">&quot;yellow&quot;</span>]</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="co"># 引数に色の指定をします</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>plt.bar(color<span class="op">=</span>color_list, x<span class="op">=</span>x_position, height<span class="op">=</span>values)</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="co">#ラベルの位置を指定します.</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>plt.xticks(ticks<span class="op">=</span>x_position,labels<span class="op">=</span>labels)</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="co"># yラベルを指定します</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&quot;number&quot;</span>)</span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="co"># タイトルを指名します</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&quot;kind&quot;</span>)</span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a><span class="co"># グラフの表示</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/bar_graph_color.png" alt="棒グラフの色の変更" />
<figcaption aria-hidden="true">棒グラフの色の変更</figcaption>
</figure>
<h3 data-number="1.1.3" id="スタイルの変更"><span class="header-section-number">1.1.3</span> スタイルの変更</h3>
<p>毎回細かなデザインを自分で調整すると手間なので,デフォルトで準備されているスタイルを利用すると楽です.</p>
<p>matplotlibではいくつかのデフォルトのスタイルが準備されています. 使用可能なスタイルは,plt.style.available で確認できます.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> python</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="ex">Python</span> 3.12.3 <span class="er">(</span><span class="ex">main,</span> Jun  3 2024, 08:31:31<span class="kw">)</span> <span class="ex">[Clang</span> 15.0.0 <span class="er">(</span><span class="ex">clang-1500.3.9.4</span><span class="kw">)</span><span class="ex">]</span> on darwin</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Type</span> <span class="st">&quot;help&quot;</span>, <span class="st">&quot;copyright&quot;</span>, <span class="st">&quot;credits&quot;</span> or <span class="st">&quot;license&quot;</span> for more information.</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> import <span class="ex">matplotlib.pyplot</span> as plt</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> plt.style.available</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="ex">[</span><span class="st">&#39;Solarize_Light2&#39;</span><span class="ex">,</span> <span class="st">&#39;_classic_test_patch&#39;</span>, <span class="st">&#39;_mpl-gallery&#39;</span>, <span class="st">&#39;_mpl-gallery-nogrid&#39;</span>, <span class="st">&#39;bmh&#39;</span>, <span class="st">&#39;classic&#39;</span>, <span class="st">&#39;dark_background&#39;</span>, <span class="st">&#39;fast&#39;</span>, <span class="st">&#39;fivethirtyeight&#39;</span>, <span class="st">&#39;ggplot&#39;</span>, <span class="st">&#39;grayscale&#39;</span>, <span class="st">&#39;seaborn-v0_8&#39;</span>, <span class="st">&#39;seaborn-v0_8-bright&#39;</span>, <span class="st">&#39;seaborn-v0_8-colorblind&#39;</span>, <span class="st">&#39;seaborn-v0_8-dark&#39;</span>, <span class="st">&#39;seaborn-v0_8-dark-palette&#39;</span>, <span class="st">&#39;seaborn-v0_8-darkgrid&#39;</span>, <span class="st">&#39;seaborn-v0_8-deep&#39;</span>, <span class="st">&#39;seaborn-v0_8-muted&#39;</span>, <span class="st">&#39;seaborn-v0_8-notebook&#39;</span>, <span class="st">&#39;seaborn-v0_8-paper&#39;</span>, <span class="st">&#39;seaborn-v0_8-pastel&#39;</span>, <span class="st">&#39;seaborn-v0_8-poster&#39;</span>, <span class="st">&#39;seaborn-v0_8-talk&#39;</span>, <span class="st">&#39;seaborn-v0_8-ticks&#39;</span>, <span class="st">&#39;seaborn-v0_8-white&#39;</span>, <span class="st">&#39;seaborn-v0_8-whitegrid&#39;</span>, <span class="st">&#39;tableau-colorblind10&#39;</span>]</span></code></pre></div>
<p>それぞれのスタイルのイメージは<a href="https://matplotlib.org/stable/gallery/style_sheets/style_sheets_reference.html">こちら</a>で確認できます.</p>
<p>スタイルは<code>plt.style.use('スタイル名')</code>で指定し,以降のコード全てに適用されます.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co"># スタイル &#39;ggplot&#39; を使ってみます</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>plt.style.use(<span class="st">&#39;ggplot&#39;</span>)</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="co"># 引数に色の指定をします</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>plt.bar(x<span class="op">=</span>x_position, height<span class="op">=</span>values)</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="co">#ラベルの位置を指定します.</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>plt.xticks(ticks<span class="op">=</span>x_position,labels<span class="op">=</span>labels)</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="co"># yラベルを指定します</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&quot;number&quot;</span>)</span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="co"># タイトルを指名します</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&quot;kind&quot;</span>)</span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a><span class="co"># グラフの表示</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/bar_graph_style.png" alt="スタイルの適用" />
<figcaption aria-hidden="true">スタイルの適用</figcaption>
</figure>
<h3 data-number="1.1.4" id="要素の追加"><span class="header-section-number">1.1.4</span> 要素の追加</h3>
<p>グラフに新しい要素を付け加えるのも簡単です.</p>
<p><code>plt.show()</code>までの間に,グラフを宣言することで,複数のグラフを重ねることが可能です.
ここでは, 異なる色の棒グラフを追加しています.</p>
<p>また, <code>plt.legend()</code>によって凡例を追加しています.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co"># スタイル seaborn を使ってみます</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>plt.style.use(<span class="st">&#39;seaborn&#39;</span>)</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="co"># 棒グラフを2つ並べます</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>plt.bar(color<span class="op">=</span><span class="st">&#39;red&#39;</span>, x<span class="op">=</span>x_position, width<span class="op">=</span><span class="fl">0.3</span>,height<span class="op">=</span>values)</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>plt.bar(color<span class="op">=</span><span class="st">&#39;blue&#39;</span>,x<span class="op">=</span>x_position<span class="op">+</span><span class="fl">0.3</span>, width<span class="op">=</span><span class="fl">0.3</span>,height<span class="op">=</span>[<span class="dv">11</span>,<span class="dv">15</span>,<span class="dv">14</span>])</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="co">#凡例を追加します</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="co"># loc で位置を指定します</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="co"># 上下 upper center lower</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a><span class="co"># 左右 left center right</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>plt.legend([<span class="st">&#39;2020&#39;</span>,<span class="st">&#39;2000&#39;</span>], loc<span class="op">=</span><span class="st">&#39;upper left&#39;</span>)</span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="co">#ラベルの位置を指定します.</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>plt.xticks(ticks<span class="op">=</span>x_position<span class="op">+</span><span class="fl">0.15</span>,labels<span class="op">=</span>labels)</span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a><span class="co"># yラベルを指定します</span></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&quot;number&quot;</span>)</span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a><span class="co"># タイトルを指名します</span></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&quot;kind&quot;</span>)</span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a><span class="co"># グラフの表示</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/bar_graph_style2.png" alt="凡例の追加" />
<figcaption aria-hidden="true">凡例の追加</figcaption>
</figure>
<p>デザインのすべてのパターンをここで扱うことは出来ないので,
やりたいことに応じて,
<a href="https://matplotlib.org/stable/users/index">matplotlubの公式ドキュメント</a>を確認しましょう.</p>
<h2 data-number="1.2" id="円グラフ"><span class="header-section-number">1.2</span> 円グラフ</h2>
<p>先ほどと同じデータ<code>bar_pie.csv</code>を利用して円グラフを作成してみます.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="co">header1 header2 header3 ...</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="co">value1  value2  value3  ...</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="co">の形のcsvから棒グラフを作成する</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a><span class="co"># dataフォルダにあるbar_pie.csvというファイルを読み込みます.</span></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&quot;data/bar_pie.csv&quot;</span>)</span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a><span class="co"># 読み込んだファイルの中身を見てみます.</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a><span class="co"># 棒グラフのラベルを抽出します</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a><span class="co"># df.columns でDataFrameからHeaderを抽出し,</span></span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a><span class="co"># list()関数でDataFrameからlist型に変換しています</span></span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a>labels <span class="op">=</span> <span class="bu">list</span>(df.columns)</span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a><span class="co"># メソッド icloc[x]はDataFrameのx行目を抽出します.</span></span>
<span id="cb12-19"><a href="#cb12-19" aria-hidden="true" tabindex="-1"></a>values <span class="op">=</span> <span class="bu">list</span>(df.iloc[<span class="dv">0</span>])</span>
<span id="cb12-20"><a href="#cb12-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-21"><a href="#cb12-21" aria-hidden="true" tabindex="-1"></a><span class="co"># 円グラフの作成</span></span>
<span id="cb12-22"><a href="#cb12-22" aria-hidden="true" tabindex="-1"></a>plt.pie(values, labels<span class="op">=</span>labels, autopct<span class="op">=</span><span class="st">&#39;</span><span class="sc">%1.1f%%</span><span class="st">&#39;</span>)</span>
<span id="cb12-23"><a href="#cb12-23" aria-hidden="true" tabindex="-1"></a><span class="co"># タイトルを指名します</span></span>
<span id="cb12-24"><a href="#cb12-24" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&quot;kind&quot;</span>)</span>
<span id="cb12-25"><a href="#cb12-25" aria-hidden="true" tabindex="-1"></a><span class="co"># グラフの表示</span></span>
<span id="cb12-26"><a href="#cb12-26" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<p>円グラフは, <code>plt.pie()</code>にそれぞれの領域の割合と,ラベルを与えることで,作成できます.
グラフに数字を表示するには,<code>autopct=</code>に<code>フォーマット文字列</code>で表示内容を指定します.
上記の例では<code>'%1.1f%%'</code>と書くことで,小数点1桁まで数値を表示しています.</p>
<figure>
<img src="/images/pie_graph1.png" alt="円グラフ" />
<figcaption aria-hidden="true">円グラフ</figcaption>
</figure>
<div class="note">
<ul>
<li>演習</li>
</ul>
<p><a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/pie_chart_practice.csv">円グラフデータ</a>,<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/line_chart_practice.csv">折れ線グラフデータ2</a>,<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/bar_chart_practice.csv">棒グラフデータ3</a>を利用し,それぞれのグラフを作成してください.
表示が必要だと思われるデザインを設定してください.</p>
</div>
<h2 data-number="1.3" id="for文を利用したグラフ"><span class="header-section-number">1.3</span> for文を利用したグラフ</h2>
<p>これまでのように単純な一つのグラフを作成するだけであれば,恐らくExcelなどのほうが手軽ですが,多数のグラフを作成したり, 複数のデータを組み合わせた複雑なグラフを作成する場合にはプログラミングの方が便利になります.</p>
<p>例えば<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/temperature_10location.csv">こちら</a>のデータを利用して棒グラフを作成することを考えてみましょう.このデータは10箇所の気温が記録された時系列データです.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>          <span class="ex">Date</span>  Location_1  Location_2  ...  Location_8  Location_9  Location_10</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>   2023-01-01   18.211700   21.553371  ...   18.665620   29.108637    21.634069</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>   2023-01-02   15.108630   16.172744  ...   20.135756    9.212193    24.209877</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>   2023-01-03   14.938279   24.593193  ...   16.778431   22.291269    19.815977</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>   2023-01-04   20.640249   18.862405  ...   13.282269   16.040627    15.993132</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>   2023-01-05   14.218562   16.281882  ...   15.729466   24.951213    18.053277</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="ex">..</span>         ...         ...         ...  ...         ...         ...          ...</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="ex">95</span>  2023-04-06   21.312739   19.613363  ...   16.497553   20.446656    13.644605</span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="ex">96</span>  2023-04-07   26.388210   31.533854  ...   18.999736   15.603714    19.215097</span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="ex">97</span>  2023-04-08   16.914329   20.479892  ...   21.698464   17.705697    16.867517</span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a><span class="ex">98</span>  2023-04-09   14.316258   17.841650  ...   31.885071   20.816917    16.895196</span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a><span class="ex">99</span>  2023-04-10   23.595042   19.896247  ...   17.534881   15.180066    15.104460</span></code></pre></div>
<p>このデータの<code>Location_1</code>から<code>Location_10</code>までの折れ線グラフを一つのグラフに表示することを考えてみます.</p>
<p><code>matplotlib</code>では, <code>plt.show()</code>までに要素を重ねることで複数のグラフを重ねることができます.</p>
<p>例えば,10本の折れ線グラフを表示する場合,一つ一つ手書きすると以下のようになります.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/temperature_10location.csv&#39;</span>)</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="co">#&#39;Date&#39;列を日付型に変更しています.</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;Date&#39;</span>] <span class="op">=</span> pd.to_datetime(df[<span class="st">&#39;Date&#39;</span>])</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a><span class="co">#一つ一つ手書きする方法</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>plt.plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_1&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_1&#39;</span>)</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>plt.plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_2&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_2&#39;</span>)</span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>plt.plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_3&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_3&#39;</span>)</span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>plt.plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_4&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_4&#39;</span>)</span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>plt.plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_5&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_5&#39;</span>)</span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a>plt.plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_6&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_6&#39;</span>)</span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a>plt.plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_7&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_7&#39;</span>)</span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a>plt.plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_8&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_8&#39;</span>)</span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a>plt.plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_9&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_9&#39;</span>)</span>
<span id="cb14-17"><a href="#cb14-17" aria-hidden="true" tabindex="-1"></a>plt.plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_10&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_10&#39;</span>)</span>
<span id="cb14-18"><a href="#cb14-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-19"><a href="#cb14-19" aria-hidden="true" tabindex="-1"></a>plt.legend()</span>
<span id="cb14-20"><a href="#cb14-20" aria-hidden="true" tabindex="-1"></a>plt.xticks(rotation<span class="op">=</span><span class="dv">15</span>) <span class="co">#x軸を15度傾かせています</span></span>
<span id="cb14-21"><a href="#cb14-21" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/temperature_10location.png" alt="10本の折れ線グラフ" />
<figcaption aria-hidden="true">10本の折れ線グラフ</figcaption>
</figure>
<p>10本程度であれば,まだ書けなくもありませんが,それでも手間がかかります.こういった繰り返しの作業は<code>for文</code>を利用しましょう.</p>
<p><code>for文</code>を利用した場合には以下のようになります.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> x <span class="kw">in</span> df.columns[<span class="dv">1</span>:]:</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>    plt.plot(df[<span class="st">&#39;Date&#39;</span>],df[x],label<span class="op">=</span>x)</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>plt.legend()</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>plt.xticks(rotation<span class="op">=</span><span class="dv">15</span>)</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<p>グラフの内容は同じですが,こちらのほうが労力が少なく,コードもスッキリしており,何か修正を加える場合でも修正箇所が少なくて済みます.
繰り返し作業は積極的に<code>for文</code>や<code>while文</code>を利用するようにしましょう.</p>
<h2 data-number="1.4" id="グラフの分割"><span class="header-section-number">1.4</span> グラフの分割</h2>
<p>先程は一つのグラフ内に複数の折れ線グラフを表示しましたが,個別に表示する場合にはどのようになるでしょうか.
一つの方法として,以下の用に複数のグラフを個別に作成することも可能です.
(先に保存先のディレクトリ <code>result/multi_plot</code> を作成しておきましょう.)</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> x <span class="kw">in</span> df.columns[<span class="dv">1</span>:]:</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>    plt.plot(df[<span class="st">&#39;Date&#39;</span>],df[x])</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>    plt.title(x)</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>    plt.xticks(rotation<span class="op">=</span><span class="dv">15</span>)</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>    plt.savefig(<span class="st">&#39;result/multi_plot/&#39;</span> <span class="op">+</span> x <span class="op">+</span> <span class="st">&#39;.png&#39;</span>)</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>    plt.close()</span></code></pre></div>
<figure>
<img src="/images/temperature_10location2.png" alt="保存された10個のグラフ" />
<figcaption aria-hidden="true">保存された10個のグラフ</figcaption>
</figure>
<p>しかし,レポートなどに10枚の画像を貼り付けるのは手間がかかりますし,余白など無駄も多いです.</p>
<ul>
<li>subplots()</li>
</ul>
<p><code>matplotlib</code>には1枚の画像を分割して複数のグラフを載せるためのメソッド<code>.subplots()</code>があるので,関連するグラフや比較のためのグラフなどはできるだけ1枚の画像に集約しましょう.</p>
<p><code>.subplots()</code>は1枚の画像を<code>n行</code>,<code>n列</code>に分割し,それぞれの領域にグラフを描画します.</p>
<p>各領域は <code>axes</code>などと呼ばれ,画像全体を<code>figure</code>などと呼びます.
利用するためには,まず <code>fig, axes = plt.subplot()</code>の形で宣言します. 引数として,行数は<code>nrows=</code>,列数は<code>ncols=</code>にそれぞれ<code>int</code>で指定します.</p>
<figure>
<img src="/images/figure_axes.png" alt="FigureとAxes" />
<figcaption aria-hidden="true">FigureとAxes</figcaption>
</figure>
<div class="sourceCode" id="cb17"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>fig, axes <span class="op">=</span> plt.subplot(nrows<span class="op">=</span> <span class="dv">5</span> <span class="co">#行数の指定</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>                       ,ncols<span class="op">=</span> <span class="dv">2</span> <span class="co">#列数の指定</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>                        )</span></code></pre></div>
<p>宣言のあと,各領域のグラフを <code>axes[行,列]</code>の形で指定していきます.行や列は<code>0</code>から始まるので注意してください.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a>axes[<span class="dv">0</span>,<span class="dv">0</span>].plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_1&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_1&#39;</span>)</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>axes[<span class="dv">0</span>,<span class="dv">1</span>].plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_2&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_2&#39;</span>)</span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>axes[<span class="dv">1</span>,<span class="dv">0</span>].plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_3&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_3&#39;</span>)</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>axes[<span class="dv">1</span>,<span class="dv">1</span>].plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_4&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_4&#39;</span>)</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>axes[<span class="dv">2</span>,<span class="dv">0</span>].plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_5&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_5&#39;</span>)</span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>axes[<span class="dv">2</span>,<span class="dv">1</span>].plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_6&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_6&#39;</span>)</span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>axes[<span class="dv">3</span>,<span class="dv">0</span>].plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_7&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_7&#39;</span>)</span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a>axes[<span class="dv">3</span>,<span class="dv">1</span>].plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_8&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_8&#39;</span>)</span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a>axes[<span class="dv">4</span>,<span class="dv">0</span>].plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_9&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_9&#39;</span>)</span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a>axes[<span class="dv">4</span>,<span class="dv">1</span>].plot(df[<span class="st">&#39;Date&#39;</span>],df[<span class="st">&#39;Location_10&#39;</span>],label<span class="op">=</span><span class="st">&#39;Location_10&#39;</span>)</span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<p>以下のようなグラフが作成されます. しかし, 少し見にくいですね.</p>
<figure>
<img src="/images/subplot1.png" alt="subplots" />
<figcaption aria-hidden="true">subplots</figcaption>
</figure>
<p><code>.subplots(sharex=True)</code>とすると,x軸を共有することができます.今回のグラフはx軸がすべて同じなので,共有してみましょう.
また,それぞれのグラフにタイトルを付けてみます.
更に,一つ一つ手で入力するのは手間なので<code>for文</code>を利用してみましょう.</p>
<p>タイトルを付けるには今までの<code>plt.title()</code>ではなく<code>axes[r,c].set_title()</code>になります. <code>axes</code>毎の要素に関しては<a href="https://matplotlib.org/stable/users/explain/axes/axes_intro.html">公式サイト</a>を参考にしてください.</p>
<figure>
<img src="https://matplotlib.org/stable/_images/anatomy.png" alt="axesの要素(https://matplotlib.orgより)" />
<figcaption aria-hidden="true">axesの要素(https://matplotlib.orgより)</figcaption>
</figure>
<div class="sourceCode" id="cb19"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a>fig, axes <span class="op">=</span> plt.subplots(nrows<span class="op">=</span> <span class="dv">5</span> <span class="co">#行数の指定</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>                        ,ncols<span class="op">=</span> <span class="dv">2</span> <span class="co">#列数の指定</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>                        ,sharex<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a>count <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">5</span>):</span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> j <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">2</span>):</span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a>        col <span class="op">=</span> df.columns[<span class="dv">1</span>:]</span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a>        axes[i,j].plot(df[<span class="st">&#39;Date&#39;</span>],df[col[count]])</span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a>        axes[i,j].set_title(col[count])</span>
<span id="cb19-11"><a href="#cb19-11" aria-hidden="true" tabindex="-1"></a>        axes[i,j].tick_params(axis<span class="op">=</span><span class="st">&#39;x&#39;</span>, rotation<span class="op">=</span><span class="dv">15</span>)</span>
<span id="cb19-12"><a href="#cb19-12" aria-hidden="true" tabindex="-1"></a>        count <span class="op">+=</span><span class="dv">1</span></span>
<span id="cb19-13"><a href="#cb19-13" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/subplot2.png" alt="subplots" />
<figcaption aria-hidden="true">subplots</figcaption>
</figure>
<p>グラフ全体の要素は<code>fig.</code>の形で指定します.
タイトルを付ける場合は<code>fig.suptitle('title')</code>となります.</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a>fig, axes <span class="op">=</span> plt.subplots(nrows<span class="op">=</span> <span class="dv">5</span> <span class="co">#行数の指定</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>                        ,ncols<span class="op">=</span> <span class="dv">2</span> <span class="co">#列数の指定</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>                        ,sharex<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a>count <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">5</span>):</span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> j <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">2</span>):</span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a>        col <span class="op">=</span> df.columns[<span class="dv">1</span>:]</span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a>        axes[i,j].plot(df[<span class="st">&#39;Date&#39;</span>],df[col[count]])</span>
<span id="cb20-10"><a href="#cb20-10" aria-hidden="true" tabindex="-1"></a>        axes[i,j].set_title(col[count])</span>
<span id="cb20-11"><a href="#cb20-11" aria-hidden="true" tabindex="-1"></a>        axes[i,j].tick_params(axis<span class="op">=</span><span class="st">&#39;x&#39;</span>, rotation<span class="op">=</span><span class="dv">15</span>)</span>
<span id="cb20-12"><a href="#cb20-12" aria-hidden="true" tabindex="-1"></a>        count <span class="op">+=</span><span class="dv">1</span></span>
<span id="cb20-13"><a href="#cb20-13" aria-hidden="true" tabindex="-1"></a>fig.suptitle(<span class="st">&#39;subplots title&#39;</span>)</span>
<span id="cb20-14"><a href="#cb20-14" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/subplot3.png" alt="subplots" />
<figcaption aria-hidden="true">subplots</figcaption>
</figure>
<div class="note">
<ul>
<li>flatten()</li>
</ul>
<p><code>for文</code>を二重ループで記述するのは大変なので,しばしば<code>axes.flatten()</code>を利用して,連番に変換すると便利です.</p>
<figure>
<img src="/images/figure_axes_flatten.png" alt="flatten" />
<figcaption aria-hidden="true">flatten</figcaption>
</figure>
<div class="sourceCode" id="cb21"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a>fig, axes <span class="op">=</span> plt.subplots(nrows<span class="op">=</span> <span class="dv">5</span> <span class="co">#行数の指定</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>                        ,ncols<span class="op">=</span> <span class="dv">2</span> <span class="co">#列数の指定</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>                        ,sharex<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a><span class="co">#連番に変換</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a>axes <span class="op">=</span> axes.flatten()</span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">10</span>):</span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a>    col <span class="op">=</span> df.columns[<span class="dv">1</span>:][i] <span class="co">#countをiで共通化</span></span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true" tabindex="-1"></a>    axes[i].plot(df[<span class="st">&#39;Date&#39;</span>],df[col])</span>
<span id="cb21-10"><a href="#cb21-10" aria-hidden="true" tabindex="-1"></a>    axes[i].set_title(col)</span>
<span id="cb21-11"><a href="#cb21-11" aria-hidden="true" tabindex="-1"></a>    axes[i].tick_params(axis<span class="op">=</span><span class="st">&#39;x&#39;</span>, rotation<span class="op">=</span><span class="dv">15</span>)</span>
<span id="cb21-12"><a href="#cb21-12" aria-hidden="true" tabindex="-1"></a>fig.suptitle(<span class="st">&#39;subplots title&#39;</span>)</span>
<span id="cb21-13"><a href="#cb21-13" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
</div>
<h2 data-number="1.5" id="度数分布表とヒストグラム"><span class="header-section-number">1.5</span> 度数分布表とヒストグラム</h2>
<p>データを手に入れたら最初にデータを可視化してデータの特徴を掴む必要があります. データの特徴として重要なものに,データの<strong>分布</strong>があります.</p>
<div class="warn">
<ul>
<li><h2 id="分布の意味">分布の意味</h2></li>
</ul>
<p><strong>分布</strong>という語の詳細な意味に関しては,後ほど検定や回帰の章でも簡単に扱いますが,統計学入門において数理的に詳しく扱っています.</p>
<p>統計学入門を履修していない人はここでは,単に<strong>データの散らばり具合</strong>という意味として捉えておきましょう.</p>
</div>
<p>分布を可視化する手法として代表的なものに,<strong>度数分布表</strong>と,<strong>ヒストグラム</strong>があります. 1次元のデータの可視化において,度数分布表とヒストグラムは,<strong>データ分析のファーストステップ</strong>とも称される,重要な手法です. データを手に入れたらまずは度数分布表と,ヒストグラムを作成してみましょう.</p>
<h3 data-number="1.5.1" id="度数分布表"><span class="header-section-number">1.5.1</span> 度数分布表</h3>
<div class="note">
<p><strong>度数分布表</strong>とは,データの数を区切られた範囲ごとに数え上げた表のことです. 質的データの場合は,データのカテゴリー毎に,量的データの場合は分析者が定めた区間毎にデータがいくつかるのかを数え上げます.</p>
<p>普通ヒストグラムというと,量的データを対象としたものをいいますが,ここではわかりやすさのために,質的データから見ていきましょう.</p>
<p>以下の表は,何かしらの商品の美味しさに関するアンケート結果です. 商品を食べて,｢とても美味しい｣と回答した人の人数が9人,｢不味い｣と回答した人の人数が5人であることなどがわかります.</p>
<p>このように<strong>データのカテゴリー別にその値が生じたケースの数</strong>を<strong>度数</strong>といい,<strong>度数を数え上げ表に整理したもの</strong>を<strong>度数分布表</strong>といいます.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">アンケート区分</th>
<th style="text-align: center;">度数</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">とても美味しい</td>
<td style="text-align: center;">9</td>
</tr>
<tr class="even">
<td style="text-align: center;">どちらかといえば美味しい</td>
<td style="text-align: center;">11</td>
</tr>
<tr class="odd">
<td style="text-align: center;">普通</td>
<td style="text-align: center;">34</td>
</tr>
<tr class="even">
<td style="text-align: center;">どちらかといえば不味い</td>
<td style="text-align: center;">5</td>
</tr>
<tr class="odd">
<td style="text-align: center;">不味い</td>
<td style="text-align: center;">5</td>
</tr>
</tbody>
</table>
<p>度数の亜種には,以下のようなものがあり,それぞれによってデータの分布が把握できます.</p>
<ul>
<li><p>累積度数:</p>
<p>順序尺度データの度数を少ない方から足し上げた値</p></li>
<li><p>相対度数(構成比率):</p>
<p>度数の総和を100%としたときの構成比率</p></li>
<li><p>累積相対度数(累積比率):</p>
<p>相対度数を上から足し上げた値</p></li>
</ul>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">アンケート区分</th>
<th style="text-align: center;">度数</th>
<th style="text-align: center;">累積度数</th>
<th style="text-align: center;">相対度数</th>
<th style="text-align: center;">累積相対度数</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">とても美味しい</td>
<td style="text-align: center;">9</td>
<td style="text-align: center;">9</td>
<td style="text-align: center;">14%</td>
<td style="text-align: center;">14%</td>
</tr>
<tr class="even">
<td style="text-align: center;">どちらかといえば美味しい</td>
<td style="text-align: center;">11</td>
<td style="text-align: center;">20</td>
<td style="text-align: center;">17%</td>
<td style="text-align: center;">31%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">普通</td>
<td style="text-align: center;">34</td>
<td style="text-align: center;">54</td>
<td style="text-align: center;">53%</td>
<td style="text-align: center;">84%</td>
</tr>
<tr class="even">
<td style="text-align: center;">どちらかといえば不味い</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">59</td>
<td style="text-align: center;">8%</td>
<td style="text-align: center;">92%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">不味い</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">64</td>
<td style="text-align: center;">8%</td>
<td style="text-align: center;">100%</td>
</tr>
<tr class="even">
<td style="text-align: center;">計</td>
<td style="text-align: center;">64</td>
<td style="text-align: center;"></td>
<td style="text-align: center;">100%</td>
<td style="text-align: center;"></td>
</tr>
</tbody>
</table>
<p>度数分布表を作成することで,データがどの分類に偏っているのかなど,データの分布の傾向がつかめます. 度数分布表を見る場合には,相対度数や累積度数から<strong>データが一番多いカテゴリー</strong>,<strong>度数データの過半数が属するカテゴリー</strong>,<strong>データのほとんど(90%程度)が属するカテゴリー</strong>などに注目してみましょう.
上のデータでは,最も回答が多いのは｢普通｣であること, ｢とても美味しい｣｢どちらかといえば美味しい｣の回答が,31%であるのに対して,｢どちらかといえば不味い｣｢不味い｣の回答が18%であり,全体的にこの商品の味は高評価側に集中していることなどがわかります.</p>
</div>
<p>Pythonで度数分布表を作成するにはどのようにしたら良いのでしょうか. 質的データの場合は,ただそれぞれの値を数えればいいので,<code>for文</code>などを利用することも可能ですが,<code>pandas</code>の<code>value_counts()</code>メソッドを利用することで簡単に作成できます.</p>
<p><a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/diff_class.csv">こちら</a>のとある授業の難易度に関する質的データをダウンロードして度数分布表を作成してみましょう.</p>
<p>データは以下のように,｢難しすぎてついていけない｣,｢難しいが許容できる｣,｢ちょうどよい｣,｢簡単だが許容できる｣｢簡単すぎて退屈｣の5段階のカテゴリーが記述されています.</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a>         <span class="ex">Diff</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>   難しいが許容できる</span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>   簡単すぎて退屈</span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>   難しいが許容できる</span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>   簡単だが許容できる</span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>      ちょうどよい</span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a><span class="ex">..</span>        ...</span></code></pre></div>
<div class="sourceCode" id="cb23"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> matplotlib <span class="im">import</span> pyplot <span class="im">as</span> plt</span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> japanize_matplotlib</span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> math</span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> module.sturges <span class="im">as</span> st</span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-9"><a href="#cb23-9" aria-hidden="true" tabindex="-1"></a><span class="co">#データの読み込み</span></span>
<span id="cb23-10"><a href="#cb23-10" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;Data/diff.csv&#39;</span>)</span>
<span id="cb23-11"><a href="#cb23-11" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb23-12"><a href="#cb23-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-13"><a href="#cb23-13" aria-hidden="true" tabindex="-1"></a><span class="co">#ヒストグラムを作りたいデータの列名を指定</span></span>
<span id="cb23-14"><a href="#cb23-14" aria-hidden="true" tabindex="-1"></a>target_column <span class="op">=</span> <span class="st">&#39;Diff&#39;</span></span>
<span id="cb23-15"><a href="#cb23-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-16"><a href="#cb23-16" aria-hidden="true" tabindex="-1"></a><span class="co">#度数</span></span>
<span id="cb23-17"><a href="#cb23-17" aria-hidden="true" tabindex="-1"></a>freq <span class="op">=</span> df[target_column].value_counts(sort<span class="op">=</span><span class="va">False</span>)</span>
<span id="cb23-18"><a href="#cb23-18" aria-hidden="true" tabindex="-1"></a><span class="co">#順番の入れ替え</span></span>
<span id="cb23-19"><a href="#cb23-19" aria-hidden="true" tabindex="-1"></a>freq <span class="op">=</span> freq.reindex([<span class="st">&#39;難しすぎてついていけない&#39;</span></span>
<span id="cb23-20"><a href="#cb23-20" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;難しいが許容できる&#39;</span></span>
<span id="cb23-21"><a href="#cb23-21" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;ちょうどよい&#39;</span></span>
<span id="cb23-22"><a href="#cb23-22" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;簡単だが許容できる&#39;</span></span>
<span id="cb23-23"><a href="#cb23-23" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;簡単すぎて退屈&#39;</span>],axis<span class="op">=</span><span class="st">&#39;index&#39;</span>)</span>
<span id="cb23-24"><a href="#cb23-24" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;度数&#39;</span>,freq)</span>
<span id="cb23-25"><a href="#cb23-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-26"><a href="#cb23-26" aria-hidden="true" tabindex="-1"></a>rel_freq <span class="op">=</span> freq <span class="op">/</span> df[target_column].count()  <span class="co"># 相対度数</span></span>
<span id="cb23-27"><a href="#cb23-27" aria-hidden="true" tabindex="-1"></a>cum_freq <span class="op">=</span> freq.cumsum()  <span class="co"># 累積度数</span></span>
<span id="cb23-28"><a href="#cb23-28" aria-hidden="true" tabindex="-1"></a>rel_cum_freq <span class="op">=</span> rel_freq.cumsum()  <span class="co"># 相対累積度数</span></span>
<span id="cb23-29"><a href="#cb23-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-30"><a href="#cb23-30" aria-hidden="true" tabindex="-1"></a>dist <span class="op">=</span> pd.DataFrame(</span>
<span id="cb23-31"><a href="#cb23-31" aria-hidden="true" tabindex="-1"></a>    {   <span class="st">&quot;Value&quot;</span>: freq.index,        <span class="co">#階級値</span></span>
<span id="cb23-32"><a href="#cb23-32" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Freq&quot;</span>: freq,               <span class="co">#度数</span></span>
<span id="cb23-33"><a href="#cb23-33" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Rel&quot;</span>: rel_freq,            <span class="co">#相対度数</span></span>
<span id="cb23-34"><a href="#cb23-34" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Cum&quot;</span>: cum_freq,            <span class="co">#累積度数</span></span>
<span id="cb23-35"><a href="#cb23-35" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;RelCum&quot;</span>: rel_cum_freq,     <span class="co">#相対累積度数</span></span>
<span id="cb23-36"><a href="#cb23-36" aria-hidden="true" tabindex="-1"></a>    },</span>
<span id="cb23-37"><a href="#cb23-37" aria-hidden="true" tabindex="-1"></a>    index<span class="op">=</span>freq.index</span>
<span id="cb23-38"><a href="#cb23-38" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb23-39"><a href="#cb23-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-40"><a href="#cb23-40" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(dist)</span>
<span id="cb23-41"><a href="#cb23-41" aria-hidden="true" tabindex="-1"></a>dist.to_csv(<span class="st">&#39;frequency_table.csv&#39;</span>,)</span></code></pre></div>
<p>保存されたcsv(<code>frequency_table.csv</code>)を確認してみると,度数分布表が作成されていることが確認できます.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">Value</th>
<th style="text-align: center;">Freq</th>
<th style="text-align: center;">Rel</th>
<th style="text-align: center;">Cum</th>
<th style="text-align: center;">RelCum</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">難しすぎてついていけない</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">0.02247191</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">0.02247191</td>
</tr>
<tr class="even">
<td style="text-align: center;">難しいが許容できる</td>
<td style="text-align: center;">44</td>
<td style="text-align: center;">0.494382022</td>
<td style="text-align: center;">46</td>
<td style="text-align: center;">0.516853933</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ちょうどよい</td>
<td style="text-align: center;">38</td>
<td style="text-align: center;">0.426966292</td>
<td style="text-align: center;">84</td>
<td style="text-align: center;">0.943820225</td>
</tr>
<tr class="even">
<td style="text-align: center;">簡単だが許容できる</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">0.04494382</td>
<td style="text-align: center;">88</td>
<td style="text-align: center;">0.988764045</td>
</tr>
<tr class="odd">
<td style="text-align: center;">簡単すぎて退屈</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">0.011235955</td>
<td style="text-align: center;">89</td>
<td style="text-align: center;">1</td>
</tr>
</tbody>
</table>
<p>質的データはあらかじめデータのカテゴリーが定められているのでその数を数えるだけで,度数分布表が作成できました.
それでは,カテゴリーが存在しない量的データではどのようにして度数分布表を作成するのでしょうか.</p>
<div class="note">
<ul>
<li><strong>量的データと度数分布表</strong></li>
</ul>
<p>量的データには当てはまるデータを数えるためのカテゴリーが存在しません. 年収のデータを考えた場合,年収1万円ごとに表を作ると1から数億まで,非常に細かくなります.
そこで,量的データで度数分布表を作成するには,100万円ごと,300万円ごとなどデータをいくつかの区間に分けて,区間別の度数を数える必要があります. ここで, 作られた区間を<strong>階級</strong>,階級の幅を<strong>階級幅</strong>,階級を代表する値を<strong>階級値</strong>といいます. 階級値は大抵の場合,区間の中間の値が用いられます(100万円~200万円の区間だとすると,150万円など).</p>
<p>以下の度数分布表は,ある情報クラスの成績(0-100点)を10点毎に区分したものです. それぞれの点数に当てはまる人数を数えて度数とします.</p>
<figure>
<img src="/images/histogram1.png" alt="度数分布表の例" />
<figcaption aria-hidden="true">度数分布表の例</figcaption>
</figure>
<p>量的データの階級数や階級幅は,100万円ごとなどある程度人間の判断によって作成しても構いませんが,数理的に決定する方法もあります.</p>
<p>階級幅は階級数が決まることで自動的に決まるため,階級数を決める一般的な目安として,<strong>スタージェスの公式</strong>が利用されます.</p>
<p>観測数を<span class="math inline">n</span>,階級数を<span class="math inline">k</span>とすると.</p>
<p><span class="math display"> k = 1 + log_2 n = \frac{log_{10} n}{log_{10} 2}</span></p>
<p>程度の<span class="math inline">k</span>が望ましいとされています.</p>
<p>計算結果はおおよそ以下のようになります.</p>
<figure>
<img src="/images/sturges_number.png" alt="スタージェス数" />
<figcaption aria-hidden="true">スタージェス数</figcaption>
</figure>
</div>
<p>Pythonではスタージェス数は対数計算をするためのモジュール<code>math</code>を利用して以下のように求めることができます.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 2進対数を返す math.log2() 関数などを利用するために必要なモジュール</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> math</span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a><span class="co"># 関数名を sturgesNumber として引数をnとします</span></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> sturgesNumber(n):</span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 公式の通り k = 1 + log2 n</span></span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 階級数は整数が良いので,math.floor()で小数点以下を切り捨てます</span></span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> (math.floor (<span class="dv">1</span> <span class="op">+</span> math.log2(n)))</span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-10"><a href="#cb24-10" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(sturges(<span class="dv">2048</span>)) <span class="co">#&gt;&gt;&gt; 12</span></span></code></pre></div>
<p>階級数が決まることで階級幅が
<span class="math display">\frac{(データの最大値 - データの最小値)}{階級数}</span></p>
<p>として決まります.</p>
<p>それでは,<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/histogram_quantitative.csv">こちら</a>のデータを利用して,度数分布表を作成してみます. 量的データの度数分布表を作成するには,<code>value-counts()</code>の引数<code>bins=</code>に各階級の終点を表すリストを指定します.</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="co">#ヒストグラムを作りたいデータの列名を指定</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>target_column <span class="op">=</span> <span class="st">&#39;Values&#39;</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a><span class="co"># 関数名を sturgesNumber として引数をnとします</span></span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> sturgesNumber(n):</span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 公式の通り k = 1 + log2 n</span></span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 階級数は整数が良いので,math.floor()で小数点以下を切り捨てます</span></span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> (math.floor (<span class="dv">1</span> <span class="op">+</span> math.log2(n)))</span>
<span id="cb25-9"><a href="#cb25-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-10"><a href="#cb25-10" aria-hidden="true" tabindex="-1"></a><span class="co"># dataフォルダにあるhistogram_quantitative.csvというファイルを読み込みます.</span></span>
<span id="cb25-11"><a href="#cb25-11" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&quot;data/histogram_quantitative.csv&quot;</span>)</span>
<span id="cb25-12"><a href="#cb25-12" aria-hidden="true" tabindex="-1"></a><span class="co"># 読み込んだファイルの中身を見てみます.</span></span>
<span id="cb25-13"><a href="#cb25-13" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb25-14"><a href="#cb25-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-15"><a href="#cb25-15" aria-hidden="true" tabindex="-1"></a><span class="co">#階級数を決定</span></span>
<span id="cb25-16"><a href="#cb25-16" aria-hidden="true" tabindex="-1"></a>stnum <span class="op">=</span> sturgesNumber(<span class="bu">len</span>(df[target_column]))</span>
<span id="cb25-17"><a href="#cb25-17" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;sturges number:&#39;</span>,stnum)</span>
<span id="cb25-18"><a href="#cb25-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-19"><a href="#cb25-19" aria-hidden="true" tabindex="-1"></a><span class="co">#階級幅を決定</span></span>
<span id="cb25-20"><a href="#cb25-20" aria-hidden="true" tabindex="-1"></a>space <span class="op">=</span> <span class="bu">int</span>((df[target_column].<span class="bu">max</span>() <span class="op">-</span> df[target_column].<span class="bu">min</span>()) <span class="op">/</span> stnum)</span>
<span id="cb25-21"><a href="#cb25-21" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;space:&#39;</span>,space)</span>
<span id="cb25-22"><a href="#cb25-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-23"><a href="#cb25-23" aria-hidden="true" tabindex="-1"></a><span class="co">#階級幅の終端を指定</span></span>
<span id="cb25-24"><a href="#cb25-24" aria-hidden="true" tabindex="-1"></a>bins <span class="op">=</span> np.arange(start <span class="op">=</span> <span class="bu">int</span>(df[target_column].<span class="bu">min</span>()) <span class="op">-</span> <span class="dv">1</span> <span class="co">#最小値</span></span>
<span id="cb25-25"><a href="#cb25-25" aria-hidden="true" tabindex="-1"></a>                ,stop  <span class="op">=</span> <span class="bu">int</span>(df[target_column].<span class="bu">max</span>()) <span class="op">+</span> <span class="dv">1</span> <span class="co">#最大値</span></span>
<span id="cb25-26"><a href="#cb25-26" aria-hidden="true" tabindex="-1"></a>                ,step  <span class="op">=</span> space <span class="co">#階級幅</span></span>
<span id="cb25-27"><a href="#cb25-27" aria-hidden="true" tabindex="-1"></a>                )</span>
<span id="cb25-28"><a href="#cb25-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-29"><a href="#cb25-29" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;bins:&#39;</span>,bins)</span>
<span id="cb25-30"><a href="#cb25-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-31"><a href="#cb25-31" aria-hidden="true" tabindex="-1"></a><span class="co">#度数</span></span>
<span id="cb25-32"><a href="#cb25-32" aria-hidden="true" tabindex="-1"></a>freq <span class="op">=</span> df[target_column].value_counts(bins <span class="op">=</span>bins, sort<span class="op">=</span><span class="va">False</span>)</span>
<span id="cb25-33"><a href="#cb25-33" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;度数&#39;</span>,freq)</span>
<span id="cb25-34"><a href="#cb25-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-35"><a href="#cb25-35" aria-hidden="true" tabindex="-1"></a>rel_freq <span class="op">=</span> freq <span class="op">/</span> df[target_column].count()  <span class="co"># 相対度数</span></span>
<span id="cb25-36"><a href="#cb25-36" aria-hidden="true" tabindex="-1"></a>cum_freq <span class="op">=</span> freq.cumsum()  <span class="co"># 累積度数</span></span>
<span id="cb25-37"><a href="#cb25-37" aria-hidden="true" tabindex="-1"></a>rel_cum_freq <span class="op">=</span> rel_freq.cumsum()  <span class="co"># 相対累積度数</span></span>
<span id="cb25-38"><a href="#cb25-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-39"><a href="#cb25-39" aria-hidden="true" tabindex="-1"></a>dist <span class="op">=</span> pd.DataFrame(</span>
<span id="cb25-40"><a href="#cb25-40" aria-hidden="true" tabindex="-1"></a>    {   <span class="st">&quot;Value&quot;</span>: freq.index,        <span class="co">#階級値</span></span>
<span id="cb25-41"><a href="#cb25-41" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Freq&quot;</span>: freq,               <span class="co">#度数</span></span>
<span id="cb25-42"><a href="#cb25-42" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Rel&quot;</span>: rel_freq,            <span class="co">#相対度数</span></span>
<span id="cb25-43"><a href="#cb25-43" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Cum&quot;</span>: cum_freq,            <span class="co">#累積度数</span></span>
<span id="cb25-44"><a href="#cb25-44" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;RelCum&quot;</span>: rel_cum_freq,     <span class="co">#相対累積度数</span></span>
<span id="cb25-45"><a href="#cb25-45" aria-hidden="true" tabindex="-1"></a>    },</span>
<span id="cb25-46"><a href="#cb25-46" aria-hidden="true" tabindex="-1"></a>    index<span class="op">=</span>freq.index</span>
<span id="cb25-47"><a href="#cb25-47" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb25-48"><a href="#cb25-48" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-49"><a href="#cb25-49" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(dist)</span>
<span id="cb25-50"><a href="#cb25-50" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-51"><a href="#cb25-51" aria-hidden="true" tabindex="-1"></a>dist.to_csv(<span class="st">&#39;frequency_table_qualitative.csv&#39;</span></span>
<span id="cb25-52"><a href="#cb25-52" aria-hidden="true" tabindex="-1"></a>           ,encoding<span class="op">=</span><span class="st">&#39;utf-8-sig&#39;</span></span>
<span id="cb25-53"><a href="#cb25-53" aria-hidden="true" tabindex="-1"></a>           ,index<span class="op">=</span><span class="va">False</span>)</span></code></pre></div>
<p>結果作成された,<code>frequency_table_qualitative.csv</code>を開いてみると,以下のような度数分布表が作成されたことが確認できます.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">Value</th>
<th style="text-align: center;">Freq</th>
<th style="text-align: center;">Rel</th>
<th style="text-align: center;">Cum</th>
<th style="text-align: center;">RelCum</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">(8.999, 18.0]</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">0.01</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">0.01</td>
</tr>
<tr class="even">
<td style="text-align: center;">(18.0, 27.0]</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">0.05</td>
<td style="text-align: center;">6</td>
<td style="text-align: center;">0.06</td>
</tr>
<tr class="odd">
<td style="text-align: center;">(27.0, 36.0]</td>
<td style="text-align: center;">11</td>
<td style="text-align: center;">0.11</td>
<td style="text-align: center;">17</td>
<td style="text-align: center;">0.17</td>
</tr>
<tr class="even">
<td style="text-align: center;">(36.0, 45.0]</td>
<td style="text-align: center;">21</td>
<td style="text-align: center;">0.21</td>
<td style="text-align: center;">38</td>
<td style="text-align: center;">0.38</td>
</tr>
<tr class="odd">
<td style="text-align: center;">(45.0, 54.0]</td>
<td style="text-align: center;">27</td>
<td style="text-align: center;">0.27</td>
<td style="text-align: center;">65</td>
<td style="text-align: center;">0.65</td>
</tr>
<tr class="even">
<td style="text-align: center;">(54.0, 63.0]</td>
<td style="text-align: center;">20</td>
<td style="text-align: center;">0.2</td>
<td style="text-align: center;">85</td>
<td style="text-align: center;">0.85</td>
</tr>
<tr class="odd">
<td style="text-align: center;">(63.0, 72.0]</td>
<td style="text-align: center;">9</td>
<td style="text-align: center;">0.09</td>
<td style="text-align: center;">94</td>
<td style="text-align: center;">0.94</td>
</tr>
</tbody>
</table>
<h3 data-number="1.5.2" id="度数分布表の可視化ヒストグラム"><span class="header-section-number">1.5.2</span> 度数分布表の可視化:<strong>ヒストグラム</strong></h3>
<p>ここまでで,データの分布,偏りを把握する手段としての度数分布表を学びました. 度数分布表を眺めることである程度データの形は分かりますが,よりわかりやすく可視化する方法として<strong>ヒストグラム</strong>があります.</p>
<p><strong>ヒストグラム(Histogram)/柱状図</strong>とは,量的データの度数分布を棒グラフで表現したものです.ただし,通常の棒グラフと異なり値が連続しているので,棒と棒の間にスペースを置きません. 統計における最も基本的なグラフです.</p>
<p>ヒストグラムはいくつかの代表的なパターンがあり,それぞれ注意するべきポイントがありますので,順に見ていきましょう.</p>
<div class="note">
<ul>
<li><h2 id="単峰型unimodalで左右対称">単峰型(unimodal)で左右対称</h2></li>
</ul>
<p>ヒストグラムの盛り上がっている部分を<strong>峰</strong>といいます. 峰の数が一つのヒストグラムを<strong>単峰(unimodal)</strong>なヒストグラムといいます.</p>
<p>ヒストグラムの基本となる形は,単峰で左右対称な分布です. この分布は,<strong>データが同質な集団から発生していること</strong>を表しています.</p>
<pre><code>- 例:同じ人種の,同じ年代の,男性の集団の身長

- 例:同じ種類,同じ時期,同じ地域のうさぎの集団のサイズ</code></pre>
<p>峰からの左右のデータのばらつきは集団の個体差を表しています. 異なる,質を持つ集団が混じっている場合は峰が複数になることが多いです.</p>
<figure>
<img src="/images/histogram_unimodal.png" alt="単峰で左右対称なヒストグラム" />
<figcaption aria-hidden="true">単峰で左右対称なヒストグラム</figcaption>
</figure>
<ul>
<li><h2 id="多峰型bimodalなヒストグラム">多峰型(bimodal)なヒストグラム</h2></li>
</ul>
<p>峰が2つ以上あるヒストグラムを<strong>多峰(bimodal)</strong>なヒストグラムといいます.
異質な集団が混ざっているデータでは,ヒストグラムが多峰になることがあります.</p>
<pre><code>- 例:男女の混ざった集団の身長や体重
男性の峰と女性の峰が現れます.

- 例:小学生と中学生に同じテストを受けた点数
小学生の点数の峰と,中学生の点数の峰が現れます.</code></pre>
<p>ヒストグラムを作成し,多峰性が現れたらデータを集団別・要因別に分割して分析するのが良いとされています.データを特定の属性で分割することを<strong>層別</strong>といいます.</p>
<figure>
<img src="/images/histogram_bimodal.png" alt="多峰なヒスグラム" />
<figcaption aria-hidden="true">多峰なヒスグラム</figcaption>
</figure>
<ul>
<li><h2 id="左右非対称なヒストグラム">左右非対称なヒストグラム</h2></li>
</ul>
<p>ヒストグラムは峰を中心として左右対称な場合もありますが,どちらかの方向に歪んでいるものも良く見られます.</p>
<pre><code>- 例:社会人の年収,企業の売上など</code></pre>
<p>ヒストグラムの細くなっている部分をヒストグラムの<strong>尾</strong>といいます.</p>
<pre><code>- **尾が**左に伸びている場合に **左に歪んだ分布**

- **尾が**右に伸びている場合に **右に歪んだ分布**</code></pre>
<p>といいます.</p>
<figure>
<img src="/images/histogram_right_left.png" alt="左右に歪んだヒストグラム" />
<figcaption aria-hidden="true">左右に歪んだヒストグラム</figcaption>
</figure>
<p>左右に歪んだ分布では,後に扱う<strong>中心を表す代表値</strong>(平均値や中央値)が適切に集団を代表しない場合があるので,代表値の使い分けが必要になります.</p>
<p>また, 後に扱う<strong>検定</strong>手法のうち,<strong>正規分布</strong>を仮定する検定が利用できないなど,手法の選択において,分布の歪みは重要なポイントです.</p>
<ul>
<li><h2 id="外れ値outlierのあるヒストグラム"><strong>外れ値(Outlier)</strong>のあるヒストグラム</h2></li>
</ul>
<p>大多数のデータとは離れた位置にある少数のデータを<strong>外れ値(Outlier)</strong>といいます.</p>
<p>外れ値は,データ分析において非常に重要な意味を持ち,外れ値が現れた場合にはその原因を探ることが必要となります.
外れ値が発生する原因としては以下のようなものがあり,いずれも注目する必要があります.</p>
<pre><code>- データの取得におけるミス
    単純な入力ミスや計算ミスなど
    発見した場合は修正,除外する必要がある.

- 異質な存在の発見
    新種や新しい現象の発見などにつながる可能性があります.</code></pre>
<p>また,代表値の計算においては歪みが生じる可能性があるので,外れ値を除外する必要があります.</p>
<figure>
<img src="/images/histogram_outlier.png" alt="外れ値のあるヒストグラム" />
<figcaption aria-hidden="true">外れ値のあるヒストグラム</figcaption>
</figure>
</div>
<p>それでは,Pythonでヒストグラムを作成してみましょう. 度数分布表を作成している場合は,棒グラフを作成し,棒の幅を<code>0</code>にすることで,ヒストグラムが作成できます.</p>
<p><code>plt.bar()</code>では,引数<code>width=1</code>を与えることで,棒の太さを<code>1</code>(棒の間を0)にすることができます.</p>
<p>まずは,以前扱った<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/diff_class.csv">質的データ</a>の例におけるヒストグラムを作成してみましょう.</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="co">#データの読み込み</span></span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;Data/diff_class.csv&#39;</span>)</span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb31-4"><a href="#cb31-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-5"><a href="#cb31-5" aria-hidden="true" tabindex="-1"></a><span class="co">#ヒストグラムを作りたいデータの列名を指定</span></span>
<span id="cb31-6"><a href="#cb31-6" aria-hidden="true" tabindex="-1"></a>target_column <span class="op">=</span> <span class="st">&#39;Diff&#39;</span></span>
<span id="cb31-7"><a href="#cb31-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-8"><a href="#cb31-8" aria-hidden="true" tabindex="-1"></a><span class="co">#度数</span></span>
<span id="cb31-9"><a href="#cb31-9" aria-hidden="true" tabindex="-1"></a>freq <span class="op">=</span> df[target_column].value_counts(sort<span class="op">=</span><span class="va">False</span>)</span>
<span id="cb31-10"><a href="#cb31-10" aria-hidden="true" tabindex="-1"></a><span class="co">#順番の入れ替え</span></span>
<span id="cb31-11"><a href="#cb31-11" aria-hidden="true" tabindex="-1"></a>freq <span class="op">=</span> freq.reindex([<span class="st">&#39;難しすぎてついていけない&#39;</span></span>
<span id="cb31-12"><a href="#cb31-12" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;難しいが許容できる&#39;</span></span>
<span id="cb31-13"><a href="#cb31-13" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;ちょうどよい&#39;</span></span>
<span id="cb31-14"><a href="#cb31-14" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;簡単だが許容できる&#39;</span></span>
<span id="cb31-15"><a href="#cb31-15" aria-hidden="true" tabindex="-1"></a>                    ,<span class="st">&#39;簡単すぎて退屈&#39;</span>],axis<span class="op">=</span><span class="st">&#39;index&#39;</span>)</span>
<span id="cb31-16"><a href="#cb31-16" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;度数&#39;</span>,freq)</span>
<span id="cb31-17"><a href="#cb31-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-18"><a href="#cb31-18" aria-hidden="true" tabindex="-1"></a>rel_freq <span class="op">=</span> freq <span class="op">/</span> df[target_column].count()  <span class="co"># 相対度数</span></span>
<span id="cb31-19"><a href="#cb31-19" aria-hidden="true" tabindex="-1"></a>cum_freq <span class="op">=</span> freq.cumsum()  <span class="co"># 累積度数</span></span>
<span id="cb31-20"><a href="#cb31-20" aria-hidden="true" tabindex="-1"></a>rel_cum_freq <span class="op">=</span> rel_freq.cumsum()  <span class="co"># 相対累積度数</span></span>
<span id="cb31-21"><a href="#cb31-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-22"><a href="#cb31-22" aria-hidden="true" tabindex="-1"></a>dist <span class="op">=</span> pd.DataFrame(</span>
<span id="cb31-23"><a href="#cb31-23" aria-hidden="true" tabindex="-1"></a>    {   <span class="st">&quot;Value&quot;</span>: freq.index,        <span class="co">#階級値</span></span>
<span id="cb31-24"><a href="#cb31-24" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Freq&quot;</span>: freq,               <span class="co">#度数</span></span>
<span id="cb31-25"><a href="#cb31-25" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Rel&quot;</span>: rel_freq,            <span class="co">#相対度数</span></span>
<span id="cb31-26"><a href="#cb31-26" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Cum&quot;</span>: cum_freq,            <span class="co">#累積度数</span></span>
<span id="cb31-27"><a href="#cb31-27" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;RelCum&quot;</span>: rel_cum_freq,     <span class="co">#相対累積度数</span></span>
<span id="cb31-28"><a href="#cb31-28" aria-hidden="true" tabindex="-1"></a>    },</span>
<span id="cb31-29"><a href="#cb31-29" aria-hidden="true" tabindex="-1"></a>    index<span class="op">=</span>freq.index</span>
<span id="cb31-30"><a href="#cb31-30" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb31-31"><a href="#cb31-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-32"><a href="#cb31-32" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(dist)</span>
<span id="cb31-33"><a href="#cb31-33" aria-hidden="true" tabindex="-1"></a>dist.to_csv(<span class="st">&#39;frequency_table.csv&#39;</span>,encoding<span class="op">=</span><span class="st">&#39;utf-8-sig&#39;</span>,index<span class="op">=</span><span class="va">False</span>)</span>
<span id="cb31-34"><a href="#cb31-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-35"><a href="#cb31-35" aria-hidden="true" tabindex="-1"></a><span class="co"># ヒストグラム</span></span>
<span id="cb31-36"><a href="#cb31-36" aria-hidden="true" tabindex="-1"></a>plt.bar(x<span class="op">=</span>dist[<span class="st">&#39;Value&#39;</span>], height<span class="op">=</span>dist[<span class="st">&quot;Freq&quot;</span>],width<span class="op">=</span><span class="dv">1</span>)</span>
<span id="cb31-37"><a href="#cb31-37" aria-hidden="true" tabindex="-1"></a>plt.xticks(np.arange(<span class="bu">len</span>(dist)),<span class="bu">list</span>(dist.index),rotation<span class="op">=</span><span class="dv">15</span>)</span>
<span id="cb31-38"><a href="#cb31-38" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<p>以下のように,単峰で右に歪んだグラフが作成されるはずです.</p>
<figure>
<img src="/images/histogram_qualitative.png" alt="質的データのヒストグラム" />
<figcaption aria-hidden="true">質的データのヒストグラム</figcaption>
</figure>
<p>同様に<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/histogram_quantitative.csv">量的データ</a>についても作成してみます.</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="co">#ヒストグラムを作りたいデータの列名を指定</span></span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a>target_column <span class="op">=</span> <span class="st">&#39;Values&#39;</span></span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-4"><a href="#cb32-4" aria-hidden="true" tabindex="-1"></a><span class="co"># 関数名を sturgesNumber として引数をnとします</span></span>
<span id="cb32-5"><a href="#cb32-5" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> sturgesNumber(n):</span>
<span id="cb32-6"><a href="#cb32-6" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 公式の通り k = 1 + log2 n</span></span>
<span id="cb32-7"><a href="#cb32-7" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 階級数は整数が良いので,math.floor()で小数点以下を切り捨てます</span></span>
<span id="cb32-8"><a href="#cb32-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> (math.floor (<span class="dv">1</span> <span class="op">+</span> math.log2(n)))</span>
<span id="cb32-9"><a href="#cb32-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-10"><a href="#cb32-10" aria-hidden="true" tabindex="-1"></a><span class="co"># dataフォルダにあるhistogram_quantitative.csvというファイルを読み込みます.</span></span>
<span id="cb32-11"><a href="#cb32-11" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&quot;data/histogram_quantitative.csv&quot;</span>)</span>
<span id="cb32-12"><a href="#cb32-12" aria-hidden="true" tabindex="-1"></a><span class="co"># 読み込んだファイルの中身を見てみます.</span></span>
<span id="cb32-13"><a href="#cb32-13" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb32-14"><a href="#cb32-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-15"><a href="#cb32-15" aria-hidden="true" tabindex="-1"></a><span class="co">#階級数を決定</span></span>
<span id="cb32-16"><a href="#cb32-16" aria-hidden="true" tabindex="-1"></a>stnum <span class="op">=</span> sturgesNumber(<span class="bu">len</span>(df[target_column]))</span>
<span id="cb32-17"><a href="#cb32-17" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;sturges number:&#39;</span>,stnum)</span>
<span id="cb32-18"><a href="#cb32-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-19"><a href="#cb32-19" aria-hidden="true" tabindex="-1"></a><span class="co">#階級幅を決定</span></span>
<span id="cb32-20"><a href="#cb32-20" aria-hidden="true" tabindex="-1"></a>space <span class="op">=</span> <span class="bu">int</span>((df[target_column].<span class="bu">max</span>() <span class="op">-</span> df[target_column].<span class="bu">min</span>()) <span class="op">/</span> stnum)</span>
<span id="cb32-21"><a href="#cb32-21" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;space:&#39;</span>,space)</span>
<span id="cb32-22"><a href="#cb32-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-23"><a href="#cb32-23" aria-hidden="true" tabindex="-1"></a><span class="co">#階級幅の終端を指定</span></span>
<span id="cb32-24"><a href="#cb32-24" aria-hidden="true" tabindex="-1"></a>bins <span class="op">=</span> np.arange(start <span class="op">=</span> <span class="bu">int</span>(df[target_column].<span class="bu">min</span>()) <span class="op">-</span> <span class="dv">1</span> <span class="co">#最小値</span></span>
<span id="cb32-25"><a href="#cb32-25" aria-hidden="true" tabindex="-1"></a>                ,stop  <span class="op">=</span> <span class="bu">int</span>(df[target_column].<span class="bu">max</span>()) <span class="op">+</span> <span class="dv">1</span> <span class="co">#最大値</span></span>
<span id="cb32-26"><a href="#cb32-26" aria-hidden="true" tabindex="-1"></a>                ,step  <span class="op">=</span> space <span class="co">#階級幅</span></span>
<span id="cb32-27"><a href="#cb32-27" aria-hidden="true" tabindex="-1"></a>                )</span>
<span id="cb32-28"><a href="#cb32-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-29"><a href="#cb32-29" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;bins:&#39;</span>,bins)</span>
<span id="cb32-30"><a href="#cb32-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-31"><a href="#cb32-31" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb32-32"><a href="#cb32-32" aria-hidden="true" tabindex="-1"></a><span class="co">階級が整数では大きすぎる場合は,</span></span>
<span id="cb32-33"><a href="#cb32-33" aria-hidden="true" tabindex="-1"></a><span class="co">np.arrange()では上手く出来ません.</span></span>
<span id="cb32-34"><a href="#cb32-34" aria-hidden="true" tabindex="-1"></a><span class="co">while文などで,以下のように自作しましょう.</span></span>
<span id="cb32-35"><a href="#cb32-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-36"><a href="#cb32-36" aria-hidden="true" tabindex="-1"></a><span class="co">space = (data.max() - data.min()) / step</span></span>
<span id="cb32-37"><a href="#cb32-37" aria-hidden="true" tabindex="-1"></a><span class="co">current = data.min() -1</span></span>
<span id="cb32-38"><a href="#cb32-38" aria-hidden="true" tabindex="-1"></a><span class="co">bins = [current]</span></span>
<span id="cb32-39"><a href="#cb32-39" aria-hidden="true" tabindex="-1"></a><span class="co">while current &lt;= data.max() +1:</span></span>
<span id="cb32-40"><a href="#cb32-40" aria-hidden="true" tabindex="-1"></a><span class="co">    current += space</span></span>
<span id="cb32-41"><a href="#cb32-41" aria-hidden="true" tabindex="-1"></a><span class="co">    bins.append(current)</span></span>
<span id="cb32-42"><a href="#cb32-42" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb32-43"><a href="#cb32-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-44"><a href="#cb32-44" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-45"><a href="#cb32-45" aria-hidden="true" tabindex="-1"></a><span class="co">#度数</span></span>
<span id="cb32-46"><a href="#cb32-46" aria-hidden="true" tabindex="-1"></a>freq <span class="op">=</span> df[target_column].value_counts(bins <span class="op">=</span>bins, sort<span class="op">=</span><span class="va">False</span>)</span>
<span id="cb32-47"><a href="#cb32-47" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;度数&#39;</span>,freq)</span>
<span id="cb32-48"><a href="#cb32-48" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-49"><a href="#cb32-49" aria-hidden="true" tabindex="-1"></a>rel_freq <span class="op">=</span> freq <span class="op">/</span> df[target_column].count()  <span class="co"># 相対度数</span></span>
<span id="cb32-50"><a href="#cb32-50" aria-hidden="true" tabindex="-1"></a>cum_freq <span class="op">=</span> freq.cumsum()  <span class="co"># 累積度数</span></span>
<span id="cb32-51"><a href="#cb32-51" aria-hidden="true" tabindex="-1"></a>rel_cum_freq <span class="op">=</span> rel_freq.cumsum()  <span class="co"># 相対累積度数</span></span>
<span id="cb32-52"><a href="#cb32-52" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-53"><a href="#cb32-53" aria-hidden="true" tabindex="-1"></a>dist <span class="op">=</span> pd.DataFrame(</span>
<span id="cb32-54"><a href="#cb32-54" aria-hidden="true" tabindex="-1"></a>    {   <span class="st">&quot;Value&quot;</span>: freq.index,        <span class="co">#階級値</span></span>
<span id="cb32-55"><a href="#cb32-55" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Freq&quot;</span>: freq,               <span class="co">#度数</span></span>
<span id="cb32-56"><a href="#cb32-56" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Rel&quot;</span>: rel_freq,            <span class="co">#相対度数</span></span>
<span id="cb32-57"><a href="#cb32-57" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Cum&quot;</span>: cum_freq,            <span class="co">#累積度数</span></span>
<span id="cb32-58"><a href="#cb32-58" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;RelCum&quot;</span>: rel_cum_freq,     <span class="co">#相対累積度数</span></span>
<span id="cb32-59"><a href="#cb32-59" aria-hidden="true" tabindex="-1"></a>    },</span>
<span id="cb32-60"><a href="#cb32-60" aria-hidden="true" tabindex="-1"></a>    index<span class="op">=</span>freq.index</span>
<span id="cb32-61"><a href="#cb32-61" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb32-62"><a href="#cb32-62" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-63"><a href="#cb32-63" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(dist)</span>
<span id="cb32-64"><a href="#cb32-64" aria-hidden="true" tabindex="-1"></a>dist.to_csv(<span class="st">&#39;frequency_table_qualitative.csv&#39;</span></span>
<span id="cb32-65"><a href="#cb32-65" aria-hidden="true" tabindex="-1"></a>           ,encoding<span class="op">=</span><span class="st">&#39;utf-8-sig&#39;</span>,index<span class="op">=</span><span class="va">False</span>)</span>
<span id="cb32-66"><a href="#cb32-66" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-67"><a href="#cb32-67" aria-hidden="true" tabindex="-1"></a><span class="co"># ヒストグラム</span></span>
<span id="cb32-68"><a href="#cb32-68" aria-hidden="true" tabindex="-1"></a><span class="co">## dist[&#39;Value&#39;]は文字列でないので,</span></span>
<span id="cb32-69"><a href="#cb32-69" aria-hidden="true" tabindex="-1"></a><span class="co">## .astype(str) で文字列に変換しています.</span></span>
<span id="cb32-70"><a href="#cb32-70" aria-hidden="true" tabindex="-1"></a>plt.bar(x<span class="op">=</span>dist[<span class="st">&#39;Value&#39;</span>].astype(<span class="bu">str</span>)</span>
<span id="cb32-71"><a href="#cb32-71" aria-hidden="true" tabindex="-1"></a>       ,height<span class="op">=</span>dist[<span class="st">&quot;Freq&quot;</span>],width<span class="op">=</span><span class="dv">1</span>)</span>
<span id="cb32-72"><a href="#cb32-72" aria-hidden="true" tabindex="-1"></a>plt.xticks(np.arange(<span class="bu">len</span>(dist)),<span class="bu">list</span>(dist.index),rotation<span class="op">=</span><span class="dv">15</span>)</span>
<span id="cb32-73"><a href="#cb32-73" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<p>以下のように単峰で左に歪んだヒストグラムが作成されます.</p>
<figure>
<img src="/images/histogram_quantitative.png" alt="量的データのヒストグラム" />
<figcaption aria-hidden="true">量的データのヒストグラム</figcaption>
</figure>
<p>一方で,量的データに関しては,度数分布表を作成せずとも<code>matplotlib</code>の<code>plt.hist()</code>を利用して直接作成することも可能です.</p>
<p><code>plt.hist()</code>では<code>bins=</code>に階級数を指定することで,その階級数で自然に分割したヒストグラムを作成してくれます.</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="co"># ヒストグラムの作成</span></span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a>label  <span class="op">=</span> df.columns[<span class="dv">0</span>]</span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true" tabindex="-1"></a>values <span class="op">=</span> df[label]</span>
<span id="cb33-4"><a href="#cb33-4" aria-hidden="true" tabindex="-1"></a>plt.hist(values, bins<span class="op">=</span>stnum)</span>
<span id="cb33-5"><a href="#cb33-5" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/histogram_quantitative2.png" alt="量的データのヒストグラム" />
<figcaption aria-hidden="true">量的データのヒストグラム</figcaption>
</figure>
<p>階級幅の設定によって,見た目が変わることが分かります. 作成手法や階級の設定は目的に応じて,使い分けるようにしましょう.</p>
<div class="note">
<ul>
<li>演習</li>
</ul>
<p><a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/qualitative_histogram_practice.csv">データ1</a>,<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/quantitative_histogram_practice.csv">データ2</a>の度数分布表とヒストグラムを作成し,pptなどでグラフとその解釈をまとめてください.</p>
</div>
<h2 data-number="1.6" id="箱ひげ図"><span class="header-section-number">1.6</span> 箱ひげ図</h2>
<p>データの観測対象が複数のグループに層別可能な場合には, それぞれのヒストグラムを作成して比較することなどが必要です. グループの数が多い場合には, 何個もヒストグラムを作成することになりますし,比較には剥いていない場合があります.
そのような複数のグループの分布を比較する際に良く用いられるグラフが,箱ひげ図です.</p>
<p><a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/boxplot_data_300.csv">こちら</a>のデータは, 複数の種類の馬鈴薯のサイズがまとまっています.</p>
<p>試しに,ヒストグラム馬鈴薯の種類毎のヒストグラムを作成してみます.</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/boxplot_data_300.csv&#39;</span>)</span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-3"><a href="#cb34-3" aria-hidden="true" tabindex="-1"></a><span class="co">#馬鈴薯の種類を抜き出す</span></span>
<span id="cb34-4"><a href="#cb34-4" aria-hidden="true" tabindex="-1"></a>types <span class="op">=</span> <span class="bu">list</span>(<span class="bu">set</span>(df[<span class="st">&#39;Type&#39;</span>]))</span>
<span id="cb34-5"><a href="#cb34-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(types)</span>
<span id="cb34-6"><a href="#cb34-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-7"><a href="#cb34-7" aria-hidden="true" tabindex="-1"></a><span class="co">#馬鈴薯の種類別にヒストグラムを作成してみる</span></span>
<span id="cb34-8"><a href="#cb34-8" aria-hidden="true" tabindex="-1"></a>fig, ax <span class="op">=</span> plt.subplots(ncols<span class="op">=</span><span class="dv">2</span></span>
<span id="cb34-9"><a href="#cb34-9" aria-hidden="true" tabindex="-1"></a>                      ,nrows<span class="op">=</span><span class="bu">int</span>(<span class="bu">len</span>(types) <span class="op">/</span> <span class="dv">2</span>) <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb34-10"><a href="#cb34-10" aria-hidden="true" tabindex="-1"></a>                      ,sharex <span class="op">=</span> <span class="va">True</span>)</span>
<span id="cb34-11"><a href="#cb34-11" aria-hidden="true" tabindex="-1"></a>axes <span class="op">=</span> ax.flatten()</span>
<span id="cb34-12"><a href="#cb34-12" aria-hidden="true" tabindex="-1"></a>fig.suptitle(<span class="st">&#39;Potato Weight&#39;</span>)</span>
<span id="cb34-13"><a href="#cb34-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-14"><a href="#cb34-14" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="bu">len</span>(types)):</span>
<span id="cb34-15"><a href="#cb34-15" aria-hidden="true" tabindex="-1"></a>    t <span class="op">=</span> types[i]</span>
<span id="cb34-16"><a href="#cb34-16" aria-hidden="true" tabindex="-1"></a>    df_temp <span class="op">=</span> df[df[<span class="st">&#39;Type&#39;</span>] <span class="op">==</span> t]</span>
<span id="cb34-17"><a href="#cb34-17" aria-hidden="true" tabindex="-1"></a>    axes[i].hist(df_temp[<span class="st">&#39;Weight&#39;</span>])</span>
<span id="cb34-18"><a href="#cb34-18" aria-hidden="true" tabindex="-1"></a>    axes[i].set_title(t)</span>
<span id="cb34-19"><a href="#cb34-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-20"><a href="#cb34-20" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/box_plot1.png" alt="馬鈴薯の重さのヒストグラム" />
<figcaption aria-hidden="true">馬鈴薯の重さのヒストグラム</figcaption>
</figure>
<p>これでも比較はできますが1枚の画像にまとめる手段として,箱ひげ図が利用できます.
箱ひげ図は<code>plt.boxplot(データのリスト,labels=ラベルのリスト)</code>で生成できます.</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true" tabindex="-1"></a>data <span class="op">=</span> [df[df[<span class="st">&#39;Type&#39;</span>]<span class="op">==</span>x][<span class="st">&#39;Weight&#39;</span>] <span class="cf">for</span> x <span class="kw">in</span> types]</span>
<span id="cb35-2"><a href="#cb35-2" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb35-3"><a href="#cb35-3" aria-hidden="true" tabindex="-1"></a><span class="co">#内包表記を利用しない場合は</span></span>
<span id="cb35-4"><a href="#cb35-4" aria-hidden="true" tabindex="-1"></a><span class="co">data = []</span></span>
<span id="cb35-5"><a href="#cb35-5" aria-hidden="true" tabindex="-1"></a><span class="co">for x in types:</span></span>
<span id="cb35-6"><a href="#cb35-6" aria-hidden="true" tabindex="-1"></a><span class="co">    data.append(df[df[&#39;Type&#39;]==x][&#39;Weight&#39;])</span></span>
<span id="cb35-7"><a href="#cb35-7" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb35-8"><a href="#cb35-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(data)</span>
<span id="cb35-9"><a href="#cb35-9" aria-hidden="true" tabindex="-1"></a>plt.boxplot(data,labels<span class="op">=</span>types)</span>
<span id="cb35-10"><a href="#cb35-10" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/box_plot2.png" alt="馬鈴薯の重さの箱ひげ図" />
<figcaption aria-hidden="true">馬鈴薯の重さの箱ひげ図</figcaption>
</figure>
<p>箱ひげ図は,線がそれぞれ四分位数を表しており,それぞれ上から<strong>最大値</strong>,<strong>75%点</strong>,<strong>中央値</strong>,<strong>25%点</strong>,<strong>最小値</strong>となります.また,外れ値は丸で表されます.</p>
<p>ヒストグラムと比較して情報量は減りますが, 一覧性と比較においては優れています.それぞれ一長一短なので,用途に応じて使い分けるようにしましょう.</p>
<h2 data-number="1.7" id="発展密度プロット"><span class="header-section-number">1.7</span> 発展:密度プロット</h2>
<p>データの分布を表現する手法としてヒストグラムは非常に便利ですが,階級数や階級幅を自分で定める必要があり,その設定によって見た目が変わってしまいます. また, データ数が少ないときには正確なデータの分布をつかめないという問題点もあります.</p>
<p>そこで, データを階級で区分せずに,度数ではなく確率分布を直接推定する手法に<strong>カーネル密度推定(Karnel Density Estimation)</strong>があります.</p>
<h2 data-number="1.8" id="発展sinaplot"><span class="header-section-number">1.8</span> 発展:sinaplot</h2>
<h2 data-number="1.9" id="発展バイオリンプロット"><span class="header-section-number">1.9</span> 発展:バイオリンプロット</h2>
<h2 data-number="1.10" id="散布図"><span class="header-section-number">1.10</span> 散布図</h2>
<p>これまではデータの各観測項目を独立に可視化してきました. 複数の観測項目の関係性を可視化する代表的な手法に散布図があります.</p>
<p><a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/scatter.csv">こちら</a>のデータはGoogle Trendにおける同時期の<code>AI</code>というワードのの検索量と,<code>Python</code>というワードの検索量を表しています.</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a>     <span class="ex">AI</span>  Python</span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>    34      27</span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>    40      26</span>
<span id="cb36-4"><a href="#cb36-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>    59      28</span>
<span id="cb36-5"><a href="#cb36-5" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>    46      29</span>
<span id="cb36-6"><a href="#cb36-6" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>    36      29</span>
<span id="cb36-7"><a href="#cb36-7" aria-hidden="true" tabindex="-1"></a><span class="ex">..</span>   ..     ...</span>
<span id="cb36-8"><a href="#cb36-8" aria-hidden="true" tabindex="-1"></a><span class="ex">255</span>  58      83</span>
<span id="cb36-9"><a href="#cb36-9" aria-hidden="true" tabindex="-1"></a><span class="ex">256</span>  69      87</span>
<span id="cb36-10"><a href="#cb36-10" aria-hidden="true" tabindex="-1"></a><span class="ex">257</span>  59      82</span>
<span id="cb36-11"><a href="#cb36-11" aria-hidden="true" tabindex="-1"></a><span class="ex">258</span>  62      84</span>
<span id="cb36-12"><a href="#cb36-12" aria-hidden="true" tabindex="-1"></a><span class="ex">259</span>  59      87</span></code></pre></div>
<p>この2つの検索量がどのような関係にあるのかを散布図を用いて確認してみましょう.
散布図は<code>plt.scatter(x軸の値のリスト,y軸の値のリスト)</code>の形で作成できます.</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/scatter.csv&#39;</span>)</span>
<span id="cb37-2"><a href="#cb37-2" aria-hidden="true" tabindex="-1"></a><span class="co">#散布図のx軸を指定</span></span>
<span id="cb37-3"><a href="#cb37-3" aria-hidden="true" tabindex="-1"></a>x_column <span class="op">=</span> <span class="st">&#39;AI&#39;</span></span>
<span id="cb37-4"><a href="#cb37-4" aria-hidden="true" tabindex="-1"></a><span class="co">#散布図のy軸を指定</span></span>
<span id="cb37-5"><a href="#cb37-5" aria-hidden="true" tabindex="-1"></a>y_column <span class="op">=</span> <span class="st">&#39;Python&#39;</span></span>
<span id="cb37-6"><a href="#cb37-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb37-7"><a href="#cb37-7" aria-hidden="true" tabindex="-1"></a>x_value <span class="op">=</span> df[x_column]</span>
<span id="cb37-8"><a href="#cb37-8" aria-hidden="true" tabindex="-1"></a>y_value <span class="op">=</span> df[y_column]</span>
<span id="cb37-9"><a href="#cb37-9" aria-hidden="true" tabindex="-1"></a>plt.scatter(x_value, y_value)</span>
<span id="cb37-10"><a href="#cb37-10" aria-hidden="true" tabindex="-1"></a>plt.ylabel(y_column)</span>
<span id="cb37-11"><a href="#cb37-11" aria-hidden="true" tabindex="-1"></a>plt.xlabel(x_column)</span>
<span id="cb37-12"><a href="#cb37-12" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/scatter.png" alt="散布図" />
<figcaption aria-hidden="true">散布図</figcaption>
</figure>
<p>散布図を見ると,<code>AI</code>に関する検索量が増えるにつれて,<code>Python</code>の検索量が増えるという関係が見えてきます.</p>
<p>この関係の度合いを数値化する<strong>相関係数</strong>や,関係の仕方を説明する<strong>回帰分析</strong>に関しては後ほど扱います.</p>
<h3 data-number="1.10.1" id="観測項目が複数ある場合の散布図"><span class="header-section-number">1.10.1</span> 観測項目が複数ある場合の散布図</h3>
<p>データが3つある場合には,以下のように3Dで表現することも可能ですがこの講義では,3次元のグラフに関しては深く扱いません.興味のある方は調べてみましょう.</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb38-1"><a href="#cb38-1" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> np.random.rand(<span class="dv">100</span>)</span>
<span id="cb38-2"><a href="#cb38-2" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> np.random.rand(<span class="dv">100</span>)</span>
<span id="cb38-3"><a href="#cb38-3" aria-hidden="true" tabindex="-1"></a>z <span class="op">=</span> np.random.rand(<span class="dv">100</span>)</span>
<span id="cb38-4"><a href="#cb38-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-5"><a href="#cb38-5" aria-hidden="true" tabindex="-1"></a>fig <span class="op">=</span> plt.figure()</span>
<span id="cb38-6"><a href="#cb38-6" aria-hidden="true" tabindex="-1"></a>ax <span class="op">=</span> fig.add_subplot(projection<span class="op">=</span><span class="st">&#39;3d&#39;</span>)</span>
<span id="cb38-7"><a href="#cb38-7" aria-hidden="true" tabindex="-1"></a>ax.scatter(x, y, z, color<span class="op">=</span><span class="st">&#39;blue&#39;</span>)</span>
<span id="cb38-8"><a href="#cb38-8" aria-hidden="true" tabindex="-1"></a>plt.show()</span>
<span id="cb38-9"><a href="#cb38-9" aria-hidden="true" tabindex="-1"></a>plt.close()</span></code></pre></div>
<figure>
<img src="/images/3dscatter.png" alt="3次元の散布図" />
<figcaption aria-hidden="true">3次元の散布図</figcaption>
</figure>
<p>観測項目が4つ以上ある場合に散布図のように関係を表す手法としては,複数の観測項目の値を合成して3次元以下にする<strong>次元削減</strong>が良く利用されます. <strong>次元削減</strong>に関しては後ほど扱うとして,ここではいくつかの観測項目を<strong>色</strong>や<strong>大きさ</strong>などの要素の変換して関係を見る方法を紹介します.</p>
<p><code>plt.scatter()</code>では<code>s=</code>に数値を与えることでサイズ,<code>c=</code>に数値を与えることで色を指定できます.
また,色と数値の関係は<code>plt.colorbar()</code>で表示可能です.</p>
<p>複数の点が重なると見にくくなるために <code>alpha=</code>に<code>0-1</code>の間の数値を指定して透明度を指定することができます.</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb39-1"><a href="#cb39-1" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> np.random.rand(<span class="dv">100</span>)</span>
<span id="cb39-2"><a href="#cb39-2" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> np.random.rand(<span class="dv">100</span>)</span>
<span id="cb39-3"><a href="#cb39-3" aria-hidden="true" tabindex="-1"></a>z <span class="op">=</span> np.random.rand(<span class="dv">100</span>)</span>
<span id="cb39-4"><a href="#cb39-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-5"><a href="#cb39-5" aria-hidden="true" tabindex="-1"></a><span class="co">#色とサイズをzで指定する</span></span>
<span id="cb39-6"><a href="#cb39-6" aria-hidden="true" tabindex="-1"></a><span class="co">#そのままだとサイズが小さすぎるので,100倍している</span></span>
<span id="cb39-7"><a href="#cb39-7" aria-hidden="true" tabindex="-1"></a>plt.scatter(x,y,alpha<span class="op">=</span><span class="fl">0.5</span>,s<span class="op">=</span>z<span class="op">*</span><span class="dv">100</span>,c<span class="op">=</span>z)</span>
<span id="cb39-8"><a href="#cb39-8" aria-hidden="true" tabindex="-1"></a>plt.colorbar() <span class="co">#カラーバーの表示</span></span>
<span id="cb39-9"><a href="#cb39-9" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/scatter_color_size.png" alt="色とサイズによる表現" />
<figcaption aria-hidden="true">色とサイズによる表現</figcaption>
</figure>
<h3 data-number="1.10.2" id="クラスタリングにおける散布図"><span class="header-section-number">1.10.2</span> クラスタリングにおける散布図</h3>
<p>散布図は複数の観測項目間の関係性を可視化するための手法ですが,データから特定の観測対象の集まり(<strong>クラスター</strong>)を発見する<strong>クラスタリング</strong>とも深い関わりがあります.
クラスタリングの手法は後ほど扱いますが,ここでは可視化手法としての散布図とクラスタ表現の関係に関して確認してみましょう.</p>
<p><a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/scatter_class.csv">こちら</a>のデータはクラスタリングによって得られたクラスタ毎のラベルがなされています.</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb40-1"><a href="#cb40-1" aria-hidden="true" tabindex="-1"></a>           <span class="ex">x</span>          y  Cluster</span>
<span id="cb40-2"><a href="#cb40-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>  <span class="at">-8.149818</span>  <span class="at">-9.152380</span>        2</span>
<span id="cb40-3"><a href="#cb40-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>   5.860155   0.126873        1</span>
<span id="cb40-4"><a href="#cb40-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>  <span class="at">-3.213409</span>   9.828126        0</span>
<span id="cb40-5"><a href="#cb40-5" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>   6.744070  <span class="at">-0.129607</span>        1</span>
<span id="cb40-6"><a href="#cb40-6" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>  <span class="at">-6.342946</span>  <span class="at">-6.038933</span>        2</span>
<span id="cb40-7"><a href="#cb40-7" aria-hidden="true" tabindex="-1"></a><span class="ex">..</span>       ...        ...      ...</span>
<span id="cb40-8"><a href="#cb40-8" aria-hidden="true" tabindex="-1"></a><span class="ex">95</span> <span class="at">-3.524581</span>   9.931801        0</span>
<span id="cb40-9"><a href="#cb40-9" aria-hidden="true" tabindex="-1"></a><span class="ex">96</span> <span class="at">-0.962698</span>  10.411206        0</span>
<span id="cb40-10"><a href="#cb40-10" aria-hidden="true" tabindex="-1"></a><span class="ex">97</span>  4.397950   2.579246        1</span>
<span id="cb40-11"><a href="#cb40-11" aria-hidden="true" tabindex="-1"></a><span class="ex">98</span> <span class="at">-5.255050</span>  <span class="at">-5.299407</span>        2</span>
<span id="cb40-12"><a href="#cb40-12" aria-hidden="true" tabindex="-1"></a><span class="ex">99</span> <span class="at">-3.768024</span>   8.550468        0</span></code></pre></div>
<p>クラスタを表現は<code>.scatter(color=)</code>で色を指定することが一般的です.</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb41-1"><a href="#cb41-1" aria-hidden="true" tabindex="-1"></a><span class="co">#散布図をクラスタごとに色を変えて表示</span></span>
<span id="cb41-2"><a href="#cb41-2" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">3</span>):</span>
<span id="cb41-3"><a href="#cb41-3" aria-hidden="true" tabindex="-1"></a>    df_temp<span class="op">=</span> df[df[<span class="st">&#39;Cluster&#39;</span>] <span class="op">==</span> i]</span>
<span id="cb41-4"><a href="#cb41-4" aria-hidden="true" tabindex="-1"></a>    plt.scatter(df_temp[<span class="st">&#39;x&#39;</span>]</span>
<span id="cb41-5"><a href="#cb41-5" aria-hidden="true" tabindex="-1"></a>               ,df_temp[<span class="st">&#39;y&#39;</span>]</span>
<span id="cb41-6"><a href="#cb41-6" aria-hidden="true" tabindex="-1"></a>               ,c<span class="op">=</span>color_list[i]</span>
<span id="cb41-7"><a href="#cb41-7" aria-hidden="true" tabindex="-1"></a>               ,label<span class="op">=</span><span class="st">&#39;Cluster:&#39;</span> <span class="op">+</span> <span class="bu">str</span>(i))</span>
<span id="cb41-8"><a href="#cb41-8" aria-hidden="true" tabindex="-1"></a>plt.legend()</span>
<span id="cb41-9"><a href="#cb41-9" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/scatter_class.png" alt="クラスタリング" />
<figcaption aria-hidden="true">クラスタリング</figcaption>
</figure>
<h2 data-number="1.11" id="同時度数分布表"><span class="header-section-number">1.11</span> 同時度数分布表</h2>
<p>2つの観測項目の関係を調べる手法として散布図を学びましたが,散布図は量的データにしか使えません. 質的変数同士の関係性を調べるにはどのようにしたらいいのでしょうか.</p>
<p>質的変数同士の関係性を調べる手法として代表的なものに<strong>同時度数分布表(クロス表)</strong>があります.
例えば<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/cross_table_data.csv">こちら</a>のデータはある講義の成績情報ですが,観測項目として成績以外に1時限から5時限までの時限が記録されています. 時限が早い講義と遅い講義で成績が変わるのかという関係性を調べてみます.</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb42-1"><a href="#cb42-1" aria-hidden="true" tabindex="-1"></a>     <span class="ex">Period</span> Grade</span>
<span id="cb42-2"><a href="#cb42-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>         2     B</span>
<span id="cb42-3"><a href="#cb42-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>         5     A</span>
<span id="cb42-4"><a href="#cb42-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>         4     A</span>
<span id="cb42-5"><a href="#cb42-5" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>         3     C</span>
<span id="cb42-6"><a href="#cb42-6" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>         1     C</span>
<span id="cb42-7"><a href="#cb42-7" aria-hidden="true" tabindex="-1"></a><span class="ex">..</span>      ...   ...</span>
<span id="cb42-8"><a href="#cb42-8" aria-hidden="true" tabindex="-1"></a><span class="ex">195</span>       2     C</span>
<span id="cb42-9"><a href="#cb42-9" aria-hidden="true" tabindex="-1"></a><span class="ex">196</span>       4     C</span>
<span id="cb42-10"><a href="#cb42-10" aria-hidden="true" tabindex="-1"></a><span class="ex">197</span>       5     C</span>
<span id="cb42-11"><a href="#cb42-11" aria-hidden="true" tabindex="-1"></a><span class="ex">198</span>       5     F</span>
<span id="cb42-12"><a href="#cb42-12" aria-hidden="true" tabindex="-1"></a><span class="ex">199</span>       4     C</span></code></pre></div>
<p>試しに,散布図で<code>Period</code>と<code>Grade</code>の関係を表してみましょう.
成績をそのままでは,散布図の軸上に配置できないので数値に変換します.</p>
<div class="sourceCode" id="cb43"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb43-1"><a href="#cb43-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/cross_table_data.csv&#39;</span>)</span>
<span id="cb43-2"><a href="#cb43-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb43-3"><a href="#cb43-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-4"><a href="#cb43-4" aria-hidden="true" tabindex="-1"></a><span class="co">#あえて散布図を作ってみる</span></span>
<span id="cb43-5"><a href="#cb43-5" aria-hidden="true" tabindex="-1"></a>grade_num_map <span class="op">=</span> {<span class="st">&#39;S&#39;</span>:<span class="dv">1</span></span>
<span id="cb43-6"><a href="#cb43-6" aria-hidden="true" tabindex="-1"></a>                ,<span class="st">&#39;A&#39;</span>:<span class="dv">2</span></span>
<span id="cb43-7"><a href="#cb43-7" aria-hidden="true" tabindex="-1"></a>                ,<span class="st">&#39;B&#39;</span>:<span class="dv">3</span></span>
<span id="cb43-8"><a href="#cb43-8" aria-hidden="true" tabindex="-1"></a>                ,<span class="st">&#39;C&#39;</span>:<span class="dv">4</span></span>
<span id="cb43-9"><a href="#cb43-9" aria-hidden="true" tabindex="-1"></a>                ,<span class="st">&#39;F&#39;</span>:<span class="dv">5</span>}</span>
<span id="cb43-10"><a href="#cb43-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-11"><a href="#cb43-11" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;Grade_num&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;Grade&#39;</span>].<span class="bu">map</span>(<span class="kw">lambda</span> x: grade_num_map[x])</span>
<span id="cb43-12"><a href="#cb43-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-13"><a href="#cb43-13" aria-hidden="true" tabindex="-1"></a>plt.scatter(df[<span class="st">&#39;Period&#39;</span>],df[<span class="st">&#39;Grade&#39;</span>])</span>
<span id="cb43-14"><a href="#cb43-14" aria-hidden="true" tabindex="-1"></a>plt.xlabel(<span class="st">&#39;Period&#39;</span>)</span>
<span id="cb43-15"><a href="#cb43-15" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&#39;Grade&#39;</span>)</span>
<span id="cb43-16"><a href="#cb43-16" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/cross_table1.png" alt="質的データの散布図" />
<figcaption aria-hidden="true">質的データの散布図</figcaption>
</figure>
<p>質的データを数値に変換したとしても,離散値となるため,散布図はこのように基本的にはすべての交点に点があるだけのなんの情報も得られないグラフとなります.</p>
<p>散布図としてプロットすると, 点がありうる場所が少なすぎるため情報がとれません. 元々知りたいことは,講義の時限と成績にどのような関係があるのかということでした.
そこで, 講義の時間ごとの成績の偏りが分かるように可視化することを考えてみます.</p>
<p>講義の時限ごとの成績の分布がわかり,それぞれに違いがあれば時限によって成績に偏りが出ていると言えそうです.
そこで,以下のように講義の時限毎の成績の度数分布表を作ってみましょう.</p>
<figure>
<img src="/images/cross_table2.png" alt="同時度数分布表" />
<figcaption aria-hidden="true">同時度数分布表</figcaption>
</figure>
<p>この度数分布表では,時限毎にその成績を取った学生の度数が数えられています(<span class="math inline">n_{11}</span>は1時限にSを取った学生の度数,<span class="math inline">n_{ij}</span>は<code>j時限</code>に上から<code>i番目</code>の成績をとった学生の度数.)</p>
<p>このような2観測項目の度数分布表を<strong>同時度数分布表</strong>あるいは,<strong>クロス表(cross table)</strong>といいます.</p>
<p>それでは,Pythonで同時度数分布表を作成してみましょう.
<code>pandas</code> では,<code>.crosstab(行,列)</code>メソッドを利用することで,クロス表が作成できます.</p>
<div class="sourceCode" id="cb44"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb44-1"><a href="#cb44-1" aria-hidden="true" tabindex="-1"></a><span class="co">#クロス表の作成</span></span>
<span id="cb44-2"><a href="#cb44-2" aria-hidden="true" tabindex="-1"></a>cross <span class="op">=</span> pd.crosstab(df[<span class="st">&#39;Grade&#39;</span>],df[<span class="st">&#39;Period&#39;</span>])</span>
<span id="cb44-3"><a href="#cb44-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb44-4"><a href="#cb44-4" aria-hidden="true" tabindex="-1"></a><span class="co">#表示順の設定</span></span>
<span id="cb44-5"><a href="#cb44-5" aria-hidden="true" tabindex="-1"></a>cross <span class="op">=</span> cross.reindex([<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>],axis<span class="op">=</span><span class="st">&#39;columns&#39;</span>)</span>
<span id="cb44-6"><a href="#cb44-6" aria-hidden="true" tabindex="-1"></a>cross <span class="op">=</span> cross.reindex([<span class="st">&#39;S&#39;</span>,<span class="st">&#39;A&#39;</span>,<span class="st">&#39;B&#39;</span>,<span class="st">&#39;C&#39;</span>,<span class="st">&#39;F&#39;</span>],axis<span class="op">=</span><span class="st">&#39;index&#39;</span>)</span>
<span id="cb44-7"><a href="#cb44-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(cross)</span></code></pre></div>
<div class="sourceCode" id="cb45"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb45-1"><a href="#cb45-1" aria-hidden="true" tabindex="-1"></a><span class="ex">Period</span>   1   2   3   4   5</span>
<span id="cb45-2"><a href="#cb45-2" aria-hidden="true" tabindex="-1"></a><span class="ex">Grade</span></span>
<span id="cb45-3"><a href="#cb45-3" aria-hidden="true" tabindex="-1"></a><span class="ex">S</span>        9  10  12   4   2</span>
<span id="cb45-4"><a href="#cb45-4" aria-hidden="true" tabindex="-1"></a><span class="ex">A</span>        7  14   7   5   4</span>
<span id="cb45-5"><a href="#cb45-5" aria-hidden="true" tabindex="-1"></a><span class="ex">B</span>        9  10   7  11   7</span>
<span id="cb45-6"><a href="#cb45-6" aria-hidden="true" tabindex="-1"></a><span class="ex">C</span>       14   6   3  15  18</span>
<span id="cb45-7"><a href="#cb45-7" aria-hidden="true" tabindex="-1"></a><span class="ex">F</span>        7   4   3   1  11</span></code></pre></div>
<p>このようにしてみることで,それぞれの時限毎にそれぞれの成績がどのような分布なのかが分かります.
しかし,各時限の人数が同じとは限らないため,各列の値をその列の和で割って,列相対度数に変更してみましょう.</p>
<div class="sourceCode" id="cb46"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb46-1"><a href="#cb46-1" aria-hidden="true" tabindex="-1"></a><span class="co">#列相対度数に変更する</span></span>
<span id="cb46-2"><a href="#cb46-2" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> c <span class="kw">in</span> cross.columns:</span>
<span id="cb46-3"><a href="#cb46-3" aria-hidden="true" tabindex="-1"></a>    cross[c] <span class="op">=</span> cross[c] <span class="op">/</span> cross[c].<span class="bu">sum</span>()</span>
<span id="cb46-4"><a href="#cb46-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb46-5"><a href="#cb46-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(cross)</span></code></pre></div>
<div class="sourceCode" id="cb47"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb47-1"><a href="#cb47-1" aria-hidden="true" tabindex="-1"></a><span class="ex">Period</span>         1         2        3         4         5</span>
<span id="cb47-2"><a href="#cb47-2" aria-hidden="true" tabindex="-1"></a><span class="ex">Grade</span></span>
<span id="cb47-3"><a href="#cb47-3" aria-hidden="true" tabindex="-1"></a><span class="ex">S</span>       0.195652  0.227273  0.37500  0.111111  0.047619</span>
<span id="cb47-4"><a href="#cb47-4" aria-hidden="true" tabindex="-1"></a><span class="ex">A</span>       0.152174  0.318182  0.21875  0.138889  0.095238</span>
<span id="cb47-5"><a href="#cb47-5" aria-hidden="true" tabindex="-1"></a><span class="ex">B</span>       0.195652  0.227273  0.21875  0.305556  0.166667</span>
<span id="cb47-6"><a href="#cb47-6" aria-hidden="true" tabindex="-1"></a><span class="ex">C</span>       0.304348  0.136364  0.09375  0.416667  0.428571</span>
<span id="cb47-7"><a href="#cb47-7" aria-hidden="true" tabindex="-1"></a><span class="ex">F</span>       0.152174  0.090909  0.09375  0.027778  0.261905</span></code></pre></div>
<p>このようにすると,時限毎にどの程度の割合がSやAなどの良い成績をとっているのかが分かります.
通常度数分布表を作成したあとには,<strong>χ二乗検定</strong>や,<strong>標準化残渣</strong>を利用した<strong>残渣分析</strong>によって,<strong>偏り</strong>が統計的に存在するかを判定します. しかし,それらは後の検定の章に譲るとして,次の節では更に,これを一目で判断しやすいように可視化することを考えてみます.</p>
<h2 data-number="1.12" id="ヒートマップ"><span class="header-section-number">1.12</span> ヒートマップ</h2>
<p>一つ前の節では,同時度数分布表を利用して2つの質的変数からなる観測項目の関係性を見てみました. しかし, 同時度数分布表のままでは,可視化とは言えません. 同時度数分布表のような表形式の数値を可視化する方法として,ヒートマップがあります.</p>
<p>ヒートマップとは,表形式の数値を各セルの色によって表現する可視化手法です.</p>
<p>先ほど作成した,列相対度数をヒートマップを利用して可視化してみましょう.</p>
<p>ヒートマップは<code>seaborn</code>の<code>.heatmap()</code>を利用することで簡単に作成できます.</p>
<div class="sourceCode" id="cb48"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb48-1"><a href="#cb48-1" aria-hidden="true" tabindex="-1"></a>sns.heatmap( cross  <span class="co">#ヒートマップを作成したいテーブル</span></span>
<span id="cb48-2"><a href="#cb48-2" aria-hidden="true" tabindex="-1"></a>           , cmap<span class="op">=</span>plt.get_cmap(<span class="st">&#39;Reds&#39;</span>) <span class="co">#カラーマップ(省略可)</span></span>
<span id="cb48-3"><a href="#cb48-3" aria-hidden="true" tabindex="-1"></a>           , linewidths<span class="op">=</span><span class="fl">.5</span> <span class="co">#線の太さを指定することでセルを囲う線を表示</span></span>
<span id="cb48-4"><a href="#cb48-4" aria-hidden="true" tabindex="-1"></a>           , annot<span class="op">=</span><span class="va">True</span>  <span class="co">#セルに数値を表示</span></span>
<span id="cb48-5"><a href="#cb48-5" aria-hidden="true" tabindex="-1"></a>           )</span>
<span id="cb48-6"><a href="#cb48-6" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<figure>
<img src="/images/heatmap.png" alt="ヒートマップ" />
<figcaption aria-hidden="true">ヒートマップ</figcaption>
</figure>
<p>このヒートマップでは,数値が大きいほど,色が濃くなっており2,3時限においてB以上の成績を取る学生の割合が大きいこと,4,5時限においてCやFなどの成績を取る人の割合が大きいことが視覚的に分かります.</p>
<p>ヒートマップは複数の数値間の相関係数や距離を可視化する際にも良く用いられるので,覚えておきましょう.</p>
<div class="note">
<ul>
<li>演習</li>
</ul>
<ol type="1">
<li><p>GoogleTrendで4つのワードに関して同じ期間の推移を調べ以下の2通りの方法でCSVを作成してください.</p>
<ul>
<li><p>1つのグラフに表示
for文を利用して1つのグラフに4つの折れ線グラフを色を変えて表示する.
凡例も表示する.</p></li>
<li><p>グラフの分割
グラフを分割して,それぞれのワードに関して4象限の折れ線グラフを作成する.</p></li>
</ul></li>
<li><p><a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/beetle_datal.csv">こちら</a>のカブトムシの種類別の体長と体重のデータを利用して散布図を作成してください.カブトムシの種類別に散布図の色や点の図形を変更してください.</p></li>
<li><p><a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/forest_beetle_data.csv">こちら</a>の森の地点別に採取できたカブトムシの種類を記録したデータを可視化しどの森でどのカブトムシが取れやすいのかを分析してください.</p></li>
</ol>
</div>
]]></description>
    <pubDate>Fri, 29 Mar 2024 00:00:00 UT</pubDate>
    <guid>/lectures/slds8.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>特別講義DS Ch7 アルゴリズムとPythonの基本構文</title>
    <link>/lectures/slds7.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#アルゴリズムとpythonの基本構文" id="toc-アルゴリズムとpythonの基本構文"><span class="toc-section-number">1</span> アルゴリズムとPythonの基本構文</a>
<ul>
<li><a href="#フローチャート" id="toc-フローチャート"><span class="toc-section-number">1.0.1</span> フローチャート</a></li>
<li><a href="#input関数" id="toc-input関数"><span class="toc-section-number">1.1</span> input関数</a></li>
<li><a href="#逐次処理インデントブロック" id="toc-逐次処理インデントブロック"><span class="toc-section-number">1.2</span> 逐次処理,インデント,ブロック</a></li>
<li><a href="#分岐" id="toc-分岐"><span class="toc-section-number">1.3</span> 分岐</a></li>
<li><a href="#反復" id="toc-反復"><span class="toc-section-number">1.4</span> 反復</a>
<ul>
<li><a href="#while文" id="toc-while文"><span class="toc-section-number">1.4.1</span> While文</a></li>
<li><a href="#for文" id="toc-for文"><span class="toc-section-number">1.4.2</span> for文</a></li>
</ul></li>
<li><a href="#関数とクラス" id="toc-関数とクラス"><span class="toc-section-number">1.5</span> 関数とクラス</a>
<ul>
<li><a href="#関数" id="toc-関数"><span class="toc-section-number">1.5.1</span> 関数</a></li>
<li><a href="#発展クラスとインスタンス" id="toc-発展クラスとインスタンス"><span class="toc-section-number">1.5.2</span> 発展:クラスとインスタンス</a></li>
</ul></li>
</ul></li>
</ul>
</div>
<h1 data-number="1" id="アルゴリズムとpythonの基本構文"><span class="header-section-number">1</span> アルゴリズムとPythonの基本構文</h1>
<p>データを適切に処理するためには,これまで扱ったpandasの技法だけでは足りません.ライブラリに含まれていない処理をPythonで自分で記述する必要があります.</p>
<p>Pythonで処理を記述するためにはそのための<strong>構文</strong>を学習する必要があります.</p>
<p>プログラムで記述される処理を,<strong>アルゴリズム</strong>といいます. <strong>アルゴリズム</strong>とは,<strong>有限回適用することで問題を解くことができる規則の集まり</strong>です. プログラミングとは,プログラミング言語の<strong>データ型と構文を利用してアルゴリズムを記述すること</strong>にほかなりません.</p>
<p>基本的に,アルゴリズムを構成する要素は以下のの3つしかありません.</p>
<div class="note">
<ul>
<li><strong>逐次処理</strong></li>
</ul>
<p>手続き型言語は,プログラムは(基本的には)上から順番に実行されます.
プログラムの記述に従って処理を順番に実行することを<strong>逐次処理</strong>といいます.</p>
<ul>
<li><strong>分岐</strong></li>
</ul>
<p>条件に従って処理が分岐します. Pythonでは,<code>if</code>と<code>case</code>という構文によって実装されます.</p>
<ul>
<li><strong>反復</strong></li>
</ul>
<p>指定の回数または,条件が満たされるまで処理を繰り返すこと. Pythonでは,<code>for</code>,<code>while</code>によって実現します. より高度な実装方法として,再帰や高階関数なども利用できますがこの講義では扱いません.</p>
</div>
<p>この3つの組み合わせがプログラムで記述できれば,プログラムを利用してどのような問題でも解けます.</p>
<h3 data-number="1.0.1" id="フローチャート"><span class="header-section-number">1.0.1</span> フローチャート</h3>
<p>アルゴリズムを視覚的に表現する方法の一つにフローチャートがあります. 原理的には,フローチャートを描くことができれば,アルゴリズムが構築できますし,プログラムが記述できます.</p>
<p>フローチャートは,以下の図形と矢印の組み合わで記述されます(厳密には,ループやデータ代入などもっと細かいですが,ここでは簡単のために省略しています.)</p>
<figure>
<img src="/images/flow-chart1.png" alt="フローチャートの部品" />
<figcaption aria-hidden="true">フローチャートの部品</figcaption>
</figure>
<p>例えば,逐次処理は以下のようなフローチャートで表現されます. 以下は,なにかの野菜を育てる手順をフローチャートで表現したものになります.矢印の順番で処理が行われます.</p>
<figure>
<img src="/images/flow-chart2.png" alt="逐次処理" />
<figcaption aria-hidden="true">逐次処理</figcaption>
</figure>
<p>そこに,<strong>実がならなかった場合は刈り取る</strong>という分岐を加えると以下のようになります.</p>
<figure>
<img src="/images/flow-chart3.png" alt="分岐処理" />
<figcaption aria-hidden="true">分岐処理</figcaption>
</figure>
<p>更に,<strong>実がならなかった場合には,肥料をやり,もう一度水を撒くところからやり直す</strong>という形で,前のステップに戻る反復を追加すると以下のようになります.</p>
<figure>
<img src="/images/flow-chart4.png" alt="反復処理" />
<figcaption aria-hidden="true">反復処理</figcaption>
</figure>
<p>プログラムを用いてアルゴリズムを記述するには,①自然言語(日本語)で解きたい問題が書ける,②その解き方をフローチャートなどを利用してアルゴリズムに変換できる,③アルゴリズムをプログラムに変換できる,というステップを踏むのが一般的です.</p>
<p>最近小学生などの教育で良く耳にする<strong>論理的思考力</strong>や<strong>プログラミング的思考</strong>とは,この①から②への変換ができることを意味しているようです.
プログラミングの学習では,①から②への変換は前提として,プログラムの知識,文法,記法,利用方法などを学習し,②から③への変換を扱います.</p>
<p>最近の小学生は,この学習のために,フローチャートを作ることでプログラムが書ける<a href="https://scratch.mit.edu">Scratch</a>などを使っているようですが,この講義ではそこからやっている時間はないので,この章でフローチャートの作成と,そのプログラムへの変換の基礎を学習します.</p>
<div class="note">
<ul>
<li>演習問題</li>
</ul>
<p>以下の処理を表すシンプルなフローチャートをPowerPointを利用して作成してください.</p>
<ol type="1">
<li><p>カレーの作り方
カレーの作り方を想像して,フローチャートで表現してください.</p></li>
<li><p>自動販売機
以下の条件で自動販売機を想定して,
自動販売機にお金が投入されてから商品が出てくるまでのフローチャートを作成してください.</p>
<ul>
<li><p>100円の炭酸飲料と,150円のお茶を販売している自動販売機</p></li>
<li><p>商品を選択してくださいと最初にアナウンスする</p></li>
<li><p>選択された商品に応じた金額を投入してくださいとアナウンスする</p></li>
<li><p>投入された金額が足りている場合は商品を出しお釣りを返す</p></li>
<li><p>投入された金額が足りない場合は,投入されたお金を全部返して,最初に戻る</p></li>
</ul></li>
<li><p>100個の1から100までのランダムな数字が書かれたボールが入っている箱Aから,1つずつボールを取り出し,偶数のボールを箱B,奇数のボールを箱Cに入れる作業を小学生に説明するためのフローチャートを作成してください.</p></li>
</ol>
</div>
<h2 data-number="1.1" id="input関数"><span class="header-section-number">1.1</span> input関数</h2>
<p>これからアルゴリズムをプログラムで記述する練習をするにあたって,スクリプト内のプログラムと人間がやり取りをする場面が何度か出てきます.そのために利用される関数に<code>input()</code>があります. <code>input()</code>はプログラム内で標準入力(Terminalなどに記述された文字列)を受け取る関数です. <code>()</code>内には標準入力を受け取る前に出力される文字列を記述します. 文字列が表示された後,ユーザーが入力した文字列が入力されます.</p>
<p>以下のプログラム(<code>input_test.py</code>)を記述して実行してみましょう.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> <span class="bu">input</span>(<span class="st">&#39;あなたの名前を入力してください. </span><span class="ch">\n</span><span class="st">&#39;</span>)</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&#39;あなたの名前は</span><span class="sc">{</span>x<span class="sc">}</span><span class="ss">ですね. よろしく!&#39;</span>)</span></code></pre></div>
<p>以下のように,<code>()</code>の中の文字列が表示されて,入力された文字列が代入された<code>x</code>が表示されるはずです.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> python3 input_test.py</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="ex">あなたの名前を入力してください.</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="ex">akagi</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ex">あなたの名前はakagiですね.</span> よろしく!</span></code></pre></div>
<h2 data-number="1.2" id="逐次処理インデントブロック"><span class="header-section-number">1.2</span> 逐次処理,インデント,ブロック</h2>
<p>pythonは手続き型言語なので,基本的に上から1行ずつプログラムが実行されます. これによってアルゴリズムの構成要素における逐次処理が実現されています.</p>
<p>これまでにこの講義で扱ってきたプログラムは,基本的に1行に1処理を記述しており,処理は上から1行ずつ実行されていました.</p>
<p>しかし,プログラムがより複雑になると,一つの処理が1行では記述できなくなってきます. そこで,プログラムの中で<strong>処理の塊</strong>を作って,その処理の塊を順番に実行していくことになります. Pythonではこの処理の塊を<code>ブロック</code>と呼び,<code>インデント</code>によって表現します.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> sample():</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;sample&#39;</span>)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="co">####</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="co">#↑def のブロックをインデントで表現</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>total <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">10</span>):</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    total <span class="op">+=</span> i</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(total)</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="co">####</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="co">#↑forのブロックをインデントで表現</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">10</span>):</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> j <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">10</span>):</span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(i<span class="op">*</span>j)</span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a><span class="co">####</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a><span class="co">########</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a><span class="co">#↑ インデントの中でインデントを使って</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a><span class="co"># ブロックの中のブロックを表現</span></span></code></pre></div>
<p><code>インデント</code>は,パワーポイントと同様に,行頭からの空白を意味します.<code>半角スペース4つ</code>が一つの単位となります. <code>TABキー</code>で入力される<code>TAB</code>をインデントとして利用することもできますが,プログラム中にタブとスペースが混在することになり編集が複雑になるので推奨しません.</p>
<p>しかし,いちいちスペースキーを4回テキストエディタで入力するのは面倒なので,
テキストエディタの設定でタブをスペース4つに変換するように設定しておくと楽です.</p>
<p>Sublime Textでは, <code>View &gt; Indentation &gt; Indent Using Spaces</code> をクリックして, <code>TAB Width: 4</code>を選択すると,自動でタブがスペースになります.</p>
<figure>
<img src="/images/tab-to-spaces.png" alt="TAB to Spaces" />
<figcaption aria-hidden="true">TAB to Spaces</figcaption>
</figure>
<h2 data-number="1.3" id="分岐"><span class="header-section-number">1.3</span> 分岐</h2>
<p>Pythonで分岐を表す基本的な構文として<code>if</code>文があります. <code>if</code>は英語の通り,<strong>もしXXなら</strong>を表しており, <code>if XXX:</code> のインデントブロックに,その条件下で行って欲しい処理を記述します.<code>XXX</code>の部分には,<code>Bool</code>型あるいは<code>Bool</code> 型を返す論理式が入ります. 文の最後に<code>:</code>を記述するのを忘れないようにしましょう. また,続けて, <code>elif YYY:</code>と記述することで条件を追加することができます. 条件を網羅的に書かなくても, <code>if</code>と<code>elif</code>で指定された条件以外のすべての場合の処理を<code>else:</code>で指定することができます.</p>
<figure>
<img src="/images/if1.png" alt="ifのイメージ" />
<figcaption aria-hidden="true">ifのイメージ</figcaption>
</figure>
<p>具体的に,ある変数<code>x</code>の大きさによる分岐は以下のように書かれます. 以下の例では,変数<code>x</code>と<code>10</code>の大小比較の結果によって,表示する文字列を変更しています.</p>
<figure>
<img src="/images/if2.png" alt="ifのイメージ" />
<figcaption aria-hidden="true">ifのイメージ</figcaption>
</figure>
<div class="warn">
<ul>
<li>発展:Bool以外のデータ型とif文の挙動</li>
</ul>
<p><code>if</code>文の<code>if</code>,<code>elif</code>以下の部分には基本的にBool型を記述しますが,<code>Int</code>型や<code>str</code>型なども利用可能です. <code>int</code>の場合<code>1</code>は<code>True</code>,それ以外の数値は<code>False</code>とみなされます. <code>str</code>の場合,<code>''</code>(空白)のみが<code>False</code>それ以外は<code>True</code>となります.こちらのほうが<code>True</code>や<code>False</code>より高速なので,サンプルコードなどで利用されている場合がありますので注意しましょう.</p>
<p>例として下のプログラムを実行すると,<code>1</code>,<code>b</code>,<code>c</code>とだけ表示されるはずですので,確認してみましょう.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="dv">1</span> :</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;1&#39;</span>)</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="dv">0</span>:</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;0&#39;</span>)</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="st">&#39;&#39;</span>:</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;a&#39;</span>)</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="st">&#39; &#39;</span>:</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;b&#39;</span>)</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="st">&#39;c&#39;</span>:</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;c&#39;</span>)</span></code></pre></div>
</div>
<p>それでは,具体的なプログラムを記述してみましょう.以下のプログラムについて考えてみます.</p>
<div class="note">
<p>動物の名前をうけとって,それが<code>'イヌ'</code>なら,<code>'ワンワン'</code>,<code>'ネコ'</code>なら,<code>'ニャンニャン'</code>,どちらでもないなら<code>'???'</code>と表示するプログラム</p>
</div>
<p>これを,まずは日本語のフローチャートで表現して,日本語の部分をプログラムの構文に書き換えてみると以下のようになります.これくらいのプログラムだと,フローチャートを経由して変換するのは面倒かと思いますが,今後より複雑なプログラムを書くにあたっての訓練ですので,取り組んでみましょう.</p>
<figure>
<img src="/images/if5.png" alt="動物の名前" />
<figcaption aria-hidden="true">動物の名前</figcaption>
</figure>
<p>フローチャートが書けたら,そのままプログラムを上から書いてみましょう. <code>else</code>の部分だけはフローチャートに現れていないので注意してください.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>kind <span class="op">=</span> <span class="bu">input</span>(<span class="st">&#39;動物の名前をカタカナで入力してください. </span><span class="ch">\n</span><span class="st">&#39;</span>)</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> kind <span class="op">==</span> <span class="st">&#39;イヌ&#39;</span>:</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;ワンワン&#39;</span>)</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="cf">elif</span> kind <span class="op">==</span> <span class="st">&#39;ネコ&#39;</span>:</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;ニャンニャン&#39;</span>)</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="cf">else</span>:</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;???&#39;</span>)</span></code></pre></div>
<p>実行して,意図通りに動くかを確認しましょう.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> python3 pet_name.py</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="ex">動物の名前をカタカナで入力してください.</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="ex">イヌ</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="ex">ワンワン</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> python3 pet_name.py</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="ex">動物の名前をカタカナで入力してください.</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="ex">サカナ</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="ex">???</span></span></code></pre></div>
<div class="note">
<ul>
<li>演習問題</li>
</ul>
<p>以下の,処理のフローチャートと,プログラムを作成してください.</p>
<ol type="1">
<li><p>関東の都県を標準入力から受け取り,その都県の県庁所在地を返す.</p></li>
<li><p><code>input()</code>関数で数値を受け取って, 偶数なら偶数, 奇数なら奇数という文字列を返す.</p>
<ul>
<li>ヒント: <code>input()</code>関数の返り値は文字列なので, <code>int(input(‘数値を入力してください /n’))</code> のように<code>int()</code>関数を利用することで数値に変換できる.</li>
</ul></li>
<li><p>ランダムな1から10の数値を発生させて, その数値が5より大きければ<code>'BIG'</code>,小さければ<code>'SMALL'</code>と表示する.</p>
<ul>
<li>ヒント: 一行目に <code>import random</code> と記述して(意味は,後の回で) <code>x = random.randint(1,10)</code>と書くと, 1から10のランダムな整数がxに入ります.</li>
</ul></li>
</ol>
</div>
<h2 data-number="1.4" id="反復"><span class="header-section-number">1.4</span> 反復</h2>
<p>Pythonにおいて,処理を繰り返す<strong>反復</strong>を実装する構文はいくつか存在しますが,代表的なものに <code>while文</code> 及び <code>for文</code>があります. 利用頻度からしても,<code>for文</code>の方が重要ですが, ここではフローチャートと相性が良く,意味が分かりやすい<code>while文</code>で反復の感覚を掴んでから<code>for文</code>を学習しましょう.</p>
<h3 data-number="1.4.1" id="while文"><span class="header-section-number">1.4.1</span> While文</h3>
<p>プログラムは,コンピュータに何かしらの命令をする文を書くものです. <code>while文</code>も<code>if</code>のように英文の意味に沿って,プログラムに命令を与えています.
例えば以下の英語の命令文について考えてみましょう.</p>
<ul>
<li>Keep working while the timer is running.</li>
</ul>
<p>(タイマーが動いている間は,働いてください.)</p>
<ul>
<li>Water the plants every day while they are not bearing fruit.</li>
</ul>
<p>(植物に実が成っていない間は毎日水やりをしてください.)</p>
<ul>
<li>Continue reading while the light is on.</li>
</ul>
<p>(電気がついている間は, 読み続けてください.)</p>
<p>これらの文はいずれも, <strong>命令 while 条件</strong> という形を取っており, <strong>条件が真である限り,命令を実行してください</strong>という意味になっています.</p>
<p>プログラムにおける<code>while文</code>は上の英文の順序を少し入れ替えて, <code>while 条件: 命令</code>の形をとり,<code>条件</code>が真である限り,<code>命令</code>を実行するという意味のプログラムになります.</p>
<figure>
<img src="/images/while1.png" alt="whileのイメージ" />
<figcaption aria-hidden="true">whileのイメージ</figcaption>
</figure>
<p><code>while文</code>は条件によって,プログラムの継続を判断するので,条件の真偽値が変更されない限り,プログラムが終了しません.
試しに以下のコードを実行してみましょう.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">#実行されない</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> <span class="va">False</span>:</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&#39;never printed&#39;</span>)</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="co">#永遠に数字が増え続ける</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="co">#終了するには Ctrl + C</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> <span class="dv">1</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> <span class="va">True</span>:</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    x <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(x)</span></code></pre></div>
<p>1つ目の<code>while文</code>は,条件が最初から<code>False</code>になっているため実行されません.
2つ目の<code>while文</code>は,条件が永遠に<code>True</code>なので<code>x</code>が<code>1</code>から増え続けて<code>print()</code>によって標準出力され続けます(このように反復を表すプログラムでは, 変数への再代入を多用しますので,忘れている人は復習しましょう.) <strong>プログラムを強制終了するには<code>Ctrl + C</code>を押しましょう.</strong></p>
<p>ウェブサイトやソフトウェアの表示などでは<code>while文</code>を利用して永遠にプログラムを動かし続けることをしますが,通常の反復では,何かしらの条件の変更によってプログラムを終了するように条件部分を変更する必要があります.</p>
<p>先程のプログラムを少し変更して, <code>x</code>の値が<code>1</code>ずつ増えていき,<code>10</code>になったら終了するようにしてみるとどうなるでしょうか.</p>
<p><code>while文</code>のような反復は, フローチャートでは,<strong>条件</strong>部分を表す分岐と,前に戻る矢印で表されます. 分岐のあとに,何かしら条件に関わる値が変更されることで,分岐が終了します.</p>
<figure>
<img src="/images/while2.png" alt="whileのイメージ" />
<figcaption aria-hidden="true">whileのイメージ</figcaption>
</figure>
<div class="sourceCode" id="cb8"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> <span class="dv">1</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> x <span class="op">&lt;</span> <span class="dv">10</span>:</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>    x <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(x)</span></code></pre></div>
<div class="sourceCode" id="cb9"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> python3 while_and_for.py</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span></span></code></pre></div>
<p>続いて,標準入力の結果によって反復の終了条件を判定するための,以下のフローチャートで表されるプログラムを考えてみましょう.</p>
<figure>
<img src="/images/while3.png" alt="whileのイメージ" />
<figcaption aria-hidden="true">whileのイメージ</figcaption>
</figure>
<p>このフローチャートをプログラムに直すと以下のようになり, 問題文に正解しない限りプログラムが終了しません.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> <span class="dv">2</span> <span class="op">!=</span> x:</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>    x <span class="op">=</span> <span class="bu">int</span>(<span class="bu">input</span>(<span class="st">&#39;1 + 1 = ? </span><span class="ch">\n</span><span class="st">&#39;</span>))</span></code></pre></div>
<div class="sourceCode" id="cb11"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> python3 while_and_for.py</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span> + 1 = <span class="pp">?</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span> + 1 = <span class="pp">?</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span> + 1 = <span class="pp">?</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span></span></code></pre></div>
<h4 data-number="1.4.1.1" id="while文とif文の組み合わせ"><span class="header-section-number">1.4.1.1</span> <code>while文</code>と<code>if文</code>の組み合わせ</h4>
<p><code>while文</code>の中でも<code>if文</code>を利用した分岐が可能です. 先程のプログラムに少し加えて,ヒントを出すようにしてみましょう.</p>
<figure>
<img src="/images/while4.png" alt="whileのイメージ" />
<figcaption aria-hidden="true">whileのイメージ</figcaption>
</figure>
<p><code>while文</code>のインデントの中で,更に<code>if文</code>のインデントが組まれていることに注意しましょう.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> <span class="dv">2</span> <span class="op">!=</span> x:</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>    x <span class="op">=</span> <span class="bu">int</span>(<span class="bu">input</span>(<span class="st">&#39;1 + 1 = ? </span><span class="ch">\n</span><span class="st">&#39;</span>))</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> x <span class="op">&gt;</span> <span class="dv">2</span>:</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&#39;少し数が大きいかも&#39;</span>)</span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> x <span class="op">&lt;</span> <span class="dv">2</span>:</span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&#39;少し数が小さいかも&#39;</span>)</span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&#39;大正解!!&#39;</span>)</span></code></pre></div>
<div class="sourceCode" id="cb13"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> python3 while_and_for.py</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span> + 1 = <span class="pp">?</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="ex">少し数が大きいかも</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span> + 1 = <span class="pp">?</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="ex">少し数が小さいかも</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span> + 1 = <span class="pp">?</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="ex">大正解!!</span></span></code></pre></div>
<h4 data-number="1.4.1.2" id="真偽値以外のwhile文"><span class="header-section-number">1.4.1.2</span> 真偽値以外の<code>while文</code></h4>
<p><code>while文</code>では,<code>if文</code>と同様にTrue,False以外の値を条件部分に用いることがあります.
<code>while文</code>では<code>リスト</code>を条件部分に与えることが可能で, <strong>リストが空のとき<code>False</code></strong>として判定されます.</p>
<figure>
<img src="/images/while5.png" alt="whileのイメージ" />
<figcaption aria-hidden="true">whileのイメージ</figcaption>
</figure>
<p>以下のプログラムでは,リストの先頭要素を表示したのち,リストの先頭要素を<code>pop()</code>メソッドによって削除しています. 削除を続けて,リストが空になるとプログラムが終了します.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>xs <span class="op">=</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> xs:</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(xs[<span class="dv">0</span>])</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">#リストの先頭要素を削除(pop())</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>    xs.pop(<span class="dv">0</span>)</span></code></pre></div>
<div class="sourceCode" id="cb15"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> python3 while_and_for.py</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span></span></code></pre></div>
<div class="note">
<ul>
<li>演習問題</li>
</ul>
<p>以下のプログラムのフローチャートを作成し,while文を利用してプログラムを記述してください.</p>
<ol type="1">
<li><p><code>x = 1</code> に<code>3</code>ずつ数を足しながら<code>x</code>の値を<code>print()</code>する. <code>x</code>が<code>1000</code>を超えたら終了する.</p></li>
<li><p><code>1</code>から<code>100</code>までの数の和を求める.</p>
<ul>
<li>ヒント: 1ずつ値が増える変数とは別に,増えた値を足す変数を最初に作ろう.</li>
</ul></li>
<li><p><code>100</code>から<code>150</code>までの数のうち,<code>５</code>で割り切れるかつ<code>２</code>で割り切れる数の和を求める</p></li>
</ol>
</div>
<h3 data-number="1.4.2" id="for文"><span class="header-section-number">1.4.2</span> for文</h3>
<p>続いてもう一つの代表的な反復の表現方法である<code>for文</code>について見ていきましょう <code>while文</code>の説明の最後に扱った,<strong>リストから一つずつ値を取り出す操作</strong>のように<strong>なにかから値を取り出す操作を繰り返すこと</strong>に特化したのが,<code>for文</code>です.</p>
<p><code>for文</code>は, <code>for x in y: z</code>の形で,<strong>yから一つずつxを抜き出して,zをしてください</strong>という意味になります.</p>
<p>英文では,以下の用に<strong>For each x in y,</strong>の形で表されますが, プログラムでは<strong>each</strong>が省略されます.</p>
<div class="note">
<ul>
<li>For each mandarin in the box, take it out and peel it</li>
</ul>
<p>(みかんの入った箱から一つずつみかんを取り出して,皮を剥いてください)</p>
<ul>
<li>For each student in the class, collect the handout from them.</li>
</ul>
<p>(クラスの学生一人ひとりからプリントを回収してください.)</p>
<ul>
<li>For each panda in the cage, take it out one by one and line them up.</li>
</ul>
<p>(パンダの檻からパンダを一匹ずつ連れ出して並べてください.)</p>
</div>
<p><code>for文</code>をプログラムの世界で利用するには,現実を対象とした英語における,<strong>みかんの入った箱</strong>や<strong>パンダの檻</strong>のようになにか中身を取り出せる入れ物が必要になります.</p>
<p><code>python</code>では,この入れ物として,リストのように,中身を順番に取り出せるもの(オブジェクト)を<strong>イテラブルオブジェクト( iterable object)</strong>を利用します.</p>
<div class="note">
<ul>
<li><p>Iterable object の例</p>
<ul>
<li>リスト <code>xs = [1,2,3,4,5]</code></li>
</ul>
<p>順番に取り出すと, <code>1,2,3,4,5</code>の順番で一つずつ出てくる</p>
<ul>
<li>辞書 <code>animal_count = {'cat':2,'dog':4,'bird':8}</code></li>
</ul>
<p><code>key</code>を順番に取り出すと, <code>'cat','dog','bird'</code>が順番に一つずつ出てくる</p>
<ul>
<li>タプル <code>xs = ('a','b','c','d')</code></li>
</ul>
<p>順番に取り出すと,<code>'a','b','c','d'</code>の順番で一つずつ出てくる</p>
<ul>
<li>DataFrameの列や行(<code>DataSeries</code>)</li>
</ul></li>
</ul>
</div>
<figure>
<img src="/images/for1.png" alt="forのイメージ" />
<figcaption aria-hidden="true">forのイメージ</figcaption>
</figure>
<p><code>for文</code>における終了条件は,<code>iterable object</code>が空になることです.
リストから要素を取り出して,以下のフローチャートで表されるような合計を求める処理について考えてみましょう.</p>
<figure>
<img src="/images/for2.png" alt="forのイメージ" />
<figcaption aria-hidden="true">forのイメージ</figcaption>
</figure>
<p>プログラムに直すと以下のようになります.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>xs <span class="op">=</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>]</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>total <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> x <span class="kw">in</span> xs:</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>    total <span class="op">+=</span> x</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(total)</span></code></pre></div>
<div class="sourceCode" id="cb17"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> python3 while_and_for.py</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="ex">15</span></span></code></pre></div>
<p>xs から取り出した値が<code>x</code>に毎回代入されていることに注意しましょう.なお,<code>x</code>は変数名なので,任意の名前をつけることが可能です.
また,<code>pop</code>を利用した<code>while文</code>と違って,元の<code>xs</code>の要素数は実際には減っていません.</p>
<ul>
<li><code>range()</code>関数</li>
</ul>
<p>上の例のように,<strong><code>m</code>から<code>n</code></strong>までの連続した数値が欲しい場合に,毎回リストを作っていると大変です. 単純に数値の列が欲しい場合は<code>range()</code>関数を使いましょう.
<code>range(x)</code>は<code>0</code>から始まる<code>x</code>個の<code>シーケンス</code>(インデックスで位置を指定できるイテラブルオブジェクト)を返します.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> x <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">5</span>):</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(x)</span></code></pre></div>
<div class="sourceCode" id="cb19"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span></span></code></pre></div>
<p><code>range(始端,終端,ステップ)</code>の形で複数の引数を指定することで,始端,終端,ステップ(何個とばしにするか)を定めることができます.
終端は,一つ前の値までしか出力されないので注意しましょう.</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> x <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">5</span>,<span class="dv">10</span>):</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(x)</span></code></pre></div>
<div class="sourceCode" id="cb21"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span></span></code></pre></div>
<div class="sourceCode" id="cb22"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> x <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">5</span>,<span class="dv">10</span>,<span class="dv">2</span>):</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(x)</span></code></pre></div>
<div class="sourceCode" id="cb23"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span></span></code></pre></div>
<h4 data-number="1.4.2.1" id="for文とif文の組み合わせ"><span class="header-section-number">1.4.2.1</span> <code>for文</code>と<code>if文</code>の組み合わせ</h4>
<p><code>while文</code>と同様に<code>for文</code>の中で<code>if文</code>を利用したり,<code>if文</code>の中で<code>for文</code>を利用することができます.</p>
<p>以下のプログラムでは, <code>1</code>から<code>5</code>までの値の中で偶数のものだけを<code>print()</code>しています.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> x <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">6</span>):</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> x <span class="op">%</span> <span class="dv">2</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(x)</span></code></pre></div>
<div class="sourceCode" id="cb25"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> python3 while_and_for.py</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span></span></code></pre></div>
<h4 data-number="1.4.2.2" id="多重ループ"><span class="header-section-number">1.4.2.2</span> 多重ループ</h4>
<p><code>for文</code>の中で<code>for文</code>を複数回繰り返して多重ループを実現できます. 以下のプログラムでは, リスト<code>xs</code>からリスト<code>x</code>を取り出し,取り出したリスト<code>x</code>から取り出した要素<code>y</code>の合計値を求めています.</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a>xs <span class="op">=</span> [[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>],[<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>],[<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a>total <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> x <span class="kw">in</span> xs:</span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> y <span class="kw">in</span> x:</span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a>        total <span class="op">+=</span> y</span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(total)</span></code></pre></div>
<div class="sourceCode" id="cb27"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> python3 while_and_for.py</span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a><span class="ex">45</span></span></code></pre></div>
<div class="note">
<ul>
<li>演習</li>
</ul>
<p>以下の処理のフローチャートとプログラムを作ってみよう.</p>
<ol type="1">
<li><p><code>x=0</code>に<code>[1,3,5,7,9,12]</code>を順番に足して更新する. <code>x</code>の値を更新するたびに<code>print()</code>する.</p></li>
<li><p>人物の名前と成績を記録した辞書型<code>xs={'taro':'S','hanako':'B','yumi':'A','jiro':'D'}</code>から成績A以上の人物名だけをリスト<code>upper=[]</code>に追加し,<code>upper</code>を表示する.</p></li>
<li><p><code>100</code>から<code>150</code>までの数のうち,<code>５</code>で割り切れるかつ<code>２</code>で割り切れる数の和を求める</p></li>
<li><p><code>xs = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]]</code>として, <code>for文</code>の多重ループを利用して, <code>xs[0]</code>から<code>xs[3]</code>の合計値が入ったリストを求める</p></li>
<li><p><code>FizzBuzz</code>とはプログラミングの動作確認でよく用いられる欧米圏の言葉遊びゲームです..
以下のルールに則って<code>1</code>から<code>100</code>までの数を順番に<code>FizzBuzz</code>の判定を行ってください.</p>
<ul>
<li><p>3の倍数ならFizzと表示する</p></li>
<li><p>5の倍数ならBuzzと表示する</p></li>
<li><p>両方の倍数ならFizzBuzz</p></li>
<li><p>どちらでもないならその数をPrintする.</p></li>
</ul></li>
</ol>
</div>
<h4 data-number="1.4.2.3" id="発展-リスト内包表記"><span class="header-section-number">1.4.2.3</span> 発展: リスト内包表記</h4>
<p>Pythonには<code>for文</code>と<code>while文</code>以外にも,反復を実現するための手法がいくつか存在します.
そのうち良く使われるものに<strong>リスト内包表記</strong>があります.</p>
<p>リスト内包表記は,集合論の記法を取り入れた書き方で,関数型言語からPythonに取り入れられました.
リスト内包表記は,短い行で簡潔に書けるためリストを生成する際に良く用いられます.</p>
<p>例えば, 1~10までの数値のうち,偶数だけが入ったリストを生成することを考えます.
<code>for文</code>を利用すると,例えば以下のようにして得ることができます.</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a>even_numbers <span class="op">=</span> []</span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">11</span>):</span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> i <span class="op">%</span> <span class="dv">2</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">11</span>):</span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a>        even_numbers.append(i)</span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;for文:&#39;</span>, even_numbers)</span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true" tabindex="-1"></a><span class="co">#結果&gt;&gt;&gt; for文: [2, 4, 6, 8, 10]</span></span></code></pre></div>
<p>1つのリストを生成するのに4行かかっています.
リスト内包表記で同じリストを作成してみます.</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a>even_numbers <span class="op">=</span> [x <span class="cf">for</span> x <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">11</span>) <span class="cf">if</span> x <span class="op">%</span> <span class="dv">2</span> <span class="op">==</span> <span class="dv">0</span>]</span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;内包表記:&#39;</span>,even_numbers)</span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true" tabindex="-1"></a><span class="co">#結果&gt;&gt;&gt; 内包表記: [2, 4, 6, 8, 10]</span></span></code></pre></div>
<p>同じ結果を一行で得ることができました.</p>
<p>リスト内包表記では<code>[]</code>の中に</p>
<p><code>[得たい値 for 使いたい要素を代入した変数 in イテラブルオブジェクト if 条件]</code></p>
<p>という書き方で,<code>for文</code>や<code>if文</code>を利用します.</p>
<p>詳細は省きますが,これは数学の集合論における内包表記を真似た記述法になります.</p>
<figure>
<img src="/images/list_complehension.png" alt="リスト内包表記" />
<figcaption aria-hidden="true">リスト内包表記</figcaption>
</figure>
<p>なれるまで難しいかと思いますので,いくつか他の例も見てみましょう.</p>
<ul>
<li>1から10までの数字のうち,奇数のものに3を足したリスト</li>
</ul>
<div class="sourceCode" id="cb30"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a>xs <span class="op">=</span> [x <span class="op">+</span> <span class="dv">3</span> <span class="cf">for</span> x <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">11</span>) <span class="cf">if</span> x <span class="op">%</span> <span class="dv">2</span> <span class="op">==</span> <span class="dv">0</span>]</span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(xs) <span class="co">#[5, 7, 9, 11, 13]</span></span></code></pre></div>
<ul>
<li><code>animals_small = ['cat','dog','bird']</code>を大文字に変換したリスト</li>
</ul>
<div class="sourceCode" id="cb31"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a>animals_small <span class="op">=</span> [<span class="st">&#39;cat&#39;</span>,<span class="st">&#39;dog&#39;</span>,<span class="st">&#39;bird&#39;</span>]</span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a>animals_large <span class="op">=</span> [x.upper() <span class="cf">for</span> x <span class="kw">in</span> animals_small]</span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(animals_large) <span class="co">#[&#39;CAT&#39;, &#39;DOG&#39;, &#39;BIRD&#39;]</span></span></code></pre></div>
<ul>
<li><code>['CAT', 'DOG', 'BIRD']</code>のうち文字数が3文字以下の文字列の頭文字のリスト</li>
</ul>
<div class="sourceCode" id="cb32"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a>xs <span class="op">=</span> [x[<span class="dv">0</span>] <span class="cf">for</span> x <span class="kw">in</span> animals_large <span class="cf">if</span> <span class="bu">len</span>(x) <span class="op">&lt;=</span><span class="dv">3</span> ]</span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(xs) <span class="co"># [&#39;C&#39;, &#39;D&#39;]</span></span></code></pre></div>
<ul>
<li><code>100</code>から<code>150</code>までの数のうち,<code>５</code>で割り切れるかつ<code>２</code>で割り切れる数の和</li>
</ul>
<div class="sourceCode" id="cb33"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="bu">sum</span>([x <span class="cf">for</span> x <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">100</span>,<span class="dv">150</span>) <span class="cf">if</span> x <span class="op">%</span> <span class="dv">10</span> <span class="op">==</span> <span class="dv">0</span>]))</span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a><span class="co">#600</span></span></code></pre></div>
<h4 data-number="1.4.2.4" id="発展-breakとcontinue"><span class="header-section-number">1.4.2.4</span> 発展: breakとcontinue</h4>
<p><code>for文</code>や<code>while文</code>の処理を途中で分岐させたい場合には <code>break</code>, <code>continue</code>, <code>else</code> が利用できます.</p>
<div class="note">
<ul>
<li><p><code>continue</code>: <code>continue</code> 後の処理を行わずに反復の最初に戻る</p></li>
<li><p><code>break</code>: 反復を抜け出す</p></li>
<li><p><code>else</code>: <code>break</code>以外で<code>while文</code>が終了したら実行</p></li>
</ul>
</div>
<p>例として,あなたはなんの動物か尋ねてニンゲンですと答えないと終わらない以下のような処理を作ってみます.</p>
<figure>
<img src="/images/while6.png" alt="whileのイメージ" />
<figcaption aria-hidden="true">whileのイメージ</figcaption>
</figure>
<div class="note">
<p>この処理はユーザーに「あなたはなんの動物ですか?(カタカナで回答)」と質問し,正しい答え「ニンゲン」を得るまで質問を繰り返します.</p>
<p>まず,answer変数にユーザーの入力を格納します.whileループを使って,answerが「ニンゲン」でない限りループを続けます.</p>
<p>もし,ユーザーが「ウチュウジン」と答えた場合,「本当に!? 怖いのでさようなら!」と表示し,<code>break</code>でループを終了します.</p>
<p>ユーザーが「カミサマ」と答えた場合,「わお!! 初めて会いました! … 馬鹿にしないでちゃんと答えてください!」と表示し,再度質問を行います.<code>continue</code>で反復の最初に戻ります.</p>
<p>「ニンゲン」「ウチュウジン」「カミサマ」以外の答えの場合,「嘘をつかないで! XXX は喋れません.」と表示し,再度質問を行います.</p>
<p>ループが「ニンゲン」の答えで終了すると,<code>else</code>で定義された「そうですよね!ニンゲンに決まっています!」と表示されます.</p>
<p>プログラムに直すと以下のようになります.
それぞれの行がどのような条件で実行されるのか, 確認してみましょう.</p>
</div>
<div class="sourceCode" id="cb34"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 先に変数を用意します</span></span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true" tabindex="-1"></a>answer <span class="op">=</span> <span class="bu">input</span>(<span class="st">&quot;あなたはなんの動物ですか?(カタカナで回答)</span><span class="ch">\n</span><span class="st">&quot;</span>)</span>
<span id="cb34-3"><a href="#cb34-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-4"><a href="#cb34-4" aria-hidden="true" tabindex="-1"></a><span class="co"># while文でニンゲンですと答えるまで終わらないプログラムを書きます</span></span>
<span id="cb34-5"><a href="#cb34-5" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> answer <span class="op">!=</span> <span class="st">&quot;ニンゲン&quot;</span>:</span>
<span id="cb34-6"><a href="#cb34-6" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 答えによっていろいろな反応を組み込んでみましょう</span></span>
<span id="cb34-7"><a href="#cb34-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> answer <span class="op">==</span> <span class="st">&quot;ウチュウジン&quot;</span>:</span>
<span id="cb34-8"><a href="#cb34-8" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;本当に!? 怖いのでさようなら!</span><span class="ch">\n</span><span class="st">&quot;</span>)</span>
<span id="cb34-9"><a href="#cb34-9" aria-hidden="true" tabindex="-1"></a>        <span class="co"># while ループを終了します</span></span>
<span id="cb34-10"><a href="#cb34-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">break</span></span>
<span id="cb34-11"><a href="#cb34-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-12"><a href="#cb34-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> answer <span class="op">==</span> <span class="st">&quot;カミサマ&quot;</span>:</span>
<span id="cb34-13"><a href="#cb34-13" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;わお!! 初めて会いました! ... 馬鹿にしないでちゃんと答えてください!&quot;</span>)</span>
<span id="cb34-14"><a href="#cb34-14" aria-hidden="true" tabindex="-1"></a>        <span class="co"># もう一度値を更新して,ループの最初に戻ります</span></span>
<span id="cb34-15"><a href="#cb34-15" aria-hidden="true" tabindex="-1"></a>        answer <span class="op">=</span> <span class="bu">input</span>(<span class="st">&quot;本当はあなたはなんの動物ですか?</span><span class="ch">\n</span><span class="st">&quot;</span>)</span>
<span id="cb34-16"><a href="#cb34-16" aria-hidden="true" tabindex="-1"></a>        <span class="cf">continue</span></span>
<span id="cb34-17"><a href="#cb34-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-18"><a href="#cb34-18" aria-hidden="true" tabindex="-1"></a>    <span class="co"># ニンゲンとウチュウジン,カミサマ以外は多分喋れないのでもう一度訪ねます</span></span>
<span id="cb34-19"><a href="#cb34-19" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb34-20"><a href="#cb34-20" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;嘘をつかないで!&quot;</span> <span class="op">+</span> answer <span class="op">+</span> <span class="st">&quot;は喋れません.&quot;</span>)</span>
<span id="cb34-21"><a href="#cb34-21" aria-hidden="true" tabindex="-1"></a>        <span class="co"># もう一度値を更新します</span></span>
<span id="cb34-22"><a href="#cb34-22" aria-hidden="true" tabindex="-1"></a>        answer <span class="op">=</span> <span class="bu">input</span>(<span class="st">&quot;本当はあなたはなんの動物ですか?</span><span class="ch">\n</span><span class="st">&quot;</span>)</span>
<span id="cb34-23"><a href="#cb34-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-24"><a href="#cb34-24" aria-hidden="true" tabindex="-1"></a>    <span class="co"># これはcontinue も breakもされなかった場合だけ実行されます</span></span>
<span id="cb34-25"><a href="#cb34-25" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&quot;今度は真面目に答えましたか?</span><span class="ch">\n</span><span class="st">&quot;</span>)</span>
<span id="cb34-26"><a href="#cb34-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-27"><a href="#cb34-27" aria-hidden="true" tabindex="-1"></a><span class="co"># breakで終わらなかった == ニンゲンだった場合の処理を書きます</span></span>
<span id="cb34-28"><a href="#cb34-28" aria-hidden="true" tabindex="-1"></a><span class="cf">else</span>:</span>
<span id="cb34-29"><a href="#cb34-29" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&quot;そうですよね!ニンゲンに決まっています!&quot;</span>)</span></code></pre></div>
<div class="note">
<ul>
<li>演習問題</li>
</ul>
<p>質問に対する回答をinput関数で受け取り,それに対して返答をする簡単なBotプログラムを作成してください. なお,分岐は最低5つ以上とすること.</p>
</div>
<h4 data-number="1.4.2.5" id="pandasにおけるfor文"><span class="header-section-number">1.4.2.5</span> <code>pandas</code>における<code>for文</code></h4>
<p>PandasのDataFrameの処理においても<code>for文</code>は良く利用されます.
例えば以下のようなデータについて考えてみます.</p>
<p>なお,こちらのデータは以下のコードで作成できます. コピーして使いましょう.</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb35-2"><a href="#cb35-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-3"><a href="#cb35-3" aria-hidden="true" tabindex="-1"></a>years <span class="op">=</span> [<span class="bu">str</span>(x) <span class="op">+</span> <span class="st">&#39;年&#39;</span> <span class="cf">for</span> x <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1800</span>,<span class="dv">1820</span>)]</span>
<span id="cb35-4"><a href="#cb35-4" aria-hidden="true" tabindex="-1"></a>values <span class="op">=</span> [<span class="st">&#39;101&#39;</span>,<span class="st">&#39;187&#39;</span>,<span class="st">&#39;150&#39;</span>,<span class="st">&#39;117&#39;</span>,<span class="st">&#39;&#39;</span>,<span class="st">&#39;168&#39;</span></span>
<span id="cb35-5"><a href="#cb35-5" aria-hidden="true" tabindex="-1"></a>         ,<span class="st">&#39;195&#39;</span>,<span class="st">&#39;140&#39;</span>,<span class="st">&#39;151&#39;</span>,<span class="st">&#39;123&#39;</span>,<span class="st">&#39;192&#39;</span>,<span class="st">&#39;137&#39;</span></span>
<span id="cb35-6"><a href="#cb35-6" aria-hidden="true" tabindex="-1"></a>         ,<span class="st">&#39;なし&#39;</span>,<span class="st">&#39;184&#39;</span>,<span class="st">&#39;136&#39;</span>,<span class="st">&#39;192&#39;</span>,<span class="st">&#39;150&#39;</span>,<span class="st">&#39;163&#39;</span>,<span class="st">&#39;141&#39;</span>,<span class="st">&#39;122&#39;</span>]</span>
<span id="cb35-7"><a href="#cb35-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-8"><a href="#cb35-8" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame({<span class="st">&#39;year&#39;</span>:years</span>
<span id="cb35-9"><a href="#cb35-9" aria-hidden="true" tabindex="-1"></a>                  ,<span class="st">&#39;value&#39;</span>:values})</span>
<span id="cb35-10"><a href="#cb35-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-11"><a href="#cb35-11" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span></code></pre></div>
<div class="sourceCode" id="cb36"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> python3 while_and_for.py</span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true" tabindex="-1"></a>     <span class="ex">year</span> value</span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>   1800年   101</span>
<span id="cb36-4"><a href="#cb36-4" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>   1801年   187</span>
<span id="cb36-5"><a href="#cb36-5" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>   1802年   150</span>
<span id="cb36-6"><a href="#cb36-6" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>   1803年   117</span>
<span id="cb36-7"><a href="#cb36-7" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>   1804年</span>
<span id="cb36-8"><a href="#cb36-8" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>   1805年   168</span>
<span id="cb36-9"><a href="#cb36-9" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>   1806年   195</span>
<span id="cb36-10"><a href="#cb36-10" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>   1807年   140</span>
<span id="cb36-11"><a href="#cb36-11" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>   1808年   151</span>
<span id="cb36-12"><a href="#cb36-12" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>   1809年   123</span>
<span id="cb36-13"><a href="#cb36-13" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>  1810年   192</span>
<span id="cb36-14"><a href="#cb36-14" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>  1811年   137</span>
<span id="cb36-15"><a href="#cb36-15" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>  1812年    なし</span>
<span id="cb36-16"><a href="#cb36-16" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>  1813年   184</span>
<span id="cb36-17"><a href="#cb36-17" aria-hidden="true" tabindex="-1"></a><span class="ex">14</span>  1814年   136</span>
<span id="cb36-18"><a href="#cb36-18" aria-hidden="true" tabindex="-1"></a><span class="ex">15</span>  1815年   192</span>
<span id="cb36-19"><a href="#cb36-19" aria-hidden="true" tabindex="-1"></a><span class="ex">16</span>  1816年   150</span>
<span id="cb36-20"><a href="#cb36-20" aria-hidden="true" tabindex="-1"></a><span class="ex">17</span>  1817年   163</span>
<span id="cb36-21"><a href="#cb36-21" aria-hidden="true" tabindex="-1"></a><span class="ex">18</span>  1818年   141</span>
<span id="cb36-22"><a href="#cb36-22" aria-hidden="true" tabindex="-1"></a><span class="ex">19</span>  1819年   122</span></code></pre></div>
<p>このデータは<code>year</code>列に<code>'年'</code>がついており,<code>value</code>列に空白や<code>'なし'</code>があります.こういったデータを数値として処理できるようにすることを考えてみましょう.
まずは,<code>print(df.dtypes)</code>でそれぞれのデータ型を確認して見ましょう.</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true" tabindex="-1"></a><span class="ex">year</span>     object</span>
<span id="cb37-2"><a href="#cb37-2" aria-hidden="true" tabindex="-1"></a><span class="ex">value</span>    object</span>
<span id="cb37-3"><a href="#cb37-3" aria-hidden="true" tabindex="-1"></a><span class="ex">dtype:</span> object</span></code></pre></div>
<p>すべて文字列型であることが分かります.</p>
<p>このまま,<code>year</code>列を<code>astype()</code>を利用して<code>int</code>型に変換してみます.</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb38-1"><a href="#cb38-1" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;year&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;year&#39;</span>].astype(<span class="st">&#39;int&#39;</span>)</span></code></pre></div>
<div class="sourceCode" id="cb39"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb39-1"><a href="#cb39-1" aria-hidden="true" tabindex="-1"></a><span class="ex">Traceback</span> <span class="er">(</span><span class="ex">most</span> recent call last<span class="kw">)</span><span class="bu">:</span></span>
<span id="cb39-2"><a href="#cb39-2" aria-hidden="true" tabindex="-1"></a>  <span class="ex">File</span> <span class="st">&quot;/Users/akagi/Documents/Programs/Python/slds/while_and_for.py&quot;</span>, line 74, in <span class="op">&lt;</span>module<span class="op">&gt;</span></span>
<span id="cb39-3"><a href="#cb39-3" aria-hidden="true" tabindex="-1"></a>    <span class="va">df</span><span class="op">[</span><span class="st">&#39;year&#39;</span><span class="op">]</span> <span class="ex">=</span> df<span class="pp">[</span><span class="st">&#39;year&#39;</span><span class="pp">]</span>.astype<span class="er">(</span><span class="st">&#39;int&#39;</span><span class="kw">)</span></span>
<span id="cb39-4"><a href="#cb39-4" aria-hidden="true" tabindex="-1"></a>                 <span class="ex">^^^^^^^^^^^^^^^^^^^^^^^^</span></span>
<span id="cb39-5"><a href="#cb39-5" aria-hidden="true" tabindex="-1"></a><span class="ex">ValueError:</span> invalid literal for int<span class="er">(</span><span class="kw">)</span> <span class="ex">with</span> base 10: <span class="st">&#39;1800年&#39;</span></span></code></pre></div>
<p><code>年</code>の部分が数値に変換出来ないというエラーが出ます.
では,<code>year</code>列から<code>'年'</code>を除外してみましょう.</p>
<p>先程の<code>df['year'] = df['year'].astype('int')</code>をコメントアウトしてから,以下を実行してみましょう.</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb40-1"><a href="#cb40-1" aria-hidden="true" tabindex="-1"></a><span class="co"># ------------------------------------------------</span></span>
<span id="cb40-2"><a href="#cb40-2" aria-hidden="true" tabindex="-1"></a><span class="co"># year列をInt型にする</span></span>
<span id="cb40-3"><a href="#cb40-3" aria-hidden="true" tabindex="-1"></a><span class="co"># ------------------------------------------------</span></span>
<span id="cb40-4"><a href="#cb40-4" aria-hidden="true" tabindex="-1"></a><span class="co"># year列から&quot;年&quot;を抜かす</span></span>
<span id="cb40-5"><a href="#cb40-5" aria-hidden="true" tabindex="-1"></a><span class="co"># 上から順番に処理するので</span></span>
<span id="cb40-6"><a href="#cb40-6" aria-hidden="true" tabindex="-1"></a><span class="co"># 行番号をdf.indexで取得</span></span>
<span id="cb40-7"><a href="#cb40-7" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> df.index:</span>
<span id="cb40-8"><a href="#cb40-8" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 一番右の文字をなくせば良い</span></span>
<span id="cb40-9"><a href="#cb40-9" aria-hidden="true" tabindex="-1"></a>    df.at[i, <span class="st">&#39;year&#39;</span>] <span class="op">=</span> df.at[i, <span class="st">&#39;year&#39;</span>][:<span class="op">-</span><span class="dv">1</span>]</span>
<span id="cb40-10"><a href="#cb40-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb40-11"><a href="#cb40-11" aria-hidden="true" tabindex="-1"></a><span class="co"># 確認してみる</span></span>
<span id="cb40-12"><a href="#cb40-12" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;year&#39;</span>])</span>
<span id="cb40-13"><a href="#cb40-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb40-14"><a href="#cb40-14" aria-hidden="true" tabindex="-1"></a><span class="co"># 年が消えたので,変換してみる</span></span>
<span id="cb40-15"><a href="#cb40-15" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;year&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;year&#39;</span>].astype(<span class="bu">int</span>)</span>
<span id="cb40-16"><a href="#cb40-16" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;year&#39;</span>].dtype) <span class="co">#int64</span></span></code></pre></div>
<div class="sourceCode" id="cb41"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb41-1"><a href="#cb41-1" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>     1800</span>
<span id="cb41-2"><a href="#cb41-2" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>     1801</span>
<span id="cb41-3"><a href="#cb41-3" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>     1802</span>
<span id="cb41-4"><a href="#cb41-4" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>     1803</span>
<span id="cb41-5"><a href="#cb41-5" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>     1804</span>
<span id="cb41-6"><a href="#cb41-6" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>     1805</span>
<span id="cb41-7"><a href="#cb41-7" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>     1806</span>
<span id="cb41-8"><a href="#cb41-8" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>     1807</span>
<span id="cb41-9"><a href="#cb41-9" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>     1808</span>
<span id="cb41-10"><a href="#cb41-10" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>     1809</span>
<span id="cb41-11"><a href="#cb41-11" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>    1810</span>
<span id="cb41-12"><a href="#cb41-12" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>    1811</span>
<span id="cb41-13"><a href="#cb41-13" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>    1812</span>
<span id="cb41-14"><a href="#cb41-14" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>    1813</span>
<span id="cb41-15"><a href="#cb41-15" aria-hidden="true" tabindex="-1"></a><span class="ex">14</span>    1814</span>
<span id="cb41-16"><a href="#cb41-16" aria-hidden="true" tabindex="-1"></a><span class="ex">15</span>    1815</span>
<span id="cb41-17"><a href="#cb41-17" aria-hidden="true" tabindex="-1"></a><span class="ex">16</span>    1816</span>
<span id="cb41-18"><a href="#cb41-18" aria-hidden="true" tabindex="-1"></a><span class="ex">17</span>    1817</span>
<span id="cb41-19"><a href="#cb41-19" aria-hidden="true" tabindex="-1"></a><span class="ex">18</span>    1818</span>
<span id="cb41-20"><a href="#cb41-20" aria-hidden="true" tabindex="-1"></a><span class="ex">19</span>    1819</span>
<span id="cb41-21"><a href="#cb41-21" aria-hidden="true" tabindex="-1"></a><span class="ex">Name:</span> year, dtype: object</span>
<span id="cb41-22"><a href="#cb41-22" aria-hidden="true" tabindex="-1"></a><span class="ex">int64</span></span></code></pre></div>
<p>上手く数値に変換できたようです.</p>
<p>続いて,<code>value</code>列を数値のみにして<code>float</code>型にしてみましょう.</p>
<p>こちらも同じように<code>df['value'] = df['value'].astype(float)</code>ではエラー(<code>ValueError: could not convert string to float: 'なし'</code>)が出ます.</p>
<p>色々方法はありますが,<code>NaN</code>と<code>'なし'</code>の列は適当な値(<code>150</code>)を入れることにしてみましょう.
数値に変換できる場合に<code>True</code>を返す<code>str.isdecimal()</code>を利用して,上から一つひとつ数値に変換可能か識別して,できない場合”150”を入れてみます.</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb42-1"><a href="#cb42-1" aria-hidden="true" tabindex="-1"></a><span class="co"># ------------------------------------------------</span></span>
<span id="cb42-2"><a href="#cb42-2" aria-hidden="true" tabindex="-1"></a><span class="co"># value列をfloat型にする</span></span>
<span id="cb42-3"><a href="#cb42-3" aria-hidden="true" tabindex="-1"></a><span class="co"># ------------------------------------------------</span></span>
<span id="cb42-4"><a href="#cb42-4" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> df.index:</span>
<span id="cb42-5"><a href="#cb42-5" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 数値型に変換可能か調べるには</span></span>
<span id="cb42-6"><a href="#cb42-6" aria-hidden="true" tabindex="-1"></a>    <span class="co"># isdecimal関数を使う</span></span>
<span id="cb42-7"><a href="#cb42-7" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 変換可能でない場合&#39;150&#39;を入れる</span></span>
<span id="cb42-8"><a href="#cb42-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="kw">not</span>(<span class="bu">str</span>.isdecimal(df.at[i, <span class="st">&#39;value&#39;</span>])):</span>
<span id="cb42-9"><a href="#cb42-9" aria-hidden="true" tabindex="-1"></a>        df.at[i, <span class="st">&#39;value&#39;</span>] <span class="op">=</span> <span class="st">&#39;150&#39;</span></span>
<span id="cb42-10"><a href="#cb42-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb42-11"><a href="#cb42-11" aria-hidden="true" tabindex="-1"></a><span class="co"># 確認</span></span>
<span id="cb42-12"><a href="#cb42-12" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;value&#39;</span>])</span></code></pre></div>
<div class="sourceCode" id="cb43"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb43-1"><a href="#cb43-1" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>     101</span>
<span id="cb43-2"><a href="#cb43-2" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>     187</span>
<span id="cb43-3"><a href="#cb43-3" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>     150</span>
<span id="cb43-4"><a href="#cb43-4" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>     117</span>
<span id="cb43-5"><a href="#cb43-5" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>     150</span>
<span id="cb43-6"><a href="#cb43-6" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>     168</span>
<span id="cb43-7"><a href="#cb43-7" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>     195</span>
<span id="cb43-8"><a href="#cb43-8" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>     140</span>
<span id="cb43-9"><a href="#cb43-9" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>     151</span>
<span id="cb43-10"><a href="#cb43-10" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>     123</span>
<span id="cb43-11"><a href="#cb43-11" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>    192</span>
<span id="cb43-12"><a href="#cb43-12" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>    137</span>
<span id="cb43-13"><a href="#cb43-13" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>    150</span>
<span id="cb43-14"><a href="#cb43-14" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>    184</span>
<span id="cb43-15"><a href="#cb43-15" aria-hidden="true" tabindex="-1"></a><span class="ex">14</span>    136</span>
<span id="cb43-16"><a href="#cb43-16" aria-hidden="true" tabindex="-1"></a><span class="ex">15</span>    192</span>
<span id="cb43-17"><a href="#cb43-17" aria-hidden="true" tabindex="-1"></a><span class="ex">16</span>    150</span>
<span id="cb43-18"><a href="#cb43-18" aria-hidden="true" tabindex="-1"></a><span class="ex">17</span>    163</span>
<span id="cb43-19"><a href="#cb43-19" aria-hidden="true" tabindex="-1"></a><span class="ex">18</span>    141</span>
<span id="cb43-20"><a href="#cb43-20" aria-hidden="true" tabindex="-1"></a><span class="ex">19</span>    122</span>
<span id="cb43-21"><a href="#cb43-21" aria-hidden="true" tabindex="-1"></a><span class="ex">Name:</span> value, dtype: object</span></code></pre></div>
<p>無事に数値に変換できました.</p>
<p>このように, <code>pandas</code>ではイテラブルオブジェクトとして<code>index</code>や<code>columns</code>を利用し,<code>.at[]</code>などを利用してデータを編集する必要がある場合が多いです.
<code>pandas</code>で<code>for文</code>,<code>if文</code>などの組み合わせた処理に慣れておきましょう.</p>
<p>もう少し複雑な例についても見てみましょう. 以下のDataFrameにおいて,グループ別の平均点を求めてみましょう.</p>
<div class="sourceCode" id="cb44"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb44-1"><a href="#cb44-1" aria-hidden="true" tabindex="-1"></a>data <span class="op">=</span>  {<span class="st">&#39;group&#39;</span>: [<span class="dv">5</span>, <span class="dv">5</span>, <span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">1</span>, <span class="dv">5</span>, <span class="dv">4</span>, <span class="dv">3</span>, <span class="dv">2</span>, <span class="dv">1</span></span>
<span id="cb44-2"><a href="#cb44-2" aria-hidden="true" tabindex="-1"></a>                  , <span class="dv">5</span>, <span class="dv">3</span>, <span class="dv">4</span>, <span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">4</span>, <span class="dv">5</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span></span>
<span id="cb44-3"><a href="#cb44-3" aria-hidden="true" tabindex="-1"></a>                  , <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">4</span>, <span class="dv">4</span>, <span class="dv">3</span>, <span class="dv">4</span>, <span class="dv">4</span>]</span>
<span id="cb44-4"><a href="#cb44-4" aria-hidden="true" tabindex="-1"></a>        ,<span class="st">&#39;points&#39;</span>: [ <span class="dv">45</span>, <span class="dv">23</span>, <span class="dv">58</span>, <span class="dv">96</span>, <span class="dv">38</span>, <span class="dv">41</span>, <span class="dv">33</span>, <span class="dv">30</span>, <span class="dv">82</span>, <span class="dv">42</span></span>
<span id="cb44-5"><a href="#cb44-5" aria-hidden="true" tabindex="-1"></a>                   , <span class="dv">42</span>, <span class="dv">89</span>, <span class="dv">66</span>, <span class="dv">94</span>, <span class="dv">25</span>, <span class="dv">36</span>, <span class="dv">52</span>, <span class="dv">40</span>, <span class="dv">93</span>, <span class="dv">80</span></span>
<span id="cb44-6"><a href="#cb44-6" aria-hidden="true" tabindex="-1"></a>                   , <span class="dv">44</span>, <span class="dv">39</span>, <span class="dv">79</span>, <span class="dv">67</span>, <span class="dv">38</span>, <span class="dv">43</span>, <span class="dv">100</span>, <span class="dv">62</span>, <span class="dv">54</span>]}</span>
<span id="cb44-7"><a href="#cb44-7" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame(data)</span>
<span id="cb44-8"><a href="#cb44-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span></code></pre></div>
<div class="sourceCode" id="cb45"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb45-1"><a href="#cb45-1" aria-hidden="true" tabindex="-1"></a>    <span class="ex">group</span>  points</span>
<span id="cb45-2"><a href="#cb45-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>       5      45</span>
<span id="cb45-3"><a href="#cb45-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>       5      23</span>
<span id="cb45-4"><a href="#cb45-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>       1      58</span>
<span id="cb45-5"><a href="#cb45-5" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>       2      96</span>
<span id="cb45-6"><a href="#cb45-6" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>       1      38</span>
<span id="cb45-7"><a href="#cb45-7" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>       5      41</span>
<span id="cb45-8"><a href="#cb45-8" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>       4      33</span>
<span id="cb45-9"><a href="#cb45-9" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>       3      30</span>
<span id="cb45-10"><a href="#cb45-10" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>       2      82</span>
<span id="cb45-11"><a href="#cb45-11" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>       1      42</span>
<span id="cb45-12"><a href="#cb45-12" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>      5      42</span>
<span id="cb45-13"><a href="#cb45-13" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>      3      89</span>
<span id="cb45-14"><a href="#cb45-14" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>      4      66</span>
<span id="cb45-15"><a href="#cb45-15" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>      1      94</span>
<span id="cb45-16"><a href="#cb45-16" aria-hidden="true" tabindex="-1"></a><span class="ex">14</span>      2      25</span>
<span id="cb45-17"><a href="#cb45-17" aria-hidden="true" tabindex="-1"></a><span class="ex">15</span>      4      36</span>
<span id="cb45-18"><a href="#cb45-18" aria-hidden="true" tabindex="-1"></a><span class="ex">16</span>      5      52</span>
<span id="cb45-19"><a href="#cb45-19" aria-hidden="true" tabindex="-1"></a><span class="ex">17</span>      1      40</span>
<span id="cb45-20"><a href="#cb45-20" aria-hidden="true" tabindex="-1"></a><span class="ex">18</span>      1      93</span>
<span id="cb45-21"><a href="#cb45-21" aria-hidden="true" tabindex="-1"></a><span class="ex">19</span>      1      80</span>
<span id="cb45-22"><a href="#cb45-22" aria-hidden="true" tabindex="-1"></a><span class="ex">20</span>      2      44</span>
<span id="cb45-23"><a href="#cb45-23" aria-hidden="true" tabindex="-1"></a><span class="ex">21</span>      3      39</span>
<span id="cb45-24"><a href="#cb45-24" aria-hidden="true" tabindex="-1"></a><span class="ex">22</span>      1      79</span>
<span id="cb45-25"><a href="#cb45-25" aria-hidden="true" tabindex="-1"></a><span class="ex">23</span>      2      67</span>
<span id="cb45-26"><a href="#cb45-26" aria-hidden="true" tabindex="-1"></a><span class="ex">24</span>      4      38</span>
<span id="cb45-27"><a href="#cb45-27" aria-hidden="true" tabindex="-1"></a><span class="ex">25</span>      4      43</span>
<span id="cb45-28"><a href="#cb45-28" aria-hidden="true" tabindex="-1"></a><span class="ex">26</span>      3     100</span>
<span id="cb45-29"><a href="#cb45-29" aria-hidden="true" tabindex="-1"></a><span class="ex">27</span>      4      62</span>
<span id="cb45-30"><a href="#cb45-30" aria-hidden="true" tabindex="-1"></a><span class="ex">28</span>      4      54</span></code></pre></div>
<p>一度, 以下の解答例を見ずに,自分でフローチャートとプログラムを考えてみましょう.</p>
<ul>
<li><h2 id="回答例">回答例</h2></li>
</ul>
<div class="note">
<p>このような処理のプログラムが書けるかどうかは,どのような手順でデータを操作するかをイメージできるかで決まります. これは,プログラミングの文法知識などの問題ではなく,パズルを解くようないわゆる論理的思考や,プログラミング的思考と呼ばれる能力です.</p>
<p>こういった処理を｢どのようにしたら思いつくことができるのか｣はなかなか教えるのが難しいのですが,一つの手順として,<strong>一旦プログラムのことは忘れて,紙と鉛筆でどのように同じ問題を解くかを考えてみる</strong>というのが有効な場合があります.プログラムになれると,直接プログラムで記述することが出来るようになります. しかし,プログラム的思考に慣れていない人はそもそも何をすればいいのかわからないのでプログラムが書けません.</p>
<p>何をすればいいのか皆目検討がつかないという人は, 自分が,紙と鉛筆でどのように解くのかを考えて,それをアルゴリズムに変更し,プログラムに直すという手順を踏んでみましょう.</p>
</div>
<p>求めなければならないものをまずはイメージしてみましょう.求めるものは,以下のように,グループごとの値の合計値をグループの数で割ったものです.</p>
<figure>
<img src="/images/average_by_group.png" alt="問題のイメージ" />
<figcaption aria-hidden="true">問題のイメージ</figcaption>
</figure>
<p>この問題を紙と鉛筆で求める場合,どのような方法があるでしょうか.</p>
<p>一例として,上から1行ずつデータを確認し,グループ別に<code>points</code>の値をメモする. すべての行を記録し終えたら,グループ別のメモの値を合計値とデータの数を求めて,平均値を計算するという方法でやってみましょう.
小学生でも順番を守れば可能な方法ですね.</p>
<figure>
<img src="/images/average_by_group2.png" alt="解き方のイメージ" />
<figcaption aria-hidden="true">解き方のイメージ</figcaption>
</figure>
<p>まず,グループ別のメモをする場所を作成します.どのようなデータ型でも構いませんが,ここでは辞書型で作成してみます.</p>
<div class="sourceCode" id="cb46"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb46-1"><a href="#cb46-1" aria-hidden="true" tabindex="-1"></a>memo <span class="op">=</span> {<span class="dv">1</span>:[]</span>
<span id="cb46-2"><a href="#cb46-2" aria-hidden="true" tabindex="-1"></a>       ,<span class="dv">2</span>:[]</span>
<span id="cb46-3"><a href="#cb46-3" aria-hidden="true" tabindex="-1"></a>       ,<span class="dv">3</span>:[]</span>
<span id="cb46-4"><a href="#cb46-4" aria-hidden="true" tabindex="-1"></a>       ,<span class="dv">4</span>:[]</span>
<span id="cb46-5"><a href="#cb46-5" aria-hidden="true" tabindex="-1"></a>       ,<span class="dv">5</span>:[]}</span></code></pre></div>
<p>データを1行ずつ確認し,メモ帳に記録していきます.</p>
<div class="sourceCode" id="cb47"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb47-1"><a href="#cb47-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> df.index:</span>
<span id="cb47-2"><a href="#cb47-2" aria-hidden="true" tabindex="-1"></a>    memo[df.at[i,<span class="st">&#39;group&#39;</span>]] <span class="op">+=</span> [df.at[i,<span class="st">&#39;points&#39;</span>]]</span>
<span id="cb47-3"><a href="#cb47-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb47-4"><a href="#cb47-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(memo)</span>
<span id="cb47-5"><a href="#cb47-5" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb47-6"><a href="#cb47-6" aria-hidden="true" tabindex="-1"></a><span class="co">{ 1: [58, 38, 42, 94, 40, 93, 80, 79]</span></span>
<span id="cb47-7"><a href="#cb47-7" aria-hidden="true" tabindex="-1"></a><span class="co">, 2: [96, 82, 25, 44, 67]</span></span>
<span id="cb47-8"><a href="#cb47-8" aria-hidden="true" tabindex="-1"></a><span class="co">, 3: [30, 89, 39, 100]</span></span>
<span id="cb47-9"><a href="#cb47-9" aria-hidden="true" tabindex="-1"></a><span class="co">, 4: [33, 66, 36, 38, 43, 62, 54]</span></span>
<span id="cb47-10"><a href="#cb47-10" aria-hidden="true" tabindex="-1"></a><span class="co">, 5: [45, 23, 41, 42, 52]}</span></span>
<span id="cb47-11"><a href="#cb47-11" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>記録したメモを元に,一つひとつ合計値とデータ数を求め,平均値を計算してみます.</p>
<div class="sourceCode" id="cb48"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb48-1"><a href="#cb48-1" aria-hidden="true" tabindex="-1"></a><span class="co">#グループ1からグループ5まで順番に作業する</span></span>
<span id="cb48-2"><a href="#cb48-2" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">6</span>):</span>
<span id="cb48-3"><a href="#cb48-3" aria-hidden="true" tabindex="-1"></a>    total <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb48-4"><a href="#cb48-4" aria-hidden="true" tabindex="-1"></a>    length <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb48-5"><a href="#cb48-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">#グループ別のリストを足していく</span></span>
<span id="cb48-6"><a href="#cb48-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> x <span class="kw">in</span> memo[i]:</span>
<span id="cb48-7"><a href="#cb48-7" aria-hidden="true" tabindex="-1"></a>        total <span class="op">+=</span> x</span>
<span id="cb48-8"><a href="#cb48-8" aria-hidden="true" tabindex="-1"></a>        length <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb48-9"><a href="#cb48-9" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f&#39;group:</span><span class="sc">{</span>i<span class="sc">}</span><span class="ss">, mean:</span><span class="sc">{</span>total<span class="op">/</span>length<span class="sc">}</span><span class="ss">&#39;</span>)</span>
<span id="cb48-10"><a href="#cb48-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb48-11"><a href="#cb48-11" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb48-12"><a href="#cb48-12" aria-hidden="true" tabindex="-1"></a><span class="co">group:1, mean:65.5</span></span>
<span id="cb48-13"><a href="#cb48-13" aria-hidden="true" tabindex="-1"></a><span class="co">group:2, mean:62.8</span></span>
<span id="cb48-14"><a href="#cb48-14" aria-hidden="true" tabindex="-1"></a><span class="co">group:3, mean:64.5</span></span>
<span id="cb48-15"><a href="#cb48-15" aria-hidden="true" tabindex="-1"></a><span class="co">group:4, mean:47.42857142857143</span></span>
<span id="cb48-16"><a href="#cb48-16" aria-hidden="true" tabindex="-1"></a><span class="co">group:5, mean:40.6</span></span>
<span id="cb48-17"><a href="#cb48-17" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>これで無事に,グループ別のデータが求められました.
当然,もっと効率的で,簡単に計算する方法は沢山あります. 似た問題を検索し特定のメソッドを利用したり,AIに聞くことで,何も考えずに計算することも可能です.</p>
<p>例えば, 先程の平均値の計算部分に関しては,組み込み関数の<code>sum()</code>や<code>len()</code>を利用することで,自分で書かなくても計算が可能です.</p>
<div class="sourceCode" id="cb49"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb49-1"><a href="#cb49-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">6</span>):</span>
<span id="cb49-2"><a href="#cb49-2" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f&#39;group:</span><span class="sc">{</span>i<span class="sc">}</span><span class="ss">,mean:</span><span class="sc">{</span><span class="bu">sum</span>(memo[i])<span class="op">/</span><span class="bu">len</span>(memo[i])<span class="sc">}</span><span class="ss">&#39;</span>)</span>
<span id="cb49-3"><a href="#cb49-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb49-4"><a href="#cb49-4" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb49-5"><a href="#cb49-5" aria-hidden="true" tabindex="-1"></a><span class="co">group:1,mean:65.5</span></span>
<span id="cb49-6"><a href="#cb49-6" aria-hidden="true" tabindex="-1"></a><span class="co">group:2,mean:62.8</span></span>
<span id="cb49-7"><a href="#cb49-7" aria-hidden="true" tabindex="-1"></a><span class="co">group:3,mean:64.5</span></span>
<span id="cb49-8"><a href="#cb49-8" aria-hidden="true" tabindex="-1"></a><span class="co">group:4,mean:47.42857142857143</span></span>
<span id="cb49-9"><a href="#cb49-9" aria-hidden="true" tabindex="-1"></a><span class="co">group:5,mean:40.6</span></span>
<span id="cb49-10"><a href="#cb49-10" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>また,以前扱った条件抽出を使えば,一つ一つデータを集める必要もありません. 以下の3行で同じことが可能です.</p>
<div class="sourceCode" id="cb50"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb50-1"><a href="#cb50-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">6</span>):</span>
<span id="cb50-2"><a href="#cb50-2" aria-hidden="true" tabindex="-1"></a>    group_mean <span class="op">=</span> df[df[<span class="st">&#39;group&#39;</span>] <span class="op">==</span> i][<span class="st">&#39;points&#39;</span>].mean()</span>
<span id="cb50-3"><a href="#cb50-3" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f&#39;group:</span><span class="sc">{</span>i<span class="sc">}</span><span class="ss">,mean:</span><span class="sc">{</span>group_mean<span class="sc">}</span><span class="ss">&#39;</span>)</span>
<span id="cb50-4"><a href="#cb50-4" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb50-5"><a href="#cb50-5" aria-hidden="true" tabindex="-1"></a><span class="co">group:1,mean:65.5</span></span>
<span id="cb50-6"><a href="#cb50-6" aria-hidden="true" tabindex="-1"></a><span class="co">group:2,mean:62.8</span></span>
<span id="cb50-7"><a href="#cb50-7" aria-hidden="true" tabindex="-1"></a><span class="co">group:3,mean:64.5</span></span>
<span id="cb50-8"><a href="#cb50-8" aria-hidden="true" tabindex="-1"></a><span class="co">group:4,mean:47.42857142857143</span></span>
<span id="cb50-9"><a href="#cb50-9" aria-hidden="true" tabindex="-1"></a><span class="co">group:5,mean:40.6</span></span>
<span id="cb50-10"><a href="#cb50-10" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>更に,<code>pandas</code>の<code>.groupby()</code>メソッドを使えば,1行で同じような処理が可能です.</p>
<div class="sourceCode" id="cb51"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb51-1"><a href="#cb51-1" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.groupby(<span class="st">&#39;group&#39;</span>).mean())</span>
<span id="cb51-2"><a href="#cb51-2" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb51-3"><a href="#cb51-3" aria-hidden="true" tabindex="-1"></a><span class="co">         points</span></span>
<span id="cb51-4"><a href="#cb51-4" aria-hidden="true" tabindex="-1"></a><span class="co">group</span></span>
<span id="cb51-5"><a href="#cb51-5" aria-hidden="true" tabindex="-1"></a><span class="co">1      65.500000</span></span>
<span id="cb51-6"><a href="#cb51-6" aria-hidden="true" tabindex="-1"></a><span class="co">2      62.800000</span></span>
<span id="cb51-7"><a href="#cb51-7" aria-hidden="true" tabindex="-1"></a><span class="co">3      64.500000</span></span>
<span id="cb51-8"><a href="#cb51-8" aria-hidden="true" tabindex="-1"></a><span class="co">4      47.428571</span></span>
<span id="cb51-9"><a href="#cb51-9" aria-hidden="true" tabindex="-1"></a><span class="co">5      40.600000</span></span>
<span id="cb51-10"><a href="#cb51-10" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>しかし,そのような方法ではいつまでたっても自分でプログラムが書けるようにはなりません.また,便利なメソッドが使えても,その背後で何をしているのかを理解していないと,計算した値の意味を理解したり,正しく利用することができません.</p>
<p>まずは自分の頭でどのように処理することで,求めたい値が計算できるのかの手順を考えて,プログラムが書けるようになったあとで,便利なメソッドなどの利用法を覚えることをおすすめします.</p>
<h4 data-number="1.4.2.6" id="発展-高階関数"><span class="header-section-number">1.4.2.6</span> 発展: 高階関数</h4>
<p>Pythonで反復を実現するもう一つの方法として<strong>高階関数</strong>があります.高階関数とは,関数を引数にとる関数であり,こちらも関数型言語から取り入れられ,<code>pandas</code>において<strong>各行に同じ処理を適用したい場合</strong>に良く用いられます.</p>
<p>本資料ではまだ,関数に関して扱っていませんが,発展的内容としてここだけで完結する範囲で簡単に説明します.
興味がある方は, 関数を学んだあとにもう一度こちらを見てみると理解が深まるかもしれません.</p>
<p>以下の<code>DataFrame</code>を事例に考えてみましょう.</p>
<div class="sourceCode" id="cb52"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb52-1"><a href="#cb52-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame({<span class="st">&#39;kind&#39;</span>:[<span class="st">&#39;cat&#39;</span>,<span class="st">&#39;dog&#39;</span>,<span class="st">&#39;fish&#39;</span>]</span>
<span id="cb52-2"><a href="#cb52-2" aria-hidden="true" tabindex="-1"></a>                  ,<span class="st">&#39;weight&#39;</span>:[<span class="dv">30</span>,<span class="dv">20</span>,<span class="dv">10</span>]})</span>
<span id="cb52-3"><a href="#cb52-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb52-4"><a href="#cb52-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb52-5"><a href="#cb52-5" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb52-6"><a href="#cb52-6" aria-hidden="true" tabindex="-1"></a><span class="co">   kind  weight</span></span>
<span id="cb52-7"><a href="#cb52-7" aria-hidden="true" tabindex="-1"></a><span class="co">0   cat      30</span></span>
<span id="cb52-8"><a href="#cb52-8" aria-hidden="true" tabindex="-1"></a><span class="co">1   dog      20</span></span>
<span id="cb52-9"><a href="#cb52-9" aria-hidden="true" tabindex="-1"></a><span class="co">2  fish      10</span></span>
<span id="cb52-10"><a href="#cb52-10" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>このデータの<code>kind列</code>を大文字にすることを考えてみましょう.
<code>for文</code>を利用すると以下のようになりますね.</p>
<div class="sourceCode" id="cb53"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb53-1"><a href="#cb53-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> df.index:</span>
<span id="cb53-2"><a href="#cb53-2" aria-hidden="true" tabindex="-1"></a>    df.at[i,<span class="st">&#39;kind&#39;</span>] <span class="op">=</span> df.at[i,<span class="st">&#39;kind&#39;</span>].upper()</span>
<span id="cb53-3"><a href="#cb53-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb53-4"><a href="#cb53-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb53-5"><a href="#cb53-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb53-6"><a href="#cb53-6" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb53-7"><a href="#cb53-7" aria-hidden="true" tabindex="-1"></a><span class="co">   kind  weight</span></span>
<span id="cb53-8"><a href="#cb53-8" aria-hidden="true" tabindex="-1"></a><span class="co">0   CAT      30</span></span>
<span id="cb53-9"><a href="#cb53-9" aria-hidden="true" tabindex="-1"></a><span class="co">1   DOG      20</span></span>
<span id="cb53-10"><a href="#cb53-10" aria-hidden="true" tabindex="-1"></a><span class="co">2  FISH      10</span></span>
<span id="cb53-11"><a href="#cb53-11" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>この処理を,高階関数<code>map()</code>を利用すると,以下のようになります.</p>
<div class="sourceCode" id="cb54"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb54-1"><a href="#cb54-1" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;kind&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;kind&#39;</span>].<span class="bu">map</span>(<span class="kw">lambda</span> x : x.upper())</span>
<span id="cb54-2"><a href="#cb54-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb54-3"><a href="#cb54-3" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb54-4"><a href="#cb54-4" aria-hidden="true" tabindex="-1"></a><span class="co">   kind  weight</span></span>
<span id="cb54-5"><a href="#cb54-5" aria-hidden="true" tabindex="-1"></a><span class="co">0   CAT      30</span></span>
<span id="cb54-6"><a href="#cb54-6" aria-hidden="true" tabindex="-1"></a><span class="co">1   DOG      20</span></span>
<span id="cb54-7"><a href="#cb54-7" aria-hidden="true" tabindex="-1"></a><span class="co">2  FISH      10</span></span>
<span id="cb54-8"><a href="#cb54-8" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p><code>map()</code>は,与えられた<code>DataFrame</code>の列(<code>DataSeries</code>)の各行に対して,<code>()</code>内の処理を適用した結果を返す高階関数です.</p>
<p><code>lambda x: x.upper()</code>を<code>無名関数</code>や<code>ラムダ式</code>といい, <code>lambda 変数: 変数に適用したい処理</code>の形で書きます. 今は,<code>DataSeries</code>の各行を<code>x</code>として,その<code>x</code>に<code>.upper()</code>を適用しています.</p>
<p><code>条件に合致する場合の処理 if 条件 else 合致しない場合の処理</code> と書くことで条件を加えることも可能です.</p>
<p>以下の例では, <code>weight</code>列の値が<code>15</code>より大きければ2倍するという処理を行っています.</p>
<div class="sourceCode" id="cb55"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb55-1"><a href="#cb55-1" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;weight&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;weight&#39;</span>].<span class="bu">map</span>(<span class="kw">lambda</span> x: x<span class="op">*</span><span class="dv">2</span> <span class="cf">if</span> x <span class="op">&gt;</span> <span class="dv">15</span> <span class="cf">else</span> x)</span>
<span id="cb55-2"><a href="#cb55-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb55-3"><a href="#cb55-3" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span>
<span id="cb55-4"><a href="#cb55-4" aria-hidden="true" tabindex="-1"></a><span class="co">   kind  weight</span></span>
<span id="cb55-5"><a href="#cb55-5" aria-hidden="true" tabindex="-1"></a><span class="co">0   CAT      60</span></span>
<span id="cb55-6"><a href="#cb55-6" aria-hidden="true" tabindex="-1"></a><span class="co">1   DOG      40</span></span>
<span id="cb55-7"><a href="#cb55-7" aria-hidden="true" tabindex="-1"></a><span class="co">2  FISH      10</span></span>
<span id="cb55-8"><a href="#cb55-8" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>
<p>高階関数を使った処理は,<code>for文</code>より簡潔に書けて,かつ処理速度も高速です. 機会があれば積極的に使ってみましょう.</p>
<p>例えば,先程の以下のDataFrameで,<code>year列</code>から年を削除し,<code>value列</code>の空白を<code>150</code>に置き換える処理は高階関数を利用すると以下のように書けます.</p>
<div class="sourceCode" id="cb56"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb56-1"><a href="#cb56-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb56-2"><a href="#cb56-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb56-3"><a href="#cb56-3" aria-hidden="true" tabindex="-1"></a>years <span class="op">=</span> [<span class="bu">str</span>(x) <span class="op">+</span> <span class="st">&#39;年&#39;</span> <span class="cf">for</span> x <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1800</span>,<span class="dv">1820</span>)]</span>
<span id="cb56-4"><a href="#cb56-4" aria-hidden="true" tabindex="-1"></a>values <span class="op">=</span> [<span class="st">&#39;101&#39;</span>,<span class="st">&#39;187&#39;</span>,<span class="st">&#39;150&#39;</span>,<span class="st">&#39;117&#39;</span>,<span class="st">&#39;&#39;</span>,<span class="st">&#39;168&#39;</span></span>
<span id="cb56-5"><a href="#cb56-5" aria-hidden="true" tabindex="-1"></a>         ,<span class="st">&#39;195&#39;</span>,<span class="st">&#39;140&#39;</span>,<span class="st">&#39;151&#39;</span>,<span class="st">&#39;123&#39;</span>,<span class="st">&#39;192&#39;</span>,<span class="st">&#39;137&#39;</span></span>
<span id="cb56-6"><a href="#cb56-6" aria-hidden="true" tabindex="-1"></a>         ,<span class="st">&#39;なし&#39;</span>,<span class="st">&#39;184&#39;</span>,<span class="st">&#39;136&#39;</span>,<span class="st">&#39;192&#39;</span>,<span class="st">&#39;150&#39;</span>,<span class="st">&#39;163&#39;</span>,<span class="st">&#39;141&#39;</span>,<span class="st">&#39;122&#39;</span>]</span>
<span id="cb56-7"><a href="#cb56-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb56-8"><a href="#cb56-8" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame({<span class="st">&#39;year&#39;</span>:years</span>
<span id="cb56-9"><a href="#cb56-9" aria-hidden="true" tabindex="-1"></a>                  ,<span class="st">&#39;value&#39;</span>:values})</span>
<span id="cb56-10"><a href="#cb56-10" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb56-11"><a href="#cb56-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb56-12"><a href="#cb56-12" aria-hidden="true" tabindex="-1"></a>f[<span class="st">&#39;year&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;year&#39;</span>].<span class="bu">map</span>(<span class="kw">lambda</span> x : x[<span class="op">-</span><span class="dv">1</span>])</span>
<span id="cb56-13"><a href="#cb56-13" aria-hidden="true" tabindex="-1"></a>f[<span class="st">&#39;value&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;value&#39;</span>].<span class="bu">map</span>(<span class="kw">lambda</span> x: <span class="st">&#39;150&#39;</span> <span class="cf">if</span> <span class="bu">str</span>.isdecimal(<span class="bu">str</span>(x)) <span class="cf">else</span> x)</span></code></pre></div>
<div class="note">
<ul>
<li>演習問題</li>
</ul>
<p>以下のURLから近世経済データのEXCELファイルをダウンロードし, 米相場の列に欠損値がないように変更し,データの基本的な構造を確認したのち米相場の西暦ごとの平均値を計算し,辞書型に格納してください.</p>
<p><a href="https://www.rieb.kobe-u.ac.jp/project/kinsei-db/database_excel.html">https://www.rieb.kobe-u.ac.jp/project/kinsei-db/database_excel.html</a></p>
</div>
<h2 data-number="1.5" id="関数とクラス"><span class="header-section-number">1.5</span> 関数とクラス</h2>
<p>これまでは,基本的に記述したコードは,コード内で一度しか利用せず,上から順番に一つずつ行いたい処理を記述してきました. しかし,プログラミングを続けていると,同じ処理を何度も適用する場合が出てきます.その場合に,毎回処理を記述するのは労力がかかります.</p>
<p>ここでは, 同じ処理を再利用可能な形でまとめ,様々な場所で利用する方法を学びます.</p>
<p>Pythonでは,基本的に小さな一つの処理は<strong>関数</strong>にまとめて利用します.また,複数の関数やデータ型などを<strong>クラス</strong>という単位にまとめることも可能です.そのようなまとめた塊を組み合わせてプログラムを構築する手法を<strong>オブジェクト指向プログラミング</strong>といいます. 更に,いくつかの関数やクラスをまとめたものを再利用形なファイルにまとめることで<strong>モジュール</strong>が作られ,モジュールに階層構造を設定したものを<strong>ライブラリ</strong>といいます.</p>
<p>この講義では関数の利用法を学びますがクラスやオブジェクト指向プログラミング,モジュールの作成に関しては少し触れるだけにします. 興味がある方は, より専門的なプログラミングの講義などで学習してください.</p>
<h3 data-number="1.5.1" id="関数"><span class="header-section-number">1.5.1</span> 関数</h3>
<p>皆さんはこれまでにもいくつかの関数を利用してきました. 例えば,リストの要素数を求めるための<code>len()</code>や,標準出力するための<code>print()</code>などは関数です.</p>
<p>関数は基本的に<code>()</code>の中に<strong>引数</strong>を与えられて,<strong>返り値</strong>を返します.</p>
<div class="sourceCode" id="cb57"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb57-1"><a href="#cb57-1" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="bu">len</span>([<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>])) <span class="co">#&gt;&gt;&gt; 3</span></span></code></pre></div>
<p>上の<code>len()</code>では,<code>()</code>の中に引数としてリスト<code>[1,2,3]</code>が与えられ,返り値として<code>3</code>を返しています.</p>
<div class="warn">
<p>一方で,関数と似ているが異なる概念として,<code>.mean()</code>のようにオブジェクトの後ろに<code>.</code>を利用してつなげる<strong>メソッド</strong>もあります.
メソッドに関しては, クラスの部分で説明します.</p>
<div class="sourceCode" id="cb58"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb58-1"><a href="#cb58-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame({<span class="st">&#39;x&#39;</span>:[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]})</span>
<span id="cb58-2"><a href="#cb58-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.mean()) <span class="co">#&gt;&gt;&gt; 2.0</span></span></code></pre></div>
</div>
<p>このように,最初からPythonに実装されている関数を<strong>組み込み関数</strong>といいます.また,特定のライブラリで定義された関数もあります.</p>
<p>組み込み関数としては,<code>len()</code>以外にも,合計値を返す<code>sum()</code>や,文字列に変更する<code>str()</code>などを利用してきました. Pythonの組み込み関数は<a href="https://docs.python.org/ja/3/library/functions.html">こちら</a>で確認できます. 利用法のわからないものに関しては調べてみましょう.</p>
<p>これまでは,無名関数を除いて基本的にすでに作成された関数を利用してきましたが,関数は自分で作成することも可能です.</p>
<p>関数は, <code>def 関数名(引数を表す変数):</code>という構文で定義することができます. インデントブロックの中で,引数に加えた処理を記述し, <code>return 返り値</code>の形で,関数の返り値を定義します.</p>
<p>例えば,要素数を数える<code>length()</code>という関数を実装してみましょう.
まずは,関数にする前に今まで通りにリストの要素数を数えるプログラムを書いてみましょう.</p>
<div class="sourceCode" id="cb59"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb59-1"><a href="#cb59-1" aria-hidden="true" tabindex="-1"></a>xs <span class="op">=</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb59-2"><a href="#cb59-2" aria-hidden="true" tabindex="-1"></a>count <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb59-3"><a href="#cb59-3" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> x <span class="kw">in</span> xs:</span>
<span id="cb59-4"><a href="#cb59-4" aria-hidden="true" tabindex="-1"></a>    count <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb59-5"><a href="#cb59-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(count) <span class="op">&gt;&gt;&gt;</span> <span class="dv">3</span></span></code></pre></div>
<p>これを関数にしてみます. <code>def length(xs):</code>のインデントブロックに,行いたい処理を記述し,<code>return count</code>で<code>count</code>を返します.</p>
<div class="sourceCode" id="cb60"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb60-1"><a href="#cb60-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> length(xs):</span>
<span id="cb60-2"><a href="#cb60-2" aria-hidden="true" tabindex="-1"></a>    count <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb60-3"><a href="#cb60-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> x <span class="kw">in</span> xs:</span>
<span id="cb60-4"><a href="#cb60-4" aria-hidden="true" tabindex="-1"></a>        count <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb60-5"><a href="#cb60-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> count</span>
<span id="cb60-6"><a href="#cb60-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb60-7"><a href="#cb60-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(length([<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>])) <span class="co">#&gt;&gt;&gt; 3</span></span>
<span id="cb60-8"><a href="#cb60-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(length([<span class="st">&#39;a&#39;</span>,<span class="st">&#39;b&#39;</span>])) <span class="co">#&gt;&gt;&gt; 2</span></span></code></pre></div>
<p>関数として定義することで,毎回数を数える処理を記述しなくても,様々なリストの要素数を数えることが可能になりました.</p>
<p>引数には複数の値を指定することも出来ます. 例えば以下の関数<code>get_larger_than(xs,y)</code>は<code>xs</code>の中から<code>y</code>より大きな値のみを返します.</p>
<div class="sourceCode" id="cb61"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb61-1"><a href="#cb61-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> get_larger_than(xs,y):</span>
<span id="cb61-2"><a href="#cb61-2" aria-hidden="true" tabindex="-1"></a>    result <span class="op">=</span> []</span>
<span id="cb61-3"><a href="#cb61-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> x <span class="kw">in</span> xs:</span>
<span id="cb61-4"><a href="#cb61-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> x <span class="op">&gt;</span> y:</span>
<span id="cb61-5"><a href="#cb61-5" aria-hidden="true" tabindex="-1"></a>            result.append(x)</span>
<span id="cb61-6"><a href="#cb61-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> result</span>
<span id="cb61-7"><a href="#cb61-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb61-8"><a href="#cb61-8" aria-hidden="true" tabindex="-1"></a>get_larger_than([<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>],<span class="dv">3</span>) <span class="co">#&gt;&gt;&gt;[4, 5, 6]</span></span></code></pre></div>
<p><code>引数名=デフォルト引数</code> と書くことで,引数にあらかじめ値を指定することも可能です. 関数を実行する際に,何も指定しなければ,デフォルト引数が利用されます.</p>
<div class="sourceCode" id="cb62"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb62-1"><a href="#cb62-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> greet(name<span class="op">=</span><span class="st">&#39;guest&#39;</span>, greeting<span class="op">=</span><span class="st">&quot;Hello&quot;</span>):</span>
<span id="cb62-2"><a href="#cb62-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="ss">f&#39;</span><span class="sc">{</span>greeting<span class="sc">}</span><span class="ss">, </span><span class="sc">{</span>name<span class="sc">}</span><span class="ss">!&#39;</span></span>
<span id="cb62-3"><a href="#cb62-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb62-4"><a href="#cb62-4" aria-hidden="true" tabindex="-1"></a><span class="co"># デフォルト引数を利用する場合</span></span>
<span id="cb62-5"><a href="#cb62-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(greet())  <span class="co"># Hello, guest!</span></span>
<span id="cb62-6"><a href="#cb62-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb62-7"><a href="#cb62-7" aria-hidden="true" tabindex="-1"></a><span class="co"># デフォルトの引数の一部を上書きする場合</span></span>
<span id="cb62-8"><a href="#cb62-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(greet(name<span class="op">=</span><span class="st">&#39;Taro&#39;</span>))  <span class="co"># Hello, Taro!</span></span>
<span id="cb62-9"><a href="#cb62-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(greet(greeting<span class="op">=</span><span class="st">&#39;Good Morning&#39;</span>))  <span class="co"># Good Morning, guest!</span></span>
<span id="cb62-10"><a href="#cb62-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb62-11"><a href="#cb62-11" aria-hidden="true" tabindex="-1"></a><span class="co"># 全ての引数を指定する場合</span></span>
<span id="cb62-12"><a href="#cb62-12" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(greet(name<span class="op">=</span><span class="st">&#39;Taro&#39;</span>, greeting<span class="op">=</span><span class="st">&#39;Good Morning&#39;</span>))  <span class="co"># Good Morning, Taro!</span></span></code></pre></div>
<div class="note">
<ul>
<li>演習問題</li>
</ul>
<ol type="1">
<li><p>与えられた数値のリストの合計値を返す関数</p></li>
<li><p>与えられた数値のリストの最大値を返す関数</p></li>
<li><p>与えられた数値にFizzBuzzの結果を,文字列で返す関数</p></li>
<li><p>組み込み関数の<code>filter()</code>の仕様を調べて自分で実装してください.</p></li>
</ol>
</div>
<h3 data-number="1.5.2" id="発展クラスとインスタンス"><span class="header-section-number">1.5.2</span> 発展:クラスとインスタンス</h3>
<p>先ほど関数を自分で定義して使う方法を学習しましたが,Pythonではデータ型も自分で定義することができます.</p>
<div class="note">
<p><strong>クラス(Class)</strong> とは, データ型,データ型の保有するデータ(<strong>属性</strong>)とデータ型に付随する機能(<strong>メソッド</strong>)を定義する機能です.
クラスを具体化したものを<strong>インスタンス</strong>と呼びます.
また,インスタンスが生成される際に実行されるメソッドを<strong>コンストラクタ</strong>といいます.</p>
</div>
<p>これまでに見た例では,pandasの<code>DataFrame</code>などはライブラリによって新たに定義されたデータ型です. <code>.DataFrame()</code>という<strong>コンストラクタ</strong>によって具体的な<code>DataFrame</code><strong>インスタンス</strong>が生成されます.</p>
<p><code>DataFrame</code>オブジェクトの属性として,<code>shape</code>などを取得することができ,<code>.to_csv()</code>などの<code>DataFrame</code>に特有の機能(<strong>メソッド</strong>)を利用することができました.</p>
<p>それでは,具体的にクラスを作成してみましょう.
ここでは,これまでに何度か出てきた,<code>FizzBuzz</code>専用のクラスを作成してみましょう.</p>
<div class="note">
<p>新しいクラスを宣言するには <code>class クラス名:</code> と記述します. インデントブロック内に,コンストラクタと,メソッドを記述します. クラス名は大文字で始めます.</p>
<p>コンストラクタは, <code>def __init__(self,必要な情報):</code>の形で宣言します. <code>__init__(self,</code>の部分は基本的にすべてのクラスで共通です.
<code>FizzBuzz</code>クラスでは, 数値を引数に取ります. <code>self</code>は,属性やメソッドが属するインスタンスを表す変数でコンストラクタやメソッドの第1引数は常に<code>self</code>となります. <code>self.属性</code>,<code>self.メソッド()</code>などの形で,そのインスタンスの属性やメソッドを定義します.</p>
<p>各インスタンスに固有の属性をインスタンス属性といい,ここでは生成された<code>FizzBuzz</code>インスタンスは<code>.number</code>という属性を持ちます. <code>self.number = number</code>と買うことで生成時に引数として与えられた数値<code>number</code>をインスタンス属性として保存します.</p>
<p>最後に,<code>FizzBuzz</code>ゲームを実行するための機能,<code>.evaluate()</code>を実行します.</p>
</div>
<div class="sourceCode" id="cb63"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb63-1"><a href="#cb63-1" aria-hidden="true" tabindex="-1"></a><span class="co"># FizzBuzzというクラスを宣言します.</span></span>
<span id="cb63-2"><a href="#cb63-2" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> FizzBuzz:</span>
<span id="cb63-3"><a href="#cb63-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">#コンストラクタの定義</span></span>
<span id="cb63-4"><a href="#cb63-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">#FizzBazzインスタンスを生成する際に必要となるデータを定義する</span></span>
<span id="cb63-5"><a href="#cb63-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, number):</span>
<span id="cb63-6"><a href="#cb63-6" aria-hidden="true" tabindex="-1"></a>        <span class="co">#インスタンス属性</span></span>
<span id="cb63-7"><a href="#cb63-7" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.number <span class="op">=</span> number</span>
<span id="cb63-8"><a href="#cb63-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb63-9"><a href="#cb63-9" aria-hidden="true" tabindex="-1"></a>    <span class="co">#メソッド eveluateの定義</span></span>
<span id="cb63-10"><a href="#cb63-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">#FizzBuzzインスタンスは,evaluateすることで,`FizzBuzz`の</span></span>
<span id="cb63-11"><a href="#cb63-11" aria-hidden="true" tabindex="-1"></a>    <span class="co">#ゲームが実行されます</span></span>
<span id="cb63-12"><a href="#cb63-12" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> evaluate(<span class="va">self</span>):</span>
<span id="cb63-13"><a href="#cb63-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="va">self</span>.number <span class="op">%</span> <span class="dv">3</span> <span class="op">==</span> <span class="dv">0</span> <span class="kw">and</span> <span class="va">self</span>.number <span class="op">%</span> <span class="dv">5</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb63-14"><a href="#cb63-14" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="st">&quot;FizzBuzz&quot;</span></span>
<span id="cb63-15"><a href="#cb63-15" aria-hidden="true" tabindex="-1"></a>        <span class="cf">elif</span> <span class="va">self</span>.number <span class="op">%</span> <span class="dv">3</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb63-16"><a href="#cb63-16" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="st">&quot;Fizz&quot;</span></span>
<span id="cb63-17"><a href="#cb63-17" aria-hidden="true" tabindex="-1"></a>        <span class="cf">elif</span> <span class="va">self</span>.number <span class="op">%</span> <span class="dv">5</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb63-18"><a href="#cb63-18" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="st">&quot;Buzz&quot;</span></span>
<span id="cb63-19"><a href="#cb63-19" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span>
<span id="cb63-20"><a href="#cb63-20" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="bu">str</span>(<span class="va">self</span>.number)</span>
<span id="cb63-21"><a href="#cb63-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb63-22"><a href="#cb63-22" aria-hidden="true" tabindex="-1"></a><span class="co"># 使用例</span></span>
<span id="cb63-23"><a href="#cb63-23" aria-hidden="true" tabindex="-1"></a><span class="co"># 単一の数値を評価</span></span>
<span id="cb63-24"><a href="#cb63-24" aria-hidden="true" tabindex="-1"></a>fb <span class="op">=</span> FizzBuzz(<span class="dv">15</span>)</span>
<span id="cb63-25"><a href="#cb63-25" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(fb.evaluate())  <span class="co"># FizzBuzz</span></span>
<span id="cb63-26"><a href="#cb63-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb63-27"><a href="#cb63-27" aria-hidden="true" tabindex="-1"></a>fb <span class="op">=</span> FizzBuzz(<span class="dv">9</span>)</span>
<span id="cb63-28"><a href="#cb63-28" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(fb.evaluate())  <span class="co"># Fizz</span></span>
<span id="cb63-29"><a href="#cb63-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb63-30"><a href="#cb63-30" aria-hidden="true" tabindex="-1"></a>fb <span class="op">=</span> FizzBuzz(<span class="dv">10</span>)</span>
<span id="cb63-31"><a href="#cb63-31" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(fb.evaluate())  <span class="co"># Buzz</span></span>
<span id="cb63-32"><a href="#cb63-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb63-33"><a href="#cb63-33" aria-hidden="true" tabindex="-1"></a>fb <span class="op">=</span> FizzBuzz(<span class="dv">7</span>)</span>
<span id="cb63-34"><a href="#cb63-34" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(fb.evaluate())  <span class="co"># 7</span></span></code></pre></div>
<p>クラスの重要な機能に<strong>継承</strong>があります. 継承は新しいクラス(<strong>サブクラス</strong>)を作成する際に,すでにあるクラス(<strong>スーパークラス</strong>)の属性やメソッドを引き継ぐことを意味します. これによって,コードの再利用や,拡張が用意になります.</p>
<p>以下では,先程定義した <code>FizzBuzz</code>クラスを継承して,<code>3</code>と<code>5</code>以外の場合にも特別な挙動をする<code>AdvancedFizzBuzz</code>クラスを定義してみましょう.</p>
<p>サブクラスを定義するには, <code>class サブクラス名(スーパークラス名)</code>と記述します.
インデントブロック内では, <code>super().属性</code>や<code>super().メソッド</code>と書くことで,スーパークラスの属性やメソッドを利用することができます.</p>
<div class="sourceCode" id="cb64"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb64-1"><a href="#cb64-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 派生クラス AdvancedFizzBuzz</span></span>
<span id="cb64-2"><a href="#cb64-2" aria-hidden="true" tabindex="-1"></a><span class="co"># ()内にスーパークラスを書きます</span></span>
<span id="cb64-3"><a href="#cb64-3" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> AdvancedFizzBuzz(FizzBuzz):</span>
<span id="cb64-4"><a href="#cb64-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, number, custom_message<span class="op">=</span><span class="va">None</span>):</span>
<span id="cb64-5"><a href="#cb64-5" aria-hidden="true" tabindex="-1"></a>        <span class="co"># スーパークラスの__init__を呼び出す</span></span>
<span id="cb64-6"><a href="#cb64-6" aria-hidden="true" tabindex="-1"></a>        <span class="bu">super</span>().<span class="fu">__init__</span>(number)</span>
<span id="cb64-7"><a href="#cb64-7" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.custom_message <span class="op">=</span> custom_message</span>
<span id="cb64-8"><a href="#cb64-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb64-9"><a href="#cb64-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> evaluate(<span class="va">self</span>):</span>
<span id="cb64-10"><a href="#cb64-10" aria-hidden="true" tabindex="-1"></a>        <span class="co"># スーパークラスのevaluateメソッドを拡張</span></span>
<span id="cb64-11"><a href="#cb64-11" aria-hidden="true" tabindex="-1"></a>        <span class="co"># self.custom_message が定義されている場合のみ実行されます</span></span>
<span id="cb64-12"><a href="#cb64-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="va">self</span>.custom_message <span class="kw">and</span> <span class="va">self</span>.number <span class="op">%</span> <span class="dv">7</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb64-13"><a href="#cb64-13" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="va">self</span>.custom_message</span>
<span id="cb64-14"><a href="#cb64-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span>
<span id="cb64-15"><a href="#cb64-15" aria-hidden="true" tabindex="-1"></a>            <span class="co"># スーパークラスのevaluateメソッドを呼び出す</span></span>
<span id="cb64-16"><a href="#cb64-16" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="bu">super</span>().evaluate()</span>
<span id="cb64-17"><a href="#cb64-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb64-18"><a href="#cb64-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb64-19"><a href="#cb64-19" aria-hidden="true" tabindex="-1"></a><span class="co"># サブクラスの使用例</span></span>
<span id="cb64-20"><a href="#cb64-20" aria-hidden="true" tabindex="-1"></a>afb <span class="op">=</span> AdvancedFizzBuzz(<span class="dv">21</span>, custom_message<span class="op">=</span><span class="st">&quot;Hozz&quot;</span>)</span>
<span id="cb64-21"><a href="#cb64-21" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(afb.evaluate())  <span class="co"># Hozz (7で割り切れるためカスタムメッセージ)</span></span>
<span id="cb64-22"><a href="#cb64-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb64-23"><a href="#cb64-23" aria-hidden="true" tabindex="-1"></a>afb <span class="op">=</span> AdvancedFizzBuzz(<span class="dv">10</span>)</span>
<span id="cb64-24"><a href="#cb64-24" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(afb.evaluate())  <span class="co"># Buzz (スーパークラスのメソッドが呼ばれる)</span></span></code></pre></div>
<div class="note">
<ul>
<li>演習</li>
</ul>
<ol type="1">
<li><p>FizzBuzzクラスを拡張して, <code>3</code>かつ<code>5</code>かつ<code>7</code>の倍数のときに<code>Hozz</code>と表示されるようにしてください.</p></li>
<li><p>ジャンケンを行うためのクラスを定義してください.</p></li>
</ol>
</div>
]]></description>
    <pubDate>Fri, 29 Mar 2024 00:00:00 UT</pubDate>
    <guid>/lectures/slds7.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>特別講義DS Ch6 データの取得と編集</title>
    <link>/lectures/slds6.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#データの取得と編集" id="toc-データの取得と編集"><span class="toc-section-number">1</span> データの取得と編集</a>
<ul>
<li><a href="#データの尺度" id="toc-データの尺度"><span class="toc-section-number">1.1</span> データの尺度</a></li>
<li><a href="#データの種類" id="toc-データの種類"><span class="toc-section-number">1.2</span> データの種類</a></li>
<li><a href="#データの取得と編集-1" id="toc-データの取得と編集-1"><span class="toc-section-number">1.3</span> データの取得と編集</a></li>
<li><a href="#e-statを使ってみよう" id="toc-e-statを使ってみよう"><span class="toc-section-number">1.4</span> e-statを使ってみよう</a></li>
<li><a href="#機械判読可能データの作成" id="toc-機械判読可能データの作成"><span class="toc-section-number">1.5</span> 機械判読可能データの作成</a></li>
<li><a href="#pandasによるデータ処理" id="toc-pandasによるデータ処理"><span class="toc-section-number">1.6</span> pandasによるデータ処理</a>
<ul>
<li><a href="#ファイルの読み込み" id="toc-ファイルの読み込み"><span class="toc-section-number">1.6.1</span> ファイルの読み込み</a></li>
</ul></li>
<li><a href="#データの確認" id="toc-データの確認"><span class="toc-section-number">1.7</span> データの確認</a></li>
<li><a href="#行名列名の変更" id="toc-行名列名の変更"><span class="toc-section-number">1.8</span> 行名,列名の変更</a></li>
<li><a href="#値の抽出" id="toc-値の抽出"><span class="toc-section-number">1.9</span> 値の抽出</a></li>
<li><a href="#条件による抽出" id="toc-条件による抽出"><span class="toc-section-number">1.10</span> 条件による抽出</a></li>
<li><a href="#値の変更" id="toc-値の変更"><span class="toc-section-number">1.11</span> 値の変更</a></li>
<li><a href="#データ型の確認と変更" id="toc-データ型の確認と変更"><span class="toc-section-number">1.12</span> データ型の確認と変更</a></li>
<li><a href="#dataframeの作成" id="toc-dataframeの作成"><span class="toc-section-number">1.13</span> DataFrameの作成</a></li>
<li><a href="#データの追加と削除" id="toc-データの追加と削除"><span class="toc-section-number">1.14</span> データの追加と削除</a></li>
<li><a href="#欠損値の処理" id="toc-欠損値の処理"><span class="toc-section-number">1.15</span> 欠損値の処理</a></li>
<li><a href="#データの保存" id="toc-データの保存"><span class="toc-section-number">1.16</span> データの保存</a></li>
<li><a href="#データの取得と編集全体の演習" id="toc-データの取得と編集全体の演習"><span class="toc-section-number">1.17</span> データの取得と編集全体の演習</a></li>
</ul></li>
</ul>
</div>
<h1 data-number="1" id="データの取得と編集"><span class="header-section-number">1</span> データの取得と編集</h1>
<p>これからデータをプログラム上で扱うにあたって,まずはデータについて考えてみましょう.</p>
<p>データは,基本的に誰かが収集・作成したものです. 自然科学においては,<strong>実験</strong>によってデータを収集し,人文・社会科学では,<strong>調査</strong>によってデータが集められます. データの作成はそれ自体でそれぞれ,<strong>実験計画法</strong>,<strong>社会調査法</strong>といった学問分野になっています.</p>
<p>データサイエンスは,データを利用して行う学問でセウが,データを収集・作成するのは専門知識,技能,時間,お金などが必要であり,データの作成自体が大きな仕事です.</p>
<p>データを自分で集めるには大変な手間がかかるので, 研究機関や,行政,大学,調査会社など他者が集めて公開しているデータを利用するのも一つの手段です. この講義では, 基本的に公開されているデータを利用して, 学習,研究を行います.</p>
<p>実験や調査によって集められたデータを<strong>原データ</strong>といい,調査によって集められた個別の調査票などを<strong>個票</strong>といいます.</p>
<p>原データに統計処理を加えてまとめたものを,<strong>統計資料</strong>あるいは<strong>調査結果</strong>などと呼びます.もともと<strong>統計(statistics)</strong>という言葉は,(国家の状況に関して)
集められた原データを編集してわかりやすく加工することを意味していました. データサイエンスではしばしば原データが利用されますが,公開されているデータはこれらの統計資料である場合が多く,原データを利用するのは困難な場合が多いです.</p>
<p>統計資料に更に加工を加えたものを,<strong>二次統計</strong>や<strong>加工統計</strong>と呼びます.</p>
<p>例えば, 国税調査によって個票が収集され,統計処理を加えた統計資料が公開され, それを更に複数の統計と併せて加工することで,国民経済計算などの加工統計が作成されます.</p>
<figure>
<img src="/images/statistical-data-flow.png" alt="データの作られ方" />
<figcaption aria-hidden="true">データの作られ方</figcaption>
</figure>
<h2 data-number="1.1" id="データの尺度"><span class="header-section-number">1.1</span> データの尺度</h2>
<p>データには様々な種類があり,種類ごとに利用可能な統計やデータサイエンスの手法が異なります.したがって,今後データを分析するにあたって,大まかなデータの区分を知っておく必要があります.</p>
<p>データの区分として,一番大きいものに <strong>量的データ(quantitative data)</strong>,<strong>質的データ(qualitative data)</strong>があります. 質的データはカテゴリーデータなどとも呼ばれます.</p>
<div class="warn">
<p>このどちらにも当てはまらないような,画像,音声,文字データなどの<strong>非構造データ</strong>もありますが,それらはそれぞれ個別の対処手法があります.</p>
<p>この講義では後半で文字データを扱う自然言語処理について扱いますが,しばらくはこれらに関しては無視して,量的データと質的データを扱います.</p>
</div>
<div class="note">
<h3 data-number="1.1.1" id="量的データ"><span class="header-section-number">1.1.1</span> 量的データ</h3>
<ul>
<li><p>数量的なデータであり,データを数直線上の位置で表現できます.</p>
<ul>
<li>年齢(5歳,10歳,100歳)</li>
<li>身長(150cm,170cm,200cm)</li>
<li>年収(200万円,500万円,1億円)</li>
</ul>
<p>など基本的には,何かしらの<strong>単位</strong>で計量されます.</p></li>
</ul>
<h3 data-number="1.1.2" id="質的データ"><span class="header-section-number">1.1.2</span> 質的データ</h3>
<ul>
<li><p>あらかじめ定められたカテゴリーのいずれかに属する値を持つデータです.</p>
<ul>
<li>性別(F or M)</li>
<li>犬の種類(ゴールデンレトリバー, 柴犬, プードル,など)</li>
<li>天気(晴れ,雨,曇など)</li>
<li>満足度(とても満足, まぁ満足, どちらでもない,など)</li>
</ul></li>
</ul>
</div>
<p>質的データと量的データは更に細かい区分として<strong>尺度(scale)</strong>に分解されます.
それぞれは,｢比較が可能か｣,｢和差積商｣の計算が可能かどうかという観点で定義されます.</p>
<div class="note">
<h3 data-number="1.1.3" id="名義尺度nominal-scale"><span class="header-section-number">1.1.3</span> 名義尺度(nominal scale)</h3>
<ul>
<li><p>質的データの中で区分にしか意味がなく順序が定義されていないもの.</p>
<ul>
<li>例:氏名,性別,種類,など</li>
</ul></li>
<li><p>和差積商のどれも定義されない.</p>
<ul>
<li>例:青木 + 赤木 = 紫木 のような計算はできない.</li>
<li>青木は赤木よりも良い,大きい,などの比較もできない</li>
</ul></li>
</ul>
<h3 data-number="1.1.4" id="順序尺度ordinal-scale"><span class="header-section-number">1.1.4</span> 順序尺度(ordinal scale)</h3>
<ul>
<li><p>質的データの中で順序が定義されているもの.</p>
<ul>
<li>例: 満足度,成績区分(S,A,B,…)など</li>
</ul></li>
<li><p>和差積商のどれも定義されないが比較が可能</p>
<ul>
<li>例: ｢満足｣は｢不満足｣よりも満足度が高いが,</li>
<li>普通 + 普通 = 満足 のような計算はできない.</li>
</ul></li>
</ul>
<h3 data-number="1.1.5" id="間隔尺度interval-scale"><span class="header-section-number">1.1.5</span> 間隔尺度(interval scale)</h3>
<ul>
<li><p>量的データの中で,間隔は定義されているが,比率が定義されていないもの.</p>
<ul>
<li>例: 時刻,日付,IQ,気温,西暦,etc</li>
</ul></li>
<li><p>足し算引き算はできるが,掛け算割り算ができない.</p>
<ul>
<li>1月1日 + 364日 = 12月31日 ですが,</li>
<li>1月1日 * 2 = 2月2日 のような計算は定義されていません.</li>
</ul></li>
</ul>
<h3 data-number="1.1.6" id="比率尺度ratio-scale"><span class="header-section-number">1.1.6</span> 比率尺度(ratio scale)</h3>
<ul>
<li><p>量的データの中で,比率が定義されているもの.</p>
<ul>
<li>例: 長さ,速度,重さ,面積など</li>
</ul></li>
<li><p>和差積商すべて計算できます.</p>
<ul>
<li>10Kg + 10Kg = 20Kg</li>
<li>10Kg * 2 = 20Kg</li>
</ul></li>
</ul>
</div>
<p>これらの区分は今後データの処理手法を選択する際に使用するので,
データがでてきたら尺度は何かを判断するようにしましょう.</p>
<div class="note">
<p><strong>演習問題</strong></p>
<p>以下のデータの尺度を判断し,なぜそのように判断できるかを説明してください.</p>
<ol type="1">
<li><p>ペットの種類 (イヌ,ネコ,鳥,魚,爬虫類,その他から選択)</p></li>
<li><p>偏差値</p></li>
<li><p>電話番号</p></li>
<li><p>一週間に読んだ本のページ数</p></li>
</ol>
</div>
<h2 data-number="1.2" id="データの種類"><span class="header-section-number">1.2</span> データの種類</h2>
<p>これまでは一つの種類の値の区分に関して,説明してきましたが,データは複数の値の組み合わせで表現され,<strong>観測対象(ケース)</strong>別の<strong>観測項目(変数)</strong>の<strong>テーブルデータ</strong>として表現される場合が多いです.</p>
<figure>
<img src="/images/case-and-variable.png" alt="観測対象と観測項目" />
<figcaption aria-hidden="true">観測対象と観測項目</figcaption>
</figure>
<p>データの観測項目の数のことを<strong>次元</strong>と呼び, 1観測項目のデータを<strong>1次元データ</strong>,2観測項目以上のデータを<strong>多次元データ</strong>と呼びます.</p>
<figure>
<img src="/images/data-dimention.png" alt="データの次元" />
<figcaption aria-hidden="true">データの次元</figcaption>
</figure>
<p>また,観測項目や観測対象の組み合わせによって,特別に呼称され,それぞれ独自の分析手法が存在するデータもあります(時系列データと時系列解析,パネルデータと,パネルデータ分析など)</p>
<p><img src="/images/data-types.png" /></p>
<p>上の時系列データは,特定の時間単位で集計,区分されたデータを指しますが,データの発生時刻が記録されたデータを<strong>点過程データ</strong>と呼びます. 点過程データを日毎,月ごとなどで集計することで時系列データが作成されます.</p>
<h2 data-number="1.3" id="データの取得と編集-1"><span class="header-section-number">1.3</span> データの取得と編集</h2>
<p>先に述べたように,データは自分で集めることもできますが,手間,時間,お金がかかるため,目的に応じて他人の集めたデータを利用することも一般的です.</p>
<p>現在では,無料で利用可能なデータも多数あり,この講義ではそれらのデータを利用します.</p>
<div class="warn">
<p>後ほど自分で選んだ研究テーマによっては自分でデータを収集することも可能です.
過去のこの講義でも, HPの視線移動データ,アンケートデータ,ヒットチャートの音楽の特徴量を表すデータ
などを自分で作った事例もあります.</p>
<p>それらに関しては,個々の研究計画に応じて必要であれば補足的に講義内で扱います.</p>
</div>
<p>無料で誰でも利用可能なデータの代表として,<strong>公的統計</strong>があります. 公的統計は,国や地方自治体の作成する統計情報であり,政策立案と評価のための基礎資料として利用されており, 作成過程なども含めて一般に公開されているものが多数あります. プライバシーや個人情報保護の観点から個票は公開されていない場合が大半ですが,研究目的であれば申請して利用することも可能です.しかし,通常データが手元に来るまでに1年程度時間を要するのでこの講義では扱いません.</p>
<p>日本の統計情報を活用するには,“日本の統計が閲覧できる政府統計ポータルサイト”<a href="https://www.e-stat.go.jp"><code>e-stat</code></a>があります. e-statでは日本の各種公的統計の情報を統計別,分野別,地域別,時系列などで取得することができます.</p>
<p><img src="/images/e-stat-screenshot1.png" alt="e-stat screenshot1" />
<img src="/images/e-stat-screenshot2.png" alt="e-stat screenshot2" /></p>
<p>日本以外のデータに関しては,各国の統計サイトに直接アクセスするか,あるいは国連による各種子交際期間の統計の横断検索サイト<a href="https://data.un.org"><code>UNData</code></a>などを利用することで取得可能です.</p>
<figure>
<img src="/images/UNData-screenshot.png" alt="UNData" />
<figcaption aria-hidden="true">UNData</figcaption>
</figure>
<p>各国の公的統計は通常数量的なデータを扱っていますが,大学の講義や研究などで欲利用される質的データとして,<a href="https://www.worldvaluessurvey.org/wvs.jsp"><code>World Value Survey</code></a>があります. 世界各国の価値観に関する調査のパネルデータを提供しており, ｢人生において大切にするもの｣｢男女平等意識｣ などの調査結果が利用できます.</p>
<p>その他にも各種研究機関や企業が提供するデータも利用可能です.</p>
<p>統計ではありませんが, <a href="https://disclosure2.edinet-fsa.go.jp/WEEK0010.aspx"><code>EDINET</code></a>のWEB APIを利用して有価証券報告書のデータを取得する,Wikipediaのテキストデータを自然言語処理してデータを作成するなどもこの講義における過去の研究事例があります.</p>
<p>これらに関しては後ほど, Webページから自動でデータを取得する<code>Webスクレイピング</code>やTwitterなどのSNSの提供する<code>API</code>を利用してデータを取得する方法も扱います.</p>
<p>Webから取得可能な情報以外にも, 特定の組織に直接交渉してデータを活用することも可能です. この講義では千葉商科大学の授業データや,電力消費データを提供してもらい分析した事例もあります.</p>
<h2 data-number="1.4" id="e-statを使ってみよう"><span class="header-section-number">1.4</span> e-statを使ってみよう</h2>
<p>e-statを利用して,pandasで読み込める形式のCSVを作成しましょう. 練習用なので,何を持ってきてもいいのですがここでは,｢産業別の給与｣に関するデータを取得します. 就職活動中の学生も多いかと思います. 産業別の給与はどのように異なるのでしょうか.</p>
<p>まずは使いたいデータを探します. 方法はいくつもありますが,ここでは<code>分野</code>から探してみましょう. <code>分野→労働・賃金→民間給与実態調査</code>の順にクリックしてください.</p>
<p><img src="/images/e-stat-salary1.png" /></p>
<p><code>データベース</code>形式か,<code>ファイル</code>形式か選択することができます. データベース形式は必要なデータをブラウザ上で選択,編集してデータを取得することができます. ファイル形式は,ExcelやPDFファイルをダウンロードできます. どちらでも問題ありませんが,ここではただのExcelファイルと,pandasで読み込めるデータの違いを確認するために,<code>ファイル</code>をクリックしましょう.</p>
<p><img src="/images/e-stat-salary2.png" /></p>
<p>官庁の作成する統計は,<code>民間給与実態調査</code>などの調査名,統計名の下位分類として,年次推計,延長推計などの提供分類,その下に対象年次,更にその下に表レベルの分類があります. これはそれぞれの統計にある程度詳しくないと意味がわからないかと思いますが,今は練習ですので気にせず,<code>結果表</code>の<code>年次推計</code>の<code>2018年度</code>の<code>第1表</code> の<code>Excel</code>をクリックしましょう.</p>
<p><img src="/images/e-stat-salary3.png" /></p>
<p>これで,民間給与実態統計調査結果表年次推計2018年度第1表 給与所得者数・給与額・税額 全国計表 がダウンロードできましたので,開いてみましょう.</p>
<p><img src="/images/e-stat-salary4.png" /></p>
<p>省庁から取得したExcel表は,このような形態になっていることが多いですが,このデータはそのままではpandasなどで読み込める形になっていません. もちろん,データベース機能で編集したデータや2018年ではなくもっと新しいデータの場合には,ある程度利用できる形態になっていますが,このようなデータは未だに多数存在します.</p>
<p>ではこのデータは一体,何が駄目なのでしょうか. プログラムで利用できるデータを作成するにあたって,e-statのデータは良い<strong>悪い見本</strong>なので,e-stat全般の問題点に関して少し見ていきましょう.</p>
<p>先ほどダウンロードしたような形式のデータを俗に<strong>ネ申Excel</strong>といいます(以降<strong>神Excel</strong>と記載).</p>
<p>神Excelとは,紙で印刷した際の見栄えを重視した,データとしての利用性のまったくないExcelシートです(参考:<a href="https://okumuralab.org/~okumura/SSS2013.pdf">｢ネ申Excel｣問題</a>).</p>
<p>例えば, 見栄えを重視するために<strong>セルを結合する</strong>,<strong>画像を挿入する</strong>,<strong>スペースなどで幅を揃える</strong>,<strong>1セルに1文字を入力する(Excel方眼紙)</strong>などが神Excelの特徴となります.</p>
<p>先程の民間給与実態統計調査を見てみるとこれらの特徴が見事に当てはまります.</p>
<figure>
<img src="/images/kami-excel.png" alt="神Excel" />
<figcaption aria-hidden="true">神Excel</figcaption>
</figure>
<p>人間は,文字の間に空白が挟まっていてもつながった単語として認識できますが,コンピュータにはできません.また,セルが結合されている場合に表として解釈することもできません,画像も処理できません.このようなExcel表はデータとしては利用できないので,データとして形式を揃えるだけで大変な手間がかかります(このあと実際にやります).</p>
<p>逆に, プログラムで利用可能なデータを<strong>機械判読可能</strong>なデータといいます.
機械判読可能な分析しやすいExcelデータをまとめる基本チェック表として,以下のものが有名です(<a href="https://www.tandfonline.com/doi/full/10.1080/00031305.2017.1375989">Data Organization in Spredsheets</a>).</p>
<div class="note">
<ul>
<li><p>一貫性を保つ</p>
<ul>
<li>名前の一貫性</li>
<li>記述方法の一貫性</li>
</ul></li>
<li><p>名前の付け方</p>
<ul>
<li>スペースを使わない</li>
<li>意味が分かる名前をつける</li>
<li>日付の書き方をYYYY-MM-DDに</li>
</ul></li>
<li><p>空のセルを作らない</p></li>
<li><p>セルに一つしかものを入れない</p></li>
<li><p>長方形にする</p></li>
<li><p>データと計算を分離する</p></li>
<li><p>フォントの色やハイライトをデータとして使用しない</p></li>
<li><p>データ検証機能を使う</p></li>
<li><p>CSVファイルに保存する</p></li>
</ul>
</div>
<p>データをプログラムで処理するのが一般的な現代において,自分で使うためのみならず,データの価値を保つためにも機械判読可能な形式でデータを作成するように心がけましょう.Excelを使っていると,せっかくある機能を使いたくなりますができるだけデータとしての利用可能性を高める意識が必要です.</p>
<div class="warn">
<p>ちなみにe-statの問題点は,神Excelにとどまりません.</p>
<p>一番恐ろしいのは一部のデータにおいて,<strong>データベース機能に登録されている元データが神Excel</strong>のままになっていることです.</p>
<p>Excel表上でスペースが混じっているセルの値などがデータベース機能で編集してもそのまま出てくる場合があります.</p>
<p>その他にも,</p>
<ul>
<li>同じ統計でも作成年毎に表記が異なる</li>
<li>データの構造が統計名-提供分類-年次-表の形式になっているため,APIなどでデータを一意に絞り込めない.</li>
<li>公表が遅い</li>
<li>APIにおける一部文字化けやJSONの構造が崩れている</li>
</ul>
<p>など沢山の問題があります. 徐々に改善されているようですので,今後に期待したいところですね.</p>
</div>
<h2 data-number="1.5" id="機械判読可能データの作成"><span class="header-section-number">1.5</span> 機械判読可能データの作成</h2>
<p>では,e-statからダウンロードしたデータを編集して, <strong>機械判読可能なBOM付きUTF-8のCSV</strong>に変換してみましょう. ここでは, Execelを用いて行います.</p>
<div class="warn">
<p>作業を飛ばすと教員が言い始めた場合は<a href="https://github.com/yakagika/yakagika.github.io/blob/main/slds_data/salary.csv">こちら</a>
からダウンロードして下さい.</p>
</div>
<p>今回ダウンロードしたデータの中で扱いたいのは,<strong>業種別の給料</strong>です.
それ以外の邪魔な情報は削除しましょう(コピーして別のシートに貼り付けた方が早いです).
新しいファイルを作成し,一行目にHeaderとして,<code>industry</code>, <code>salary</code> と記入しましょう.
日本語でも大丈夫ですが英語の方が安心です.
しかし,業種名を他のファイルにそのまま貼り付けようとすると,セルが結合されているためうまくいきません.このままでは,プログラムで上手く処理できないので編集します.</p>
<p>ダウンロードしたファイルの業種の部分をコピーしたら,新しいファイルのindustry の下のセルを右クリックして｢値だけ貼り付け｣をしましょう.
一部の行の中に句読点が入っていますがこれもエラーのもととなるので,編集します.</p>
<figure>
<img src="/images/e-stat-salary5.png" alt="ヘッダーの作成" />
<figcaption aria-hidden="true">ヘッダーの作成</figcaption>
</figure>
<figure>
<img src="/images/e-stat-salary6.png" alt="データのコピー" />
<figcaption aria-hidden="true">データのコピー</figcaption>
</figure>
<p>プログラムは基本的に英語の利用を想定されているのでデータも英語の方が安定します.
日本語でも問題ない場合が大半なので,日本語のままでも良いですが,プログラム記述中に日本語と英語が混ざるとエラーの原因となりやすいので,文章自体に意味があるテキストデータなどを除いて可能な限り英語に変換しておくことをおすすめします.
自分で適切な英語に変換できない場合はExcelでは翻訳したいセルを右クリックして<code>翻訳</code>を選ぶと翻訳してくれます. Excelでは現状自分でコピーアンドペーストしなければなりません.
Google Sheetなど使うと一発で全て変換する関数 GoogleTranslate などがあります.</p>
<figure>
<img src="/images/e-stat-salary7.png" alt="翻訳されたデータ" />
<figcaption aria-hidden="true">翻訳されたデータ</figcaption>
</figure>
<figure>
<img src="/images/e-stat-salary8.png" alt="Excelの翻訳機能" />
<figcaption aria-hidden="true">Excelの翻訳機能</figcaption>
</figure>
<p>CSVでデータを詠み込む場合, 空白,コンマ,Tabなどはエラーになりやすいので,可能な限り消しましょう.
特に今回の業種データは｢電気･ガス･熱供給・水道業｣ などなぜか中点を利用しているものもあれば,句点で区切られているものもあり,意味が分かりません.
長過ぎるのも問題が起きやすいので,頭文字のみにするなどわかりやすい形に変更しましょう(電気･ガス･熱供給・水道業 → インフラ, 卸売,小売業 → 商業 など)</p>
<p>再度に作成されたデータをCSVとして保存して終了です.保存する際のデータ型式にCSV UTF-8があるのでそれを選択し, ｢<code>salary.csv</code>｣という名前で作業ディレクトリのDataフォルダに保存します.</p>
<figure>
<img src="/images/e-stat-salary9.png" alt="データの保存" />
<figcaption aria-hidden="true">データの保存</figcaption>
</figure>
<h2 data-number="1.6" id="pandasによるデータ処理"><span class="header-section-number">1.6</span> pandasによるデータ処理</h2>
<p>ここから,先ほど作成したデータを利用してpandasの基本的な機能について確認していきます.
<strong>いくつもの処理を一気に扱いますが,すべて暗記する必要はありません. ただし,それぞれの処理の存在を覚えるようにしましょう. 可能な処理やその名前を覚えておけば,この資料に戻る,あるいは検索して調べることで自分で利用できます.</strong>
取り敢えず,講義内ではそれぞれの処理が何をやっているのかの概要を掴み,体験してみましょう.</p>
<h3 data-number="1.6.1" id="ファイルの読み込み"><span class="header-section-number">1.6.1</span> ファイルの読み込み</h3>
<p>先程作成したデータを作業ディレクトリのdataフォルダに保存して,Pythonで読み込んでみます.
以下,<code>salary.py</code>というファイルを作成してプログラムを追記していきます.</p>
<div class="warn">
<p>スクリプトのファイル名は,中身がなにか後で見ても分かるような英数字であれば何でも構いません.
ただし, <code>pandas</code>,<code>numpy</code>,<code>matplotlib</code>などの今後利用するライブラリと同名のスクリプトを作成すると,
正常にライブラリを利用できなくなるので注意しましょう.</p>
</div>
<p>以下の用に <code>import pandas as pd</code> でpandasをimportしたあとに, <code>pd.read_csv('ファイルパス')</code>でファイルが読み込めます. また,同じ行で読み込んだファイルを<code>df</code>という変数に代入しています.
最後の行で読み込んだファイルを表示しています.</p>
<p>最初のうちは自分で作成するプログラムにも以下の例の用に,それぞれの行で何をしているのかコメントを書くようにしましょう.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co"># pandas を import し, pdと呼ぶという意味</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="co"># pandas はデータの読み込みなどに利用します</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="co">#------------------------------------------------------------------</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="co"># データの読み込み</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="co">#------------------------------------------------------------------</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="co"># CSVファイルを読み込んでデータフレーム(後述)に格納</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="co"># pd.関数名 でpandasの関数が利用できる</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="co"># Dataフォルダを作成し,そこにデータを入れておきましょう</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="co"># data/salary_data.csv は  data フォルダの salary.csv という意味</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/salary.csv&#39;</span>)</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span></code></pre></div>
<p>正しくプログラムをデータが作成できていれば,プログラムを実行することで以下のようにデータの中身が標準出力に表示されるはずです. プログラムを記述する際には,このようにところどころで,<code>print()</code>を利用して,自分のイメージしたとおりにデータが編集されているか確認する癖をつけるようにしましょう.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> python3 salary.py</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>         <span class="ex">industry</span>  salary</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>    Construction    4503</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>   Manufacturing    4756</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>       Wholesale    3186</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>    Accomodation    1949</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>         Finance    5711</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>     Real Estate    3786</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>       Transport    3909</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>          Energy    8199</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>            Info    5337</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>             Edu    3913</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>            Med    4144</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>          Other    4239</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>       Suervice    3086</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>           AFFC    2190</span></code></pre></div>
<div class="note">
<p>pandasでは主に<code>DataFrame</code>というデータ型を利用してデータを扱います.
<code>DataFrame</code>オブジェクトには様々な機能が実装されており,様々な形に変形することができますが,基本的には以下の3属性から成っています.</p>
<ul>
<li><p>values : データ部分 n × m の行列</p></li>
<li><p>columns: 列名, header情報</p></li>
<li><p>index: 行名</p></li>
</ul>
<figure>
<img src="/images/data-frame-image.png" alt="DataFrameのイメージ" />
<figcaption aria-hidden="true">DataFrameのイメージ</figcaption>
</figure>
</div>
<p>クラスの属性には<code>オブジェクト名.属性名</code>でアクセスできます. 以下のコードを追加して実行し,それぞれどのように表示されるか確認してみましょう.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co"># dfのvalues属性を表示したい場合</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.values)</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="co">#dfのcolumns属性を表示したい場合</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.columns)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="co">#dfのindex属性を表示したい場合</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.index)</span></code></pre></div>
<div class="sourceCode" id="cb4"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">[[</span><span class="st">&#39;Construction&#39;</span> 4503]</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a> <span class="ex">[</span><span class="st">&#39;Manufacturing&#39;</span> 4756]</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a> <span class="ex">[</span><span class="st">&#39;Wholesale&#39;</span> 3186]</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a> <span class="ex">[</span><span class="st">&#39;Accomodation&#39;</span> 1949]</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a> <span class="ex">[</span><span class="st">&#39;Finance&#39;</span> 5711]</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a> <span class="ex">[</span><span class="st">&#39;Real Estate&#39;</span> 3786]</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a> <span class="ex">[</span><span class="st">&#39;Transport&#39;</span> 3909]</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a> <span class="ex">[</span><span class="st">&#39;Energy&#39;</span> 8199]</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a> <span class="ex">[</span><span class="st">&#39;Info&#39;</span> 5337]</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a> <span class="ex">[</span><span class="st">&#39;Edu&#39;</span> 3913]</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a> <span class="ex">[</span><span class="st">&#39;Med&#39;</span> 4144]</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a> <span class="ex">[</span><span class="st">&#39;Other&#39;</span> 4239]</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a> <span class="ex">[</span><span class="st">&#39;Suervice&#39;</span> 3086]</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a> <span class="ex">[</span><span class="st">&#39;AFFC&#39;</span> 2190]]</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a><span class="ex">Index</span><span class="er">(</span><span class="ex">[</span><span class="st">&#39;industry&#39;</span><span class="ex">,</span> <span class="st">&#39;salary&#39;</span>], dtype=<span class="st">&#39;object&#39;</span><span class="kw">)</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a><span class="ex">RangeIndex</span><span class="er">(</span><span class="va">start</span><span class="op">=</span>0, <span class="va">stop</span><span class="op">=</span>14, <span class="va">step</span><span class="op">=</span>1<span class="kw">)</span></span></code></pre></div>
<h2 data-number="1.7" id="データの確認"><span class="header-section-number">1.7</span> データの確認</h2>
<p>DataFrameを読み込んだらまずは,その全体像と特徴を確認しましょう.
確認すべき項目として,columnsやindexの他に以下のようなものがあります.</p>
<div class="note">
<ul>
<li>データの中身</li>
</ul>
<p>データが長い場合は標準出力には省略して表示されます.
意図的に,先頭n行を取得したい場合には<code>df.head(n)</code>を利用します.
後ろからn行を取得したい場合には<code>df.tail(n)</code>を利用します.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;head --- </span><span class="ch">\n</span><span class="st">&#39;</span>,df.head(<span class="dv">5</span>))</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;tail --- </span><span class="ch">\n</span><span class="st">&#39;</span>,df.tail(<span class="dv">5</span>))</span></code></pre></div>
<div class="sourceCode" id="cb6"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="fu">head</span> <span class="at">---</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>         <span class="ex">industry</span>  salary</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>   Construction    4503</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>  Manufacturing    4756</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>      Wholesale    3186</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>   Accomodation    1949</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>        Finance    5711</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="fu">tail</span> <span class="at">---</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>     <span class="ex">industry</span>  salary</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>        Edu    3913</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>       Med    4144</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>     Other    4239</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>  Suervice    3086</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>      AFFC    2190</span></code></pre></div>
</div>
<div class="note">
<ul>
<li><p>データの形</p>
<ul>
<li><p><code>df.shape</code> でデータの行数,列数を取得できます.</p></li>
<li><p><code>len(df)</code> でデータの長さ(行数)を確認できます.</p></li>
</ul></li>
</ul>
<div class="sourceCode" id="cb7"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">#形の確認</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.shape)</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="bu">len</span>(df))</span></code></pre></div>
<div class="sourceCode" id="cb8"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">(</span><span class="ex">14,</span> 2<span class="kw">)</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="ex">14</span></span></code></pre></div>
</div>
<div class="note">
<ul>
<li>記述統計量</li>
</ul>
<p><code>df.describe()</code>を利用することで <code>データ数(count)</code>,<code>平均(mean)</code>, <code>母標準偏差(std)</code>,<code>最大値(max)</code>,<code>最小値(min)</code>, <code>四分位数(25%,50%,75%)</code>などの特徴量が把握できます.
<code>df[列名].max()</code>で最大値,<code>df[列名].mean()</code>で列の平均,<code>df[列名].median()</code>で中央値など個別に把握することも可能です.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co">#特徴量の把握</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.describe())</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;最大値:&#39;</span>,df[<span class="st">&#39;Salaray&#39;</span>].<span class="bu">max</span>())</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;平均値:&#39;</span>,df[<span class="st">&#39;Salaray&#39;</span>].mean())</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;中央値:&#39;</span>,df[<span class="st">&#39;Salary&#39;</span>].median())</span></code></pre></div>
<div class="sourceCode" id="cb10"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>            <span class="ex">salary</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="ex">count</span>    14.000000</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="ex">mean</span>   4207.714286</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="ex">std</span>    1561.247008</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="ex">min</span>    1949.000000</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="ex">25%</span>    3336.000000</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="ex">50%</span>    4028.500000</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="ex">75%</span>    4692.750000</span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="ex">max</span>    8199.000000</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="ex">最大値:8199.000000</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a><span class="ex">平均値:4207.714286</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a><span class="ex">中央値:4028.500000</span></span></code></pre></div>
</div>
<h2 data-number="1.8" id="行名列名の変更"><span class="header-section-number">1.8</span> 行名,列名の変更</h2>
<p>columnsとindexは任意の値を設定できます(ただし重複はなし).
リストでそれぞれの属性を更新することで新しい列名,行名を指定できます.</p>
<ul>
<li>列名の変更</li>
</ul>
<p><code>df.columns = [新しい列名のリスト]</code></p>
<ul>
<li>行名の変更</li>
</ul>
<p><code>df.index = [新しい行名のリスト]</code></p>
<p>試しに列名を<code>['Ind','Sal']</code>に,行名を<code>a~n</code>のアルファベットに変更してみましょう.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="co">#列名の変更</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>df.columns <span class="op">=</span> [<span class="st">&#39;Ind&#39;</span>,<span class="st">&#39;Sal&#39;</span>]</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="co">#行名の変更</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>df.index <span class="op">=</span> [<span class="st">&#39;a&#39;</span>,<span class="st">&#39;b&#39;</span>,<span class="st">&#39;c&#39;</span>,<span class="st">&#39;d&#39;</span>,<span class="st">&#39;e&#39;</span>,<span class="st">&#39;f&#39;</span>,<span class="st">&#39;g&#39;</span>,<span class="st">&#39;h&#39;</span>,<span class="st">&#39;i&#39;</span>,<span class="st">&#39;j&#39;</span>,<span class="st">&#39;k&#39;</span>,<span class="st">&#39;l&#39;</span>,<span class="st">&#39;m&#39;</span>,<span class="st">&#39;n&#39;</span>]</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span></code></pre></div>
<p>指定した通りに列名や行名が変更されていれば成功です.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>             <span class="ex">Ind</span>   Sal</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="ex">a</span>   Construction  4503</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="ex">b</span>  Manufacturing  4756</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="ex">c</span>      Wholesale  3186</span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="ex">d</span>   Accomodation  1949</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="ex">e</span>        Finance  5711</span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a><span class="ex">f</span>    Real Estate  3786</span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a><span class="ex">g</span>      Transport  3909</span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a><span class="ex">h</span>         Energy  8199</span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a><span class="ex">i</span>           Info  5337</span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a><span class="ex">j</span>            Edu  3913</span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a><span class="ex">k</span>            Med  4144</span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a><span class="ex">l</span>          Other  4239</span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a><span class="ex">m</span>       Suervice  3086</span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a><span class="ex">n</span>           AFFC  2190</span></code></pre></div>
<p>ただし,indexは0から始まる連番を利用するのが一般的なので,むやみに文字などにしないほうが良いです. indexに0から始まる連番を振り直すには,<code>.reset_index()</code>メソッドを利用するのが一般的です.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="co">#元の連番に戻す</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="co">## ()の中に inplace = True と書くことでdfのindexが変更される</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="co">## inplace=Trueを書かないと変更されません.</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="co">## drop = True と書くことで,変更前に使用していたindexが消去されます.</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="co">## drop = False の場合先ほどのアルファベットが列として残ります.</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>df.reset_index(inplace<span class="op">=</span><span class="va">True</span>,drop<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span></code></pre></div>
<p>実行結果</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>             <span class="ex">Ind</span>   Sal</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>    Construction  4503</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>   Manufacturing  4756</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>       Wholesale  3186</span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>    Accomodation  1949</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>         Finance  5711</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>     Real Estate  3786</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>       Transport  3909</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>          Energy  8199</span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>            Info  5337</span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>             Edu  3913</span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>            Med  4144</span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>          Other  4239</span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>       Suervice  3086</span></code></pre></div>
<h2 data-number="1.9" id="値の抽出"><span class="header-section-number">1.9</span> 値の抽出</h2>
<p>valuesにアクセスする方法は多数存在し,用途によって使い分けます.</p>
<p>列の指定は,<code>df['列名']</code>あるいは<code>df.列名</code>のように記述することで指定するのが最も単純な方法です.
<code>df</code>の<code>'Ind'</code>列を抽出したい場合には<code>df['Ind']</code>あるいは<code>df.Ind</code>と書きます.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="co">#列の指定(Ind列)</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;Ind&#39;</span>])</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="co">#列の指定(Sal列)</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.Sal)</span></code></pre></div>
<p>実行結果</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>      Construction</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>     Manufacturing</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>         Wholesale</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>      Accomodation</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>           Finance</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>       Real Estate</span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>         Transport</span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>            Energy</span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>              Info</span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>               Edu</span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>              Med</span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>            Other</span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>         Suervice</span>
<span id="cb16-14"><a href="#cb16-14" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>             AFFC</span>
<span id="cb16-15"><a href="#cb16-15" aria-hidden="true" tabindex="-1"></a><span class="ex">Name:</span> Ind, dtype: object</span>
<span id="cb16-16"><a href="#cb16-16" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>     4503</span>
<span id="cb16-17"><a href="#cb16-17" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>     4756</span>
<span id="cb16-18"><a href="#cb16-18" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>     3186</span>
<span id="cb16-19"><a href="#cb16-19" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>     1949</span>
<span id="cb16-20"><a href="#cb16-20" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>     5711</span>
<span id="cb16-21"><a href="#cb16-21" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>     3786</span>
<span id="cb16-22"><a href="#cb16-22" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>     3909</span>
<span id="cb16-23"><a href="#cb16-23" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>     8199</span>
<span id="cb16-24"><a href="#cb16-24" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>     5337</span>
<span id="cb16-25"><a href="#cb16-25" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>     3913</span>
<span id="cb16-26"><a href="#cb16-26" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>    4144</span>
<span id="cb16-27"><a href="#cb16-27" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>    4239</span>
<span id="cb16-28"><a href="#cb16-28" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>    3086</span>
<span id="cb16-29"><a href="#cb16-29" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>    2190</span>
<span id="cb16-30"><a href="#cb16-30" aria-hidden="true" tabindex="-1"></a><span class="ex">Name:</span> Sal, dtype: int64</span></code></pre></div>
<p><code>X列の,Y行</code>のように<code>範囲選択</code>したい場合には<code>df.loc[行番号,列名]</code>と書きます.
また,行名,列名それぞれにスライスを利用することでの,<code>X~Y列のV~W行</code>のような指定ができます.
スライスで表せない行名や列名を指定する場合には,それぞれに抜き出したい列や行のリストを渡します.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="co">#範囲指定(3行目,&#39;Sal&#39;列)</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.loc[<span class="dv">3</span>,<span class="st">&#39;Sal&#39;</span>])</span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a><span class="co">#スライスを利用した範囲指定</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.loc[<span class="dv">3</span>:<span class="dv">5</span>,<span class="st">&#39;Ind&#39;</span>:<span class="st">&#39;Sal&#39;</span>])</span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a><span class="co">#リストを利用した範囲指定</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.loc[[<span class="dv">2</span>,<span class="dv">4</span>,<span class="dv">7</span>],[<span class="st">&#39;Ind&#39;</span>,<span class="st">&#39;Sal&#39;</span>]])</span></code></pre></div>
<p>実行結果</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="ex">1949</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>            <span class="ex">Ind</span>   Sal</span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>  Accomodation  1949</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>       Finance  5711</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>   Real Estate  3786</span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>         <span class="ex">Ind</span>   Sal</span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>  Wholesale  3186</span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>    Finance  5711</span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>     Energy  8199</span></code></pre></div>
<p>特定の一つのセルにアクセスする場合には<code>loc</code>を利用することもできますが,<code>df.at[行名,列名]</code>を使うほうが高速です.</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="co">#atによる単独のセルの指定</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.at[<span class="dv">3</span>,<span class="st">&#39;Sal&#39;</span>])</span></code></pre></div>
<p>実行結果</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="ex">1949</span></span></code></pre></div>
<p>行名や列名ではなく,行番号,列番号による指定も可能です. 行番号,列番号は行名や列名とは無関係に,0から始まる連番として指定されています.
範囲選択は<code>df.iloc[行番号,列番号]</code>,単独の値は<code>df.iat[行番号,列番号]</code>で行うことができます.</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="co">#行番号,列番号による範囲指定</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.iloc[<span class="dv">3</span>:<span class="dv">5</span>,<span class="dv">0</span>:])</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a><span class="co">#行番号,列番号による単独のセルの指定</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.iat[<span class="dv">3</span>,<span class="dv">1</span>])</span></code></pre></div>
<p>実行結果</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a>         <span class="ex">Ind</span>   Sal</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>  Wholesale  3186</span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>    Finance  5711</span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>     Energy  8199</span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a><span class="ex">1949</span></span></code></pre></div>
<div class="note">
<ul>
<li>演習問題</li>
</ul>
<p>以下の画像における範囲①~③を一度に抽出してください.
単独の値を抜き出す際には<code>.at</code>,<code>.iat</code>メソッドを利用しましょう.</p>
<figure>
<img src="/images/pandas-select-practice.png" alt="値の抽出" />
<figcaption aria-hidden="true">値の抽出</figcaption>
</figure>
</div>
<h2 data-number="1.10" id="条件による抽出"><span class="header-section-number">1.10</span> 条件による抽出</h2>
<p>Excelにおけるフィルター機能のように,pandasでも条件による値の抽出が可能です.
pandsでは,DataFrameオブジェクトに,真偽値のリストを渡すと,<code>True</code>の行のみを抜き出すことができます.</p>
<p>以下のコードでは,<code>False</code>と<code>True</code>を交互に繰り返し,奇数行のみを抜き出しています.</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="co">#真偽値のリストによる抜き出し</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>bools <span class="op">=</span> [<span class="va">False</span>,<span class="va">True</span>] <span class="op">*</span> <span class="dv">7</span></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(bools)</span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[bools])</span></code></pre></div>
<p>実行結果</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="ex">[False,</span> True, False, True, False, True, False, True, False, True, False, True, False, True]</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a>              <span class="ex">Ind</span>   Sal</span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>   Manufacturing  4756</span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>    Accomodation  1949</span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>     Real Estate  3786</span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>          Energy  8199</span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>             Edu  3913</span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>          Other  4239</span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>           AFFC  2190</span></code></pre></div>
<p>DataFrameオブジェクトに対して,真偽値計算をすると,各行に対する真偽値計算の結果が帰ってきます.
以下のコードでは,Salaryが3000以上の行のみ<code>True</code>の値が帰ってきているのが確認できます.</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="co">#DataFrameオブジェクトに対する論理演算</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;Sal&#39;</span>])</span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;Sal&#39;</span>] <span class="op">&gt;=</span> <span class="dv">3000</span>)</span></code></pre></div>
<p>実行結果</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>     4503</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>     4756</span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>     3186</span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>     1949</span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>     5711</span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>     3786</span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>     3909</span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>     8199</span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>     5337</span>
<span id="cb26-10"><a href="#cb26-10" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>     3913</span>
<span id="cb26-11"><a href="#cb26-11" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>    4144</span>
<span id="cb26-12"><a href="#cb26-12" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>    4239</span>
<span id="cb26-13"><a href="#cb26-13" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>    3086</span>
<span id="cb26-14"><a href="#cb26-14" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>    2190</span>
<span id="cb26-15"><a href="#cb26-15" aria-hidden="true" tabindex="-1"></a><span class="ex">Name:</span> Sal, dtype: int64</span>
<span id="cb26-16"><a href="#cb26-16" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>      True</span>
<span id="cb26-17"><a href="#cb26-17" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>      True</span>
<span id="cb26-18"><a href="#cb26-18" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>      True</span>
<span id="cb26-19"><a href="#cb26-19" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>     False</span>
<span id="cb26-20"><a href="#cb26-20" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>      True</span>
<span id="cb26-21"><a href="#cb26-21" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>      True</span>
<span id="cb26-22"><a href="#cb26-22" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>      True</span>
<span id="cb26-23"><a href="#cb26-23" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>      True</span>
<span id="cb26-24"><a href="#cb26-24" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>      True</span>
<span id="cb26-25"><a href="#cb26-25" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>      True</span>
<span id="cb26-26"><a href="#cb26-26" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>     True</span>
<span id="cb26-27"><a href="#cb26-27" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>     True</span>
<span id="cb26-28"><a href="#cb26-28" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>     True</span>
<span id="cb26-29"><a href="#cb26-29" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>    False</span>
<span id="cb26-30"><a href="#cb26-30" aria-hidden="true" tabindex="-1"></a><span class="ex">Name:</span> Sal, dtype: bool</span></code></pre></div>
<p>この<strong>①BoolのリストをDataFrameに渡すとTrueの行が返ってくる</strong>,<strong>②DataFrameに論理演算を行うとBoolのリストが返ってくる</strong>という機能の2つを組み合わせて,条件抽出を行うことができます.
例えば,<code>Sal列</code>から3000以上の行のみを抜き出すには以下のように書きます.</p>
<p>1行のプログラムですが,いくつかの機能を組み合わせているので,どの部分で何が起きているのかを分解して理解するようにしましょう.</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="co">#DataFrameオブジェクトに対する条件抽出</span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[df[<span class="st">&#39;Sal&#39;</span>] <span class="op">&gt;=</span> <span class="dv">3000</span>][<span class="st">&#39;Sal&#39;</span>])</span></code></pre></div>
<p>実行結果</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="ex">Name:</span> Sal, dtype: bool</span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>     4503</span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>     4756</span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>     3186</span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>     5711</span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>     3786</span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>     3909</span>
<span id="cb28-8"><a href="#cb28-8" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>     8199</span>
<span id="cb28-9"><a href="#cb28-9" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>     5337</span>
<span id="cb28-10"><a href="#cb28-10" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>     3913</span>
<span id="cb28-11"><a href="#cb28-11" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>    4144</span>
<span id="cb28-12"><a href="#cb28-12" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>    4239</span>
<span id="cb28-13"><a href="#cb28-13" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>    3086</span>
<span id="cb28-14"><a href="#cb28-14" aria-hidden="true" tabindex="-1"></a><span class="ex">Name:</span> Sal, dtype: int64</span></code></pre></div>
<div class="note">
<ul>
<li>演習</li>
</ul>
<p>Salary.csvから以下の条件に従った抽出を行ってください.</p>
<ol type="1">
<li><p><code>Sal列</code>が偶数の<code>Sal列</code>の行</p></li>
<li><p><code>Sal列</code>が奇数の<code>Ind列</code>の行</p></li>
<li><p><code>Ind列</code>が<code>Info</code>,<code>Edu</code>のいずれかで,<code>Sal列</code>が<code>4000以上</code>の<code>Sal列</code></p></li>
</ol>
</div>
<h2 data-number="1.11" id="値の変更"><span class="header-section-number">1.11</span> 値の変更</h2>
<p>DataFrameでは選択したセルなどに<code>=</code>を利用して代入することで,値の更新が可能です.
以下のコードで,どの部分が変更されているか,コードと結果の対応関係を見てみましょう.</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a>df.at[<span class="dv">1</span>,<span class="st">&#39;Sal&#39;</span>] <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span></code></pre></div>
<p>実行結果</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a>              <span class="ex">Ind</span>   Sal</span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>    Construction  4503</span>
<span id="cb30-3"><a href="#cb30-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>   Manufacturing  4756</span>
<span id="cb30-4"><a href="#cb30-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>       Wholesale  3186</span>
<span id="cb30-5"><a href="#cb30-5" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>    Accomodation  1949</span>
<span id="cb30-6"><a href="#cb30-6" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>         Finance  5711</span>
<span id="cb30-7"><a href="#cb30-7" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>     Real Estate  3786</span>
<span id="cb30-8"><a href="#cb30-8" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>       Transport  3909</span>
<span id="cb30-9"><a href="#cb30-9" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>          Energy  8199</span>
<span id="cb30-10"><a href="#cb30-10" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>            Info  5337</span>
<span id="cb30-11"><a href="#cb30-11" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>             Edu  3913</span>
<span id="cb30-12"><a href="#cb30-12" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>            Med  4144</span>
<span id="cb30-13"><a href="#cb30-13" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>          Other  4239</span>
<span id="cb30-14"><a href="#cb30-14" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>       Suervice  3086</span>
<span id="cb30-15"><a href="#cb30-15" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>           AFFC  2190</span>
<span id="cb30-16"><a href="#cb30-16" aria-hidden="true" tabindex="-1"></a>              <span class="ex">Ind</span>   Sal</span>
<span id="cb30-17"><a href="#cb30-17" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>    Construction  4503</span>
<span id="cb30-18"><a href="#cb30-18" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>   Manufacturing     0</span>
<span id="cb30-19"><a href="#cb30-19" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>       Wholesale  3186</span>
<span id="cb30-20"><a href="#cb30-20" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>    Accomodation  1949</span>
<span id="cb30-21"><a href="#cb30-21" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>         Finance  5711</span>
<span id="cb30-22"><a href="#cb30-22" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>     Real Estate  3786</span>
<span id="cb30-23"><a href="#cb30-23" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>       Transport  3909</span>
<span id="cb30-24"><a href="#cb30-24" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>          Energy  8199</span>
<span id="cb30-25"><a href="#cb30-25" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>            Info  5337</span>
<span id="cb30-26"><a href="#cb30-26" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>             Edu  3913</span>
<span id="cb30-27"><a href="#cb30-27" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>            Med  4144</span>
<span id="cb30-28"><a href="#cb30-28" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>          Other  4239</span>
<span id="cb30-29"><a href="#cb30-29" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>       Suervice  3086</span>
<span id="cb30-30"><a href="#cb30-30" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>           AFFC  2190</span></code></pre></div>
<p>範囲の変更は,同じ形のリストを渡すことで可能です.</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="co">#範囲の変更</span></span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a>df.loc[<span class="dv">3</span>:<span class="dv">5</span>,<span class="st">&#39;Sal&#39;</span>] <span class="op">=</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span></code></pre></div>
<div class="sourceCode" id="cb32"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a>              <span class="ex">Ind</span>   Sal</span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>    Construction  4503</span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>   Manufacturing     0</span>
<span id="cb32-4"><a href="#cb32-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>       Wholesale  3186</span>
<span id="cb32-5"><a href="#cb32-5" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>    Accomodation     1</span>
<span id="cb32-6"><a href="#cb32-6" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>         Finance     2</span>
<span id="cb32-7"><a href="#cb32-7" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>     Real Estate     3</span>
<span id="cb32-8"><a href="#cb32-8" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>       Transport  3909</span>
<span id="cb32-9"><a href="#cb32-9" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>          Energy  8199</span>
<span id="cb32-10"><a href="#cb32-10" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>            Info  5337</span>
<span id="cb32-11"><a href="#cb32-11" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>             Edu  3913</span>
<span id="cb32-12"><a href="#cb32-12" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>            Med  4144</span>
<span id="cb32-13"><a href="#cb32-13" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>          Other  4239</span>
<span id="cb32-14"><a href="#cb32-14" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>       Suervice  3086</span>
<span id="cb32-15"><a href="#cb32-15" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>           AFFC  2190</span></code></pre></div>
<p>リストではなく,単一の値を渡すと一括で変更されます.</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="co">#一括変更</span></span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a>df.loc[<span class="dv">3</span>:<span class="dv">5</span>,<span class="st">&#39;Sal&#39;</span>] <span class="op">=</span> <span class="dv">4</span></span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span></code></pre></div>
<div class="sourceCode" id="cb34"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true" tabindex="-1"></a>              <span class="ex">Ind</span>   Sal</span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>    Construction  4503</span>
<span id="cb34-3"><a href="#cb34-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>   Manufacturing     0</span>
<span id="cb34-4"><a href="#cb34-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>       Wholesale  3186</span>
<span id="cb34-5"><a href="#cb34-5" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>    Accomodation     4</span>
<span id="cb34-6"><a href="#cb34-6" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>         Finance     4</span>
<span id="cb34-7"><a href="#cb34-7" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>     Real Estate     4</span>
<span id="cb34-8"><a href="#cb34-8" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>       Transport  3909</span>
<span id="cb34-9"><a href="#cb34-9" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>          Energy  8199</span>
<span id="cb34-10"><a href="#cb34-10" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>            Info  5337</span>
<span id="cb34-11"><a href="#cb34-11" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>             Edu  3913</span>
<span id="cb34-12"><a href="#cb34-12" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>            Med  4144</span>
<span id="cb34-13"><a href="#cb34-13" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>          Other  4239</span>
<span id="cb34-14"><a href="#cb34-14" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>       Suervice  3086</span>
<span id="cb34-15"><a href="#cb34-15" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>           AFFC  2190</span></code></pre></div>
<div class="sourceCode" id="cb35"><pre class="sourceCode py"><code class="sourceCode python"></code></pre></div>
<div class="warn">
<ul>
<li>配列のコピーと変更</li>
</ul>
<p>リストの節でも説明しましたが,pandasのDataFrameは,別の変数に代入して,そのDataFrameの値を変更すると<strong>元のDataFrameの値も変更されます.</strong></p>
<div class="sourceCode" id="cb36"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a>df2 <span class="op">=</span> df</span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true" tabindex="-1"></a>df2[<span class="st">&#39;Sal&#39;</span>] <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;df --- </span><span class="ch">\n</span><span class="st">&#39;</span>,df)</span>
<span id="cb36-4"><a href="#cb36-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;df2 --- </span><span class="ch">\n</span><span class="st">&#39;</span>, df2)</span></code></pre></div>
<p><code>df</code>を<code>df2</code>に代入して,<code>df2</code>の値を変更すると,元の<code>df</code>の値も変更されていることが確認できます.</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true" tabindex="-1"></a><span class="fu">df</span> <span class="at">---</span></span>
<span id="cb37-2"><a href="#cb37-2" aria-hidden="true" tabindex="-1"></a>               <span class="ex">Ind</span>  Sal</span>
<span id="cb37-3"><a href="#cb37-3" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>    Construction    0</span>
<span id="cb37-4"><a href="#cb37-4" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>   Manufacturing    0</span>
<span id="cb37-5"><a href="#cb37-5" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>       Wholesale    0</span>
<span id="cb37-6"><a href="#cb37-6" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>    Accomodation    0</span>
<span id="cb37-7"><a href="#cb37-7" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>         Finance    0</span>
<span id="cb37-8"><a href="#cb37-8" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>     Real Estate    0</span>
<span id="cb37-9"><a href="#cb37-9" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>       Transport    0</span>
<span id="cb37-10"><a href="#cb37-10" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>          Energy    0</span>
<span id="cb37-11"><a href="#cb37-11" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>            Info    0</span>
<span id="cb37-12"><a href="#cb37-12" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>             Edu    0</span>
<span id="cb37-13"><a href="#cb37-13" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>            Med    0</span>
<span id="cb37-14"><a href="#cb37-14" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>          Other    0</span>
<span id="cb37-15"><a href="#cb37-15" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>       Suervice    0</span>
<span id="cb37-16"><a href="#cb37-16" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>           AFFC    0</span>
<span id="cb37-17"><a href="#cb37-17" aria-hidden="true" tabindex="-1"></a><span class="ex">df2</span> <span class="at">---</span></span>
<span id="cb37-18"><a href="#cb37-18" aria-hidden="true" tabindex="-1"></a>               <span class="ex">Ind</span>  Sal</span>
<span id="cb37-19"><a href="#cb37-19" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>    Construction    0</span>
<span id="cb37-20"><a href="#cb37-20" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>   Manufacturing    0</span>
<span id="cb37-21"><a href="#cb37-21" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>       Wholesale    0</span>
<span id="cb37-22"><a href="#cb37-22" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>    Accomodation    0</span>
<span id="cb37-23"><a href="#cb37-23" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>         Finance    0</span>
<span id="cb37-24"><a href="#cb37-24" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>     Real Estate    0</span>
<span id="cb37-25"><a href="#cb37-25" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>       Transport    0</span>
<span id="cb37-26"><a href="#cb37-26" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>          Energy    0</span>
<span id="cb37-27"><a href="#cb37-27" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>            Info    0</span>
<span id="cb37-28"><a href="#cb37-28" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>             Edu    0</span>
<span id="cb37-29"><a href="#cb37-29" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>            Med    0</span>
<span id="cb37-30"><a href="#cb37-30" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>          Other    0</span>
<span id="cb37-31"><a href="#cb37-31" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>       Suervice    0</span>
<span id="cb37-32"><a href="#cb37-32" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>           AFFC    0</span></code></pre></div>
<p>これは割り当てられるメモリの大きなDataFrameを効率的に利用するための仕様ですが,仕様を理解していないと思わぬ結果となるので注意してください.</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb38-1"><a href="#cb38-1" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;id df:&#39;</span>,<span class="bu">id</span>(df))</span>
<span id="cb38-2"><a href="#cb38-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;id df2:&#39;</span>,<span class="bu">id</span>(df2))</span></code></pre></div>
<p>実行結果</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb39-1"><a href="#cb39-1" aria-hidden="true" tabindex="-1"></a><span class="fu">id</span> df: 5013939024</span>
<span id="cb39-2"><a href="#cb39-2" aria-hidden="true" tabindex="-1"></a><span class="fu">id</span> df2: 5013939024</span></code></pre></div>
<p>大きなデータを扱う際に,部分的に抜き出したデータに編集を加えて,元のデータを変更したくない場合があります.そのような場合には,<code>.copy()</code>メソッドを利用します.<code>.copy()</code>メソッドを利用することで,元のデータとは異なるメモリが割り当てられます.</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb40-1"><a href="#cb40-1" aria-hidden="true" tabindex="-1"></a><span class="co">#元のDataFrameを保つコピー</span></span>
<span id="cb40-2"><a href="#cb40-2" aria-hidden="true" tabindex="-1"></a><span class="co">## 一度変更を元に戻す</span></span>
<span id="cb40-3"><a href="#cb40-3" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/salary.csv&#39;</span>)</span>
<span id="cb40-4"><a href="#cb40-4" aria-hidden="true" tabindex="-1"></a>df.columns <span class="op">=</span> [<span class="st">&#39;Ind&#39;</span>,<span class="st">&#39;Sal&#39;</span>]</span>
<span id="cb40-5"><a href="#cb40-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb40-6"><a href="#cb40-6" aria-hidden="true" tabindex="-1"></a>df2 <span class="op">=</span> df.copy()</span>
<span id="cb40-7"><a href="#cb40-7" aria-hidden="true" tabindex="-1"></a>df2[<span class="st">&#39;Sal&#39;</span>] <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb40-8"><a href="#cb40-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;df --- </span><span class="ch">\n</span><span class="st">&#39;</span>,df)</span>
<span id="cb40-9"><a href="#cb40-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;df2 --- </span><span class="ch">\n</span><span class="st">&#39;</span>, df2)</span>
<span id="cb40-10"><a href="#cb40-10" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;id df:&#39;</span>,<span class="bu">id</span>(df))</span>
<span id="cb40-11"><a href="#cb40-11" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;id df2:&#39;</span>,<span class="bu">id</span>(df2))</span></code></pre></div>
<p>実行結果</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb41-1"><a href="#cb41-1" aria-hidden="true" tabindex="-1"></a><span class="fu">df</span> <span class="at">---</span></span>
<span id="cb41-2"><a href="#cb41-2" aria-hidden="true" tabindex="-1"></a>               <span class="ex">Ind</span>   Sal</span>
<span id="cb41-3"><a href="#cb41-3" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>    Construction  4503</span>
<span id="cb41-4"><a href="#cb41-4" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>   Manufacturing  4756</span>
<span id="cb41-5"><a href="#cb41-5" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>       Wholesale  3186</span>
<span id="cb41-6"><a href="#cb41-6" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>    Accomodation  1949</span>
<span id="cb41-7"><a href="#cb41-7" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>         Finance  5711</span>
<span id="cb41-8"><a href="#cb41-8" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>     Real Estate  3786</span>
<span id="cb41-9"><a href="#cb41-9" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>       Transport  3909</span>
<span id="cb41-10"><a href="#cb41-10" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>          Energy  8199</span>
<span id="cb41-11"><a href="#cb41-11" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>            Info  5337</span>
<span id="cb41-12"><a href="#cb41-12" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>             Edu  3913</span>
<span id="cb41-13"><a href="#cb41-13" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>            Med  4144</span>
<span id="cb41-14"><a href="#cb41-14" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>          Other  4239</span>
<span id="cb41-15"><a href="#cb41-15" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>       Suervice  3086</span>
<span id="cb41-16"><a href="#cb41-16" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>           AFFC  2190</span>
<span id="cb41-17"><a href="#cb41-17" aria-hidden="true" tabindex="-1"></a><span class="ex">df2</span> <span class="at">---</span></span>
<span id="cb41-18"><a href="#cb41-18" aria-hidden="true" tabindex="-1"></a>               <span class="ex">Ind</span>  Sal</span>
<span id="cb41-19"><a href="#cb41-19" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>    Construction    0</span>
<span id="cb41-20"><a href="#cb41-20" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>   Manufacturing    0</span>
<span id="cb41-21"><a href="#cb41-21" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>       Wholesale    0</span>
<span id="cb41-22"><a href="#cb41-22" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>    Accomodation    0</span>
<span id="cb41-23"><a href="#cb41-23" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>         Finance    0</span>
<span id="cb41-24"><a href="#cb41-24" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>     Real Estate    0</span>
<span id="cb41-25"><a href="#cb41-25" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>       Transport    0</span>
<span id="cb41-26"><a href="#cb41-26" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>          Energy    0</span>
<span id="cb41-27"><a href="#cb41-27" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>            Info    0</span>
<span id="cb41-28"><a href="#cb41-28" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>             Edu    0</span>
<span id="cb41-29"><a href="#cb41-29" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>            Med    0</span>
<span id="cb41-30"><a href="#cb41-30" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>          Other    0</span>
<span id="cb41-31"><a href="#cb41-31" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>       Suervice    0</span>
<span id="cb41-32"><a href="#cb41-32" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>           AFFC    0</span>
<span id="cb41-33"><a href="#cb41-33" aria-hidden="true" tabindex="-1"></a><span class="fu">id</span> df: 5013945696</span>
<span id="cb41-34"><a href="#cb41-34" aria-hidden="true" tabindex="-1"></a><span class="fu">id</span> df2: 4559223920</span></code></pre></div>
</div>
<div class="note">
<ul>
<li>演習</li>
</ul>
<p>作成したsaraly.csvを読み込み,以下の処理を順に行ってください.</p>
<ol type="1">
<li><p>columnsを日本語(産業,給与)に変更してください.</p></li>
<li><p>サービス業だと思われる行のみを抽出して,<code>.copy()</code>してください.</p></li>
<li><p>コピーされたDataFrameに0から始まるインデックスを振り直してください.</p></li>
<li><p>元のDataFrameとコピーされたデータフレームの中身とidを確認してください.</p></li>
</ol>
</div>
<h2 data-number="1.12" id="データ型の確認と変更"><span class="header-section-number">1.12</span> データ型の確認と変更</h2>
<p>pandasでデータを読み込むと列ごとに自動でデータ型が推論,設定されます. pandasのDataFrameにおけるデータ型(<code>dtype</code>)はこれまでに見てきたpythonの標準的なデータ型(<code>type</code>)とは異なるものですが,同じ名前でも変更が可能です. ただし,<code>str</code>型だけ扱いが特殊なので注意が必要です.</p>
<p>pandasの列ごとのデータ型を確認するには,<code>.dtypes</code>を利用します.
<code>type</code>の<code>int</code>に対応する<code>dtype</code>は<code>int64</code>,<code>float</code>は<code>float64</code>と表示されます. <code>str</code>型は,<code>object</code>型になりますがそれぞれの要素は<code>str</code>型です.</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb42-1"><a href="#cb42-1" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;DataFrameのデータ型:</span><span class="ch">\n</span><span class="st">&#39;</span>,df.dtypes)</span>
<span id="cb42-2"><a href="#cb42-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;Sal列のデータ型:&#39;</span>,df[<span class="st">&#39;Sal&#39;</span>].dtypes)</span>
<span id="cb42-3"><a href="#cb42-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;Ind列のデータ型:&#39;</span>,df[<span class="st">&#39;Ind&#39;</span>].dtypes)</span>
<span id="cb42-4"><a href="#cb42-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;Ind列の要素のデータ型:&#39;</span>,<span class="bu">type</span>(df.at[<span class="dv">0</span>,<span class="st">&#39;Ind&#39;</span>]))</span></code></pre></div>
<div class="sourceCode" id="cb43"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb43-1"><a href="#cb43-1" aria-hidden="true" tabindex="-1"></a><span class="ex">DataFrameのデータ型:</span></span>
<span id="cb43-2"><a href="#cb43-2" aria-hidden="true" tabindex="-1"></a> <span class="ex">Ind</span>    object</span>
<span id="cb43-3"><a href="#cb43-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Sal</span>     int64</span>
<span id="cb43-4"><a href="#cb43-4" aria-hidden="true" tabindex="-1"></a><span class="ex">dtype:</span> object</span>
<span id="cb43-5"><a href="#cb43-5" aria-hidden="true" tabindex="-1"></a><span class="ex">Sal列のデータ型:</span> int64</span>
<span id="cb43-6"><a href="#cb43-6" aria-hidden="true" tabindex="-1"></a><span class="ex">Ind列のデータ型:</span> object</span>
<span id="cb43-7"><a href="#cb43-7" aria-hidden="true" tabindex="-1"></a><span class="ex">Ind列の要素のデータ型:</span> <span class="op">&lt;</span>class <span class="st">&#39;str&#39;</span><span class="op">&gt;</span></span></code></pre></div>
<p><code>.astype()</code>メソッドでデータ型を変更することができます. 元の列に代入する形で変更しましょう.
今回は,<code>Sal</code>列を<code>int型</code>から<code>float型</code>に変更します.</p>
<div class="sourceCode" id="cb44"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb44-1"><a href="#cb44-1" aria-hidden="true" tabindex="-1"></a><span class="co">#データ型の変更</span></span>
<span id="cb44-2"><a href="#cb44-2" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;Sal&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;Sal&#39;</span>].astype(<span class="bu">float</span>)</span>
<span id="cb44-3"><a href="#cb44-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;Sal列のデータ型:&#39;</span>,df[<span class="st">&#39;Sal&#39;</span>].dtypes)</span></code></pre></div>
<div class="sourceCode" id="cb45"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb45-1"><a href="#cb45-1" aria-hidden="true" tabindex="-1"></a><span class="ex">Sal列のデータ型:float64</span></span></code></pre></div>
<p>データを読み込む際に,<code>dtyp=列名とデータ型の辞書</code>を記述することで,データ型を指定することも可能です.</p>
<div class="sourceCode" id="cb46"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb46-1"><a href="#cb46-1" aria-hidden="true" tabindex="-1"></a><span class="co">#読み込み時のデータ型の指定</span></span>
<span id="cb46-2"><a href="#cb46-2" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/salary.csv&#39;</span></span>
<span id="cb46-3"><a href="#cb46-3" aria-hidden="true" tabindex="-1"></a>                ,dtype <span class="op">=</span> {<span class="st">&#39;Industry&#39;</span>:<span class="bu">str</span></span>
<span id="cb46-4"><a href="#cb46-4" aria-hidden="true" tabindex="-1"></a>                         ,<span class="st">&#39;Salary&#39;</span>:<span class="bu">float</span>})</span>
<span id="cb46-5"><a href="#cb46-5" aria-hidden="true" tabindex="-1"></a>df.columns <span class="op">=</span> [<span class="st">&#39;Ind&#39;</span>,<span class="st">&#39;Sal&#39;</span>]</span>
<span id="cb46-6"><a href="#cb46-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.dtypes)</span></code></pre></div>
<div class="sourceCode" id="cb47"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb47-1"><a href="#cb47-1" aria-hidden="true" tabindex="-1"></a><span class="ex">Ind</span>     object</span>
<span id="cb47-2"><a href="#cb47-2" aria-hidden="true" tabindex="-1"></a><span class="ex">Sal</span>    float64</span>
<span id="cb47-3"><a href="#cb47-3" aria-hidden="true" tabindex="-1"></a><span class="ex">dtype:</span> object</span></code></pre></div>
<h2 data-number="1.13" id="dataframeの作成"><span class="header-section-number">1.13</span> DataFrameの作成</h2>
<p>これまでは,<code>salary.csv</code>を読み込んでDataFrameとして編集してきましたが,プログラム内で新たなDataFrameを作成することも可能です.</p>
<p>新たなDataFrameを作成するためには,<code>pd.DataFrame()メソッド</code>を利用します.丸括弧内には, <code>data</code>, <code>index</code>, <code>columns</code>を設定する必要があります. ただし, <code>index</code>と<code>columns</code>は省略可能です.
<code>data</code>には,必要な<code>行×列の多次元リスト</code>, <code>index</code>と<code>columns</code>には1次元のリストを渡します.</p>
<p>以下の表のようなDataFrameを作成するコードは次のようになります.</p>
<div class="sourceCode" id="cb48"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb48-1"><a href="#cb48-1" aria-hidden="true" tabindex="-1"></a><span class="co">#DataFrameのvalues部分をリストで作成する</span></span>
<span id="cb48-2"><a href="#cb48-2" aria-hidden="true" tabindex="-1"></a><span class="co">## 行のリストになっていることに注意</span></span>
<span id="cb48-3"><a href="#cb48-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb48-4"><a href="#cb48-4" aria-hidden="true" tabindex="-1"></a><span class="co">#DataFrameのvalues部分をリストで作成する</span></span>
<span id="cb48-5"><a href="#cb48-5" aria-hidden="true" tabindex="-1"></a><span class="co">## 行のリストになっていることに注意</span></span>
<span id="cb48-6"><a href="#cb48-6" aria-hidden="true" tabindex="-1"></a>values <span class="op">=</span> [[<span class="st">&#39;dog&#39;</span>,<span class="fl">5.0</span>,<span class="fl">60.0</span>]</span>
<span id="cb48-7"><a href="#cb48-7" aria-hidden="true" tabindex="-1"></a>         ,[<span class="st">&#39;cat&#39;</span>,<span class="fl">3.0</span>,<span class="fl">30.0</span>]</span>
<span id="cb48-8"><a href="#cb48-8" aria-hidden="true" tabindex="-1"></a>         ,[<span class="st">&#39;fish&#39;</span>,<span class="fl">0.15</span>,<span class="fl">0.5</span>]]</span>
<span id="cb48-9"><a href="#cb48-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb48-10"><a href="#cb48-10" aria-hidden="true" tabindex="-1"></a><span class="co">#DataFrameの作成</span></span>
<span id="cb48-11"><a href="#cb48-11" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame(data<span class="op">=</span>values</span>
<span id="cb48-12"><a href="#cb48-12" aria-hidden="true" tabindex="-1"></a>                 ,columns<span class="op">=</span>[<span class="st">&#39;animal_kind&#39;</span></span>
<span id="cb48-13"><a href="#cb48-13" aria-hidden="true" tabindex="-1"></a>                          ,<span class="st">&#39;weight&#39;</span></span>
<span id="cb48-14"><a href="#cb48-14" aria-hidden="true" tabindex="-1"></a>                          ,<span class="st">&#39;size&#39;</span>])</span>
<span id="cb48-15"><a href="#cb48-15" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span></code></pre></div>
<div class="sourceCode" id="cb49"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb49-1"><a href="#cb49-1" aria-hidden="true" tabindex="-1"></a>  <span class="ex">animal_kind</span>  weight  size</span>
<span id="cb49-2"><a href="#cb49-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>         dog    5.00  60.0</span>
<span id="cb49-3"><a href="#cb49-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>         cat    3.00  30.0</span>
<span id="cb49-4"><a href="#cb49-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>        fish    0.15   0.5</span></code></pre></div>
<div class="warn">
<p>行のリストよりも列のリストを渡すほうがデータ型が統一されており簡単です.
そのような場合には,数値計算用ライブラリ<code>numpy</code>の<code>.T</code>を利用して,転置行列を渡します.
Shell上で<code>pip install numpy</code>を実行して, <code>numpy</code>をinstallしたのち,<code>import numpy as np</code>と記述して
<code>numpy</code>をプログラムで利用しましょう.</p>
<p><code>numpy</code>では,ndarray配列というデータ型を利用します.そのため,<code>np.array()</code>メソッドで一度<code>ndarray</code>に変換し,
<code>.T</code>によって転置した配列を<code>.tolist()</code>メソッドでリストに戻しています.</p>
<div class="sourceCode" id="cb50"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb50-1"><a href="#cb50-1" aria-hidden="true" tabindex="-1"></a><span class="co">#転置行列によるデータの作成</span></span>
<span id="cb50-2"><a href="#cb50-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb50-3"><a href="#cb50-3" aria-hidden="true" tabindex="-1"></a>animal_kinds <span class="op">=</span> [<span class="st">&#39;dog&#39;</span>,<span class="st">&#39;cat&#39;</span>,<span class="st">&#39;fish&#39;</span>]</span>
<span id="cb50-4"><a href="#cb50-4" aria-hidden="true" tabindex="-1"></a>weights  <span class="op">=</span> [<span class="fl">5.0</span>,<span class="fl">6.0</span>,<span class="fl">0.15</span>]</span>
<span id="cb50-5"><a href="#cb50-5" aria-hidden="true" tabindex="-1"></a>sizes    <span class="op">=</span> [<span class="fl">60.0</span>,<span class="fl">30.0</span>,<span class="fl">0.5</span>]</span>
<span id="cb50-6"><a href="#cb50-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb50-7"><a href="#cb50-7" aria-hidden="true" tabindex="-1"></a>values <span class="op">=</span> np.array([animal_kinds</span>
<span id="cb50-8"><a href="#cb50-8" aria-hidden="true" tabindex="-1"></a>                 ,weights</span>
<span id="cb50-9"><a href="#cb50-9" aria-hidden="true" tabindex="-1"></a>                 ,sizes]).T.tolist()</span>
<span id="cb50-10"><a href="#cb50-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb50-11"><a href="#cb50-11" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame(data<span class="op">=</span>values</span>
<span id="cb50-12"><a href="#cb50-12" aria-hidden="true" tabindex="-1"></a>                 ,columns<span class="op">=</span>[<span class="st">&#39;animal_kind&#39;</span></span>
<span id="cb50-13"><a href="#cb50-13" aria-hidden="true" tabindex="-1"></a>                          ,<span class="st">&#39;weight&#39;</span></span>
<span id="cb50-14"><a href="#cb50-14" aria-hidden="true" tabindex="-1"></a>                          ,<span class="st">&#39;size&#39;</span>])</span>
<span id="cb50-15"><a href="#cb50-15" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;weight&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;weight&#39;</span>].astype(<span class="bu">float</span>)</span>
<span id="cb50-16"><a href="#cb50-16" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;size&#39;</span>]   <span class="op">=</span> df[<span class="st">&#39;size&#39;</span>].astype(<span class="bu">float</span>)</span>
<span id="cb50-17"><a href="#cb50-17" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span></code></pre></div>
<p>実行結果</p>
<div class="sourceCode" id="cb51"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb51-1"><a href="#cb51-1" aria-hidden="true" tabindex="-1"></a>  <span class="ex">animal_kind</span> weight  size</span>
<span id="cb51-2"><a href="#cb51-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>         dog    5.0  60.0</span>
<span id="cb51-3"><a href="#cb51-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>         cat    6.0  30.0</span>
<span id="cb51-4"><a href="#cb51-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>        fish   0.15   0.5</span></code></pre></div>
</div>
<p>また,列名を<code>key</code>その列のリストを<code>value</code>とした辞書型によって<code>DataFrame</code>を作成することも可能です.</p>
<div class="sourceCode" id="cb52"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb52-1"><a href="#cb52-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame({<span class="st">&#39;animal_kind&#39;</span>:[<span class="st">&#39;dog&#39;</span>,<span class="st">&#39;cat&#39;</span>,<span class="st">&#39;fisg&#39;</span>]</span>
<span id="cb52-2"><a href="#cb52-2" aria-hidden="true" tabindex="-1"></a>                  ,<span class="st">&#39;weight&#39;</span>:[<span class="fl">5.0</span>,<span class="fl">6.0</span>,<span class="fl">0.15</span>]</span>
<span id="cb52-3"><a href="#cb52-3" aria-hidden="true" tabindex="-1"></a>                  ,<span class="st">&#39;size&#39;</span>:[<span class="fl">60.0</span>,<span class="fl">30.0</span>,<span class="fl">0.5</span>]})</span>
<span id="cb52-4"><a href="#cb52-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span></code></pre></div>
<p>実行結果</p>
<pre><code>  animal_kind weight  size
0         dog    5.0  60.0
1         cat    6.0  30.0
2        fish   0.15   0.5</code></pre>
<div class="note">
<ul>
<li>演習</li>
</ul>
<p>以下の<code>data</code>をもつDataFrameを作成し,<code>age</code>列を<code>float64</code>に変更しましょう.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">name</th>
<th style="text-align: center;">age</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Taro</td>
<td style="text-align: center;">20</td>
</tr>
<tr class="even">
<td style="text-align: center;">Jiro</td>
<td style="text-align: center;">30</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Hanako</td>
<td style="text-align: center;">40</td>
</tr>
</tbody>
</table>
</div>
<h2 data-number="1.14" id="データの追加と削除"><span class="header-section-number">1.14</span> データの追加と削除</h2>
<p>列や行の追加には<code>.assine()</code>や<code>.insert()</code>,<code>.append()</code>などが利用可能ですがここでは分かりやすく代入を利用する方法を紹介します.</p>
<p><code>df[新規列名]=新しい列</code>,のようにDataFrameに新しい列を代入することで列の追加が可能です.行の追加は<code>df.loc[追加したいindex] = 新しい行</code>で行えます.</p>
<div class="sourceCode" id="cb54"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb54-1"><a href="#cb54-1" aria-hidden="true" tabindex="-1"></a><span class="co">#データの追加</span></span>
<span id="cb54-2"><a href="#cb54-2" aria-hidden="true" tabindex="-1"></a><span class="co">#列の追加</span></span>
<span id="cb54-3"><a href="#cb54-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;追加前:</span><span class="ch">\n</span><span class="st">&#39;</span>,df)</span>
<span id="cb54-4"><a href="#cb54-4" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;name&#39;</span>] <span class="op">=</span> [<span class="st">&#39;pochi&#39;</span>,<span class="st">&#39;tama&#39;</span>,<span class="st">&#39;kintaro&#39;</span>]</span>
<span id="cb54-5"><a href="#cb54-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;列の追加:</span><span class="ch">\n</span><span class="st">&#39;</span>,df)</span>
<span id="cb54-6"><a href="#cb54-6" aria-hidden="true" tabindex="-1"></a>df.loc[<span class="dv">4</span>] <span class="op">=</span> [<span class="st">&#39;bird&#39;</span>,<span class="fl">1.0</span>,<span class="dv">3</span>,<span class="st">&#39;piyo&#39;</span>]</span>
<span id="cb54-7"><a href="#cb54-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;行の追加:</span><span class="ch">\n</span><span class="st">&#39;</span>,df)</span></code></pre></div>
<div class="sourceCode" id="cb55"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb55-1"><a href="#cb55-1" aria-hidden="true" tabindex="-1"></a><span class="ex">追加前:</span></span>
<span id="cb55-2"><a href="#cb55-2" aria-hidden="true" tabindex="-1"></a>   <span class="ex">animal_kind</span> weight  size</span>
<span id="cb55-3"><a href="#cb55-3" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>         dog    5.0  60.0</span>
<span id="cb55-4"><a href="#cb55-4" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>         cat    6.0  30.0</span>
<span id="cb55-5"><a href="#cb55-5" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>        fish   0.15   0.5</span>
<span id="cb55-6"><a href="#cb55-6" aria-hidden="true" tabindex="-1"></a><span class="ex">列の追加:</span></span>
<span id="cb55-7"><a href="#cb55-7" aria-hidden="true" tabindex="-1"></a>   <span class="ex">animal_kind</span> weight  size     name</span>
<span id="cb55-8"><a href="#cb55-8" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>         dog    5.0  60.0    pochi</span>
<span id="cb55-9"><a href="#cb55-9" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>         cat    6.0  30.0     tama</span>
<span id="cb55-10"><a href="#cb55-10" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>        fish   0.15   0.5  kintaro</span>
<span id="cb55-11"><a href="#cb55-11" aria-hidden="true" tabindex="-1"></a><span class="ex">行の追加:</span></span>
<span id="cb55-12"><a href="#cb55-12" aria-hidden="true" tabindex="-1"></a>   <span class="ex">animal_kind</span> weight  size     name</span>
<span id="cb55-13"><a href="#cb55-13" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>         dog    5.0  60.0    pochi</span>
<span id="cb55-14"><a href="#cb55-14" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>         cat    6.0  30.0     tama</span>
<span id="cb55-15"><a href="#cb55-15" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>        fish   0.15   0.5  kintaro</span>
<span id="cb55-16"><a href="#cb55-16" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>        bird    1.0     3     piyo</span></code></pre></div>
<p>特定の列の値を利用して計算された新たな列を作成することも可能です.ここでは,<code>size</code>あたりの<code>weight</code>を計算してみます. 列を用いた計算では各行の値が計算されます.</p>
<div class="sourceCode" id="cb56"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb56-1"><a href="#cb56-1" aria-hidden="true" tabindex="-1"></a><span class="co">#列を利用した計算</span></span>
<span id="cb56-2"><a href="#cb56-2" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;density&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;weight&#39;</span>] <span class="op">/</span> df[<span class="st">&#39;size&#39;</span>]</span>
<span id="cb56-3"><a href="#cb56-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span></code></pre></div>
<div class="sourceCode" id="cb57"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb57-1"><a href="#cb57-1" aria-hidden="true" tabindex="-1"></a>  <span class="ex">animal_kind</span>  weight  size     name   density</span>
<span id="cb57-2"><a href="#cb57-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>         dog    5.00  60.0    pochi  0.083333</span>
<span id="cb57-3"><a href="#cb57-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>         cat    6.00  30.0     tama  0.200000</span>
<span id="cb57-4"><a href="#cb57-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>        fish    0.15   0.5  kintaro  0.300000</span>
<span id="cb57-5"><a href="#cb57-5" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>        bird    1.00   3.0     piyo  0.333333</span></code></pre></div>
<p>列や行を削除するには<code>.drop(行名 or 列名, axis= 0/1 )</code>を利用します.行を削除する場合は<code>axis=0</code>,列を削除する場合には<code>axis=1</code>と書きます. <code>axis='column'</code>,<code>axis='index'</code>でも行と列を選択することができます.
<code>inplace = True</code> を設定すると元のDataFrameが変更されますが,設定しないと新しいDataFrameが返され,元のDataFrameは変更されません.</p>
<div class="sourceCode" id="cb58"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb58-1"><a href="#cb58-1" aria-hidden="true" tabindex="-1"></a><span class="co">#列の削除</span></span>
<span id="cb58-2"><a href="#cb58-2" aria-hidden="true" tabindex="-1"></a>df.drop(<span class="st">&#39;name&#39;</span></span>
<span id="cb58-3"><a href="#cb58-3" aria-hidden="true" tabindex="-1"></a>       ,axis<span class="op">=</span><span class="st">&#39;columns&#39;</span> <span class="co"># or axis = 1</span></span>
<span id="cb58-4"><a href="#cb58-4" aria-hidden="true" tabindex="-1"></a>       ,inplace<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb58-5"><a href="#cb58-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb58-6"><a href="#cb58-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb58-7"><a href="#cb58-7" aria-hidden="true" tabindex="-1"></a><span class="co">#行の削除</span></span>
<span id="cb58-8"><a href="#cb58-8" aria-hidden="true" tabindex="-1"></a>df.drop(<span class="dv">4</span></span>
<span id="cb58-9"><a href="#cb58-9" aria-hidden="true" tabindex="-1"></a>       ,axis<span class="op">=</span><span class="st">&#39;index&#39;</span> <span class="co"># or axis = 0</span></span>
<span id="cb58-10"><a href="#cb58-10" aria-hidden="true" tabindex="-1"></a>       ,inplace<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb58-11"><a href="#cb58-11" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span></code></pre></div>
<div class="sourceCode" id="cb59"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb59-1"><a href="#cb59-1" aria-hidden="true" tabindex="-1"></a> <span class="ex">animal_kind</span>  weight  size   density</span>
<span id="cb59-2"><a href="#cb59-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>         dog    5.00  60.0  0.083333</span>
<span id="cb59-3"><a href="#cb59-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>         cat    6.00  30.0  0.200000</span>
<span id="cb59-4"><a href="#cb59-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>        fish    0.15   0.5  0.300000</span>
<span id="cb59-5"><a href="#cb59-5" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>        bird    1.00   3.0  0.333333</span>
<span id="cb59-6"><a href="#cb59-6" aria-hidden="true" tabindex="-1"></a>  <span class="ex">animal_kind</span>  weight  size   density</span>
<span id="cb59-7"><a href="#cb59-7" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>         dog    5.00  60.0  0.083333</span>
<span id="cb59-8"><a href="#cb59-8" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>         cat    6.00  30.0  0.200000</span>
<span id="cb59-9"><a href="#cb59-9" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>        fish    0.15   0.5  0.300000</span></code></pre></div>
<p>行名や列名にリストを指定すると,複数行/列が削除されます.</p>
<div class="sourceCode" id="cb60"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb60-1"><a href="#cb60-1" aria-hidden="true" tabindex="-1"></a><span class="co">#複数行の削除</span></span>
<span id="cb60-2"><a href="#cb60-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.drop([<span class="st">&#39;weight&#39;</span>,<span class="st">&#39;size&#39;</span>,<span class="st">&#39;density&#39;</span>],axis<span class="op">=</span><span class="dv">1</span>))</span></code></pre></div>
<div class="sourceCode" id="cb61"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb61-1"><a href="#cb61-1" aria-hidden="true" tabindex="-1"></a>  <span class="ex">animal_kind</span></span>
<span id="cb61-2"><a href="#cb61-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>         dog</span>
<span id="cb61-3"><a href="#cb61-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>         cat</span>
<span id="cb61-4"><a href="#cb61-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>        fish</span></code></pre></div>
<h2 data-number="1.15" id="欠損値の処理"><span class="header-section-number">1.15</span> 欠損値の処理</h2>
<p>例えば特定の日だけ値を入力し忘れている出勤簿や授業をサボった学生の成績など,現実のデータには抜けや欠損が付き物です. 抜けや欠損の無いデータを<strong>完備データ</strong>といい,欠損している部分を<strong>欠損値</strong>といいます.</p>
<p>pandasでは,csvの空白, 作成時の未定義部分 などが欠損値<code>NaN</code>(Not a Number) として表現されます.</p>
<p>例えば,DataFrame作成時にvaluesのサイズが合わない場合にはデータのない部分が<code>NaN</code>となります.
また,以下のように空白のあるCSVを読み込んだ場合には空白のセルが<code>NaN</code>となります.</p>
<figure>
<img src="/images/salary_nan.png" alt="salary_nan.cav" />
<figcaption aria-hidden="true">salary_nan.cav</figcaption>
</figure>
<div class="sourceCode" id="cb62"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb62-1"><a href="#cb62-1" aria-hidden="true" tabindex="-1"></a><span class="co">#DataFrameの作成</span></span>
<span id="cb62-2"><a href="#cb62-2" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame(data <span class="op">=</span> [[<span class="st">&#39;dog&#39;</span>,<span class="dv">5</span>,<span class="dv">60</span>]</span>
<span id="cb62-3"><a href="#cb62-3" aria-hidden="true" tabindex="-1"></a>                         ,[<span class="st">&#39;cat&#39;</span>,<span class="dv">30</span>]</span>
<span id="cb62-4"><a href="#cb62-4" aria-hidden="true" tabindex="-1"></a>                         ,[<span class="st">&#39;fish&#39;</span>,<span class="fl">0.15</span>]]</span>
<span id="cb62-5"><a href="#cb62-5" aria-hidden="true" tabindex="-1"></a>                  ,columns<span class="op">=</span>[<span class="st">&#39;animal_kind&#39;</span></span>
<span id="cb62-6"><a href="#cb62-6" aria-hidden="true" tabindex="-1"></a>                          ,<span class="st">&#39;weight&#39;</span></span>
<span id="cb62-7"><a href="#cb62-7" aria-hidden="true" tabindex="-1"></a>                          ,<span class="st">&#39;size&#39;</span>])</span>
<span id="cb62-8"><a href="#cb62-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb62-9"><a href="#cb62-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb62-10"><a href="#cb62-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb62-11"><a href="#cb62-11" aria-hidden="true" tabindex="-1"></a><span class="co">#かけたデータの読み込み</span></span>
<span id="cb62-12"><a href="#cb62-12" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/salary_nan.csv&#39;</span>)</span>
<span id="cb62-13"><a href="#cb62-13" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;-----</span><span class="ch">\n</span><span class="st">&#39;</span>,df)</span></code></pre></div>
<div class="sourceCode" id="cb63"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb63-1"><a href="#cb63-1" aria-hidden="true" tabindex="-1"></a>  <span class="ex">animal_kind</span>  weight  size</span>
<span id="cb63-2"><a href="#cb63-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>         dog    5.00  60.0</span>
<span id="cb63-3"><a href="#cb63-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>         cat   30.00   NaN</span>
<span id="cb63-4"><a href="#cb63-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>        fish    0.15   NaN</span>
<span id="cb63-5"><a href="#cb63-5" aria-hidden="true" tabindex="-1"></a><span class="ex">-----</span></span>
<span id="cb63-6"><a href="#cb63-6" aria-hidden="true" tabindex="-1"></a>          <span class="ex">Industry</span>  Salary</span>
<span id="cb63-7"><a href="#cb63-7" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>    Construction  4503.0</span>
<span id="cb63-8"><a href="#cb63-8" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>   Manufacturing  4756.0</span>
<span id="cb63-9"><a href="#cb63-9" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>       Wholesale  3186.0</span>
<span id="cb63-10"><a href="#cb63-10" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>   Accommodation     NaN</span>
<span id="cb63-11"><a href="#cb63-11" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>         Finance  5711.0</span>
<span id="cb63-12"><a href="#cb63-12" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>     Real Estate  3786.0</span>
<span id="cb63-13"><a href="#cb63-13" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>       Transport  3909.0</span>
<span id="cb63-14"><a href="#cb63-14" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>          Energy  8199.0</span>
<span id="cb63-15"><a href="#cb63-15" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>            Info     NaN</span>
<span id="cb63-16"><a href="#cb63-16" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>             Edu  3913.0</span>
<span id="cb63-17"><a href="#cb63-17" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>            Med  4144.0</span>
<span id="cb63-18"><a href="#cb63-18" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>          Other     NaN</span>
<span id="cb63-19"><a href="#cb63-19" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>       Suervice  3086.0</span>
<span id="cb63-20"><a href="#cb63-20" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>           AFFC  2190.0</span></code></pre></div>
<p><code>NaN</code>はすべての値に対して,<code>==</code>で<code>True</code>,<code>!=</code>で<code>False</code>を返すため,欠損値か否かの判定には,<code>==</code>や<code>!=</code>を使うことはできません. なお,<code>float('NaN')</code>で<code>float</code>型の<code>NaN</code>を生成できます.</p>
<div class="sourceCode" id="cb64"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb64-1"><a href="#cb64-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/salary_nan.csv&#39;</span>)</span>
<span id="cb64-2"><a href="#cb64-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.at[<span class="dv">8</span>,<span class="st">&#39;Salary&#39;</span>])</span>
<span id="cb64-3"><a href="#cb64-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;NaN == 1:&#39;</span>,df.at[<span class="dv">8</span>,<span class="st">&#39;Salary&#39;</span>] <span class="op">==</span> <span class="dv">1</span>)</span>
<span id="cb64-4"><a href="#cb64-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;NaN == NaN:&#39;</span>,df.at[<span class="dv">8</span>,<span class="st">&#39;Salary&#39;</span>] <span class="op">==</span> <span class="bu">float</span>(<span class="st">&#39;NaN&#39;</span>))</span>
<span id="cb64-5"><a href="#cb64-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;NaN != 1:&#39;</span>,df.at[<span class="dv">8</span>,<span class="st">&#39;Salary&#39;</span>] <span class="op">!=</span> <span class="dv">1</span>)</span>
<span id="cb64-6"><a href="#cb64-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;NaN != NaN:&#39;</span>,df.at[<span class="dv">8</span>,<span class="st">&#39;Salary&#39;</span>] <span class="op">==</span> <span class="bu">float</span>(<span class="st">&#39;NaN&#39;</span>))</span></code></pre></div>
<div class="sourceCode" id="cb65"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb65-1"><a href="#cb65-1" aria-hidden="true" tabindex="-1"></a><span class="ex">nan</span></span>
<span id="cb65-2"><a href="#cb65-2" aria-hidden="true" tabindex="-1"></a><span class="ex">NaN</span> == 1: False</span>
<span id="cb65-3"><a href="#cb65-3" aria-hidden="true" tabindex="-1"></a><span class="ex">NaN</span> == NaN: False</span>
<span id="cb65-4"><a href="#cb65-4" aria-hidden="true" tabindex="-1"></a><span class="ex">NaN</span> != 1: True</span>
<span id="cb65-5"><a href="#cb65-5" aria-hidden="true" tabindex="-1"></a><span class="ex">NaN</span> != NaN: False</span></code></pre></div>
<p>欠損値の判定には<code>isna()</code>メソッドを利用します.DataFrameに利用することで<code>NaN</code>のあるセルにはTrue,<code>NaN</code>以外のセルに<code>False</code>を返します.また,<code>pd.isna(値)</code>の形で,値の判定も可能です.</p>
<div class="sourceCode" id="cb66"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb66-1"><a href="#cb66-1" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/salary_nan.csv&#39;</span>)</span>
<span id="cb66-2"><a href="#cb66-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.isna())</span>
<span id="cb66-3"><a href="#cb66-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(pd.isna(df.at[<span class="dv">8</span>,<span class="st">&#39;Salary&#39;</span>]))</span></code></pre></div>
<div class="sourceCode" id="cb67"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb67-1"><a href="#cb67-1" aria-hidden="true" tabindex="-1"></a>    <span class="ex">Industry</span>  Salary</span>
<span id="cb67-2"><a href="#cb67-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>      False   False</span>
<span id="cb67-3"><a href="#cb67-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>      False   False</span>
<span id="cb67-4"><a href="#cb67-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>      False   False</span>
<span id="cb67-5"><a href="#cb67-5" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>      False    True</span>
<span id="cb67-6"><a href="#cb67-6" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>      False   False</span>
<span id="cb67-7"><a href="#cb67-7" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>      False   False</span>
<span id="cb67-8"><a href="#cb67-8" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>      False   False</span>
<span id="cb67-9"><a href="#cb67-9" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>      False   False</span>
<span id="cb67-10"><a href="#cb67-10" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>      False    True</span>
<span id="cb67-11"><a href="#cb67-11" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>      False   False</span>
<span id="cb67-12"><a href="#cb67-12" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>     False   False</span>
<span id="cb67-13"><a href="#cb67-13" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>     False    True</span>
<span id="cb67-14"><a href="#cb67-14" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>     False   False</span>
<span id="cb67-15"><a href="#cb67-15" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>     False   False</span>
<span id="cb67-16"><a href="#cb67-16" aria-hidden="true" tabindex="-1"></a><span class="ex">True</span></span></code></pre></div>
<p>欠損のあるデータを分析する際には,欠損値をどのように処理するかを決める必要があります.
欠損値の処理の方法には<strong>除外</strong>, <strong>置換</strong>, <strong>補定(ほてい)</strong>,<strong>補完</strong>などいくつかの方法があり,pandasにおいても
<code>dropna()</code>,<code>fillna()</code>などのメソッドが提供されています.</p>
<p>元も単純な欠損値の処理方法は,欠損値のある行や列を除外してしまうことです. pandasにおいて欠損値の除外行うメソッドは<code>dropna()</code>です.</p>
<p><code>df.dropna(subset=除外したい列名のリスト,how=‘any’,inplace=True)</code>と記述することで
指定された列においてNaNの含まれる行の削除ができます.
<code>subset</code>を指定しないと,すべての列が対象となります.
<code>how ='any'</code>と指定すると, subsetに含まれる列のどれか, <code>how='all'</code>にすると, subsetに含まれる列の全てがNaNの場合にその行が削除されます.</p>
<div class="sourceCode" id="cb68"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb68-1"><a href="#cb68-1" aria-hidden="true" tabindex="-1"></a><span class="co">#欠損値の削除</span></span>
<span id="cb68-2"><a href="#cb68-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df.dropna(subset<span class="op">=</span>[<span class="st">&#39;Salary&#39;</span>],how<span class="op">=</span><span class="st">&#39;any&#39;</span>))</span>
<span id="cb68-3"><a href="#cb68-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;---</span><span class="ch">\n</span><span class="st">&#39;</span>,df)</span></code></pre></div>
<div class="sourceCode" id="cb69"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb69-1"><a href="#cb69-1" aria-hidden="true" tabindex="-1"></a>         <span class="ex">Industry</span>  Salary</span>
<span id="cb69-2"><a href="#cb69-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>    Construction  4503.0</span>
<span id="cb69-3"><a href="#cb69-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>   Manufacturing  4756.0</span>
<span id="cb69-4"><a href="#cb69-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>       Wholesale  3186.0</span>
<span id="cb69-5"><a href="#cb69-5" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>         Finance  5711.0</span>
<span id="cb69-6"><a href="#cb69-6" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>     Real Estate  3786.0</span>
<span id="cb69-7"><a href="#cb69-7" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>       Transport  3909.0</span>
<span id="cb69-8"><a href="#cb69-8" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>          Energy  8199.0</span>
<span id="cb69-9"><a href="#cb69-9" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>             Edu  3913.0</span>
<span id="cb69-10"><a href="#cb69-10" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>            Med  4144.0</span>
<span id="cb69-11"><a href="#cb69-11" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>       Suervice  3086.0</span>
<span id="cb69-12"><a href="#cb69-12" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>           AFFC  2190.0</span>
<span id="cb69-13"><a href="#cb69-13" aria-hidden="true" tabindex="-1"></a><span class="ex">---</span></span>
<span id="cb69-14"><a href="#cb69-14" aria-hidden="true" tabindex="-1"></a>         <span class="ex">Industry</span>  Salary</span>
<span id="cb69-15"><a href="#cb69-15" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>    Construction  4503.0</span>
<span id="cb69-16"><a href="#cb69-16" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>   Manufacturing  4756.0</span>
<span id="cb69-17"><a href="#cb69-17" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>       Wholesale  3186.0</span>
<span id="cb69-18"><a href="#cb69-18" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>   Accommodation     NaN</span>
<span id="cb69-19"><a href="#cb69-19" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>         Finance  5711.0</span>
<span id="cb69-20"><a href="#cb69-20" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>     Real Estate  3786.0</span>
<span id="cb69-21"><a href="#cb69-21" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>       Transport  3909.0</span>
<span id="cb69-22"><a href="#cb69-22" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>          Energy  8199.0</span>
<span id="cb69-23"><a href="#cb69-23" aria-hidden="true" tabindex="-1"></a><span class="ex">8</span>            Info     NaN</span>
<span id="cb69-24"><a href="#cb69-24" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>             Edu  3913.0</span>
<span id="cb69-25"><a href="#cb69-25" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>            Med  4144.0</span>
<span id="cb69-26"><a href="#cb69-26" aria-hidden="true" tabindex="-1"></a><span class="ex">11</span>          Other     NaN</span>
<span id="cb69-27"><a href="#cb69-27" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>       Suervice  3086.0</span>
<span id="cb69-28"><a href="#cb69-28" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>           AFFC  2190.0</span></code></pre></div>
<p>inplace = True と設定するともとのDataFrameが変更されますが Falseに設定すると, もとのDataFrameには反映されません.</p>
<div class="sourceCode" id="cb70"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb70-1"><a href="#cb70-1" aria-hidden="true" tabindex="-1"></a>df.dropna(subset<span class="op">=</span>[<span class="st">&#39;Salary&#39;</span>]</span>
<span id="cb70-2"><a href="#cb70-2" aria-hidden="true" tabindex="-1"></a>         ,how<span class="op">=</span><span class="st">&#39;any&#39;</span></span>
<span id="cb70-3"><a href="#cb70-3" aria-hidden="true" tabindex="-1"></a>         ,inplace<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb70-4"><a href="#cb70-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span></code></pre></div>
<div class="sourceCode" id="cb71"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb71-1"><a href="#cb71-1" aria-hidden="true" tabindex="-1"></a>         <span class="ex">Industry</span>  Salary</span>
<span id="cb71-2"><a href="#cb71-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>    Construction  4503.0</span>
<span id="cb71-3"><a href="#cb71-3" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>   Manufacturing  4756.0</span>
<span id="cb71-4"><a href="#cb71-4" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>       Wholesale  3186.0</span>
<span id="cb71-5"><a href="#cb71-5" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>         Finance  5711.0</span>
<span id="cb71-6"><a href="#cb71-6" aria-hidden="true" tabindex="-1"></a><span class="ex">5</span>     Real Estate  3786.0</span>
<span id="cb71-7"><a href="#cb71-7" aria-hidden="true" tabindex="-1"></a><span class="ex">6</span>       Transport  3909.0</span>
<span id="cb71-8"><a href="#cb71-8" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>          Energy  8199.0</span>
<span id="cb71-9"><a href="#cb71-9" aria-hidden="true" tabindex="-1"></a><span class="ex">9</span>             Edu  3913.0</span>
<span id="cb71-10"><a href="#cb71-10" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>            Med  4144.0</span>
<span id="cb71-11"><a href="#cb71-11" aria-hidden="true" tabindex="-1"></a><span class="ex">12</span>       Suervice  3086.0</span>
<span id="cb71-12"><a href="#cb71-12" aria-hidden="true" tabindex="-1"></a><span class="ex">13</span>           AFFC  2190.0</span></code></pre></div>
<h2 data-number="1.16" id="データの保存"><span class="header-section-number">1.16</span> データの保存</h2>
<p>pandasで作成, 加工したDataFrameオブジェクトは, csv等の形式でファイルに書き出すことができます.
DataFrameオブジェクト<code>df</code>をcsvファイルとして書き出すには<code>df.to_csv('ファイルパス')</code> と記述します. <code>encoding=</code>を追加して記述することでエンコードを指定することも可能です.
BOM付きのUTF-8の場合は<code>encoding='utf-8-sig'</code>と記述します.</p>
<div class="sourceCode" id="cb72"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb72-1"><a href="#cb72-1" aria-hidden="true" tabindex="-1"></a>values <span class="op">=</span> [[<span class="st">&#39;dog&#39;</span>,<span class="fl">5.0</span>,<span class="fl">60.0</span>]</span>
<span id="cb72-2"><a href="#cb72-2" aria-hidden="true" tabindex="-1"></a>         ,[<span class="st">&#39;cat&#39;</span>,<span class="fl">3.0</span>,<span class="fl">30.0</span>]</span>
<span id="cb72-3"><a href="#cb72-3" aria-hidden="true" tabindex="-1"></a>         ,[<span class="st">&#39;fish&#39;</span>,<span class="fl">0.15</span>,<span class="fl">0.5</span>]]</span>
<span id="cb72-4"><a href="#cb72-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb72-5"><a href="#cb72-5" aria-hidden="true" tabindex="-1"></a><span class="co">#DataFrameの作成</span></span>
<span id="cb72-6"><a href="#cb72-6" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame(data<span class="op">=</span>values</span>
<span id="cb72-7"><a href="#cb72-7" aria-hidden="true" tabindex="-1"></a>                 ,columns<span class="op">=</span>[<span class="st">&#39;animal_kind&#39;</span></span>
<span id="cb72-8"><a href="#cb72-8" aria-hidden="true" tabindex="-1"></a>                          ,<span class="st">&#39;weight&#39;</span></span>
<span id="cb72-9"><a href="#cb72-9" aria-hidden="true" tabindex="-1"></a>                          ,<span class="st">&#39;size&#39;</span>])</span>
<span id="cb72-10"><a href="#cb72-10" aria-hidden="true" tabindex="-1"></a><span class="co">#csvとして保存</span></span>
<span id="cb72-11"><a href="#cb72-11" aria-hidden="true" tabindex="-1"></a>df.to_csv(<span class="st">&#39;data/animal.csv&#39;</span></span>
<span id="cb72-12"><a href="#cb72-12" aria-hidden="true" tabindex="-1"></a>         ,encoding<span class="op">=</span><span class="st">&#39;utf-8-sig&#39;</span>)</span></code></pre></div>
<div class="warn">
<p>pandasで可能なデータの処理のうち,今回紹介したのは基本となるほんの一部です.ライブラリの活用方法や機能は日々増えており, 全部を扱うことはできません.必要に応じて自分で利用方法を調べて学習しましょう.</p>
</div>
<h2 data-number="1.17" id="データの取得と編集全体の演習"><span class="header-section-number">1.17</span> データの取得と編集全体の演習</h2>
<div class="note">
<p>演習問題</p>
<hr />
<ol type="1">
<li>データの作成と編集</li>
</ol>
<p>以下の条件に従うDataFrameを作成してください.</p>
<ul>
<li><p>columnsが’<code>1</code>‘,<code>'2'</code>,<code>'3'</code>,<code>'4'</code>,’<code>5</code>’</p></li>
<li><p>indexが<code>0~19</code></p></li>
<li><p>‘<code>1</code>’列の値はindexの1倍,<code>'2'</code>列の値はindexの2倍,<code>'3'</code>列の値はindexの3倍,<code>'4'</code>列の値はindexの4倍,’<code>5</code>’列の値はindexの5倍の値が入る.</p></li>
</ul>
<p>作成したDataFrameに以下の操作を加えてください.</p>
<ul>
<li><p><code>'3'</code>列を2倍した<code>'6'</code>という列を追加してください.</p></li>
<li><p><code>index</code>が<code>20</code>となる行を追加してください</p></li>
<li><p><code>'mean'</code>という各行の平均値からなる列を追加してください</p></li>
<li><p><code>index</code>が偶数の列のみを残して,すべての列を<code>int</code>型に変更した後<code>BOM付きのUTF-8</code>の<code>csv</code>で保存してください.</p></li>
</ul>
<ol start="2" type="1">
<li>外部データの読み込みと編集</li>
</ol>
<p>以下のURLから近世経済データのEXCELファイルをダウンロードし, 米相場の列に欠損値がないように変更し,データの基本的な構造を確認したのち米相場の平均値を求めてください.</p>
<p><a href="https://www.rieb.kobe-u.ac.jp/project/kinsei-db/database_excel.html">https://www.rieb.kobe-u.ac.jp/project/kinsei-db/database_excel.html</a></p>
</div>
]]></description>
    <pubDate>Fri, 29 Mar 2024 00:00:00 UT</pubDate>
    <guid>/lectures/slds6.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>
<item>
    <title>特別講義DS Ch5 ライブラリの利用</title>
    <link>/lectures/slds5.html</link>
    <description><![CDATA[<div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#ライブラリの利用" id="toc-ライブラリの利用"><span class="toc-section-number">1</span> ライブラリの利用</a>
<ul>
<li><a href="#ライブラリとは" id="toc-ライブラリとは"><span class="toc-section-number">1.1</span> ライブラリとは</a></li>
<li><a href="#ライブラリを使ってみよう" id="toc-ライブラリを使ってみよう"><span class="toc-section-number">1.2</span> ライブラリを使ってみよう</a></li>
<li><a href="#なぜexcelではだめなのか" id="toc-なぜexcelではだめなのか"><span class="toc-section-number">1.3</span> なぜExcelではだめなのか</a></li>
</ul></li>
</ul>
</div>
<h1 data-number="1" id="ライブラリの利用"><span class="header-section-number">1</span> ライブラリの利用</h1>
<p>通常のPythonの学習では,基礎的な演算のあとにFor文やIF分を学びます.
しかし,この講義では通常のリストなどよりもむしろPandasとよばれるライブラリの機能を多用します.なので, 先にライブラリの利用法と,Pandasの利用法を学び,それらを事例としてFor文やIF文,関数などの基本的な構文を学習します.</p>
<h2 data-number="1.1" id="ライブラリとは"><span class="header-section-number">1.1</span> ライブラリとは</h2>
<p>第1回の講義で説明しましたが,プログラムをまとめて他の人がプログラム内で利用できるようにしたものをライブラリといいます. Pythonは,統計,データサイエンス関連のライブラリが充実しているために,利用者が多いということでしたね.</p>
<p>Pythonは様々なライブラリを呼び出して利用するための言語として利用されている側面が大きいです.なので, 目的に応じた様々なライブラリの使用法を知って初めてPythonの力を活用できます.</p>
<p>ライブラリのより細かい概念として, <strong>モジュール(Module)</strong>と<strong>Package(Package)</strong>があります.</p>
<div class="note">
<ul>
<li><code>Module</code>
<ul>
<li>他のプログラムに読み込む(<code>import</code>)することができるスクリプトファイル</li>
</ul></li>
<li><code>Package</code>
<ul>
<li>Moduleの名前空間をドットで構造化する手段</li>
</ul></li>
<li><code>Library</code>
<ul>
<li>用途に応じてPackageをまとめたもの</li>
</ul></li>
</ul>
</div>
<p><code>import</code>や名前空間の意味は,実際に使っていきながら見ていきましょう.</p>
<h2 data-number="1.2" id="ライブラリを使ってみよう"><span class="header-section-number">1.2</span> ライブラリを使ってみよう</h2>
<p>データサイエンスは,名前の通りデータを扱いデータから何かしらの示唆を得るための学問です.
データサイエンスにおける分析は概ね以下のように推移します.</p>
<figure>
<img src="/images/data-science-flow.png" alt="データ分析の流れ" />
<figcaption aria-hidden="true">データ分析の流れ</figcaption>
</figure>
<p>それぞれの段階の処理は,基本的には特定のライブラリを利用して行います. したがって,Pythonによるデータ分析の学習では,基本的にそれぞれの段階でのライブラリの利用法を学ぶことが中心になります.それぞれのライブラリの利用法はこれから順次扱いますが,ここでは,第1段階として,データの読み込みに関するライブラリ<code>pandas</code>を事例に一般的なライブラリの使用法を体験します.</p>
<p>何かしらのデータを分析するにはプログラムにデータを読み込む必要があります. Pythonにおいてデータの読み書き,整形,編集,生成などを支援する代表的なライブラリに <code>pandas</code>があります.</p>
<p>ライブラリを利用するためには,まずライブラリを皆さんのコンピュータにインストールする必要があります.
Pythonでライブラリをインストールするには<code>pip</code>を利用します. <code>pip</code>は,Pythonのインストール時に資料の指示に従ってチェックをつけていれば,既にインストールされているはずです.Shellに<code>pip --version</code>と入力してバージョンが表示されていれば,インストールされているので確認してみましょう.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> pip <span class="ex">--version</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ex">pip</span> 24.0 from /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/pip <span class="er">(</span><span class="ex">python</span> 3.10<span class="kw">)</span></span></code></pre></div>
<p><code>pip install</code>のあとに,インストールしたいライブラリ名を入力すると,ライブラリがインストールされます. 今回は <code>pandas</code>をインストールするので<code>pip install pandas</code>と入力しましょう. 文字が沢山表示されますが, 問題ありません. 画面が止まるまで待ちましょう.</p>
<p>pandasはデータを扱うためのライブラリなので利用するには,何かしらのデータが必要です. 本格的な利用はこのあとでしますが,取り敢えず利用確認用の簡単なデータを作成しましょう.</p>
<p>データはテーブルデータの形式を取ることが多く,pandasで読み込みや書き込みができるテーブルデータとして代表的な形式に<code>CSV(Comma  Separated Values)</code>があります.</p>
<div class="warn">
<p>最近はテーブルデータの高速な処理が可能な<a href="https://pola.rs"><code>Polars</code></a>なども流行っていますが,本資料ではPandasに限定します.</p>
<p>また,<code>JSON</code>や<code>XML</code>などの他のデータ形式に関しては扱いません.</p>
</div>
<p>CSVは,テキストファイルの一種で,その名の通りコンマ(<code>,</code>)で列を区切り,改行で行を区切ることでテーブルを表現します. 標準的なCSVでは最初の1行は,データではなく,各列の中身を表すタイトルとなっており<code>Header</code>と呼びます.2行目以下のデータ部分を<code>Body</code>と呼びます.</p>
<p>Excelを開いて1行目に<code>Weight</code>,<code>Height</code>,<code>BMI</code>と記入し,それぞれの列に以下のように数値を記入しましょう.<code>BMI</code>列は空欄で構いません.</p>
<figure>
<img src="/images/pandas-csv-sample.png" alt="csv sample" />
<figcaption aria-hidden="true">csv sample</figcaption>
</figure>
<p>このファイルを<code>UTF-8</code>の<code>CSV</code>として保存します. ファイル名は<code>body_data.csv</code>としましょう. Excelでは<code>ファイルの種類</code>で<code>CSV UTF-8 (コンマ区切り)(*.csv)</code>と選択することで保存できます.</p>
<figure>
<img src="/images/excel-file-type.png" alt="excel file type" />
<figcaption aria-hidden="true">excel file type</figcaption>
</figure>
<p>このファイルを作業ディレクトリの中に作った<code>data</code>という名前のフォルダに保存します.</p>
<p>試しに,<code>body_data.csv</code>をテキストエディタで開くと,中身がコンマと改行で表現されていることが分かります.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>Height,Weight,BMI</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="dv">170</span>,<span class="dv">55</span>,</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="dv">180</span>,<span class="dv">72</span>,</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="dv">155</span>,<span class="dv">42</span>,</span></code></pre></div>
<p>Sublime Textでは <code>File</code>タブの<code>Save with Encoding</code>内の<code>UTF-8 with BOM</code>で保存し,拡張子を<code>.csv</code>にすることで保存できます.</p>
<p><img src="/images/Sublime-utf-8-bom.png" /></p>
<div class="warn">
<p><strong><code>BOM(Byte Order Mark)</code>について</strong></p>
<p>Unicode(UTF-8, UTF-16など)で文章が記載されていることを示す符号をBOMといい,ファイルの最初に記載されます.
これがついていることで,ソフトウェアでデータを読み込む際に自動的に,適切なエンコーディングが選択されます.
Excelの場合は<code>CSV UTF-8 (コンマ区切り)(*.csv)</code>でBOM付きのUTF-8として保存されますが,日本語環境ではBOMがついていないCSVファイルを<code>Shift-JIS</code>で開くため,外部ファイルの読み込みから適切なエンコーディングを選ばないと文字化けします.</p>
<p>この知識は後ほどpandasを利用したCSVの保存で再度扱います.</p>
</div>
<p>このファイルを読み込んで,pandasの機能をいくつか確認するためのスクリプトを書きます.
テキストエディタで<code>pandas_test.py</code>という空のファイルを作成し,以下のように記述しましょう.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;data/body_data.csv&#39;</span>)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;Weight&#39;</span>].mean())</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df[<span class="st">&#39;Weight&#39;</span>].median())</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;BMI&#39;</span>] <span class="op">=</span> df[<span class="st">&#39;Weight&#39;</span>] <span class="op">/</span> (df[<span class="st">&#39;Height&#39;</span>]<span class="op">/</span><span class="dv">100</span>) <span class="op">**</span> <span class="dv">2</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span></code></pre></div>
<p>このプログラムを実行すると,以下のように表示されるはずです.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">❯</span> python3 pandas_test.py</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>   <span class="ex">Height</span>  Weight  BMI</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>     170      55  NaN</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>     180      72  NaN</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>     155      42  NaN</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="ex">56.333333333333336</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="ex">170.0</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>   <span class="ex">Height</span>  Weight        BMI</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="ex">0</span>     170      55  19.031142</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span>     180      72  22.222222</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="ex">2</span>     155      42  17.481790</span></code></pre></div>
<p>このプログラムで何をしているのかを簡単に見ていきましょう.</p>
<p>まず一行目の<code>import pandas as pd</code>ですが,<code>import pandas</code>によってこのプログラム内で<code>pandas</code>を利用可能にしています. しかし,<code>pandas</code>と毎回かくのは面倒なので,省略形の<code>pd</code>という名前を定義しています. Pythonでは<code>import [利用したいライブラリ名] as [省略形]</code>
の形で,ライブラリのインポートと省略形の定義を同時に行えます. pandasは<code>df</code>と省略するのが一般的です.</p>
<p>続いて2行目の <code>df = pd.read_csv('data/body_data.csv')</code>で,先ほど作成した <code>data</code>フォルダにある<code>body_data.csv</code>というファイルを読み込んでいます. <code>df =</code>で読み込んだデータに<code>df</code>という名前をつけています.</p>
<p>3行目の<code>print(df)</code>で,読み込んでdfという名前をつかたデータを表示しています. REPLでは,変数を書くだけで表示されていましたが,スクリプトでは標準出力したいものは<code>print()</code>関数を適用する必要があります.</p>
<p>4,5行目は<code>Weight</code>列の平均(<code>mean</code>)と中央値(<code>median</code>)を求めて表示しています.</p>
<p>6,7行目はもともとのデータで空だった,<code>BMI</code>列を計算し,計算結果を表示しています.</p>
<p>これらの操作の具体的な使い方や意味はこのあと細かく扱いますが,取り敢えず,pandasではこのようにして,データを読み込み,処理することができます.</p>
<h2 data-number="1.3" id="なぜexcelではだめなのか"><span class="header-section-number">1.3</span> なぜExcelではだめなのか</h2>
<p>先ほど行った簡単な表計算であれば,Excelでも簡単に同じことができます. では,なぜややこしいPythonなどを学んでプログラムで同じことをするのでしょうか.</p>
<p>まず,第1にPythonを利用することで</p>
<p><strong>機械学習や高度な検定など,Excelではできない高度な処理が可能</strong>になります.</p>
<p>先ほど行った簡単な集計であればExcelでも可能ですが,後ほど行う機械学習や自然言語処理などの高度な処理はExcelでは実行が困難です. また, データに関してもExcelでは最大で1,048,576行程度のデータしか扱うことができませんが,(この講義では扱いませんが)データサイエンスでは,それを超えた大容量のデータを扱うことがしばしばあります.</p>
<p>第2の理由として,</p>
<p><strong>Excelが複数の連続した複雑な処理には向いていない</strong>ということが挙げられます.</p>
<p>Excelでは,何か作業をしても<strong>過程が記録されず,結果だけが残ります.</strong> また,折角複雑な処理を実行しても,異なるデータなどで同じ処理を行う場合にはゼロから繰り返す必要があり,<strong>処理自体を再利用できません</strong>(VBAやマクロなどはありますが,それらは結局プログラミングをしているので同じです.)</p>
<p>Excelのこのような特性から,Excelによる複雑な処理の実行は,人間の作業に依存する傾向が強く,ミスの原因となります.</p>
<p>このことについて,以下のデータを事例にもう少し具体的に意味を見ていきましょう.</p>
<p><img src="/images/excel-procedure1.png" /></p>
<p>例としてこのデータに対して以下の3つの処理をすることを考えます.</p>
<div class="note">
<pre><code>1. いらない部分を削除する
2. 右側に行和を表す列を足す
3. とある列の値が一定以下のデータを抜き出す</code></pre>
</div>
<p><img src="/images/excel-procedure2.png" /></p>
<p>この場合,EXCELでは最後の抜き出したデータだけが残り,中間の段階の処理も,過程も記録されません.
したがって,</p>
<div class="note">
<ol type="1">
<li>途中で間違っていても気づけない,チェックできない</li>
<li>何をしたのかを他の場所にメモして置かなければ分からない,メモも難しい</li>
<li>別のデータを使う場合同じ処理をもう一度する必要がある</li>
</ol>
</div>
<p>などの問題がよく起こります.</p>
<p>また,削除の作業などは(これくらいなら自動でもできますが)一つ一つ消していく必要があり大きなデータ(数万行とか)では非常に手間がかかります.</p>
<p>Excelはこのように,処理が人間の記憶や,正確さに依存しています. その結果,ミスの原因となっています.</p>
<div class="note">
<p>例えば, こちらの記事(<a href="https://www.teampay.co/blog/biggest-excel-mistakes-of-all-time">The 7 Biggest Excel Mistakes of All Time</a>)では,過去にExcelの操作ミスで起きた大規模なミスの事例が紹介されています.</p>
<ul>
<li>2008年 バークレイズ・キャピタル</li>
</ul>
<p>隠していたセルがPDF板では表示されていたことによる数百万ドルの損失が発生.</p>
<ul>
<li>2012年 ロンドン オリンピック</li>
</ul>
<p>作業員のタイプミスで,10万枚のチケットが払い戻し</p>
<ul>
<li>2012 JPモルガン</li>
</ul>
<p>Excelのコピペミスにより60億ドルの損失</p>
<p>ちなみにこの記事には載っていませんが,2019年に話題になった,厚生労働省の毎月勤労統計における不正問題もExcelのミスが原因の一つです.</p>
</div>
<p>一方プログラムでは,これらの問題が解決可能です.</p>
<p>先程のExcelの作業と同じ例で考えてみましょう.
以下のコードは先程のExcelで行った作業を実行しています.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="co">#データの読み込み</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;sample.csv&#39;</span>)</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="co">#いらない部分を削除する</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>df.dropna(axis<span class="op">=</span><span class="st">&#39;index&#39;</span>,how<span class="op">=</span><span class="st">&#39;any&#39;</span>,inplace<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="co">#右側に行和を追加する</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;sum&#39;</span>] <span class="op">=</span> df.<span class="bu">sum</span>(axis<span class="op">=</span><span class="dv">1</span>)</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a><span class="co">#data3が50以下の行を消す</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> df[df[<span class="st">&#39;data3&#39;</span>]<span class="op">&gt;</span><span class="dv">50</span>]</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a><span class="co">#確認</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span></code></pre></div>
<p>実行結果は当然Excelで行ったものと同じです.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> python <span class="ex">sample.py</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    <span class="ex">data1</span>   data2   data3    sum</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span>    86.0      75    67.0  228.0</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="ex">4</span>    66.0      92    90.0  248.0</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="ex">7</span>     6.0      66    93.0  165.0</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="ex">10</span>   27.0      32    52.0  111.0</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="ex">18</span>   27.0      61    91.0  179.0</span></code></pre></div>
<p>しかし, Excelと異なりこのプログラムを実行しても<strong>元データは変わっていない</strong>ため,元の状態にいつでも戻ることが可能です. 更に何を行ったかの<strong>処理がプログラムとして残っている</strong>ため,途中で間違いがないかのチェックや修正が可能です.
(本講義では扱いませんが, 実際にはプログラムでもミスは絶対におきます.そのためテストを実施するのですが,人間の行うチェックリストなどのテストよりもプログラムで行うテストの方が信頼性が高いのも利点です.)</p>
<p>また,
<strong>プログラムがそのまま作業メモ</strong>になっているので,他人に何を行ったかの説明が可能です. 加えて,このプログラムを再利用することで,<strong>異なるデータで同じ作業をする場合に再利用することが可能</strong>です. また,実際の処理はすべてプログラムが自動で行うため<strong>作業の手間がデータの容量にかかわらず一定</strong>です.</p>
<p>確かに,これまでに皆さんが講義で習ってきたような内容であれば,Excelのほうが学習コストが低く手軽に行えます. しかし,今後行うような統計処理やデータサイエンスなど,処理が複雑になればなるほど,プログラムで処理するメリットが大きくなります.</p>
]]></description>
    <pubDate>Fri, 29 Mar 2024 00:00:00 UT</pubDate>
    <guid>/lectures/slds5.html</guid>
    <dc:creator>yakagika</dc:creator>
</item>

    </channel>
</rss>
